var __DEV__=true,__BUNDLE_START_TIME__=this.nativePerformanceNow?nativePerformanceNow():Date.now(),process=this.process||{};process.env=process.env||{};process.env.NODE_ENV='development';
(function (global) {
  'use strict';

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    } else {
      return Array.from(arr);
    }
  }

  global.require = _require;
  global.__d = define;
  var modules = Object.create(null);

  if (__DEV__) {
    var verboseNamesToModuleIds = Object.create(null);
  }

  function define(factory, moduleId, dependencyMap) {
    if (moduleId in modules) {
      if (__DEV__) {
        var inverseDependencies = arguments[4];

        if (inverseDependencies) {
          global.__accept(moduleId, factory, dependencyMap, inverseDependencies);
        } else {
          console.warn("Trying to define twice module ID " + moduleId + " in the same bundle");
        }
      }

      return;
    }

    modules[moduleId] = {
      dependencyMap: dependencyMap,
      exports: undefined,
      factory: factory,
      hasError: false,
      isInitialized: false
    };

    if (__DEV__) {
      modules[moduleId].hot = createHotReloadingObject();
      var verboseName = arguments[3];

      if (verboseName) {
        modules[moduleId].verboseName = verboseName;
        verboseNamesToModuleIds[verboseName] = moduleId;
      }
    }
  }

  function _require(moduleId) {
    if (__DEV__ && typeof moduleId === 'string') {
      var verboseName = moduleId;
      moduleId = verboseNamesToModuleIds[verboseName];

      if (moduleId == null) {
        throw new Error("Unknown named module: '" + verboseName + "'");
      } else {
        console.warn("Requiring module '" + verboseName + "' by name is only supported for " + 'debugging purposes and will BREAK IN PRODUCTION!');
      }
    }

    var moduleIdReallyIsNumber = moduleId;
    var module = modules[moduleIdReallyIsNumber];
    return module && module.isInitialized ? module.exports : guardedLoadModule(moduleIdReallyIsNumber, module);
  }

  var inGuard = false;

  function guardedLoadModule(moduleId, module) {
    if (!inGuard && global.ErrorUtils) {
      inGuard = true;
      var returnValue = void 0;

      try {
        returnValue = loadModuleImplementation(moduleId, module);
      } catch (e) {
        global.ErrorUtils.reportFatalError(e);
      }

      inGuard = false;
      return returnValue;
    } else {
      return loadModuleImplementation(moduleId, module);
    }
  }

  var ID_MASK_SHIFT = 16;
  var LOCAL_ID_MASK = ~0 >>> ID_MASK_SHIFT;

  function unpackModuleId(moduleId) {
    var segmentId = moduleId >>> ID_MASK_SHIFT;
    var localId = moduleId & LOCAL_ID_MASK;
    return {
      segmentId: segmentId,
      localId: localId
    };
  }

  _require.unpackModuleId = unpackModuleId;

  function packModuleId(value) {
    return value.segmentId << ID_MASK_SHIFT + value.localId;
  }

  _require.packModuleId = packModuleId;

  function loadModuleImplementation(moduleId, module) {
    var nativeRequire = global.nativeRequire;

    if (!module && nativeRequire) {
      var _unpackModuleId = unpackModuleId(moduleId);

      var segmentId = _unpackModuleId.segmentId,
          localId = _unpackModuleId.localId;
      nativeRequire(localId, segmentId);
      module = modules[moduleId];
    }

    if (!module) {
      throw unknownModuleError(moduleId);
    }

    if (module.hasError) {
      throw moduleThrewError(moduleId, module.error);
    }

    if (__DEV__) {
      var Systrace = _require.Systrace;
    }

    module.isInitialized = true;
    var exports = module.exports = {};
    var _module = module;
    var factory = _module.factory,
        dependencyMap = _module.dependencyMap;

    try {
      if (__DEV__) {
        Systrace.beginEvent('JS_require_' + (module.verboseName || moduleId));
      }

      var moduleObject = {
        exports: exports
      };

      if (__DEV__ && module.hot) {
        moduleObject.hot = module.hot;
      }

      factory(global, _require, moduleObject, exports, dependencyMap);

      if (!__DEV__) {
        module.factory = undefined;
        module.dependencyMap = undefined;
      }

      if (__DEV__) {
        Systrace.endEvent();
      }

      return module.exports = moduleObject.exports;
    } catch (e) {
      module.hasError = true;
      module.error = e;
      module.isInitialized = false;
      module.exports = undefined;
      throw e;
    }
  }

  function unknownModuleError(id) {
    var message = 'Requiring unknown module "' + id + '".';

    if (__DEV__) {
      message += 'If you are sure the module is there, try restarting Metro Bundler. ' + 'You may also want to run `yarn`, or `npm install` (depending on your environment).';
    }

    return Error(message);
  }

  function moduleThrewError(id, error) {
    var displayName = __DEV__ && modules[id] && modules[id].verboseName || id;
    return Error('Requiring module "' + displayName + '", which threw an exception: ' + error);
  }

  if (__DEV__) {
    _require.Systrace = {
      beginEvent: function beginEvent() {},
      endEvent: function endEvent() {}
    };

    _require.getModules = function () {
      return modules;
    };

    var createHotReloadingObject = function createHotReloadingObject() {
      var hot = {
        acceptCallback: null,
        accept: function accept(callback) {
          hot.acceptCallback = callback;
        }
      };
      return hot;
    };

    var acceptAll = function acceptAll(dependentModules, inverseDependencies, patchedModules) {
      if (!dependentModules || dependentModules.length === 0) {
        return true;
      }

      var notAccepted = dependentModules.filter(function (module) {
        return !accept(module, undefined, undefined, inverseDependencies, patchedModules);
      });
      var parents = [];

      for (var i = 0; i < notAccepted.length; i++) {
        if (inverseDependencies[notAccepted[i]].length === 0) {
          return false;
        }

        parents.push.apply(parents, _toConsumableArray(inverseDependencies[notAccepted[i]]));
      }

      return parents.length == 0;
    };

    var accept = function accept(id, factory, dependencyMap, inverseDependencies) {
      var patchedModules = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

      if (id in patchedModules) {
        return true;
      }

      patchedModules[id] = true;
      var mod = modules[id];

      if (!mod && factory) {
        return true;
      }

      var hot = mod.hot;

      if (!hot) {
        console.warn('Cannot accept module because Hot Module Replacement ' + 'API was not installed.');
        return false;
      }

      if (factory) {
        mod.factory = factory;
      }

      if (dependencyMap) {
        mod.dependencyMap = dependencyMap;
      }

      mod.hasError = false;
      mod.isInitialized = false;

      _require(id);

      if (hot.acceptCallback) {
        hot.acceptCallback();
        return true;
      } else {
        if (!inverseDependencies) {
          throw new Error('Undefined `inverseDependencies`');
        }

        return acceptAll(inverseDependencies[id], inverseDependencies, patchedModules);
      }
    };

    global.__accept = accept;
  }
})(this);
(function (global) {
  Object.assign = function (target, sources) {
    if (__DEV__) {
      if (target == null) {
        throw new TypeError('Object.assign target cannot be null or undefined');
      }

      if (typeof target !== 'object' && typeof target !== 'function') {
        throw new TypeError('In this environment the target of assign MUST be an object. ' + 'This error is a performance optimization and not spec compliant.');
      }
    }

    for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
      var nextSource = arguments[nextIndex];

      if (nextSource == null) {
        continue;
      }

      if (__DEV__) {
        if (typeof nextSource !== 'object' && typeof nextSource !== 'function') {
          throw new TypeError('In this environment the sources for assign MUST be an object. ' + 'This error is a performance optimization and not spec compliant.');
        }
      }

      for (var key in nextSource) {
        if (__DEV__) {
          var hasOwnProperty = Object.prototype.hasOwnProperty;

          if (!hasOwnProperty.call(nextSource, key)) {
            throw new TypeError('One of the sources for assign has an enumerable key on the ' + 'prototype chain. Are you trying to assign a prototype property? ' + 'We don\'t allow it, as this is an edge case that we do not support. ' + 'This error is a performance optimization and not spec compliant.');
          }
        }

        target[key] = nextSource[key];
      }
    }

    return target;
  };
})(this);
(function (global) {
  var inspect = function () {
    function inspect(obj, opts) {
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      return formatValue(ctx, obj, opts.depth);
    }

    function stylizeNoColor(str, styleType) {
      return str;
    }

    function arrayToHash(array) {
      var hash = {};
      array.forEach(function (val, idx) {
        hash[val] = true;
      });
      return hash;
    }

    function formatValue(ctx, value, recurseTimes) {
      var primitive = formatPrimitive(ctx, value);

      if (primitive) {
        return primitive;
      }

      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);

      if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
        return formatError(value);
      }

      if (keys.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ': ' + value.name : '';
          return ctx.stylize('[Function' + name + ']', 'special');
        }

        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        }

        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), 'date');
        }

        if (isError(value)) {
          return formatError(value);
        }
      }

      var base = '',
          array = false,
          braces = ['{', '}'];

      if (isArray(value)) {
        array = true;
        braces = ['[', ']'];
      }

      if (isFunction(value)) {
        var n = value.name ? ': ' + value.name : '';
        base = ' [Function' + n + ']';
      }

      if (isRegExp(value)) {
        base = ' ' + RegExp.prototype.toString.call(value);
      }

      if (isDate(value)) {
        base = ' ' + Date.prototype.toUTCString.call(value);
      }

      if (isError(value)) {
        base = ' ' + formatError(value);
      }

      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }

      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        } else {
          return ctx.stylize('[Object]', 'special');
        }
      }

      ctx.seen.push(value);
      var output;

      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function (key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }

      ctx.seen.pop();
      return reduceToSingleString(output, base, braces);
    }

    function formatPrimitive(ctx, value) {
      if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');

      if (isString(value)) {
        var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return ctx.stylize(simple, 'string');
      }

      if (isNumber(value)) return ctx.stylize('' + value, 'number');
      if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
      if (isNull(value)) return ctx.stylize('null', 'null');
    }

    function formatError(value) {
      return '[' + Error.prototype.toString.call(value) + ']';
    }

    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];

      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
        } else {
          output.push('');
        }
      }

      keys.forEach(function (key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
        }
      });
      return output;
    }

    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || {
        value: value[key]
      };

      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize('[Getter/Setter]', 'special');
        } else {
          str = ctx.stylize('[Getter]', 'special');
        }
      } else {
        if (desc.set) {
          str = ctx.stylize('[Setter]', 'special');
        }
      }

      if (!hasOwnProperty(visibleKeys, key)) {
        name = '[' + key + ']';
      }

      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }

          if (str.indexOf('\n') > -1) {
            if (array) {
              str = str.split('\n').map(function (line) {
                return '  ' + line;
              }).join('\n').substr(2);
            } else {
              str = '\n' + str.split('\n').map(function (line) {
                return '   ' + line;
              }).join('\n');
            }
          }
        } else {
          str = ctx.stylize('[Circular]', 'special');
        }
      }

      if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }

        name = JSON.stringify('' + key);

        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = ctx.stylize(name, 'name');
        } else {
          name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, 'string');
        }
      }

      return name + ': ' + str;
    }

    function reduceToSingleString(output, base, braces) {
      var numLinesEst = 0;
      var length = output.reduce(function (prev, cur) {
        numLinesEst++;
        if (cur.indexOf('\n') >= 0) numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
      }, 0);

      if (length > 60) {
        return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
      }

      return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }

    function isArray(ar) {
      return Array.isArray(ar);
    }

    function isBoolean(arg) {
      return typeof arg === 'boolean';
    }

    function isNull(arg) {
      return arg === null;
    }

    function isNullOrUndefined(arg) {
      return arg == null;
    }

    function isNumber(arg) {
      return typeof arg === 'number';
    }

    function isString(arg) {
      return typeof arg === 'string';
    }

    function isSymbol(arg) {
      return typeof arg === 'symbol';
    }

    function isUndefined(arg) {
      return arg === void 0;
    }

    function isRegExp(re) {
      return isObject(re) && objectToString(re) === '[object RegExp]';
    }

    function isObject(arg) {
      return typeof arg === 'object' && arg !== null;
    }

    function isDate(d) {
      return isObject(d) && objectToString(d) === '[object Date]';
    }

    function isError(e) {
      return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
    }

    function isFunction(arg) {
      return typeof arg === 'function';
    }

    function isPrimitive(arg) {
      return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || typeof arg === 'undefined';
    }

    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }

    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    return inspect;
  }();

  var OBJECT_COLUMN_NAME = '(index)';
  var LOG_LEVELS = {
    trace: 0,
    info: 1,
    warn: 2,
    error: 3
  };
  var INSPECTOR_LEVELS = [];
  INSPECTOR_LEVELS[LOG_LEVELS.trace] = 'debug';
  INSPECTOR_LEVELS[LOG_LEVELS.info] = 'log';
  INSPECTOR_LEVELS[LOG_LEVELS.warn] = 'warning';
  INSPECTOR_LEVELS[LOG_LEVELS.error] = 'error';
  var INSPECTOR_FRAMES_TO_SKIP = __DEV__ ? 2 : 1;

  if (global.nativeLoggingHook) {
    function getNativeLogFunction(level) {
      return function () {
        var str = void 0;

        if (arguments.length === 1 && typeof arguments[0] === 'string') {
          str = arguments[0];
        } else {
          str = Array.prototype.map.call(arguments, function (arg) {
            return inspect(arg, {
              depth: 10
            });
          }).join(', ');
        }

        var logLevel = level;

        if (str.slice(0, 9) === 'Warning: ' && logLevel >= LOG_LEVELS.error) {
          logLevel = LOG_LEVELS.warn;
        }

        if (global.__inspectorLog) {
          global.__inspectorLog(INSPECTOR_LEVELS[logLevel], str, [].slice.call(arguments), INSPECTOR_FRAMES_TO_SKIP);
        }

        global.nativeLoggingHook(str, logLevel);
      };
    }

    function repeat(element, n) {
      return Array.apply(null, Array(n)).map(function () {
        return element;
      });
    }

    function consoleTablePolyfill(rows) {
      if (!Array.isArray(rows)) {
        var data = rows;
        rows = [];

        for (var key in data) {
          if (data.hasOwnProperty(key)) {
            var row = data[key];
            row[OBJECT_COLUMN_NAME] = key;
            rows.push(row);
          }
        }
      }

      if (rows.length === 0) {
        global.nativeLoggingHook('', LOG_LEVELS.info);
        return;
      }

      var columns = Object.keys(rows[0]).sort();
      var stringRows = [];
      var columnWidths = [];
      columns.forEach(function (k, i) {
        columnWidths[i] = k.length;

        for (var j = 0; j < rows.length; j++) {
          var cellStr = (rows[j][k] || '?').toString();
          stringRows[j] = stringRows[j] || [];
          stringRows[j][i] = cellStr;
          columnWidths[i] = Math.max(columnWidths[i], cellStr.length);
        }
      });

      function joinRow(row, space) {
        var cells = row.map(function (cell, i) {
          var extraSpaces = repeat(' ', columnWidths[i] - cell.length).join('');
          return cell + extraSpaces;
        });
        space = space || ' ';
        return cells.join(space + '|' + space);
      }

      var separators = columnWidths.map(function (columnWidth) {
        return repeat('-', columnWidth).join('');
      });
      var separatorRow = joinRow(separators, '-');
      var header = joinRow(columns);
      var table = [header, separatorRow];

      for (var i = 0; i < rows.length; i++) {
        table.push(joinRow(stringRows[i]));
      }

      global.nativeLoggingHook('\n' + table.join('\n'), LOG_LEVELS.info);
    }

    var originalConsole = global.console;
    global.console = {
      error: getNativeLogFunction(LOG_LEVELS.error),
      info: getNativeLogFunction(LOG_LEVELS.info),
      log: getNativeLogFunction(LOG_LEVELS.info),
      warn: getNativeLogFunction(LOG_LEVELS.warn),
      trace: getNativeLogFunction(LOG_LEVELS.trace),
      debug: getNativeLogFunction(LOG_LEVELS.trace),
      table: consoleTablePolyfill
    };

    if (__DEV__ && originalConsole) {
      var descriptor = Object.getOwnPropertyDescriptor(global, 'console');

      if (descriptor) {
        Object.defineProperty(global, 'originalConsole', descriptor);
      }

      Object.keys(console).forEach(function (methodName) {
        var reactNativeMethod = console[methodName];

        if (originalConsole[methodName]) {
          console[methodName] = function () {
            originalConsole[methodName].apply(originalConsole, arguments);
            reactNativeMethod.apply(console, arguments);
          };
        }
      });
    }
  } else if (!global.console) {
    var log = global.print || function consoleLoggingStub() {};

    global.console = {
      error: log,
      info: log,
      log: log,
      warn: log,
      trace: log,
      debug: log,
      table: log
    };
  }
})(this);
(function (global) {
  var _inGuard = 0;

  var _globalHandler = function onError(e) {
    throw e;
  };

  var ErrorUtils = {
    setGlobalHandler: function setGlobalHandler(fun) {
      _globalHandler = fun;
    },
    getGlobalHandler: function getGlobalHandler() {
      return _globalHandler;
    },
    reportError: function reportError(error) {
      _globalHandler && _globalHandler(error);
    },
    reportFatalError: function reportFatalError(error) {
      _globalHandler && _globalHandler(error, true);
    },
    applyWithGuard: function applyWithGuard(fun, context, args) {
      try {
        _inGuard++;
        return fun.apply(context, args);
      } catch (e) {
        ErrorUtils.reportError(e);
      } finally {
        _inGuard--;
      }

      return null;
    },
    applyWithGuardIfNeeded: function applyWithGuardIfNeeded(fun, context, args) {
      if (ErrorUtils.inGuard()) {
        return fun.apply(context, args);
      } else {
        ErrorUtils.applyWithGuard(fun, context, args);
      }

      return null;
    },
    inGuard: function inGuard() {
      return _inGuard;
    },
    guard: function guard(fun, name, context) {
      if (typeof fun !== 'function') {
        console.warn('A function must be passed to ErrorUtils.guard, got ', fun);
        return null;
      }

      name = name || fun.name || '<generated guard>';

      function guarded() {
        return ErrorUtils.applyWithGuard(fun, context || this, arguments, null, name);
      }

      return guarded;
    }
  };
  global.ErrorUtils = ErrorUtils;
})(this);
(function (global) {
  if (Number.EPSILON === undefined) {
    Object.defineProperty(Number, 'EPSILON', {
      value: Math.pow(2, -52)
    });
  }

  if (Number.MAX_SAFE_INTEGER === undefined) {
    Object.defineProperty(Number, 'MAX_SAFE_INTEGER', {
      value: Math.pow(2, 53) - 1
    });
  }

  if (Number.MIN_SAFE_INTEGER === undefined) {
    Object.defineProperty(Number, 'MIN_SAFE_INTEGER', {
      value: -(Math.pow(2, 53) - 1)
    });
  }

  if (!Number.isNaN) {
    var globalIsNaN = global.isNaN;
    Object.defineProperty(Number, 'isNaN', {
      configurable: true,
      enumerable: false,
      value: function isNaN(value) {
        return typeof value === 'number' && globalIsNaN(value);
      },
      writable: true
    });
  }
})(this);
(function (global) {
  if (!String.prototype.startsWith) {
    String.prototype.startsWith = function (search) {
      'use strict';

      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      var pos = arguments.length > 1 ? Number(arguments[1]) || 0 : 0;
      var start = Math.min(Math.max(pos, 0), string.length);
      return string.indexOf(String(search), pos) === start;
    };
  }

  if (!String.prototype.endsWith) {
    String.prototype.endsWith = function (search) {
      'use strict';

      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      var stringLength = string.length;
      var searchString = String(search);
      var pos = arguments.length > 1 ? Number(arguments[1]) || 0 : stringLength;
      var end = Math.min(Math.max(pos, 0), stringLength);
      var start = end - searchString.length;

      if (start < 0) {
        return false;
      }

      return string.lastIndexOf(searchString, start) === start;
    };
  }

  if (!String.prototype.repeat) {
    String.prototype.repeat = function (count) {
      'use strict';

      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      count = Number(count) || 0;

      if (count < 0 || count === Infinity) {
        throw RangeError();
      }

      if (count === 1) {
        return string;
      }

      var result = '';

      while (count) {
        if (count & 1) {
          result += string;
        }

        if (count >>= 1) {
          string += string;
        }
      }

      return result;
    };
  }

  if (!String.prototype.includes) {
    String.prototype.includes = function (search, start) {
      'use strict';

      if (typeof start !== 'number') {
        start = 0;
      }

      if (start + search.length > this.length) {
        return false;
      } else {
        return this.indexOf(search, start) !== -1;
      }
    };
  }

  if (!String.prototype.codePointAt) {
    String.prototype.codePointAt = function (position) {
      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      var size = string.length;
      var index = position ? Number(position) : 0;

      if (Number.isNaN(index)) {
        index = 0;
      }

      if (index < 0 || index >= size) {
        return undefined;
      }

      var first = string.charCodeAt(index);
      var second;

      if (first >= 0xd800 && first <= 0xdbff && size > index + 1) {
          second = string.charCodeAt(index + 1);

          if (second >= 0xdc00 && second <= 0xdfff) {
            return (first - 0xd800) * 0x400 + second - 0xdc00 + 0x10000;
          }
        }

      return first;
    };
  }
})(this);
(function (global) {
  function findIndex(predicate, context) {
    if (this == null) {
      throw new TypeError('Array.prototype.findIndex called on null or undefined');
    }

    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }

    var list = Object(this);
    var length = list.length >>> 0;

    for (var i = 0; i < length; i++) {
      if (predicate.call(context, list[i], i, list)) {
        return i;
      }
    }

    return -1;
  }

  if (!Array.prototype.findIndex) {
    Object.defineProperty(Array.prototype, 'findIndex', {
      enumerable: false,
      writable: true,
      configurable: true,
      value: findIndex
    });
  }

  if (!Array.prototype.find) {
    Object.defineProperty(Array.prototype, 'find', {
      enumerable: false,
      writable: true,
      configurable: true,
      value: function value(predicate, context) {
        if (this == null) {
          throw new TypeError('Array.prototype.find called on null or undefined');
        }

        var index = findIndex.call(this, predicate, context);
        return index === -1 ? undefined : this[index];
      }
    });
  }

  if (!Array.prototype.includes) {
    Object.defineProperty(Array.prototype, 'includes', {
      enumerable: false,
      writable: true,
      configurable: true,
      value: function value(searchElement) {
        var O = Object(this);
        var len = parseInt(O.length) || 0;

        if (len === 0) {
          return false;
        }

        var n = parseInt(arguments[1]) || 0;
        var k;

        if (n >= 0) {
          k = n;
        } else {
          k = len + n;

          if (k < 0) {
            k = 0;
          }
        }

        var currentElement;

        while (k < len) {
          currentElement = O[k];

          if (searchElement === currentElement || searchElement !== searchElement && currentElement !== currentElement) {
            return true;
          }

          k++;
        }

        return false;
      }
    });
  }
})(this);
(function (global) {
  if (!Array.from) {
    Array.from = function (arrayLike) {
      if (arrayLike == null) {
        throw new TypeError('Object is null or undefined');
      }

      var mapFn = arguments[1];
      var thisArg = arguments[2];
      var C = this;
      var items = Object(arrayLike);
      var symbolIterator = typeof Symbol === 'function' ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : '@@iterator';
      var mapping = typeof mapFn === 'function';
      var usingIterator = typeof items[symbolIterator] === 'function';
      var key = 0;
      var ret;
      var value;

      if (usingIterator) {
        ret = typeof C === 'function' ? new C() : [];
        var it = items[symbolIterator]();
        var next;

        while (!(next = it.next()).done) {
          value = next.value;

          if (mapping) {
            value = mapFn.call(thisArg, value, key);
          }

          ret[key] = value;
          key += 1;
        }

        ret.length = key;
        return ret;
      }

      var len = items.length;

      if (isNaN(len) || len < 0) {
        len = 0;
      }

      ret = typeof C === 'function' ? new C(len) : new Array(len);

      while (key < len) {
        value = items[key];

        if (mapping) {
          value = mapFn.call(thisArg, value, key);
        }

        ret[key] = value;
        key += 1;
      }

      ret.length = key;
      return ret;
    };
  }
})(this);
(function (global) {
  (function () {
    'use strict';

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    if (typeof Object.entries !== 'function') {
      Object.entries = function (object) {
        if (object == null) {
          throw new TypeError('Object.entries called on non-object');
        }

        var entries = [];

        for (var key in object) {
          if (hasOwnProperty.call(object, key)) {
            entries.push([key, object[key]]);
          }
        }

        return entries;
      };
    }

    if (typeof Object.values !== 'function') {
      Object.values = function (object) {
        if (object == null) {
          throw new TypeError('Object.values called on non-object');
        }

        var values = [];

        for (var key in object) {
          if (hasOwnProperty.call(object, key)) {
            values.push(object[key]);
          }
        }

        return values;
      };
    }
  })();
})(this);
(function (global) {
  var babelHelpers = global.babelHelpers = {};
  babelHelpers.typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
  };

  babelHelpers.createRawReactElement = function () {
    var REACT_ELEMENT_TYPE = typeof Symbol === "function" && (typeof Symbol === "function" ? Symbol.for : "@@for") && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") || 0xeac7;
    return function createRawReactElement(type, key, props) {
      return {
        $$typeof: REACT_ELEMENT_TYPE,
        type: type,
        key: key,
        ref: null,
        props: props,
        _owner: null
      };
    };
  }();

  babelHelpers.classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  babelHelpers.createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  babelHelpers.defineEnumerableProperties = function (obj, descs) {
    for (var key in descs) {
      var desc = descs[key];
      desc.configurable = desc.enumerable = true;
      if ('value' in desc) desc.writable = true;
      Object.defineProperty(obj, key, desc);
    }

    return obj;
  };

  babelHelpers.defineProperty = function (obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  };

  babelHelpers._extends = babelHelpers.extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  babelHelpers.get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;
    var desc = Object.getOwnPropertyDescriptor(object, property);

    if (desc === undefined) {
      var parent = Object.getPrototypeOf(object);

      if (parent === null) {
        return undefined;
      } else {
        return get(parent, property, receiver);
      }
    } else if ("value" in desc) {
      return desc.value;
    } else {
      var getter = desc.get;

      if (getter === undefined) {
        return undefined;
      }

      return getter.call(receiver);
    }
  };

  babelHelpers.inherits = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };

  babelHelpers.interopRequireDefault = function (obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  };

  babelHelpers.interopRequireWildcard = function (obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  };

  babelHelpers.objectWithoutProperties = function (obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  };

  babelHelpers.possibleConstructorReturn = function (self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  };

  babelHelpers.slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();

  babelHelpers.taggedTemplateLiteral = function (strings, raw) {
    return Object.freeze(Object.defineProperties(strings, {
      raw: {
        value: Object.freeze(raw)
      }
    }));
  };

  babelHelpers.toArray = function (arr) {
    return Array.isArray(arr) ? arr : Array.from(arr);
  };

  babelHelpers.toConsumableArray = function (arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    } else {
      return Array.from(arr);
    }
  };
})(this);
__d(function (global, _require, module, exports, _dependencyMap) {
  var _reactNative = _require(_dependencyMap[0], "react-native");

  var _App = _require(_dependencyMap[1], "./App");

  var _App2 = _interopRequireDefault(_App);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  _reactNative.AppRegistry.registerComponent('auth', function () {
    return _App2.default;
  });
},11,[12,490],"index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var ReactNative = {
    get AccessibilityInfo() {
      return _require(_dependencyMap[1], 'AccessibilityInfo');
    },

    get ActivityIndicator() {
      return _require(_dependencyMap[2], 'ActivityIndicator');
    },

    get ART() {
      return _require(_dependencyMap[3], 'ReactNativeART');
    },

    get Button() {
      return _require(_dependencyMap[4], 'Button');
    },

    get CheckBox() {
      return _require(_dependencyMap[5], 'CheckBox');
    },

    get DatePickerIOS() {
      return _require(_dependencyMap[6], 'DatePickerIOS');
    },

    get DrawerLayoutAndroid() {
      return _require(_dependencyMap[7], 'DrawerLayoutAndroid');
    },

    get FlatList() {
      return _require(_dependencyMap[8], 'FlatList');
    },

    get Image() {
      return _require(_dependencyMap[9], 'Image');
    },

    get ImageBackground() {
      return _require(_dependencyMap[10], 'ImageBackground');
    },

    get ImageEditor() {
      return _require(_dependencyMap[11], 'ImageEditor');
    },

    get ImageStore() {
      return _require(_dependencyMap[12], 'ImageStore');
    },

    get KeyboardAvoidingView() {
      return _require(_dependencyMap[13], 'KeyboardAvoidingView');
    },

    get ListView() {
      return _require(_dependencyMap[14], 'ListView');
    },

    get MaskedViewIOS() {
      return _require(_dependencyMap[15], 'MaskedViewIOS');
    },

    get Modal() {
      return _require(_dependencyMap[16], 'Modal');
    },

    get NavigatorIOS() {
      return _require(_dependencyMap[17], 'NavigatorIOS');
    },

    get Picker() {
      return _require(_dependencyMap[18], 'Picker');
    },

    get PickerIOS() {
      return _require(_dependencyMap[19], 'PickerIOS');
    },

    get ProgressBarAndroid() {
      return _require(_dependencyMap[20], 'ProgressBarAndroid');
    },

    get ProgressViewIOS() {
      return _require(_dependencyMap[21], 'ProgressViewIOS');
    },

    get SafeAreaView() {
      return _require(_dependencyMap[22], 'SafeAreaView');
    },

    get ScrollView() {
      return _require(_dependencyMap[23], 'ScrollView');
    },

    get SectionList() {
      return _require(_dependencyMap[24], 'SectionList');
    },

    get SegmentedControlIOS() {
      return _require(_dependencyMap[25], 'SegmentedControlIOS');
    },

    get Slider() {
      return _require(_dependencyMap[26], 'Slider');
    },

    get SnapshotViewIOS() {
      return _require(_dependencyMap[27], 'SnapshotViewIOS');
    },

    get Switch() {
      return _require(_dependencyMap[28], 'Switch');
    },

    get RefreshControl() {
      return _require(_dependencyMap[29], 'RefreshControl');
    },

    get StatusBar() {
      return _require(_dependencyMap[30], 'StatusBar');
    },

    get SwipeableFlatList() {
      return _require(_dependencyMap[31], 'SwipeableFlatList');
    },

    get SwipeableListView() {
      return _require(_dependencyMap[32], 'SwipeableListView');
    },

    get TabBarIOS() {
      return _require(_dependencyMap[33], 'TabBarIOS');
    },

    get Text() {
      return _require(_dependencyMap[34], 'Text');
    },

    get TextInput() {
      return _require(_dependencyMap[35], 'TextInput');
    },

    get ToastAndroid() {
      return _require(_dependencyMap[36], 'ToastAndroid');
    },

    get ToolbarAndroid() {
      return _require(_dependencyMap[37], 'ToolbarAndroid');
    },

    get Touchable() {
      return _require(_dependencyMap[38], 'Touchable');
    },

    get TouchableHighlight() {
      return _require(_dependencyMap[39], 'TouchableHighlight');
    },

    get TouchableNativeFeedback() {
      return _require(_dependencyMap[40], 'TouchableNativeFeedback');
    },

    get TouchableOpacity() {
      return _require(_dependencyMap[41], 'TouchableOpacity');
    },

    get TouchableWithoutFeedback() {
      return _require(_dependencyMap[42], 'TouchableWithoutFeedback');
    },

    get View() {
      return _require(_dependencyMap[43], 'View');
    },

    get ViewPagerAndroid() {
      return _require(_dependencyMap[44], 'ViewPagerAndroid');
    },

    get VirtualizedList() {
      return _require(_dependencyMap[45], 'VirtualizedList');
    },

    get WebView() {
      return _require(_dependencyMap[46], 'WebView');
    },

    get ActionSheetIOS() {
      return _require(_dependencyMap[47], 'ActionSheetIOS');
    },

    get Alert() {
      return _require(_dependencyMap[48], 'Alert');
    },

    get AlertIOS() {
      return _require(_dependencyMap[49], 'AlertIOS');
    },

    get Animated() {
      return _require(_dependencyMap[50], 'Animated');
    },

    get AppRegistry() {
      return _require(_dependencyMap[51], 'AppRegistry');
    },

    get AppState() {
      return _require(_dependencyMap[52], 'AppState');
    },

    get AsyncStorage() {
      return _require(_dependencyMap[53], 'AsyncStorage');
    },

    get BackAndroid() {
      return _require(_dependencyMap[54], 'BackAndroid');
    },

    get BackHandler() {
      return _require(_dependencyMap[55], 'BackHandler');
    },

    get CameraRoll() {
      return _require(_dependencyMap[56], 'CameraRoll');
    },

    get Clipboard() {
      return _require(_dependencyMap[57], 'Clipboard');
    },

    get DatePickerAndroid() {
      return _require(_dependencyMap[58], 'DatePickerAndroid');
    },

    get DeviceInfo() {
      return _require(_dependencyMap[59], 'DeviceInfo');
    },

    get Dimensions() {
      return _require(_dependencyMap[60], 'Dimensions');
    },

    get Easing() {
      return _require(_dependencyMap[61], 'Easing');
    },

    get findNodeHandle() {
      return _require(_dependencyMap[62], 'ReactNative').findNodeHandle;
    },

    get I18nManager() {
      return _require(_dependencyMap[63], 'I18nManager');
    },

    get ImagePickerIOS() {
      return _require(_dependencyMap[64], 'ImagePickerIOS');
    },

    get InteractionManager() {
      return _require(_dependencyMap[65], 'InteractionManager');
    },

    get Keyboard() {
      return _require(_dependencyMap[66], 'Keyboard');
    },

    get LayoutAnimation() {
      return _require(_dependencyMap[67], 'LayoutAnimation');
    },

    get Linking() {
      return _require(_dependencyMap[68], 'Linking');
    },

    get NativeEventEmitter() {
      return _require(_dependencyMap[69], 'NativeEventEmitter');
    },

    get NetInfo() {
      return _require(_dependencyMap[70], 'NetInfo');
    },

    get PanResponder() {
      return _require(_dependencyMap[71], 'PanResponder');
    },

    get PermissionsAndroid() {
      return _require(_dependencyMap[72], 'PermissionsAndroid');
    },

    get PixelRatio() {
      return _require(_dependencyMap[73], 'PixelRatio');
    },

    get PushNotificationIOS() {
      return _require(_dependencyMap[74], 'PushNotificationIOS');
    },

    get Settings() {
      return _require(_dependencyMap[75], 'Settings');
    },

    get Share() {
      return _require(_dependencyMap[76], 'Share');
    },

    get StatusBarIOS() {
      return _require(_dependencyMap[77], 'StatusBarIOS');
    },

    get StyleSheet() {
      return _require(_dependencyMap[78], 'StyleSheet');
    },

    get Systrace() {
      return _require(_dependencyMap[79], 'Systrace');
    },

    get TimePickerAndroid() {
      return _require(_dependencyMap[80], 'TimePickerAndroid');
    },

    get TVEventHandler() {
      return _require(_dependencyMap[81], 'TVEventHandler');
    },

    get UIManager() {
      return _require(_dependencyMap[82], 'UIManager');
    },

    get unstable_batchedUpdates() {
      return _require(_dependencyMap[62], 'ReactNative').unstable_batchedUpdates;
    },

    get Vibration() {
      return _require(_dependencyMap[83], 'Vibration');
    },

    get VibrationIOS() {
      return _require(_dependencyMap[84], 'VibrationIOS');
    },

    get YellowBox() {
      return _require(_dependencyMap[85], 'YellowBox');
    },

    get DeviceEventEmitter() {
      return _require(_dependencyMap[86], 'RCTDeviceEventEmitter');
    },

    get NativeAppEventEmitter() {
      return _require(_dependencyMap[87], 'RCTNativeAppEventEmitter');
    },

    get NativeModules() {
      return _require(_dependencyMap[88], 'NativeModules');
    },

    get Platform() {
      return _require(_dependencyMap[89], 'Platform');
    },

    get processColor() {
      return _require(_dependencyMap[90], 'processColor');
    },

    get requireNativeComponent() {
      return _require(_dependencyMap[91], 'requireNativeComponent');
    },

    get takeSnapshot() {
      return _require(_dependencyMap[92], 'takeSnapshot');
    },

    get ColorPropType() {
      return _require(_dependencyMap[93], 'ColorPropType');
    },

    get EdgeInsetsPropType() {
      return _require(_dependencyMap[94], 'EdgeInsetsPropType');
    },

    get PointPropType() {
      return _require(_dependencyMap[95], 'PointPropType');
    },

    get ViewPropTypes() {
      return _require(_dependencyMap[96], 'ViewPropTypes');
    },

    get Navigator() {
      invariant(false, 'Navigator is deprecated and has been removed from this package. It can now be installed ' + 'and imported from `react-native-deprecated-custom-components` instead of `react-native`. ' + 'Learn about alternative navigation solutions at http://facebook.github.io/react-native/docs/navigation.html');
    }

  };
  module.exports = ReactNative;
},12,[13,14,125,178,338,393,394,395,397,380,410,412,413,414,399,415,417,438,439,440,129,442,436,381,443,445,446,447,448,404,396,449,453,455,339,457,100,464,340,428,347,351,348,173,465,405,466,467,83,84,352,468,102,474,475,473,476,477,478,168,167,377,21,437,479,360,385,386,480,69,481,451,87,166,482,483,484,485,171,19,486,344,109,487,488,435,70,91,15,52,155,148,489,126,135,382,134],"react-native-implementation");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var validateFormat = function validateFormat(format) {};

  if (process.env.NODE_ENV !== 'production') {
    validateFormat = function validateFormat(format) {
      if (format === undefined) {
        throw new Error('invariant requires an error message argument');
      }
    };
  }

  function invariant(condition, format, a, b, c, d, e, f) {
    validateFormat(format);

    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  }

  module.exports = invariant;
},13,[],"node_modules\\fbjs\\lib\\invariant.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = _require(_dependencyMap[0], 'NativeModules');

  var RCTDeviceEventEmitter = _require(_dependencyMap[1], 'RCTDeviceEventEmitter');

  var RCTAccessibilityInfo = NativeModules.AccessibilityInfo;
  var TOUCH_EXPLORATION_EVENT = 'touchExplorationDidChange';

  var _subscriptions = new Map();

  var AccessibilityInfo = {
    fetch: function fetch() {
      return new Promise(function (resolve, reject) {
        RCTAccessibilityInfo.isTouchExplorationEnabled(function (resp) {
          resolve(resp);
        });
      });
    },
    addEventListener: function addEventListener(eventName, handler) {
      var listener = RCTDeviceEventEmitter.addListener(TOUCH_EXPLORATION_EVENT, function (enabled) {
        handler(enabled);
      });

      _subscriptions.set(handler, listener);
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      var listener = _subscriptions.get(handler);

      if (!listener) {
        return;
      }

      listener.remove();

      _subscriptions.delete(handler);
    }
  };
  module.exports = AccessibilityInfo;
},14,[15,70],"AccessibilityInfo");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  var BatchedBridge = _require(_dependencyMap[0], 'BatchedBridge');

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  function genModule(config, moduleID) {
    if (!config) {
      return null;
    }

    var _config = _slicedToArray(config, 5),
        moduleName = _config[0],
        constants = _config[1],
        methods = _config[2],
        promiseMethods = _config[3],
        syncMethods = _config[4];

    invariant(!moduleName.startsWith('RCT') && !moduleName.startsWith('RK'), 'Module name prefixes should\'ve been stripped by the native side ' + 'but wasn\'t for ' + moduleName);

    if (!constants && !methods) {
      return {
        name: moduleName
      };
    }

    var module = {};
    methods && methods.forEach(function (methodName, methodID) {
      var isPromise = promiseMethods && arrayContains(promiseMethods, methodID);
      var isSync = syncMethods && arrayContains(syncMethods, methodID);
      invariant(!isPromise || !isSync, 'Cannot have a method that is both async and a sync hook');
      var methodType = isPromise ? 'promise' : isSync ? 'sync' : 'async';
      module[methodName] = genMethod(moduleID, methodID, methodType);
    });

    _extends(module, constants);

    if (__DEV__) {
      BatchedBridge.createDebugLookup(moduleID, moduleName, methods);
    }

    return {
      name: moduleName,
      module: module
    };
  }

  global.__fbGenNativeModule = genModule;

  function loadModule(name, moduleID) {
    invariant(global.nativeRequireModuleConfig, 'Can\'t lazily create module without nativeRequireModuleConfig');
    var config = global.nativeRequireModuleConfig(name);
    var info = genModule(config, moduleID);
    return info && info.module;
  }

  function genMethod(moduleID, methodID, type) {
    var fn = null;

    if (type === 'promise') {
      fn = function fn() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return new Promise(function (resolve, reject) {
          BatchedBridge.enqueueNativeCall(moduleID, methodID, args, function (data) {
            return resolve(data);
          }, function (errorData) {
            return reject(createErrorFromErrorData(errorData));
          });
        });
      };
    } else if (type === 'sync') {
      fn = function fn() {
        if (__DEV__) {
          invariant(global.nativeCallSyncHook, 'Calling synchronous methods on native ' + 'modules is not supported in Chrome.\n\n Consider providing alternative ' + 'methods to expose this method in debug mode, e.g. by exposing constants ' + 'ahead-of-time.');
        }

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return global.nativeCallSyncHook(moduleID, methodID, args);
      };
    } else {
      fn = function fn() {
        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        var lastArg = args.length > 0 ? args[args.length - 1] : null;
        var secondLastArg = args.length > 1 ? args[args.length - 2] : null;
        var hasSuccessCallback = typeof lastArg === 'function';
        var hasErrorCallback = typeof secondLastArg === 'function';
        hasErrorCallback && invariant(hasSuccessCallback, 'Cannot have a non-function arg after a function arg.');
        var onSuccess = hasSuccessCallback ? lastArg : null;
        var onFail = hasErrorCallback ? secondLastArg : null;
        var callbackCount = hasSuccessCallback + hasErrorCallback;
        args = args.slice(0, args.length - callbackCount);
        BatchedBridge.enqueueNativeCall(moduleID, methodID, args, onFail, onSuccess);
      };
    }

    fn.type = type;
    return fn;
  }

  function arrayContains(array, value) {
    return array.indexOf(value) !== -1;
  }

  function createErrorFromErrorData(errorData) {
    var _ref = errorData || {},
        message = _ref.message,
        extraErrorInfo = _objectWithoutProperties(_ref, ["message"]);

    var error = new Error(message);
    error.framesToPop = 1;
    return _extends(error, extraErrorInfo);
  }

  var NativeModules = {};

  if (global.nativeModuleProxy) {
    NativeModules = global.nativeModuleProxy;
  } else {
    var bridgeConfig = global.__fbBatchedBridgeConfig;
    invariant(bridgeConfig, '__fbBatchedBridgeConfig is not set, cannot invoke native modules');

    var defineLazyObjectProperty = _require(_dependencyMap[2], 'defineLazyObjectProperty');

    (bridgeConfig.remoteModuleConfig || []).forEach(function (config, moduleID) {
      var info = genModule(config, moduleID);

      if (!info) {
        return;
      }

      if (info.module) {
        NativeModules[info.name] = info.module;
      } else {
          defineLazyObjectProperty(NativeModules, info.name, {
            get: function get() {
              return loadModule(info.name, moduleID);
            }
          });
        }
    });
  }

  module.exports = NativeModules;
},15,[16,13,24],"NativeModules");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var MessageQueue = _require(_dependencyMap[0], 'MessageQueue');

  var BatchedBridge = new MessageQueue(typeof __fbUninstallRNGlobalErrorHandler !== 'undefined' && __fbUninstallRNGlobalErrorHandler === true);
  Object.defineProperty(global, '__fbBatchedBridge', {
    configurable: true,
    value: BatchedBridge
  });
  module.exports = BatchedBridge;
},16,[17],"BatchedBridge");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var ErrorUtils = _require(_dependencyMap[0], 'ErrorUtils');

  var Systrace = _require(_dependencyMap[1], 'Systrace');

  var deepFreezeAndThrowOnMutationInDev = _require(_dependencyMap[2], 'deepFreezeAndThrowOnMutationInDev');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var stringifySafe = _require(_dependencyMap[4], 'stringifySafe');

  var TO_JS = 0;
  var TO_NATIVE = 1;
  var MODULE_IDS = 0;
  var METHOD_IDS = 1;
  var PARAMS = 2;
  var MIN_TIME_BETWEEN_FLUSHES_MS = 5;
  var TRACE_TAG_REACT_APPS = 1 << 17;
  var DEBUG_INFO_LIMIT = 32;
  var JSTimers = null;

  var MessageQueue = function () {
    function MessageQueue() {
      var shouldUninstallGlobalErrorHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      _classCallCheck(this, MessageQueue);

      this._lazyCallableModules = {};
      this._queue = [[], [], [], 0];
      this._successCallbacks = [];
      this._failureCallbacks = [];
      this._callID = 0;
      this._lastFlush = 0;
      this._eventLoopStartTime = new Date().getTime();

      if (shouldUninstallGlobalErrorHandler) {
        this.uninstallGlobalErrorHandler();
      } else {
        this.installGlobalErrorHandler();
      }

      if (__DEV__) {
        this._debugInfo = {};
        this._remoteModuleTable = {};
        this._remoteMethodTable = {};
      }

      this.callFunctionReturnFlushedQueue = this.callFunctionReturnFlushedQueue.bind(this);
      this.callFunctionReturnResultAndFlushedQueue = this.callFunctionReturnResultAndFlushedQueue.bind(this);
      this.flushedQueue = this.flushedQueue.bind(this);
      this.invokeCallbackAndReturnFlushedQueue = this.invokeCallbackAndReturnFlushedQueue.bind(this);
    }

    _createClass(MessageQueue, [{
      key: "callFunctionReturnFlushedQueue",
      value: function callFunctionReturnFlushedQueue(module, method, args) {
        var _this = this;

        this.__guard(function () {
          _this.__callFunction(module, method, args);
        });

        return this.flushedQueue();
      }
    }, {
      key: "callFunctionReturnResultAndFlushedQueue",
      value: function callFunctionReturnResultAndFlushedQueue(module, method, args) {
        var _this2 = this;

        var result = void 0;

        this.__guard(function () {
          result = _this2.__callFunction(module, method, args);
        });

        return [result, this.flushedQueue()];
      }
    }, {
      key: "invokeCallbackAndReturnFlushedQueue",
      value: function invokeCallbackAndReturnFlushedQueue(cbID, args) {
        var _this3 = this;

        this.__guard(function () {
          _this3.__invokeCallback(cbID, args);
        });

        return this.flushedQueue();
      }
    }, {
      key: "flushedQueue",
      value: function flushedQueue() {
        var _this4 = this;

        this.__guard(function () {
          _this4.__callImmediates();
        });

        var queue = this._queue;
        this._queue = [[], [], [], this._callID];
        return queue[0].length ? queue : null;
      }
    }, {
      key: "getEventLoopRunningTime",
      value: function getEventLoopRunningTime() {
        return new Date().getTime() - this._eventLoopStartTime;
      }
    }, {
      key: "registerCallableModule",
      value: function registerCallableModule(name, module) {
        this._lazyCallableModules[name] = function () {
          return module;
        };
      }
    }, {
      key: "registerLazyCallableModule",
      value: function registerLazyCallableModule(name, factory) {
        var module = void 0;
        var getValue = factory;

        this._lazyCallableModules[name] = function () {
          if (getValue) {
            module = getValue();
            getValue = null;
          }

          return module;
        };
      }
    }, {
      key: "getCallableModule",
      value: function getCallableModule(name) {
        var getValue = this._lazyCallableModules[name];
        return getValue ? getValue() : null;
      }
    }, {
      key: "enqueueNativeCall",
      value: function enqueueNativeCall(moduleID, methodID, params, onFail, onSucc) {
        if (onFail || onSucc) {
          if (__DEV__) {
            this._debugInfo[this._callID] = [moduleID, methodID];

            if (this._callID > DEBUG_INFO_LIMIT) {
              delete this._debugInfo[this._callID - DEBUG_INFO_LIMIT];
            }
          }

          onFail && params.push(this._callID << 1);
          onSucc && params.push(this._callID << 1 | 1);
          this._successCallbacks[this._callID] = onSucc;
          this._failureCallbacks[this._callID] = onFail;
        }

        if (__DEV__) {
          global.nativeTraceBeginAsyncFlow && global.nativeTraceBeginAsyncFlow(TRACE_TAG_REACT_APPS, 'native', this._callID);
        }

        this._callID++;

        this._queue[MODULE_IDS].push(moduleID);

        this._queue[METHOD_IDS].push(methodID);

        if (__DEV__) {
          var isValidArgument = function isValidArgument(val) {
            var t = typeof val;

            if (t === 'undefined' || t === 'null' || t === 'boolean' || t === 'number' || t === 'string') {
              return true;
            }

            if (t === 'function' || t !== 'object') {
              return false;
            }

            if (Array.isArray(val)) {
              return val.every(isValidArgument);
            }

            for (var k in val) {
              if (typeof val[k] !== 'function' && !isValidArgument(val[k])) {
                return false;
              }
            }

            return true;
          };

          invariant(isValidArgument(params), '%s is not usable as a native method argument', params);
          deepFreezeAndThrowOnMutationInDev(params);
        }

        this._queue[PARAMS].push(params);

        var now = new Date().getTime();

        if (global.nativeFlushQueueImmediate && (now - this._lastFlush >= MIN_TIME_BETWEEN_FLUSHES_MS || this._inCall === 0)) {
          var queue = this._queue;
          this._queue = [[], [], [], this._callID];
          this._lastFlush = now;
          global.nativeFlushQueueImmediate(queue);
        }

        Systrace.counterEvent('pending_js_to_native_queue', this._queue[0].length);

        if (__DEV__ && this.__spy && isFinite(moduleID)) {
          this.__spy({
            type: TO_NATIVE,
            module: this._remoteModuleTable[moduleID],
            method: this._remoteMethodTable[moduleID][methodID],
            args: params
          });
        } else if (this.__spy) {
          this.__spy({
            type: TO_NATIVE,
            module: moduleID + '',
            method: methodID,
            args: params
          });
        }
      }
    }, {
      key: "createDebugLookup",
      value: function createDebugLookup(moduleID, name, methods) {
        if (__DEV__) {
          this._remoteModuleTable[moduleID] = name;
          this._remoteMethodTable[moduleID] = methods;
        }
      }
    }, {
      key: "uninstallGlobalErrorHandler",
      value: function uninstallGlobalErrorHandler() {
        this.__guard = this.__guardUnsafe;
      }
    }, {
      key: "installGlobalErrorHandler",
      value: function installGlobalErrorHandler() {
        this.__guard = this.__guardSafe;
      }
    }, {
      key: "__guardUnsafe",
      value: function __guardUnsafe(fn) {
        this._inCall++;
        fn();
        this._inCall--;
      }
    }, {
      key: "__guardSafe",
      value: function __guardSafe(fn) {
        this._inCall++;

        try {
          fn();
        } catch (error) {
          ErrorUtils.reportFatalError(error);
        } finally {
          this._inCall--;
        }
      }
    }, {
      key: "__callImmediates",
      value: function __callImmediates() {
        Systrace.beginEvent('JSTimers.callImmediates()');

        if (!JSTimers) {
          JSTimers = _require(_dependencyMap[5], 'JSTimers');
        }

        JSTimers.callImmediates();
        Systrace.endEvent();
      }
    }, {
      key: "__callFunction",
      value: function __callFunction(module, method, args) {
        this._lastFlush = new Date().getTime();
        this._eventLoopStartTime = this._lastFlush;
        Systrace.beginEvent(module + "." + method + "()");

        if (this.__spy) {
          this.__spy({
            type: TO_JS,
            module: module,
            method: method,
            args: args
          });
        }

        var moduleMethods = this.getCallableModule(module);
        invariant(!!moduleMethods, 'Module %s is not a registered callable module (calling %s)', module, method);
        invariant(!!moduleMethods[method], 'Method %s does not exist on module %s', method, module);
        var result = moduleMethods[method].apply(moduleMethods, args);
        Systrace.endEvent();
        return result;
      }
    }, {
      key: "__invokeCallback",
      value: function __invokeCallback(cbID, args) {
        this._lastFlush = new Date().getTime();
        this._eventLoopStartTime = this._lastFlush;
        var callID = cbID >>> 1;
        var isSuccess = cbID & 1;
        var callback = isSuccess ? this._successCallbacks[callID] : this._failureCallbacks[callID];

        if (__DEV__) {
          var debug = this._debugInfo[callID];

          var _module = debug && this._remoteModuleTable[debug[0]];

          var _method = debug && this._remoteMethodTable[debug[0]][debug[1]];

          if (!callback) {
            var errorMessage = "Callback with id " + cbID + ": " + _module + "." + _method + "() not found";

            if (_method) {
              errorMessage = "The callback " + _method + "() exists in module " + _module + ", " + 'but only one callback may be registered to a function in a native module.';
            }

            invariant(callback, errorMessage);
          }

          var profileName = debug ? '<callback for ' + _module + '.' + _method + '>' : cbID;

          if (callback && this.__spy) {
            this.__spy({
              type: TO_JS,
              module: null,
              method: profileName,
              args: args
            });
          }

          Systrace.beginEvent("MessageQueue.invokeCallback(" + profileName + ", " + stringifySafe(args) + ")");
        }

        if (!callback) {
          return;
        }

        this._successCallbacks[callID] = this._failureCallbacks[callID] = null;
        callback.apply(undefined, _toConsumableArray(args));

        if (__DEV__) {
          Systrace.endEvent();
        }
      }
    }], [{
      key: "spy",
      value: function spy(spyOrToggle) {
        if (spyOrToggle === true) {
          MessageQueue.prototype.__spy = function (info) {
            console.log((info.type === TO_JS ? 'N->JS' : 'JS->N') + " : " + ("" + (info.module ? info.module + '.' : '') + info.method) + ("(" + JSON.stringify(info.args) + ")"));
          };
        } else if (spyOrToggle === false) {
          MessageQueue.prototype.__spy = null;
        } else {
          MessageQueue.prototype.__spy = spyOrToggle;
        }
      }
    }]);

    return MessageQueue;
  }();

  module.exports = MessageQueue;
},17,[18,19,121,13,39,51],"MessageQueue");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = global.ErrorUtils;
},18,[],"ErrorUtils");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var TRACE_TAG_REACT_APPS = 1 << 17;
  var TRACE_TAG_JS_VM_CALLS = 1 << 27;
  var _enabled = false;
  var _asyncCookie = 0;
  var _markStack = [];

  var _markStackIndex = -1;

  var _canInstallReactHook = false;
  var _useFiber = false;
  var REACT_MARKER = "\u269B";
  var userTimingPolyfill = __DEV__ ? {
    mark: function mark(markName) {
      if (_enabled) {
        _markStackIndex++;
        _markStack[_markStackIndex] = markName;
        var systraceLabel = markName;

        if (markName[0] === REACT_MARKER) {
          var indexOfId = markName.lastIndexOf(' (#');
          var cutoffIndex = indexOfId !== -1 ? indexOfId : markName.length;
          systraceLabel = markName.slice(2, cutoffIndex);
        }

        Systrace.beginEvent(systraceLabel);
      }
    },
    measure: function measure(measureName, startMark, endMark) {
      if (_enabled) {
        invariant(typeof measureName === 'string' && typeof startMark === 'string' && typeof endMark === 'undefined', 'Only performance.measure(string, string) overload is supported.');
        var topMark = _markStack[_markStackIndex];
        invariant(startMark === topMark, 'There was a mismatching performance.measure() call. ' + 'Expected "%s" but got "%s."', topMark, startMark);
        _markStackIndex--;
        Systrace.endEvent();
      }
    },
    clearMarks: function clearMarks(markName) {
      if (_enabled) {
        if (_markStackIndex === -1) {
          return;
        }

        if (markName === _markStack[_markStackIndex]) {
          if (userTimingPolyfill != null) {
            userTimingPolyfill.measure(markName, markName);
          }
        }
      }
    },
    clearMeasures: function clearMeasures() {}
  } : null;
  var reactDebugToolHook = __DEV__ ? {
    onBeforeMountComponent: function onBeforeMountComponent(debugID) {
      var ReactComponentTreeHook = _require(_dependencyMap[1], 'ReactGlobalSharedState').ReactComponentTreeHook;

      var displayName = ReactComponentTreeHook.getDisplayName(debugID);
      Systrace.beginEvent("ReactReconciler.mountComponent(" + displayName + ")");
    },
    onMountComponent: function onMountComponent(debugID) {
      Systrace.endEvent();
    },
    onBeforeUpdateComponent: function onBeforeUpdateComponent(debugID) {
      var ReactComponentTreeHook = _require(_dependencyMap[1], 'ReactGlobalSharedState').ReactComponentTreeHook;

      var displayName = ReactComponentTreeHook.getDisplayName(debugID);
      Systrace.beginEvent("ReactReconciler.updateComponent(" + displayName + ")");
    },
    onUpdateComponent: function onUpdateComponent(debugID) {
      Systrace.endEvent();
    },
    onBeforeUnmountComponent: function onBeforeUnmountComponent(debugID) {
      var ReactComponentTreeHook = _require(_dependencyMap[1], 'ReactGlobalSharedState').ReactComponentTreeHook;

      var displayName = ReactComponentTreeHook.getDisplayName(debugID);
      Systrace.beginEvent("ReactReconciler.unmountComponent(" + displayName + ")");
    },
    onUnmountComponent: function onUnmountComponent(debugID) {
      Systrace.endEvent();
    },
    onBeginLifeCycleTimer: function onBeginLifeCycleTimer(debugID, timerType) {
      var ReactComponentTreeHook = _require(_dependencyMap[1], 'ReactGlobalSharedState').ReactComponentTreeHook;

      var displayName = ReactComponentTreeHook.getDisplayName(debugID);
      Systrace.beginEvent(displayName + "." + timerType + "()");
    },
    onEndLifeCycleTimer: function onEndLifeCycleTimer(debugID, timerType) {
      Systrace.endEvent();
    }
  } : null;
  var Systrace = {
    installReactHook: function installReactHook(useFiber) {
      if (_enabled) {
        if (__DEV__) {
          if (useFiber) {
            global.performance = userTimingPolyfill;
          } else {
            _require(_dependencyMap[2], 'ReactDebugTool').addHook(reactDebugToolHook);
          }
        }
      }

      _useFiber = useFiber;
      _canInstallReactHook = true;
    },
    setEnabled: function setEnabled(enabled) {
      if (_enabled !== enabled) {
        if (__DEV__) {
          if (enabled) {
            global.nativeTraceBeginLegacy && global.nativeTraceBeginLegacy(TRACE_TAG_JS_VM_CALLS);
          } else {
            global.nativeTraceEndLegacy && global.nativeTraceEndLegacy(TRACE_TAG_JS_VM_CALLS);
          }

          if (_canInstallReactHook) {
            if (_useFiber) {
              if (enabled && global.performance === undefined) {
                global.performance = userTimingPolyfill;
              }
            } else {
              var ReactDebugTool = _require(_dependencyMap[2], 'ReactDebugTool');

              if (enabled) {
                ReactDebugTool.addHook(reactDebugToolHook);
              } else {
                ReactDebugTool.removeHook(reactDebugToolHook);
              }
            }
          }
        }

        _enabled = enabled;
      }
    },
    isEnabled: function isEnabled() {
      return _enabled;
    },
    beginEvent: function beginEvent(profileName, args) {
      if (_enabled) {
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS, profileName, args);
      }
    },
    endEvent: function endEvent() {
      if (_enabled) {
        global.nativeTraceEndSection(TRACE_TAG_REACT_APPS);
      }
    },
    beginAsyncEvent: function beginAsyncEvent(profileName) {
      var cookie = _asyncCookie;

      if (_enabled) {
        _asyncCookie++;
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceBeginAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie);
      }

      return cookie;
    },
    endAsyncEvent: function endAsyncEvent(profileName, cookie) {
      if (_enabled) {
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceEndAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie);
      }
    },
    counterEvent: function counterEvent(profileName, value) {
      if (_enabled) {
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceCounter && global.nativeTraceCounter(TRACE_TAG_REACT_APPS, profileName, value);
      }
    },
    attachToRelayProfiler: function attachToRelayProfiler(relayProfiler) {
      relayProfiler.attachProfileHandler('*', function (name, state) {
        if (state != null && state.queryName !== undefined) {
          name += '_' + state.queryName;
        }

        var cookie = Systrace.beginAsyncEvent(name);
        return function () {
          Systrace.endAsyncEvent(name, cookie);
        };
      });
      relayProfiler.attachAggregateHandler('*', function (name, callback) {
        Systrace.beginEvent(name);
        callback();
        Systrace.endEvent();
      });
    },
    swizzleJSON: function swizzleJSON() {
      Systrace.measureMethods(JSON, 'JSON', ['parse', 'stringify']);
    },
    measureMethods: function measureMethods(object, objectName, methodNames) {
      if (!__DEV__) {
        return;
      }

      methodNames.forEach(function (methodName) {
        object[methodName] = Systrace.measure(objectName, methodName, object[methodName]);
      });
    },
    measure: function measure(objName, fnName, func) {
      if (!__DEV__) {
        return func;
      }

      var profileName = objName + "." + fnName;
      return function () {
        if (!_enabled) {
          return func.apply(this, arguments);
        }

        Systrace.beginEvent(profileName);
        var ret = func.apply(this, arguments);
        Systrace.endEvent();
        return ret;
      };
    }
  };

  if (__DEV__) {
    _require.Systrace = Systrace;
  }

  module.exports = Systrace;
},19,[13,20,124],"Systrace");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactGlobalSharedState;
},20,[21],"ReactGlobalSharedState");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ReactNative = void 0;

  if (__DEV__) {
    ReactNative = _require(_dependencyMap[0], 'ReactNativeRenderer-dev');
  } else {
    ReactNative = _require(_dependencyMap[1], 'ReactNativeRenderer-prod');
  }

  module.exports = ReactNative;
},21,[22,123],"ReactNative");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  if (__DEV__) {
    (function () {
      "use strict";

      _require2(_dependencyMap[0], "InitializeCore");

      var invariant = _require2(_dependencyMap[1], "fbjs/lib/invariant");

      var warning = _require2(_dependencyMap[2], "fbjs/lib/warning");

      var emptyFunction = _require2(_dependencyMap[3], "fbjs/lib/emptyFunction");

      var UIManager = _require2(_dependencyMap[4], "UIManager");

      var RCTEventEmitter = _require2(_dependencyMap[5], "RCTEventEmitter");

      var TextInputState = _require2(_dependencyMap[6], "TextInputState");

      var deepDiffer = _require2(_dependencyMap[7], "deepDiffer");

      var flattenStyle = _require2(_dependencyMap[8], "flattenStyle");

      var React = _require2(_dependencyMap[9], "react");

      var emptyObject = _require2(_dependencyMap[10], "fbjs/lib/emptyObject");

      var checkPropTypes = _require2(_dependencyMap[11], "prop-types/checkPropTypes");

      var shallowEqual = _require2(_dependencyMap[12], "fbjs/lib/shallowEqual");

      var ExceptionsManager = _require2(_dependencyMap[13], "ExceptionsManager");

      var deepFreezeAndThrowOnMutationInDev = _require2(_dependencyMap[14], "deepFreezeAndThrowOnMutationInDev");

      var invokeGuardedCallback = function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        this._hasCaughtError = false;
        this._caughtError = null;
        var funcArgs = Array.prototype.slice.call(arguments, 3);

        try {
          func.apply(context, funcArgs);
        } catch (error) {
          this._caughtError = error;
          this._hasCaughtError = true;
        }
      };

      {
        if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
          var fakeNode = document.createElement("react");

          var invokeGuardedCallbackDev = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
            invariant(typeof document !== "undefined", "The `document` global was defined when React was initialized, but is not " + "defined anymore. This can happen in a test environment if a component " + "schedules an update from an asynchronous callback, but the test has already " + "finished running. To solve this, you can either unmount the component at " + "the end of your test (and ensure that any asynchronous operations get " + "canceled in `componentWillUnmount`), or you can change the test itself " + "to be asynchronous.");
            var evt = document.createEvent("Event");
            var didError = true;
            var funcArgs = Array.prototype.slice.call(arguments, 3);

            function callCallback() {
              fakeNode.removeEventListener(evtType, callCallback, false);
              func.apply(context, funcArgs);
              didError = false;
            }

            var error = void 0;
            var didSetError = false;
            var isCrossOriginError = false;

            function onError(event) {
              error = event.error;
              didSetError = true;

              if (error === null && event.colno === 0 && event.lineno === 0) {
                isCrossOriginError = true;
              }
            }

            var evtType = "react-" + (name ? name : "invokeguardedcallback");
            window.addEventListener("error", onError);
            fakeNode.addEventListener(evtType, callCallback, false);
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);

            if (didError) {
              if (!didSetError) {
                error = new Error("An error was thrown inside one of your components, but React " + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + "your browser. Try triggering the error in production mode, " + "or switching to a modern browser. If you suspect that this is " + "actually an issue with React, please file an issue.");
              } else if (isCrossOriginError) {
                error = new Error("A cross-origin error was thrown. React doesn't have access to " + "the actual error object in development. " + "See https://fb.me/react-crossorigin-error for more information.");
              }

              this._hasCaughtError = true;
              this._caughtError = error;
            } else {
              this._hasCaughtError = false;
              this._caughtError = null;
            }

            window.removeEventListener("error", onError);
          };

          invokeGuardedCallback = invokeGuardedCallbackDev;
        }
      }
      var invokeGuardedCallback$1 = invokeGuardedCallback;
      var ReactErrorUtils = {
        _caughtError: null,
        _hasCaughtError: false,
        _rethrowError: null,
        _hasRethrowError: false,
        invokeGuardedCallback: function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
          invokeGuardedCallback$1.apply(ReactErrorUtils, arguments);
        },
        invokeGuardedCallbackAndCatchFirstError: function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
          ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);

          if (ReactErrorUtils.hasCaughtError()) {
            var error = ReactErrorUtils.clearCaughtError();

            if (!ReactErrorUtils._hasRethrowError) {
              ReactErrorUtils._hasRethrowError = true;
              ReactErrorUtils._rethrowError = error;
            }
          }
        },
        rethrowCaughtError: function rethrowCaughtError() {
          return _rethrowCaughtError.apply(ReactErrorUtils, arguments);
        },
        hasCaughtError: function hasCaughtError() {
          return ReactErrorUtils._hasCaughtError;
        },
        clearCaughtError: function clearCaughtError() {
          if (ReactErrorUtils._hasCaughtError) {
            var error = ReactErrorUtils._caughtError;
            ReactErrorUtils._caughtError = null;
            ReactErrorUtils._hasCaughtError = false;
            return error;
          } else {
            invariant(false, "clearCaughtError was called but no error was captured. This error " + "is likely caused by a bug in React. Please file an issue.");
          }
        }
      };

      var _rethrowCaughtError = function _rethrowCaughtError() {
        if (ReactErrorUtils._hasRethrowError) {
          var error = ReactErrorUtils._rethrowError;
          ReactErrorUtils._rethrowError = null;
          ReactErrorUtils._hasRethrowError = false;
          throw error;
        }
      };

      var eventPluginOrder = null;
      var namesToPlugins = {};

      function recomputePluginOrdering() {
        if (!eventPluginOrder) {
          return;
        }

        for (var pluginName in namesToPlugins) {
          var pluginModule = namesToPlugins[pluginName];
          var pluginIndex = eventPluginOrder.indexOf(pluginName);
          invariant(pluginIndex > -1, "EventPluginRegistry: Cannot inject event plugins that do not exist in " + "the plugin ordering, `%s`.", pluginName);

          if (plugins[pluginIndex]) {
            continue;
          }

          invariant(pluginModule.extractEvents, "EventPluginRegistry: Event plugins must implement an `extractEvents` " + "method, but `%s` does not.", pluginName);
          plugins[pluginIndex] = pluginModule;
          var publishedEvents = pluginModule.eventTypes;

          for (var eventName in publishedEvents) {
            invariant(publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName), "EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.", eventName, pluginName);
          }
        }
      }

      function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
        invariant(!eventNameDispatchConfigs.hasOwnProperty(eventName), "EventPluginHub: More than one plugin attempted to publish the same " + "event name, `%s`.", eventName);
        eventNameDispatchConfigs[eventName] = dispatchConfig;
        var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

        if (phasedRegistrationNames) {
          for (var phaseName in phasedRegistrationNames) {
            if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
              var phasedRegistrationName = phasedRegistrationNames[phaseName];
              publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
            }
          }

          return true;
        } else if (dispatchConfig.registrationName) {
          publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
          return true;
        }

        return false;
      }

      function publishRegistrationName(registrationName, pluginModule, eventName) {
        invariant(!registrationNameModules[registrationName], "EventPluginHub: More than one plugin attempted to publish the same " + "registration name, `%s`.", registrationName);
        registrationNameModules[registrationName] = pluginModule;
        registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
        {
          var lowerCasedName = registrationName.toLowerCase();
        }
      }

      var plugins = [];
      var eventNameDispatchConfigs = {};
      var registrationNameModules = {};
      var registrationNameDependencies = {};

      function injectEventPluginOrder(injectedEventPluginOrder) {
        invariant(!eventPluginOrder, "EventPluginRegistry: Cannot inject event plugin ordering more than " + "once. You are likely trying to load more than one copy of React.");
        eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
        recomputePluginOrdering();
      }

      function injectEventPluginsByName(injectedNamesToPlugins) {
        var isOrderingDirty = false;

        for (var pluginName in injectedNamesToPlugins) {
          if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
            continue;
          }

          var pluginModule = injectedNamesToPlugins[pluginName];

          if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
            invariant(!namesToPlugins[pluginName], "EventPluginRegistry: Cannot inject two different event plugins " + "using the same name, `%s`.", pluginName);
            namesToPlugins[pluginName] = pluginModule;
            isOrderingDirty = true;
          }
        }

        if (isOrderingDirty) {
          recomputePluginOrdering();
        }
      }

      var getFiberCurrentPropsFromNode = null;
      var getInstanceFromNode = null;
      var getNodeFromInstance = null;
      var injection$1 = {
        injectComponentTree: function injectComponentTree(Injected) {
          getFiberCurrentPropsFromNode = Injected.getFiberCurrentPropsFromNode;
          getInstanceFromNode = Injected.getInstanceFromNode;
          getNodeFromInstance = Injected.getNodeFromInstance;
          {
            warning(getNodeFromInstance && getInstanceFromNode, "EventPluginUtils.injection.injectComponentTree(...): Injected " + "module is missing getNodeFromInstance or getInstanceFromNode.");
          }
        }
      };

      function isEndish(topLevelType) {
        return topLevelType === "topMouseUp" || topLevelType === "topTouchEnd" || topLevelType === "topTouchCancel";
      }

      function isMoveish(topLevelType) {
        return topLevelType === "topMouseMove" || topLevelType === "topTouchMove";
      }

      function isStartish(topLevelType) {
        return topLevelType === "topMouseDown" || topLevelType === "topTouchStart";
      }

      var validateEventDispatches = void 0;
      {
        validateEventDispatches = function validateEventDispatches(event) {
          var dispatchListeners = event._dispatchListeners;
          var dispatchInstances = event._dispatchInstances;
          var listenersIsArr = Array.isArray(dispatchListeners);
          var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
          var instancesIsArr = Array.isArray(dispatchInstances);
          var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
          warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, "EventPluginUtils: Invalid `event`.");
        };
      }

      function executeDispatch(event, simulated, listener, inst) {
        var type = event.type || "unknown-event";
        event.currentTarget = getNodeFromInstance(inst);
        ReactErrorUtils.invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
      }

      function executeDispatchesInOrder(event, simulated) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchInstances = event._dispatchInstances;
        {
          validateEventDispatches(event);
        }

        if (Array.isArray(dispatchListeners)) {
          for (var i = 0; i < dispatchListeners.length; i++) {
            if (event.isPropagationStopped()) {
              break;
            }

            executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
          }
        } else if (dispatchListeners) {
          executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
        }

        event._dispatchListeners = null;
        event._dispatchInstances = null;
      }

      function executeDispatchesInOrderStopAtTrueImpl(event) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchInstances = event._dispatchInstances;
        {
          validateEventDispatches(event);
        }

        if (Array.isArray(dispatchListeners)) {
          for (var i = 0; i < dispatchListeners.length; i++) {
            if (event.isPropagationStopped()) {
              break;
            }

            if (dispatchListeners[i](event, dispatchInstances[i])) {
              return dispatchInstances[i];
            }
          }
        } else if (dispatchListeners) {
          if (dispatchListeners(event, dispatchInstances)) {
            return dispatchInstances;
          }
        }

        return null;
      }

      function executeDispatchesInOrderStopAtTrue(event) {
        var ret = executeDispatchesInOrderStopAtTrueImpl(event);
        event._dispatchInstances = null;
        event._dispatchListeners = null;
        return ret;
      }

      function executeDirectDispatch(event) {
        {
          validateEventDispatches(event);
        }
        var dispatchListener = event._dispatchListeners;
        var dispatchInstance = event._dispatchInstances;
        invariant(!Array.isArray(dispatchListener), "executeDirectDispatch(...): Invalid `event`.");
        event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
        var res = dispatchListener ? dispatchListener(event) : null;
        event.currentTarget = null;
        event._dispatchListeners = null;
        event._dispatchInstances = null;
        return res;
      }

      function hasDispatches(event) {
        return !!event._dispatchListeners;
      }

      function accumulateInto(current, next) {
        invariant(next != null, "accumulateInto(...): Accumulated items must not be null or undefined.");

        if (current == null) {
          return next;
        }

        if (Array.isArray(current)) {
          if (Array.isArray(next)) {
            current.push.apply(current, next);
            return current;
          }

          current.push(next);
          return current;
        }

        if (Array.isArray(next)) {
          return [current].concat(next);
        }

        return [current, next];
      }

      function forEachAccumulated(arr, cb, scope) {
        if (Array.isArray(arr)) {
          arr.forEach(cb, scope);
        } else if (arr) {
          cb.call(scope, arr);
        }
      }

      var eventQueue = null;

      var executeDispatchesAndRelease = function executeDispatchesAndRelease(event, simulated) {
        if (event) {
          executeDispatchesInOrder(event, simulated);

          if (!event.isPersistent()) {
            event.constructor.release(event);
          }
        }
      };

      var executeDispatchesAndReleaseSimulated = function executeDispatchesAndReleaseSimulated(e) {
        return executeDispatchesAndRelease(e, true);
      };

      var executeDispatchesAndReleaseTopLevel = function executeDispatchesAndReleaseTopLevel(e) {
        return executeDispatchesAndRelease(e, false);
      };

      function isInteractive(tag) {
        return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
      }

      function shouldPreventMouseEvent(name, type, props) {
        switch (name) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
            return !!(props.disabled && isInteractive(type));

          default:
            return false;
        }
      }

      var injection = {
        injectEventPluginOrder: injectEventPluginOrder,
        injectEventPluginsByName: injectEventPluginsByName
      };

      function getListener(inst, registrationName) {
        var listener = void 0;
        var stateNode = inst.stateNode;

        if (!stateNode) {
          return null;
        }

        var props = getFiberCurrentPropsFromNode(stateNode);

        if (!props) {
          return null;
        }

        listener = props[registrationName];

        if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
          return null;
        }

        invariant(!listener || typeof listener === "function", "Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
        return listener;
      }

      function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var events = null;

        for (var i = 0; i < plugins.length; i++) {
          var possiblePlugin = plugins[i];

          if (possiblePlugin) {
            var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);

            if (extractedEvents) {
              events = accumulateInto(events, extractedEvents);
            }
          }
        }

        return events;
      }

      function runEventsInBatch(events, simulated) {
        if (events !== null) {
          eventQueue = accumulateInto(eventQueue, events);
        }

        var processingEventQueue = eventQueue;
        eventQueue = null;

        if (!processingEventQueue) {
          return;
        }

        if (simulated) {
          forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
        } else {
          forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
        }

        invariant(!eventQueue, "processEventQueue(): Additional events were enqueued while processing " + "an event queue. Support for this has not yet been implemented.");
        ReactErrorUtils.rethrowCaughtError();
      }

      function runExtractedEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var events = extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        runEventsInBatch(events, false);
      }

      var IndeterminateComponent = 0;
      var FunctionalComponent = 1;
      var ClassComponent = 2;
      var HostRoot = 3;
      var HostPortal = 4;
      var HostComponent = 5;
      var HostText = 6;
      var CallComponent = 7;
      var CallHandlerPhase = 8;
      var ReturnComponent = 9;
      var Fragment = 10;
      var Mode = 11;
      var ContextConsumer = 12;
      var ContextProvider = 13;

      function getParent(inst) {
        do {
          inst = inst["return"];
        } while (inst && inst.tag !== HostComponent);

        if (inst) {
          return inst;
        }

        return null;
      }

      function getLowestCommonAncestor(instA, instB) {
        var depthA = 0;

        for (var tempA = instA; tempA; tempA = getParent(tempA)) {
          depthA++;
        }

        var depthB = 0;

        for (var tempB = instB; tempB; tempB = getParent(tempB)) {
          depthB++;
        }

        while (depthA - depthB > 0) {
          instA = getParent(instA);
          depthA--;
        }

        while (depthB - depthA > 0) {
          instB = getParent(instB);
          depthB--;
        }

        var depth = depthA;

        while (depth--) {
          if (instA === instB || instA === instB.alternate) {
            return instA;
          }

          instA = getParent(instA);
          instB = getParent(instB);
        }

        return null;
      }

      function isAncestor(instA, instB) {
        while (instB) {
          if (instA === instB || instA === instB.alternate) {
            return true;
          }

          instB = getParent(instB);
        }

        return false;
      }

      function getParentInstance(inst) {
        return getParent(inst);
      }

      function traverseTwoPhase(inst, fn, arg) {
        var path = [];

        while (inst) {
          path.push(inst);
          inst = getParent(inst);
        }

        var i = void 0;

        for (i = path.length; i-- > 0;) {
          fn(path[i], "captured", arg);
        }

        for (i = 0; i < path.length; i++) {
          fn(path[i], "bubbled", arg);
        }
      }

      function listenerAtPhase(inst, event, propagationPhase) {
        var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
        return getListener(inst, registrationName);
      }

      function accumulateDirectionalDispatches(inst, phase, event) {
        {
          warning(inst, "Dispatching inst must not be null");
        }
        var listener = listenerAtPhase(inst, event, phase);

        if (listener) {
          event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
          event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
        }
      }

      function accumulateTwoPhaseDispatchesSingle(event) {
        if (event && event.dispatchConfig.phasedRegistrationNames) {
          traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
        }
      }

      function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
        if (event && event.dispatchConfig.phasedRegistrationNames) {
          var targetInst = event._targetInst;
          var parentInst = targetInst ? getParentInstance(targetInst) : null;
          traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
        }
      }

      function accumulateDispatches(inst, ignoredDirection, event) {
        if (inst && event && event.dispatchConfig.registrationName) {
          var registrationName = event.dispatchConfig.registrationName;
          var listener = getListener(inst, registrationName);

          if (listener) {
            event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
            event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
          }
        }
      }

      function accumulateDirectDispatchesSingle(event) {
        if (event && event.dispatchConfig.registrationName) {
          accumulateDispatches(event._targetInst, null, event);
        }
      }

      function accumulateTwoPhaseDispatches(events) {
        forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
      }

      function accumulateTwoPhaseDispatchesSkipTarget(events) {
        forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
      }

      function accumulateDirectDispatches(events) {
        forEachAccumulated(events, accumulateDirectDispatchesSingle);
      }

      var didWarnForAddedNewProperty = false;
      var EVENT_POOL_SIZE = 10;
      var shouldBeReleasedProperties = ["dispatchConfig", "_targetInst", "nativeEvent", "isDefaultPrevented", "isPropagationStopped", "_dispatchListeners", "_dispatchInstances"];
      var EventInterface = {
        type: null,
        target: null,
        currentTarget: emptyFunction.thatReturnsNull,
        eventPhase: null,
        bubbles: null,
        cancelable: null,
        timeStamp: function timeStamp(event) {
          return event.timeStamp || Date.now();
        },
        defaultPrevented: null,
        isTrusted: null
      };

      function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
        {
          delete this.nativeEvent;
          delete this.preventDefault;
          delete this.stopPropagation;
        }
        this.dispatchConfig = dispatchConfig;
        this._targetInst = targetInst;
        this.nativeEvent = nativeEvent;
        var Interface = this.constructor.Interface;

        for (var propName in Interface) {
          if (!Interface.hasOwnProperty(propName)) {
            continue;
          }

          {
            delete this[propName];
          }
          var normalize = Interface[propName];

          if (normalize) {
            this[propName] = normalize(nativeEvent);
          } else {
            if (propName === "target") {
              this.target = nativeEventTarget;
            } else {
              this[propName] = nativeEvent[propName];
            }
          }
        }

        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

        if (defaultPrevented) {
          this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
        } else {
          this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
        }

        this.isPropagationStopped = emptyFunction.thatReturnsFalse;
        return this;
      }

      _extends(SyntheticEvent.prototype, {
        preventDefault: function preventDefault() {
          this.defaultPrevented = true;
          var event = this.nativeEvent;

          if (!event) {
            return;
          }

          if (event.preventDefault) {
            event.preventDefault();
          } else if (typeof event.returnValue !== "unknown") {
            event.returnValue = false;
          }

          this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
        },
        stopPropagation: function stopPropagation() {
          var event = this.nativeEvent;

          if (!event) {
            return;
          }

          if (event.stopPropagation) {
            event.stopPropagation();
          } else if (typeof event.cancelBubble !== "unknown") {
            event.cancelBubble = true;
          }

          this.isPropagationStopped = emptyFunction.thatReturnsTrue;
        },
        persist: function persist() {
          this.isPersistent = emptyFunction.thatReturnsTrue;
        },
        isPersistent: emptyFunction.thatReturnsFalse,
        destructor: function destructor() {
          var Interface = this.constructor.Interface;

          for (var propName in Interface) {
            {
              Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
            }
          }

          for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
            this[shouldBeReleasedProperties[i]] = null;
          }

          {
            Object.defineProperty(this, "nativeEvent", getPooledWarningPropertyDefinition("nativeEvent", null));
            Object.defineProperty(this, "preventDefault", getPooledWarningPropertyDefinition("preventDefault", emptyFunction));
            Object.defineProperty(this, "stopPropagation", getPooledWarningPropertyDefinition("stopPropagation", emptyFunction));
          }
        }
      });

      SyntheticEvent.Interface = EventInterface;

      SyntheticEvent.extend = function (Interface) {
        var Super = this;

        var E = function E() {};

        E.prototype = Super.prototype;
        var prototype = new E();

        function Class() {
          return Super.apply(this, arguments);
        }

        _extends(prototype, Class.prototype);

        Class.prototype = prototype;
        Class.prototype.constructor = Class;
        Class.Interface = _extends({}, Super.Interface, Interface);
        Class.extend = Super.extend;
        addEventPoolingTo(Class);
        return Class;
      };

      {
        var isProxySupported = typeof Proxy === "function" && !Object.isSealed(new Proxy({}, {}));

        if (isProxySupported) {
          SyntheticEvent = new Proxy(SyntheticEvent, {
            construct: function construct(target, args) {
              return this.apply(target, Object.create(target.prototype), args);
            },
            apply: function apply(constructor, that, args) {
              return new Proxy(constructor.apply(that, args), {
                set: function set(target, prop, value) {
                  if (prop !== "isPersistent" && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
                    warning(didWarnForAddedNewProperty || target.isPersistent(), "This synthetic event is reused for performance reasons. If you're " + "seeing this, you're adding a new property in the synthetic event object. " + "The property is never released. See " + "https://fb.me/react-event-pooling for more information.");
                    didWarnForAddedNewProperty = true;
                  }

                  target[prop] = value;
                  return true;
                }
              });
            }
          });
        }
      }
      addEventPoolingTo(SyntheticEvent);

      function getPooledWarningPropertyDefinition(propName, getVal) {
        var isFunction = typeof getVal === "function";
        return {
          configurable: true,
          set: set,
          get: get
        };

        function set(val) {
          var action = isFunction ? "setting the method" : "setting the property";
          warn(action, "This is effectively a no-op");
          return val;
        }

        function get() {
          var action = isFunction ? "accessing the method" : "accessing the property";
          var result = isFunction ? "This is a no-op function" : "This is set to null";
          warn(action, result);
          return getVal;
        }

        function warn(action, result) {
          var warningCondition = false;
          warning(warningCondition, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + "If you must keep the original synthetic event around, use event.persist(). " + "See https://fb.me/react-event-pooling for more information.", action, propName, result);
        }
      }

      function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
        var EventConstructor = this;

        if (EventConstructor.eventPool.length) {
          var instance = EventConstructor.eventPool.pop();
          EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
          return instance;
        }

        return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
      }

      function releasePooledEvent(event) {
        var EventConstructor = this;
        invariant(event instanceof EventConstructor, "Trying to release an event instance  into a pool of a different type.");
        event.destructor();

        if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
          EventConstructor.eventPool.push(event);
        }
      }

      function addEventPoolingTo(EventConstructor) {
        EventConstructor.eventPool = [];
        EventConstructor.getPooled = getPooledEvent;
        EventConstructor.release = releasePooledEvent;
      }

      var SyntheticEvent$1 = SyntheticEvent;
      var ResponderSyntheticEvent = SyntheticEvent$1.extend({
        touchHistory: function touchHistory(nativeEvent) {
          return null;
        }
      });
      var MAX_TOUCH_BANK = 20;
      var touchBank = [];
      var touchHistory = {
        touchBank: touchBank,
        numberActiveTouches: 0,
        indexOfSingleActiveTouch: -1,
        mostRecentTimeStamp: 0
      };

      function timestampForTouch(touch) {
        return touch.timeStamp || touch.timestamp;
      }

      function createTouchRecord(touch) {
        return {
          touchActive: true,
          startPageX: touch.pageX,
          startPageY: touch.pageY,
          startTimeStamp: timestampForTouch(touch),
          currentPageX: touch.pageX,
          currentPageY: touch.pageY,
          currentTimeStamp: timestampForTouch(touch),
          previousPageX: touch.pageX,
          previousPageY: touch.pageY,
          previousTimeStamp: timestampForTouch(touch)
        };
      }

      function resetTouchRecord(touchRecord, touch) {
        touchRecord.touchActive = true;
        touchRecord.startPageX = touch.pageX;
        touchRecord.startPageY = touch.pageY;
        touchRecord.startTimeStamp = timestampForTouch(touch);
        touchRecord.currentPageX = touch.pageX;
        touchRecord.currentPageY = touch.pageY;
        touchRecord.currentTimeStamp = timestampForTouch(touch);
        touchRecord.previousPageX = touch.pageX;
        touchRecord.previousPageY = touch.pageY;
        touchRecord.previousTimeStamp = timestampForTouch(touch);
      }

      function getTouchIdentifier(_ref) {
        var identifier = _ref.identifier;
        invariant(identifier != null, "Touch object is missing identifier.");
        {
          warning(identifier <= MAX_TOUCH_BANK, "Touch identifier %s is greater than maximum supported %s which causes " + "performance issues backfilling array locations for all of the indices.", identifier, MAX_TOUCH_BANK);
        }
        return identifier;
      }

      function recordTouchStart(touch) {
        var identifier = getTouchIdentifier(touch);
        var touchRecord = touchBank[identifier];

        if (touchRecord) {
          resetTouchRecord(touchRecord, touch);
        } else {
          touchBank[identifier] = createTouchRecord(touch);
        }

        touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
      }

      function recordTouchMove(touch) {
        var touchRecord = touchBank[getTouchIdentifier(touch)];

        if (touchRecord) {
          touchRecord.touchActive = true;
          touchRecord.previousPageX = touchRecord.currentPageX;
          touchRecord.previousPageY = touchRecord.currentPageY;
          touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
          touchRecord.currentPageX = touch.pageX;
          touchRecord.currentPageY = touch.pageY;
          touchRecord.currentTimeStamp = timestampForTouch(touch);
          touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
        } else {
          console.error("Cannot record touch move without a touch start.\n" + "Touch Move: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
        }
      }

      function recordTouchEnd(touch) {
        var touchRecord = touchBank[getTouchIdentifier(touch)];

        if (touchRecord) {
          touchRecord.touchActive = false;
          touchRecord.previousPageX = touchRecord.currentPageX;
          touchRecord.previousPageY = touchRecord.currentPageY;
          touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
          touchRecord.currentPageX = touch.pageX;
          touchRecord.currentPageY = touch.pageY;
          touchRecord.currentTimeStamp = timestampForTouch(touch);
          touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
        } else {
          console.error("Cannot record touch end without a touch start.\n" + "Touch End: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
        }
      }

      function printTouch(touch) {
        return JSON.stringify({
          identifier: touch.identifier,
          pageX: touch.pageX,
          pageY: touch.pageY,
          timestamp: timestampForTouch(touch)
        });
      }

      function printTouchBank() {
        var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));

        if (touchBank.length > MAX_TOUCH_BANK) {
          printed += " (original size: " + touchBank.length + ")";
        }

        return printed;
      }

      var ResponderTouchHistoryStore = {
        recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
          if (isMoveish(topLevelType)) {
            nativeEvent.changedTouches.forEach(recordTouchMove);
          } else if (isStartish(topLevelType)) {
            nativeEvent.changedTouches.forEach(recordTouchStart);
            touchHistory.numberActiveTouches = nativeEvent.touches.length;

            if (touchHistory.numberActiveTouches === 1) {
              touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;
            }
          } else if (isEndish(topLevelType)) {
            nativeEvent.changedTouches.forEach(recordTouchEnd);
            touchHistory.numberActiveTouches = nativeEvent.touches.length;

            if (touchHistory.numberActiveTouches === 1) {
              for (var i = 0; i < touchBank.length; i++) {
                var touchTrackToCheck = touchBank[i];

                if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {
                  touchHistory.indexOfSingleActiveTouch = i;
                  break;
                }
              }

              {
                var activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];
                warning(activeRecord != null && activeRecord.touchActive, "Cannot find single active touch.");
              }
            }
          }
        },
        touchHistory: touchHistory
      };

      function accumulate(current, next) {
        invariant(next != null, "accumulate(...): Accumulated items must be not be null or undefined.");

        if (current == null) {
          return next;
        }

        if (Array.isArray(current)) {
          return current.concat(next);
        }

        if (Array.isArray(next)) {
          return [current].concat(next);
        }

        return [current, next];
      }

      var responderInst = null;
      var trackedTouchCount = 0;
      var previousActiveTouches = 0;

      var changeResponder = function changeResponder(nextResponderInst, blockHostResponder) {
        var oldResponderInst = responderInst;
        responderInst = nextResponderInst;

        if (ResponderEventPlugin.GlobalResponderHandler !== null) {
          ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
        }
      };

      var eventTypes = {
        startShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onStartShouldSetResponder",
            captured: "onStartShouldSetResponderCapture"
          }
        },
        scrollShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onScrollShouldSetResponder",
            captured: "onScrollShouldSetResponderCapture"
          }
        },
        selectionChangeShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onSelectionChangeShouldSetResponder",
            captured: "onSelectionChangeShouldSetResponderCapture"
          }
        },
        moveShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onMoveShouldSetResponder",
            captured: "onMoveShouldSetResponderCapture"
          }
        },
        responderStart: {
          registrationName: "onResponderStart"
        },
        responderMove: {
          registrationName: "onResponderMove"
        },
        responderEnd: {
          registrationName: "onResponderEnd"
        },
        responderRelease: {
          registrationName: "onResponderRelease"
        },
        responderTerminationRequest: {
          registrationName: "onResponderTerminationRequest"
        },
        responderGrant: {
          registrationName: "onResponderGrant"
        },
        responderReject: {
          registrationName: "onResponderReject"
        },
        responderTerminate: {
          registrationName: "onResponderTerminate"
        }
      };

      function setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var shouldSetEventType = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : topLevelType === "topSelectionChange" ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
        var bubbleShouldSetFrom = !responderInst ? targetInst : getLowestCommonAncestor(responderInst, targetInst);
        var skipOverBubbleShouldSetFrom = bubbleShouldSetFrom === responderInst;
        var shouldSetEvent = ResponderSyntheticEvent.getPooled(shouldSetEventType, bubbleShouldSetFrom, nativeEvent, nativeEventTarget);
        shouldSetEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;

        if (skipOverBubbleShouldSetFrom) {
          accumulateTwoPhaseDispatchesSkipTarget(shouldSetEvent);
        } else {
          accumulateTwoPhaseDispatches(shouldSetEvent);
        }

        var wantsResponderInst = executeDispatchesInOrderStopAtTrue(shouldSetEvent);

        if (!shouldSetEvent.isPersistent()) {
          shouldSetEvent.constructor.release(shouldSetEvent);
        }

        if (!wantsResponderInst || wantsResponderInst === responderInst) {
          return null;
        }

        var extracted = void 0;
        var grantEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, wantsResponderInst, nativeEvent, nativeEventTarget);
        grantEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
        accumulateDirectDispatches(grantEvent);
        var blockHostResponder = executeDirectDispatch(grantEvent) === true;

        if (responderInst) {
          var terminationRequestEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget);
          terminationRequestEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
          accumulateDirectDispatches(terminationRequestEvent);
          var shouldSwitch = !hasDispatches(terminationRequestEvent) || executeDirectDispatch(terminationRequestEvent);

          if (!terminationRequestEvent.isPersistent()) {
            terminationRequestEvent.constructor.release(terminationRequestEvent);
          }

          if (shouldSwitch) {
            var terminateEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
            terminateEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(terminateEvent);
            extracted = accumulate(extracted, [grantEvent, terminateEvent]);
            changeResponder(wantsResponderInst, blockHostResponder);
          } else {
            var rejectEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, wantsResponderInst, nativeEvent, nativeEventTarget);
            rejectEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(rejectEvent);
            extracted = accumulate(extracted, rejectEvent);
          }
        } else {
          extracted = accumulate(extracted, grantEvent);
          changeResponder(wantsResponderInst, blockHostResponder);
        }

        return extracted;
      }

      function canTriggerTransfer(topLevelType, topLevelInst, nativeEvent) {
        return topLevelInst && (topLevelType === "topScroll" && !nativeEvent.responderIgnoreScroll || trackedTouchCount > 0 && topLevelType === "topSelectionChange" || isStartish(topLevelType) || isMoveish(topLevelType));
      }

      function noResponderTouches(nativeEvent) {
        var touches = nativeEvent.touches;

        if (!touches || touches.length === 0) {
          return true;
        }

        for (var i = 0; i < touches.length; i++) {
          var activeTouch = touches[i];
          var target = activeTouch.target;

          if (target !== null && target !== undefined && target !== 0) {
            var targetInst = getInstanceFromNode(target);

            if (isAncestor(responderInst, targetInst)) {
              return false;
            }
          }
        }

        return true;
      }

      var ResponderEventPlugin = {
        _getResponder: function _getResponder() {
          return responderInst;
        },
        eventTypes: eventTypes,
        extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
          if (isStartish(topLevelType)) {
            trackedTouchCount += 1;
          } else if (isEndish(topLevelType)) {
            if (trackedTouchCount >= 0) {
              trackedTouchCount -= 1;
            } else {
              console.error("Ended a touch event which was not counted in `trackedTouchCount`.");
              return null;
            }
          }

          ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);
          var extracted = canTriggerTransfer(topLevelType, targetInst, nativeEvent) ? setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) : null;
          var isResponderTouchStart = responderInst && isStartish(topLevelType);
          var isResponderTouchMove = responderInst && isMoveish(topLevelType);
          var isResponderTouchEnd = responderInst && isEndish(topLevelType);
          var incrementalTouch = isResponderTouchStart ? eventTypes.responderStart : isResponderTouchMove ? eventTypes.responderMove : isResponderTouchEnd ? eventTypes.responderEnd : null;

          if (incrementalTouch) {
            var gesture = ResponderSyntheticEvent.getPooled(incrementalTouch, responderInst, nativeEvent, nativeEventTarget);
            gesture.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(gesture);
            extracted = accumulate(extracted, gesture);
          }

          var isResponderTerminate = responderInst && topLevelType === "topTouchCancel";
          var isResponderRelease = responderInst && !isResponderTerminate && isEndish(topLevelType) && noResponderTouches(nativeEvent);
          var finalTouch = isResponderTerminate ? eventTypes.responderTerminate : isResponderRelease ? eventTypes.responderRelease : null;

          if (finalTouch) {
            var finalEvent = ResponderSyntheticEvent.getPooled(finalTouch, responderInst, nativeEvent, nativeEventTarget);
            finalEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(finalEvent);
            extracted = accumulate(extracted, finalEvent);
            changeResponder(null);
          }

          var numberActiveTouches = ResponderTouchHistoryStore.touchHistory.numberActiveTouches;

          if (ResponderEventPlugin.GlobalInteractionHandler && numberActiveTouches !== previousActiveTouches) {
            ResponderEventPlugin.GlobalInteractionHandler.onChange(numberActiveTouches);
          }

          previousActiveTouches = numberActiveTouches;
          return extracted;
        },
        GlobalResponderHandler: null,
        GlobalInteractionHandler: null,
        injection: {
          injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
            ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
          },
          injectGlobalInteractionHandler: function injectGlobalInteractionHandler(GlobalInteractionHandler) {
            ResponderEventPlugin.GlobalInteractionHandler = GlobalInteractionHandler;
          }
        }
      };
      var customBubblingEventTypes = {};
      var customDirectEventTypes = {};
      var ReactNativeBridgeEventPlugin = {
        eventTypes: {},
        extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
          if (targetInst == null) {
            return null;
          }

          var bubbleDispatchConfig = customBubblingEventTypes[topLevelType];
          var directDispatchConfig = customDirectEventTypes[topLevelType];
          invariant(bubbleDispatchConfig || directDispatchConfig, 'Unsupported top level event type "%s" dispatched', topLevelType);
          var event = SyntheticEvent$1.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);

          if (bubbleDispatchConfig) {
            accumulateTwoPhaseDispatches(event);
          } else if (directDispatchConfig) {
            accumulateDirectDispatches(event);
          } else {
            return null;
          }

          return event;
        },
        processEventTypes: function processEventTypes(viewConfig) {
          var bubblingEventTypes = viewConfig.bubblingEventTypes,
              directEventTypes = viewConfig.directEventTypes;
          {
            if (bubblingEventTypes != null && directEventTypes != null) {
              for (var topLevelType in directEventTypes) {
                invariant(bubblingEventTypes[topLevelType] == null, "Event cannot be both direct and bubbling: %s", topLevelType);
              }
            }
          }

          if (bubblingEventTypes != null) {
            for (var _topLevelType in bubblingEventTypes) {
              if (customBubblingEventTypes[_topLevelType] == null) {
                ReactNativeBridgeEventPlugin.eventTypes[_topLevelType] = customBubblingEventTypes[_topLevelType] = bubblingEventTypes[_topLevelType];
              }
            }
          }

          if (directEventTypes != null) {
            for (var _topLevelType2 in directEventTypes) {
              if (customDirectEventTypes[_topLevelType2] == null) {
                ReactNativeBridgeEventPlugin.eventTypes[_topLevelType2] = customDirectEventTypes[_topLevelType2] = directEventTypes[_topLevelType2];
              }
            }
          }
        }
      };
      var instanceCache = {};
      var instanceProps = {};

      function precacheFiberNode(hostInst, tag) {
        instanceCache[tag] = hostInst;
      }

      function uncacheFiberNode(tag) {
        delete instanceCache[tag];
        delete instanceProps[tag];
      }

      function getInstanceFromTag(tag) {
        if (typeof tag === "number") {
          return instanceCache[tag] || null;
        } else {
          return tag;
        }
      }

      function getTagFromInstance(inst) {
        var tag = inst.stateNode._nativeTag;

        if (tag === undefined) {
          tag = inst.stateNode.canonical._nativeTag;
        }

        invariant(tag, "All native instances should have a tag.");
        return tag;
      }

      function getFiberCurrentPropsFromNode$1(stateNode) {
        return instanceProps[stateNode._nativeTag] || null;
      }

      function updateFiberProps(tag, props) {
        instanceProps[tag] = props;
      }

      var ReactNativeComponentTree = Object.freeze({
        precacheFiberNode: precacheFiberNode,
        uncacheFiberNode: uncacheFiberNode,
        getClosestInstanceFromNode: getInstanceFromTag,
        getInstanceFromNode: getInstanceFromTag,
        getNodeFromInstance: getTagFromInstance,
        getFiberCurrentPropsFromNode: getFiberCurrentPropsFromNode$1,
        updateFiberProps: updateFiberProps
      });
      var ReactNativeEventPluginOrder = ["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"];
      var ReactNativeGlobalResponderHandler = {
        onChange: function onChange(from, to, blockNativeResponder) {
          if (to !== null) {
            var tag = to.stateNode._nativeTag;
            UIManager.setJSResponder(tag, blockNativeResponder);
          } else {
            UIManager.clearJSResponder();
          }
        }
      };
      injection.injectEventPluginOrder(ReactNativeEventPluginOrder);
      injection$1.injectComponentTree(ReactNativeComponentTree);
      ResponderEventPlugin.injection.injectGlobalResponderHandler(ReactNativeGlobalResponderHandler);
      injection.injectEventPluginsByName({
        ResponderEventPlugin: ResponderEventPlugin,
        ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin
      });
      var fiberHostComponent = null;
      var restoreTarget = null;
      var restoreQueue = null;

      function restoreStateOfTarget(target) {
        var internalInstance = getInstanceFromNode(target);

        if (!internalInstance) {
          return;
        }

        invariant(fiberHostComponent && typeof fiberHostComponent.restoreControlledState === "function", "Fiber needs to be injected to handle a fiber target for controlled " + "events. This error is likely caused by a bug in React. Please file an issue.");
        var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
        fiberHostComponent.restoreControlledState(internalInstance.stateNode, internalInstance.type, props);
      }

      function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
      }

      function restoreStateIfNeeded() {
        if (!restoreTarget) {
          return;
        }

        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);

        if (queuedTargets) {
          for (var i = 0; i < queuedTargets.length; i++) {
            restoreStateOfTarget(queuedTargets[i]);
          }
        }
      }

      var _batchedUpdates = function _batchedUpdates(fn, bookkeeping) {
        return fn(bookkeeping);
      };

      var _interactiveUpdates = function _interactiveUpdates(fn, a, b) {
        return fn(a, b);
      };

      var _flushInteractiveUpdates = function _flushInteractiveUpdates() {};

      var isBatching = false;

      function batchedUpdates(fn, bookkeeping) {
        if (isBatching) {
          return fn(bookkeeping);
        }

        isBatching = true;

        try {
          return _batchedUpdates(fn, bookkeeping);
        } finally {
          isBatching = false;
          var controlledComponentsHavePendingUpdates = needsStateRestore();

          if (controlledComponentsHavePendingUpdates) {
            _flushInteractiveUpdates();

            restoreStateIfNeeded();
          }
        }
      }

      var injection$2 = {
        injectRenderer: function injectRenderer(renderer) {
          _batchedUpdates = renderer.batchedUpdates;
          _interactiveUpdates = renderer.interactiveUpdates;
          _flushInteractiveUpdates = renderer.flushInteractiveUpdates;
        }
      };
      var INITIAL_TAG_COUNT = 1;
      var ReactNativeTagHandles = {
        tagsStartAt: INITIAL_TAG_COUNT,
        tagCount: INITIAL_TAG_COUNT,
        allocateTag: function allocateTag() {
          while (this.reactTagIsNativeTopRootID(ReactNativeTagHandles.tagCount)) {
            ReactNativeTagHandles.tagCount++;
          }

          var tag = ReactNativeTagHandles.tagCount;
          ReactNativeTagHandles.tagCount++;
          return tag;
        },
        assertRootTag: function assertRootTag(tag) {
          invariant(this.reactTagIsNativeTopRootID(tag), "Expect a native root tag, instead got %s", tag);
        },
        reactTagIsNativeTopRootID: function reactTagIsNativeTopRootID(reactTag) {
          return reactTag % 10 === 1;
        }
      };
      var EMPTY_NATIVE_EVENT = {};

      var touchSubsequence = function touchSubsequence(touches, indices) {
        var ret = [];

        for (var i = 0; i < indices.length; i++) {
          ret.push(touches[indices[i]]);
        }

        return ret;
      };

      var removeTouchesAtIndices = function removeTouchesAtIndices(touches, indices) {
        var rippedOut = [];
        var temp = touches;

        for (var i = 0; i < indices.length; i++) {
          var index = indices[i];
          rippedOut.push(touches[index]);
          temp[index] = null;
        }

        var fillAt = 0;

        for (var j = 0; j < temp.length; j++) {
          var cur = temp[j];

          if (cur !== null) {
            temp[fillAt++] = cur;
          }
        }

        temp.length = fillAt;
        return rippedOut;
      };

      function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
        var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT;
        var inst = getInstanceFromTag(rootNodeID);
        batchedUpdates(function () {
          runExtractedEventsInBatch(topLevelType, inst, nativeEvent, nativeEvent.target);
        });
      }

      function receiveEvent(rootNodeID, topLevelType, nativeEventParam) {
        _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
      }

      function receiveTouches(eventTopLevelType, touches, changedIndices) {
        var changedTouches = eventTopLevelType === "topTouchEnd" || eventTopLevelType === "topTouchCancel" ? removeTouchesAtIndices(touches, changedIndices) : touchSubsequence(touches, changedIndices);

        for (var jj = 0; jj < changedTouches.length; jj++) {
          var touch = changedTouches[jj];
          touch.changedTouches = changedTouches;
          touch.touches = touches;
          var nativeEvent = touch;
          var rootNodeID = null;
          var target = nativeEvent.target;

          if (target !== null && target !== undefined) {
            if (target < ReactNativeTagHandles.tagsStartAt) {
              {
                warning(false, "A view is reporting that a touch occurred on tag zero.");
              }
            } else {
              rootNodeID = target;
            }
          }

          _receiveRootNodeIDEvent(rootNodeID, eventTopLevelType, nativeEvent);
        }
      }

      var ReactNativeEventEmitter = Object.freeze({
        getListener: getListener,
        registrationNames: registrationNameModules,
        _receiveRootNodeIDEvent: _receiveRootNodeIDEvent,
        receiveEvent: receiveEvent,
        receiveTouches: receiveTouches
      });
      RCTEventEmitter.register(ReactNativeEventEmitter);
      var hasSymbol = typeof Symbol === "function" && Symbol["for"];
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol["for"]("react.element") : 0xeac7;
      var REACT_CALL_TYPE = hasSymbol ? Symbol["for"]("react.call") : 0xeac8;
      var REACT_RETURN_TYPE = hasSymbol ? Symbol["for"]("react.return") : 0xeac9;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol["for"]("react.portal") : 0xeaca;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol["for"]("react.fragment") : 0xeacb;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol["for"]("react.strict_mode") : 0xeacc;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol["for"]("react.provider") : 0xeacd;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol["for"]("react.context") : 0xeace;
      var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol["for"]("react.async_mode") : 0xeacf;
      var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");
      var FAUX_ITERATOR_SYMBOL = "@@iterator";

      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable === "undefined") {
          return null;
        }

        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }

        return null;
      }

      function _createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        return {
          $$typeof: REACT_PORTAL_TYPE,
          key: key == null ? null : "" + key,
          children: children,
          containerInfo: containerInfo,
          implementation: implementation
        };
      }

      var TouchHistoryMath = {
        centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
          var touchBank = touchHistory.touchBank;
          var total = 0;
          var count = 0;
          var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;

          if (oneTouchData !== null) {
            if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {
              total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;
              count = 1;
            }
          } else {
            for (var i = 0; i < touchBank.length; i++) {
              var touchTrack = touchBank[i];

              if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {
                var toAdd = void 0;

                if (ofCurrent && isXAxis) {
                  toAdd = touchTrack.currentPageX;
                } else if (ofCurrent && !isXAxis) {
                  toAdd = touchTrack.currentPageY;
                } else if (!ofCurrent && isXAxis) {
                  toAdd = touchTrack.previousPageX;
                } else {
                  toAdd = touchTrack.previousPageY;
                }

                total += toAdd;
                count++;
              }
            }
          }

          return count > 0 ? total / count : TouchHistoryMath.noCentroid;
        },
        currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
          return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, true);
        },
        currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
          return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, true);
        },
        previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
          return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, false);
        },
        previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
          return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, false);
        },
        currentCentroidX: function currentCentroidX(touchHistory) {
          return TouchHistoryMath.centroidDimension(touchHistory, 0, true, true);
        },
        currentCentroidY: function currentCentroidY(touchHistory) {
          return TouchHistoryMath.centroidDimension(touchHistory, 0, false, true);
        },
        noCentroid: -1
      };
      var ReactVersion = "16.3.0-alpha.1";

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      var objects = {};
      var uniqueID = 1;
      var emptyObject$2 = {};

      var ReactNativePropRegistry = function () {
        function ReactNativePropRegistry() {
          _classCallCheck(this, ReactNativePropRegistry);
        }

        ReactNativePropRegistry.register = function register(object) {
          var id = ++uniqueID;
          {
            Object.freeze(object);
          }
          objects[id] = object;
          return id;
        };

        ReactNativePropRegistry.getByID = function getByID(id) {
          if (!id) {
            return emptyObject$2;
          }

          var object = objects[id];

          if (!object) {
            console.warn("Invalid style with id `" + id + "`. Skipping ...");
            return emptyObject$2;
          }

          return object;
        };

        return ReactNativePropRegistry;
      }();

      var emptyObject$1 = {};
      var removedKeys = null;
      var removedKeyCount = 0;

      function defaultDiffer(prevProp, nextProp) {
        if (typeof nextProp !== "object" || nextProp === null) {
          return true;
        } else {
          return deepDiffer(prevProp, nextProp);
        }
      }

      function resolveObject(idOrObject) {
        if (typeof idOrObject === "number") {
          return ReactNativePropRegistry.getByID(idOrObject);
        }

        return idOrObject;
      }

      function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
        if (Array.isArray(node)) {
          var i = node.length;

          while (i-- && removedKeyCount > 0) {
            restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
          }
        } else if (node && removedKeyCount > 0) {
          var obj = resolveObject(node);

          for (var propKey in removedKeys) {
            if (!removedKeys[propKey]) {
              continue;
            }

            var _nextProp = obj[propKey];

            if (_nextProp === undefined) {
              continue;
            }

            var attributeConfig = validAttributes[propKey];

            if (!attributeConfig) {
              continue;
            }

            if (typeof _nextProp === "function") {
              _nextProp = true;
            }

            if (typeof _nextProp === "undefined") {
              _nextProp = null;
            }

            if (typeof attributeConfig !== "object") {
              updatePayload[propKey] = _nextProp;
            } else if (typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
              var nextValue = typeof attributeConfig.process === "function" ? attributeConfig.process(_nextProp) : _nextProp;
              updatePayload[propKey] = nextValue;
            }

            removedKeys[propKey] = false;
            removedKeyCount--;
          }
        }
      }

      function diffNestedArrayProperty(updatePayload, prevArray, nextArray, validAttributes) {
        var minLength = prevArray.length < nextArray.length ? prevArray.length : nextArray.length;
        var i = void 0;

        for (i = 0; i < minLength; i++) {
          updatePayload = diffNestedProperty(updatePayload, prevArray[i], nextArray[i], validAttributes);
        }

        for (; i < prevArray.length; i++) {
          updatePayload = clearNestedProperty(updatePayload, prevArray[i], validAttributes);
        }

        for (; i < nextArray.length; i++) {
          updatePayload = addNestedProperty(updatePayload, nextArray[i], validAttributes);
        }

        return updatePayload;
      }

      function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
        if (!updatePayload && prevProp === nextProp) {
          return updatePayload;
        }

        if (!prevProp || !nextProp) {
          if (nextProp) {
            return addNestedProperty(updatePayload, nextProp, validAttributes);
          }

          if (prevProp) {
            return clearNestedProperty(updatePayload, prevProp, validAttributes);
          }

          return updatePayload;
        }

        if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) {
          return diffProperties(updatePayload, resolveObject(prevProp), resolveObject(nextProp), validAttributes);
        }

        if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
          return diffNestedArrayProperty(updatePayload, prevProp, nextProp, validAttributes);
        }

        if (Array.isArray(prevProp)) {
          return diffProperties(updatePayload, flattenStyle(prevProp), resolveObject(nextProp), validAttributes);
        }

        return diffProperties(updatePayload, resolveObject(prevProp), flattenStyle(nextProp), validAttributes);
      }

      function addNestedProperty(updatePayload, nextProp, validAttributes) {
        if (!nextProp) {
          return updatePayload;
        }

        if (!Array.isArray(nextProp)) {
          return addProperties(updatePayload, resolveObject(nextProp), validAttributes);
        }

        for (var i = 0; i < nextProp.length; i++) {
          updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
        }

        return updatePayload;
      }

      function clearNestedProperty(updatePayload, prevProp, validAttributes) {
        if (!prevProp) {
          return updatePayload;
        }

        if (!Array.isArray(prevProp)) {
          return clearProperties(updatePayload, resolveObject(prevProp), validAttributes);
        }

        for (var i = 0; i < prevProp.length; i++) {
          updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
        }

        return updatePayload;
      }

      function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
        var attributeConfig = void 0;
        var nextProp = void 0;
        var prevProp = void 0;

        for (var propKey in nextProps) {
          attributeConfig = validAttributes[propKey];

          if (!attributeConfig) {
            continue;
          }

          prevProp = prevProps[propKey];
          nextProp = nextProps[propKey];

          if (typeof nextProp === "function") {
            nextProp = true;

            if (typeof prevProp === "function") {
              prevProp = true;
            }
          }

          if (typeof nextProp === "undefined") {
            nextProp = null;

            if (typeof prevProp === "undefined") {
              prevProp = null;
            }
          }

          if (removedKeys) {
            removedKeys[propKey] = false;
          }

          if (updatePayload && updatePayload[propKey] !== undefined) {
            if (typeof attributeConfig !== "object") {
              updatePayload[propKey] = nextProp;
            } else if (typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
              var nextValue = typeof attributeConfig.process === "function" ? attributeConfig.process(nextProp) : nextProp;
              updatePayload[propKey] = nextValue;
            }

            continue;
          }

          if (prevProp === nextProp) {
            continue;
          }

          if (typeof attributeConfig !== "object") {
            if (defaultDiffer(prevProp, nextProp)) {
              (updatePayload || (updatePayload = {}))[propKey] = nextProp;
            }
          } else if (typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
            var shouldUpdate = prevProp === undefined || (typeof attributeConfig.diff === "function" ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp));

            if (shouldUpdate) {
              var _nextValue = typeof attributeConfig.process === "function" ? attributeConfig.process(nextProp) : nextProp;

              (updatePayload || (updatePayload = {}))[propKey] = _nextValue;
            }
          } else {
            removedKeys = null;
            removedKeyCount = 0;
            updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig);

            if (removedKeyCount > 0 && updatePayload) {
              restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig);
              removedKeys = null;
            }
          }
        }

        for (var _propKey in prevProps) {
          if (nextProps[_propKey] !== undefined) {
            continue;
          }

          attributeConfig = validAttributes[_propKey];

          if (!attributeConfig) {
            continue;
          }

          if (updatePayload && updatePayload[_propKey] !== undefined) {
            continue;
          }

          prevProp = prevProps[_propKey];

          if (prevProp === undefined) {
            continue;
          }

          if (typeof attributeConfig !== "object" || typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
            (updatePayload || (updatePayload = {}))[_propKey] = null;

            if (!removedKeys) {
              removedKeys = {};
            }

            if (!removedKeys[_propKey]) {
              removedKeys[_propKey] = true;
              removedKeyCount++;
            }
          } else {
            updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig);
          }
        }

        return updatePayload;
      }

      function addProperties(updatePayload, props, validAttributes) {
        return diffProperties(updatePayload, emptyObject$1, props, validAttributes);
      }

      function clearProperties(updatePayload, prevProps, validAttributes) {
        return diffProperties(updatePayload, prevProps, emptyObject$1, validAttributes);
      }

      function create(props, validAttributes) {
        return addProperties(null, props, validAttributes);
      }

      function diff(prevProps, nextProps, validAttributes) {
        return diffProperties(null, prevProps, nextProps, validAttributes);
      }

      function mountSafeCallback(context, callback) {
        return function () {
          if (!callback) {
            return undefined;
          }

          if (typeof context.__isMounted === "boolean") {
            if (!context.__isMounted) {
              return undefined;
            }
          } else if (typeof context.isMounted === "function") {
            if (!context.isMounted()) {
              return undefined;
            }
          }

          return callback.apply(context, arguments);
        };
      }

      function throwOnStylesProp(component, props) {
        if (props.styles !== undefined) {
          var owner = component._owner || null;
          var name = component.constructor.displayName;
          var msg = "`styles` is not a supported property of `" + name + "`, did " + "you mean `style` (singular)?";

          if (owner && owner.constructor && owner.constructor.displayName) {
            msg += "\n\nCheck the `" + owner.constructor.displayName + "` parent " + " component.";
          }

          throw new Error(msg);
        }
      }

      function warnForStyleProps(props, validAttributes) {
        for (var key in validAttributes.style) {
          if (!(validAttributes[key] || props[key] === undefined)) {
            console.error("You are setting the style `{ " + key + ": ... }` as a prop. You " + "should nest it in a style object. " + "E.g. `{ style: { " + key + ": ... } }`");
          }
        }
      }

      function get(key) {
        return key._reactInternalFiber;
      }

      function set(key, value) {
        key._reactInternalFiber = value;
      }

      var ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      var ReactCurrentOwner = ReactInternals.ReactCurrentOwner;
      var ReactDebugCurrentFrame = ReactInternals.ReactDebugCurrentFrame;

      function getComponentName(fiber) {
        var type = fiber.type;

        if (typeof type === "function") {
          return type.displayName || type.name;
        }

        if (typeof type === "string") {
          return type;
        }

        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "ReactFragment";

          case REACT_PORTAL_TYPE:
            return "ReactPortal";

          case REACT_CALL_TYPE:
            return "ReactCall";

          case REACT_RETURN_TYPE:
            return "ReactReturn";
        }

        return null;
      }

      var findHostInstance = function findHostInstance(fiber) {
        return null;
      };

      var findHostInstanceFabric = function findHostInstanceFabric(fiber) {
        return null;
      };

      function injectFindHostInstance(impl) {
        findHostInstance = impl;
      }

      function findNodeHandle(componentOrHandle) {
        {
          var owner = ReactCurrentOwner.current;

          if (owner !== null && owner.stateNode !== null) {
            warning(owner.stateNode._warnedAboutRefsInRender, "%s is accessing findNodeHandle inside its render(). " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentName(owner) || "A component");
            owner.stateNode._warnedAboutRefsInRender = true;
          }
        }

        if (componentOrHandle == null) {
          return null;
        }

        if (typeof componentOrHandle === "number") {
          return componentOrHandle;
        }

        var component = componentOrHandle;
        var internalInstance = get(component);

        if (internalInstance) {
          return findHostInstance(internalInstance) || findHostInstanceFabric(internalInstance);
        } else {
          if (component) {
            return component;
          } else {
            invariant(typeof component === "object" && "_nativeTag" in component || component.render != null && typeof component.render === "function", "findNodeHandle(...): Argument is not a component " + "(type: %s, keys: %s)", typeof component, Object.keys(component));
            invariant(false, "findNodeHandle(...): Unable to find node handle for unmounted " + "component.");
          }
        }
      }

      function findNumericNodeHandleFiber(componentOrHandle) {
        var instance = findNodeHandle(componentOrHandle);

        if (instance == null || typeof instance === "number") {
          return instance;
        }

        return instance._nativeTag;
      }

      var NativeMethodsMixin = {
        measure: function measure(callback) {
          UIManager.measure(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        },
        measureInWindow: function measureInWindow(callback) {
          UIManager.measureInWindow(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        },
        measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
          UIManager.measureLayout(findNumericNodeHandleFiber(this), relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
        },
        setNativeProps: function setNativeProps(nativeProps) {
          var maybeInstance = void 0;

          try {
            maybeInstance = findNodeHandle(this);
          } catch (error) {}

          if (maybeInstance == null) {
            return;
          }

          var viewConfig = maybeInstance.viewConfig;
          {
            warnForStyleProps(nativeProps, viewConfig.validAttributes);
          }
          var updatePayload = create(nativeProps, viewConfig.validAttributes);

          if (updatePayload != null) {
            UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, updatePayload);
          }
        },
        focus: function focus() {
          TextInputState.focusTextInput(findNumericNodeHandleFiber(this));
        },
        blur: function blur() {
          TextInputState.blurTextInput(findNumericNodeHandleFiber(this));
        }
      };
      {
        var NativeMethodsMixin_DEV = NativeMethodsMixin;
        invariant(!NativeMethodsMixin_DEV.componentWillMount && !NativeMethodsMixin_DEV.componentWillReceiveProps && !NativeMethodsMixin_DEV.UNSAFE_componentWillMount && !NativeMethodsMixin_DEV.UNSAFE_componentWillReceiveProps, "Do not override existing functions.");

        NativeMethodsMixin_DEV.componentWillMount = function () {
          throwOnStylesProp(this, this.props);
        };

        NativeMethodsMixin_DEV.componentWillReceiveProps = function (newProps) {
          throwOnStylesProp(this, newProps);
        };

        NativeMethodsMixin_DEV.UNSAFE_componentWillMount = function () {
          throwOnStylesProp(this, this.props);
        };

        NativeMethodsMixin_DEV.UNSAFE_componentWillReceiveProps = function (newProps) {
          throwOnStylesProp(this, newProps);
        };

        NativeMethodsMixin_DEV.componentWillMount.__suppressDeprecationWarning = true;
        NativeMethodsMixin_DEV.componentWillReceiveProps.__suppressDeprecationWarning = true;
      }

      function _classCallCheck$1(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }

      var ReactNativeComponent = function (_React$Component) {
        _inherits(ReactNativeComponent, _React$Component);

        function ReactNativeComponent() {
          _classCallCheck$1(this, ReactNativeComponent);

          return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
        }

        ReactNativeComponent.prototype.blur = function blur() {
          TextInputState.blurTextInput(findNumericNodeHandleFiber(this));
        };

        ReactNativeComponent.prototype.focus = function focus() {
          TextInputState.focusTextInput(findNumericNodeHandleFiber(this));
        };

        ReactNativeComponent.prototype.measure = function measure(callback) {
          UIManager.measure(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        };

        ReactNativeComponent.prototype.measureInWindow = function measureInWindow(callback) {
          UIManager.measureInWindow(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        };

        ReactNativeComponent.prototype.measureLayout = function measureLayout(relativeToNativeNode, onSuccess, onFail) {
          UIManager.measureLayout(findNumericNodeHandleFiber(this), relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
        };

        ReactNativeComponent.prototype.setNativeProps = function setNativeProps(nativeProps) {
          var maybeInstance = void 0;

          try {
            maybeInstance = findNodeHandle(this);
          } catch (error) {}

          if (maybeInstance == null) {
            return;
          }

          var viewConfig = maybeInstance.viewConfig || maybeInstance.canonical.viewConfig;
          var updatePayload = create(nativeProps, viewConfig.validAttributes);

          if (updatePayload != null) {
            UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, updatePayload);
          }
        };

        return ReactNativeComponent;
      }(React.Component);

      var NoEffect = 0;
      var PerformedWork = 1;
      var Placement = 2;
      var Update = 4;
      var PlacementAndUpdate = 6;
      var Deletion = 8;
      var ContentReset = 16;
      var Callback = 32;
      var DidCapture = 64;
      var Ref = 128;
      var ErrLog = 256;
      var HostEffectMask = 511;
      var Incomplete = 512;
      var ShouldCapture = 1024;
      var MOUNTING = 1;
      var MOUNTED = 2;
      var UNMOUNTED = 3;

      function isFiberMountedImpl(fiber) {
        var node = fiber;

        if (!fiber.alternate) {
          if ((node.effectTag & Placement) !== NoEffect) {
            return MOUNTING;
          }

          while (node["return"]) {
            node = node["return"];

            if ((node.effectTag & Placement) !== NoEffect) {
              return MOUNTING;
            }
          }
        } else {
          while (node["return"]) {
            node = node["return"];
          }
        }

        if (node.tag === HostRoot) {
          return MOUNTED;
        }

        return UNMOUNTED;
      }

      function isFiberMounted(fiber) {
        return isFiberMountedImpl(fiber) === MOUNTED;
      }

      function isMounted(component) {
        {
          var owner = ReactCurrentOwner.current;

          if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            warning(instance._warnedAboutRefsInRender, "%s is accessing isMounted inside its render() function. " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentName(ownerFiber) || "A component");
            instance._warnedAboutRefsInRender = true;
          }
        }
        var fiber = get(component);

        if (!fiber) {
          return false;
        }

        return isFiberMountedImpl(fiber) === MOUNTED;
      }

      function assertIsMounted(fiber) {
        invariant(isFiberMountedImpl(fiber) === MOUNTED, "Unable to find node on an unmounted component.");
      }

      function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;

        if (!alternate) {
          var state = isFiberMountedImpl(fiber);
          invariant(state !== UNMOUNTED, "Unable to find node on an unmounted component.");

          if (state === MOUNTING) {
            return null;
          }

          return fiber;
        }

        var a = fiber;
        var b = alternate;

        while (true) {
          var parentA = a["return"];
          var parentB = parentA ? parentA.alternate : null;

          if (!parentA || !parentB) {
            break;
          }

          if (parentA.child === parentB.child) {
            var child = parentA.child;

            while (child) {
              if (child === a) {
                assertIsMounted(parentA);
                return fiber;
              }

              if (child === b) {
                assertIsMounted(parentA);
                return alternate;
              }

              child = child.sibling;
            }

            invariant(false, "Unable to find node on an unmounted component.");
          }

          if (a["return"] !== b["return"]) {
            a = parentA;
            b = parentB;
          } else {
            var didFindChild = false;
            var _child = parentA.child;

            while (_child) {
              if (_child === a) {
                didFindChild = true;
                a = parentA;
                b = parentB;
                break;
              }

              if (_child === b) {
                didFindChild = true;
                b = parentA;
                a = parentB;
                break;
              }

              _child = _child.sibling;
            }

            if (!didFindChild) {
              _child = parentB.child;

              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentB;
                  b = parentA;
                  break;
                }

                if (_child === b) {
                  didFindChild = true;
                  b = parentB;
                  a = parentA;
                  break;
                }

                _child = _child.sibling;
              }

              invariant(didFindChild, "Child was not found in either parent set. This indicates a bug " + "in React related to the return pointer. Please file an issue.");
            }
          }

          invariant(a.alternate === b, "Return fibers should always be each others' alternates. " + "This error is likely caused by a bug in React. Please file an issue.");
        }

        invariant(a.tag === HostRoot, "Unable to find node on an unmounted component.");

        if (a.stateNode.current === a) {
          return fiber;
        }

        return alternate;
      }

      function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);

        if (!currentParent) {
          return null;
        }

        var node = currentParent;

        while (true) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          } else if (node.child) {
            node.child["return"] = node;
            node = node.child;
            continue;
          }

          if (node === currentParent) {
            return null;
          }

          while (!node.sibling) {
            if (!node["return"] || node["return"] === currentParent) {
              return null;
            }

            node = node["return"];
          }

          node.sibling["return"] = node["return"];
          node = node.sibling;
        }

        return null;
      }

      function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);

        if (!currentParent) {
          return null;
        }

        var node = currentParent;

        while (true) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          } else if (node.child && node.tag !== HostPortal) {
            node.child["return"] = node;
            node = node.child;
            continue;
          }

          if (node === currentParent) {
            return null;
          }

          while (!node.sibling) {
            if (!node["return"] || node["return"] === currentParent) {
              return null;
            }

            node = node["return"];
          }

          node.sibling["return"] = node["return"];
          node = node.sibling;
        }

        return null;
      }

      var valueStack = [];
      var fiberStack = void 0;
      {
        fiberStack = [];
      }
      var index = -1;

      function createCursor(defaultValue) {
        return {
          current: defaultValue
        };
      }

      function pop(cursor, fiber) {
        if (index < 0) {
          {
            warning(false, "Unexpected pop.");
          }
          return;
        }

        {
          if (fiber !== fiberStack[index]) {
            warning(false, "Unexpected Fiber popped.");
          }
        }
        cursor.current = valueStack[index];
        valueStack[index] = null;
        {
          fiberStack[index] = null;
        }
        index--;
      }

      function push(cursor, value, fiber) {
        index++;
        valueStack[index] = cursor.current;
        {
          fiberStack[index] = fiber;
        }
        cursor.current = value;
      }

      function reset() {
        while (index > -1) {
          valueStack[index] = null;
          {
            fiberStack[index] = null;
          }
          index--;
        }
      }

      var describeComponentFrame = function describeComponentFrame(name, source, ownerName) {
        return "\n    in " + (name || "Unknown") + (source ? " (at " + source.fileName.replace(/^.*[\\\/]/, "") + ":" + source.lineNumber + ")" : ownerName ? " (created by " + ownerName + ")" : "");
      };

      function describeFiber(fiber) {
        switch (fiber.tag) {
          case IndeterminateComponent:
          case FunctionalComponent:
          case ClassComponent:
          case HostComponent:
            var owner = fiber._debugOwner;
            var source = fiber._debugSource;
            var name = getComponentName(fiber);
            var ownerName = null;

            if (owner) {
              ownerName = getComponentName(owner);
            }

            return describeComponentFrame(name, source, ownerName);

          default:
            return "";
        }
      }

      function getStackAddendumByWorkInProgressFiber(workInProgress) {
        var info = "";
        var node = workInProgress;

        do {
          info += describeFiber(node);
          node = node["return"];
        } while (node);

        return info;
      }

      function getCurrentFiberOwnerName() {
        {
          var fiber = ReactDebugCurrentFiber.current;

          if (fiber === null) {
            return null;
          }

          var owner = fiber._debugOwner;

          if (owner !== null && typeof owner !== "undefined") {
            return getComponentName(owner);
          }
        }
        return null;
      }

      function getCurrentFiberStackAddendum() {
        {
          var fiber = ReactDebugCurrentFiber.current;

          if (fiber === null) {
            return null;
          }

          return getStackAddendumByWorkInProgressFiber(fiber);
        }
        return null;
      }

      function resetCurrentFiber() {
        ReactDebugCurrentFrame.getCurrentStack = null;
        ReactDebugCurrentFiber.current = null;
        ReactDebugCurrentFiber.phase = null;
      }

      function setCurrentFiber(fiber) {
        ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackAddendum;
        ReactDebugCurrentFiber.current = fiber;
        ReactDebugCurrentFiber.phase = null;
      }

      function setCurrentPhase(phase) {
        ReactDebugCurrentFiber.phase = phase;
      }

      var ReactDebugCurrentFiber = {
        current: null,
        phase: null,
        resetCurrentFiber: resetCurrentFiber,
        setCurrentFiber: setCurrentFiber,
        setCurrentPhase: setCurrentPhase,
        getCurrentFiberOwnerName: getCurrentFiberOwnerName,
        getCurrentFiberStackAddendum: getCurrentFiberStackAddendum
      };

      var _require = _require2(_dependencyMap[15], "ReactFeatureFlags");

      var enableGetDerivedStateFromCatch = _require.enableGetDerivedStateFromCatch;
      var debugRenderPhaseSideEffects = _require.debugRenderPhaseSideEffects;
      var debugRenderPhaseSideEffectsForStrictMode = _require.debugRenderPhaseSideEffectsForStrictMode;
      var warnAboutDeprecatedLifecycles = _require.warnAboutDeprecatedLifecycles;
      var replayFailedUnitOfWorkWithInvokeGuardedCallback = _require.replayFailedUnitOfWorkWithInvokeGuardedCallback;
      var enableUserTimingAPI = true;
      var enableMutatingReconciler = true;
      var enableNoopReconciler = false;
      var enablePersistentReconciler = false;
      var reactEmoji = "\u269B";
      var warningEmoji = "\u26D4";
      var supportsUserTiming = typeof performance !== "undefined" && typeof performance.mark === "function" && typeof performance.clearMarks === "function" && typeof performance.measure === "function" && typeof performance.clearMeasures === "function";
      var currentFiber = null;
      var currentPhase = null;
      var currentPhaseFiber = null;
      var isCommitting = false;
      var hasScheduledUpdateInCurrentCommit = false;
      var hasScheduledUpdateInCurrentPhase = false;
      var commitCountInCurrentWorkLoop = 0;
      var effectCountInCurrentCommit = 0;
      var isWaitingForCallback = false;
      var labelsInCurrentCommit = new Set();

      var formatMarkName = function formatMarkName(markName) {
        return reactEmoji + " " + markName;
      };

      var formatLabel = function formatLabel(label, warning$$1) {
        var prefix = warning$$1 ? warningEmoji + " " : reactEmoji + " ";
        var suffix = warning$$1 ? " Warning: " + warning$$1 : "";
        return "" + prefix + label + suffix;
      };

      var beginMark = function beginMark(markName) {
        performance.mark(formatMarkName(markName));
      };

      var clearMark = function clearMark(markName) {
        performance.clearMarks(formatMarkName(markName));
      };

      var endMark = function endMark(label, markName, warning$$1) {
        var formattedMarkName = formatMarkName(markName);
        var formattedLabel = formatLabel(label, warning$$1);

        try {
          performance.measure(formattedLabel, formattedMarkName);
        } catch (err) {}

        performance.clearMarks(formattedMarkName);
        performance.clearMeasures(formattedLabel);
      };

      var getFiberMarkName = function getFiberMarkName(label, debugID) {
        return label + " (#" + debugID + ")";
      };

      var getFiberLabel = function getFiberLabel(componentName, isMounted, phase) {
        if (phase === null) {
          return componentName + " [" + (isMounted ? "update" : "mount") + "]";
        } else {
          return componentName + "." + phase;
        }
      };

      var beginFiberMark = function beginFiberMark(fiber, phase) {
        var componentName = getComponentName(fiber) || "Unknown";
        var debugID = fiber._debugID;
        var isMounted = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted, phase);

        if (isCommitting && labelsInCurrentCommit.has(label)) {
          return false;
        }

        labelsInCurrentCommit.add(label);
        var markName = getFiberMarkName(label, debugID);
        beginMark(markName);
        return true;
      };

      var clearFiberMark = function clearFiberMark(fiber, phase) {
        var componentName = getComponentName(fiber) || "Unknown";
        var debugID = fiber._debugID;
        var isMounted = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted, phase);
        var markName = getFiberMarkName(label, debugID);
        clearMark(markName);
      };

      var endFiberMark = function endFiberMark(fiber, phase, warning$$1) {
        var componentName = getComponentName(fiber) || "Unknown";
        var debugID = fiber._debugID;
        var isMounted = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted, phase);
        var markName = getFiberMarkName(label, debugID);
        endMark(label, markName, warning$$1);
      };

      var shouldIgnoreFiber = function shouldIgnoreFiber(fiber) {
        switch (fiber.tag) {
          case HostRoot:
          case HostComponent:
          case HostText:
          case HostPortal:
          case CallComponent:
          case ReturnComponent:
          case Fragment:
          case ContextProvider:
          case ContextConsumer:
            return true;

          default:
            return false;
        }
      };

      var clearPendingPhaseMeasurement = function clearPendingPhaseMeasurement() {
        if (currentPhase !== null && currentPhaseFiber !== null) {
          clearFiberMark(currentPhaseFiber, currentPhase);
        }

        currentPhaseFiber = null;
        currentPhase = null;
        hasScheduledUpdateInCurrentPhase = false;
      };

      var pauseTimers = function pauseTimers() {
        var fiber = currentFiber;

        while (fiber) {
          if (fiber._debugIsCurrentlyTiming) {
            endFiberMark(fiber, null, null);
          }

          fiber = fiber["return"];
        }
      };

      var resumeTimersRecursively = function resumeTimersRecursively(fiber) {
        if (fiber["return"] !== null) {
          resumeTimersRecursively(fiber["return"]);
        }

        if (fiber._debugIsCurrentlyTiming) {
          beginFiberMark(fiber, null);
        }
      };

      var resumeTimers = function resumeTimers() {
        if (currentFiber !== null) {
          resumeTimersRecursively(currentFiber);
        }
      };

      function recordEffect() {
        if (enableUserTimingAPI) {
          effectCountInCurrentCommit++;
        }
      }

      function recordScheduleUpdate() {
        if (enableUserTimingAPI) {
          if (isCommitting) {
            hasScheduledUpdateInCurrentCommit = true;
          }

          if (currentPhase !== null && currentPhase !== "componentWillMount" && currentPhase !== "componentWillReceiveProps") {
            hasScheduledUpdateInCurrentPhase = true;
          }
        }
      }

      function startRequestCallbackTimer() {
        if (enableUserTimingAPI) {
          if (supportsUserTiming && !isWaitingForCallback) {
            isWaitingForCallback = true;
            beginMark("(Waiting for async callback...)");
          }
        }
      }

      function stopRequestCallbackTimer(didExpire) {
        if (enableUserTimingAPI) {
          if (supportsUserTiming) {
            isWaitingForCallback = false;
            var warning$$1 = didExpire ? "React was blocked by main thread" : null;
            endMark("(Waiting for async callback...)", "(Waiting for async callback...)", warning$$1);
          }
        }
      }

      function startWorkTimer(fiber) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }

          currentFiber = fiber;

          if (!beginFiberMark(fiber, null)) {
            return;
          }

          fiber._debugIsCurrentlyTiming = true;
        }
      }

      function cancelWorkTimer(fiber) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }

          fiber._debugIsCurrentlyTiming = false;
          clearFiberMark(fiber, null);
        }
      }

      function stopWorkTimer(fiber) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }

          currentFiber = fiber["return"];

          if (!fiber._debugIsCurrentlyTiming) {
            return;
          }

          fiber._debugIsCurrentlyTiming = false;
          endFiberMark(fiber, null, null);
        }
      }

      function stopFailedWorkTimer(fiber) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }

          currentFiber = fiber["return"];

          if (!fiber._debugIsCurrentlyTiming) {
            return;
          }

          fiber._debugIsCurrentlyTiming = false;
          var warning$$1 = "An error was thrown inside this error boundary";
          endFiberMark(fiber, null, warning$$1);
        }
      }

      function startPhaseTimer(fiber, phase) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          clearPendingPhaseMeasurement();

          if (!beginFiberMark(fiber, phase)) {
            return;
          }

          currentPhaseFiber = fiber;
          currentPhase = phase;
        }
      }

      function stopPhaseTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          if (currentPhase !== null && currentPhaseFiber !== null) {
            var warning$$1 = hasScheduledUpdateInCurrentPhase ? "Scheduled a cascading update" : null;
            endFiberMark(currentPhaseFiber, currentPhase, warning$$1);
          }

          currentPhase = null;
          currentPhaseFiber = null;
        }
      }

      function startWorkLoopTimer(nextUnitOfWork) {
        if (enableUserTimingAPI) {
          currentFiber = nextUnitOfWork;

          if (!supportsUserTiming) {
            return;
          }

          commitCountInCurrentWorkLoop = 0;
          beginMark("(React Tree Reconciliation)");
          resumeTimers();
        }
      }

      function stopWorkLoopTimer(interruptedBy) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          var warning$$1 = null;

          if (interruptedBy !== null) {
            if (interruptedBy.tag === HostRoot) {
              warning$$1 = "A top-level update interrupted the previous render";
            } else {
              var componentName = getComponentName(interruptedBy) || "Unknown";
              warning$$1 = "An update to " + componentName + " interrupted the previous render";
            }
          } else if (commitCountInCurrentWorkLoop > 1) {
            warning$$1 = "There were cascading updates";
          }

          commitCountInCurrentWorkLoop = 0;
          pauseTimers();
          endMark("(React Tree Reconciliation)", "(React Tree Reconciliation)", warning$$1);
        }
      }

      function startCommitTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          isCommitting = true;
          hasScheduledUpdateInCurrentCommit = false;
          labelsInCurrentCommit.clear();
          beginMark("(Committing Changes)");
        }
      }

      function stopCommitTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          var warning$$1 = null;

          if (hasScheduledUpdateInCurrentCommit) {
            warning$$1 = "Lifecycle hook scheduled a cascading update";
          } else if (commitCountInCurrentWorkLoop > 0) {
            warning$$1 = "Caused by a cascading update in earlier commit";
          }

          hasScheduledUpdateInCurrentCommit = false;
          commitCountInCurrentWorkLoop++;
          isCommitting = false;
          labelsInCurrentCommit.clear();
          endMark("(Committing Changes)", "(Committing Changes)", warning$$1);
        }
      }

      function startCommitHostEffectsTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          effectCountInCurrentCommit = 0;
          beginMark("(Committing Host Effects)");
        }
      }

      function stopCommitHostEffectsTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          var count = effectCountInCurrentCommit;
          effectCountInCurrentCommit = 0;
          endMark("(Committing Host Effects: " + count + " Total)", "(Committing Host Effects)", null);
        }
      }

      function startCommitLifeCyclesTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          effectCountInCurrentCommit = 0;
          beginMark("(Calling Lifecycle Methods)");
        }
      }

      function stopCommitLifeCyclesTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          var count = effectCountInCurrentCommit;
          effectCountInCurrentCommit = 0;
          endMark("(Calling Lifecycle Methods: " + count + " Total)", "(Calling Lifecycle Methods)", null);
        }
      }

      var warnedAboutMissingGetChildContext = void 0;
      {
        warnedAboutMissingGetChildContext = {};
      }
      var contextStackCursor = createCursor(emptyObject);
      var didPerformWorkStackCursor = createCursor(false);
      var previousContext = emptyObject;

      function getUnmaskedContext(workInProgress) {
        var hasOwnContext = isContextProvider(workInProgress);

        if (hasOwnContext) {
          return previousContext;
        }

        return contextStackCursor.current;
      }

      function cacheContext(workInProgress, unmaskedContext, maskedContext) {
        var instance = workInProgress.stateNode;
        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
      }

      function getMaskedContext(workInProgress, unmaskedContext) {
        var type = workInProgress.type;
        var contextTypes = type.contextTypes;

        if (!contextTypes) {
          return emptyObject;
        }

        var instance = workInProgress.stateNode;

        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
          return instance.__reactInternalMemoizedMaskedChildContext;
        }

        var context = {};

        for (var key in contextTypes) {
          context[key] = unmaskedContext[key];
        }

        {
          var name = getComponentName(workInProgress) || "Unknown";
          checkPropTypes(contextTypes, context, "context", name, ReactDebugCurrentFiber.getCurrentFiberStackAddendum);
        }

        if (instance) {
          cacheContext(workInProgress, unmaskedContext, context);
        }

        return context;
      }

      function hasContextChanged() {
        return didPerformWorkStackCursor.current;
      }

      function isContextConsumer(fiber) {
        return fiber.tag === ClassComponent && fiber.type.contextTypes != null;
      }

      function isContextProvider(fiber) {
        return fiber.tag === ClassComponent && fiber.type.childContextTypes != null;
      }

      function popContextProvider(fiber) {
        if (!isContextProvider(fiber)) {
          return;
        }

        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
      }

      function popTopLevelContextObject(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
      }

      function pushTopLevelContextObject(fiber, context, didChange) {
        invariant(contextStackCursor.cursor == null, "Unexpected context found on stack. " + "This error is likely caused by a bug in React. Please file an issue.");
        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
      }

      function processChildContext(fiber, parentContext) {
        var instance = fiber.stateNode;
        var childContextTypes = fiber.type.childContextTypes;

        if (typeof instance.getChildContext !== "function") {
          {
            var componentName = getComponentName(fiber) || "Unknown";

            if (!warnedAboutMissingGetChildContext[componentName]) {
              warnedAboutMissingGetChildContext[componentName] = true;
              warning(false, "%s.childContextTypes is specified but there is no getChildContext() method " + "on the instance. You can either define getChildContext() on %s or remove " + "childContextTypes from it.", componentName, componentName);
            }
          }
          return parentContext;
        }

        var childContext = void 0;
        {
          ReactDebugCurrentFiber.setCurrentPhase("getChildContext");
        }
        startPhaseTimer(fiber, "getChildContext");
        childContext = instance.getChildContext();
        stopPhaseTimer();
        {
          ReactDebugCurrentFiber.setCurrentPhase(null);
        }

        for (var contextKey in childContext) {
          invariant(contextKey in childContextTypes, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(fiber) || "Unknown", contextKey);
        }

        {
          var name = getComponentName(fiber) || "Unknown";
          checkPropTypes(childContextTypes, childContext, "child context", name, ReactDebugCurrentFiber.getCurrentFiberStackAddendum);
        }
        return _extends({}, parentContext, childContext);
      }

      function pushContextProvider(workInProgress) {
        if (!isContextProvider(workInProgress)) {
          return false;
        }

        var instance = workInProgress.stateNode;
        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyObject;
        previousContext = contextStackCursor.current;
        push(contextStackCursor, memoizedMergedChildContext, workInProgress);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
        return true;
      }

      function invalidateContextProvider(workInProgress, didChange) {
        var instance = workInProgress.stateNode;
        invariant(instance, "Expected to have an instance by this point. " + "This error is likely caused by a bug in React. Please file an issue.");

        if (didChange) {
          var mergedContext = processChildContext(workInProgress, previousContext);
          instance.__reactInternalMemoizedMergedChildContext = mergedContext;
          pop(didPerformWorkStackCursor, workInProgress);
          pop(contextStackCursor, workInProgress);
          push(contextStackCursor, mergedContext, workInProgress);
          push(didPerformWorkStackCursor, didChange, workInProgress);
        } else {
          pop(didPerformWorkStackCursor, workInProgress);
          push(didPerformWorkStackCursor, didChange, workInProgress);
        }
      }

      function resetContext() {
        previousContext = emptyObject;
        contextStackCursor.current = emptyObject;
        didPerformWorkStackCursor.current = false;
      }

      function findCurrentUnmaskedContext(fiber) {
        invariant(isFiberMounted(fiber) && fiber.tag === ClassComponent, "Expected subtree parent to be a mounted class component. " + "This error is likely caused by a bug in React. Please file an issue.");
        var node = fiber;

        while (node.tag !== HostRoot) {
          if (isContextProvider(node)) {
            return node.stateNode.__reactInternalMemoizedMergedChildContext;
          }

          var parent = node["return"];
          invariant(parent, "Found unexpected detached subtree parent. " + "This error is likely caused by a bug in React. Please file an issue.");
          node = parent;
        }

        return node.stateNode.context;
      }

      var MAX_SIGNED_31_BIT_INT = 1073741823;
      var NoWork = 0;
      var Sync = 1;
      var Never = MAX_SIGNED_31_BIT_INT;
      var UNIT_SIZE = 10;
      var MAGIC_NUMBER_OFFSET = 2;

      function msToExpirationTime(ms) {
        return (ms / UNIT_SIZE | 0) + MAGIC_NUMBER_OFFSET;
      }

      function expirationTimeToMs(expirationTime) {
        return (expirationTime - MAGIC_NUMBER_OFFSET) * UNIT_SIZE;
      }

      function ceiling(num, precision) {
        return ((num / precision | 0) + 1) * precision;
      }

      function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
        return ceiling(currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
      }

      var NoContext = 0;
      var AsyncMode = 1;
      var StrictMode = 2;
      var hasBadMapPolyfill = void 0;
      {
        hasBadMapPolyfill = false;

        try {
          var nonExtensibleObject = Object.preventExtensions({});
          var testMap = new Map([[nonExtensibleObject, null]]);
          var testSet = new Set([nonExtensibleObject]);
          testMap.set(0, 0);
          testSet.add(0);
        } catch (e) {
          hasBadMapPolyfill = true;
        }
      }
      var debugCounter = void 0;
      {
        debugCounter = 1;
      }

      function FiberNode(tag, pendingProps, key, mode) {
        this.tag = tag;
        this.key = key;
        this.type = null;
        this.stateNode = null;
        this["return"] = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.mode = mode;
        this.effectTag = NoEffect;
        this.nextEffect = null;
        this.firstEffect = null;
        this.lastEffect = null;
        this.expirationTime = NoWork;
        this.alternate = null;
        {
          this._debugID = debugCounter++;
          this._debugSource = null;
          this._debugOwner = null;
          this._debugIsCurrentlyTiming = false;

          if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
            Object.preventExtensions(this);
          }
        }
      }

      var createFiber = function createFiber(tag, pendingProps, key, mode) {
        return new FiberNode(tag, pendingProps, key, mode);
      };

      function shouldConstruct(Component) {
        return !!(Component.prototype && Component.prototype.isReactComponent);
      }

      function createWorkInProgress(current, pendingProps, expirationTime) {
        var workInProgress = current.alternate;

        if (workInProgress === null) {
          workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
          workInProgress.type = current.type;
          workInProgress.stateNode = current.stateNode;
          {
            workInProgress._debugID = current._debugID;
            workInProgress._debugSource = current._debugSource;
            workInProgress._debugOwner = current._debugOwner;
          }
          workInProgress.alternate = current;
          current.alternate = workInProgress;
        } else {
          workInProgress.pendingProps = pendingProps;
          workInProgress.effectTag = NoEffect;
          workInProgress.nextEffect = null;
          workInProgress.firstEffect = null;
          workInProgress.lastEffect = null;
        }

        workInProgress.expirationTime = expirationTime;
        workInProgress.child = current.child;
        workInProgress.memoizedProps = current.memoizedProps;
        workInProgress.memoizedState = current.memoizedState;
        workInProgress.updateQueue = current.updateQueue;
        workInProgress.sibling = current.sibling;
        workInProgress.index = current.index;
        workInProgress.ref = current.ref;
        return workInProgress;
      }

      function createHostRootFiber(isAsync) {
        var mode = isAsync ? AsyncMode | StrictMode : NoContext;
        return createFiber(HostRoot, null, null, mode);
      }

      function createFiberFromElement(element, mode, expirationTime) {
        var owner = null;
        {
          owner = element._owner;
        }
        var fiber = void 0;
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiberTag = void 0;

        if (typeof type === "function") {
          fiberTag = shouldConstruct(type) ? ClassComponent : IndeterminateComponent;
        } else if (typeof type === "string") {
          fiberTag = HostComponent;
        } else {
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

            case REACT_ASYNC_MODE_TYPE:
              fiberTag = Mode;
              mode |= AsyncMode | StrictMode;
              break;

            case REACT_STRICT_MODE_TYPE:
              fiberTag = Mode;
              mode |= StrictMode;
              break;

            case REACT_CALL_TYPE:
              fiberTag = CallComponent;
              break;

            case REACT_RETURN_TYPE:
              fiberTag = ReturnComponent;
              break;

            default:
              {
                if (typeof type === "object" && type !== null) {
                  switch (type.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                      fiberTag = ContextProvider;
                      break;

                    case REACT_CONTEXT_TYPE:
                      fiberTag = ContextConsumer;
                      break;

                    default:
                      if (typeof type.tag === "number") {
                        fiber = type;
                        fiber.pendingProps = pendingProps;
                        fiber.expirationTime = expirationTime;
                        return fiber;
                      } else {
                        throwOnInvalidElementType(type, owner);
                      }

                      break;
                  }
                } else {
                  throwOnInvalidElementType(type, owner);
                }
              }
          }
        }

        fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.type = type;
        fiber.expirationTime = expirationTime;
        {
          fiber._debugSource = element._source;
          fiber._debugOwner = element._owner;
        }
        return fiber;
      }

      function throwOnInvalidElementType(type, owner) {
        var info = "";
        {
          if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
            info += " You likely forgot to export your component from the file " + "it's defined in, or you might have mixed up default and " + "named imports.";
          }

          var ownerName = owner ? getComponentName(owner) : null;

          if (ownerName) {
            info += "\n\nCheck the render method of `" + ownerName + "`.";
          }
        }
        invariant(false, "Element type is invalid: expected a string (for built-in " + "components) or a class/function (for composite components) " + "but got: %s.%s", type == null ? type : typeof type, info);
      }

      function createFiberFromFragment(elements, mode, expirationTime, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.expirationTime = expirationTime;
        return fiber;
      }

      function createFiberFromText(content, mode, expirationTime) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.expirationTime = expirationTime;
        return fiber;
      }

      function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoContext);
        fiber.type = "DELETED";
        return fiber;
      }

      function createFiberFromPortal(portal, mode, expirationTime) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.expirationTime = expirationTime;
        fiber.stateNode = {
          containerInfo: portal.containerInfo,
          pendingChildren: null,
          implementation: portal.implementation
        };
        return fiber;
      }

      function createFiberRoot(containerInfo, isAsync, hydrate) {
        var uninitializedFiber = createHostRootFiber(isAsync);
        var root = {
          current: uninitializedFiber,
          containerInfo: containerInfo,
          pendingChildren: null,
          pendingCommitExpirationTime: NoWork,
          finishedWork: null,
          context: null,
          pendingContext: null,
          hydrate: hydrate,
          remainingExpirationTime: NoWork,
          firstBatch: null,
          nextScheduledRoot: null
        };
        uninitializedFiber.stateNode = root;
        return root;
      }

      var onCommitFiberRoot = null;
      var onCommitFiberUnmount = null;
      var hasLoggedError = false;

      function catchErrors(fn) {
        return function (arg) {
          try {
            return fn(arg);
          } catch (err) {
            if (true && !hasLoggedError) {
              hasLoggedError = true;
              warning(false, "React DevTools encountered an error: %s", err);
            }
          }
        };
      }

      function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
          return false;
        }

        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

        if (hook.isDisabled) {
          return true;
        }

        if (!hook.supportsFiber) {
          {
            warning(false, "The installed version of React DevTools is too old and will not work " + "with the current version of React. Please update React DevTools. " + "https://fb.me/react-devtools");
          }
          return true;
        }

        try {
          var rendererID = hook.inject(internals);
          onCommitFiberRoot = catchErrors(function (root) {
            return hook.onCommitFiberRoot(rendererID, root);
          });
          onCommitFiberUnmount = catchErrors(function (fiber) {
            return hook.onCommitFiberUnmount(rendererID, fiber);
          });
        } catch (err) {
          {
            warning(false, "React DevTools encountered an error: %s.", err);
          }
        }

        return true;
      }

      function onCommitRoot(root) {
        if (typeof onCommitFiberRoot === "function") {
          onCommitFiberRoot(root);
        }
      }

      function onCommitUnmount(fiber) {
        if (typeof onCommitFiberUnmount === "function") {
          onCommitFiberUnmount(fiber);
        }
      }

      var lowPriorityWarning = function lowPriorityWarning() {};

      {
        var printWarning = function printWarning(format) {
          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          var argIndex = 0;
          var message = "Warning: " + format.replace(/%s/g, function () {
            return args[argIndex++];
          });

          if (typeof console !== "undefined") {
            console.warn(message);
          }

          try {
            throw new Error(message);
          } catch (x) {}
        };

        lowPriorityWarning = function lowPriorityWarning(condition, format) {
          if (format === undefined) {
            throw new Error("`warning(condition, format, ...args)` requires a warning " + "message argument");
          }

          if (!condition) {
            for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
              args[_key2 - 2] = arguments[_key2];
            }

            printWarning.apply(undefined, [format].concat(args));
          }
        };
      }
      var lowPriorityWarning$1 = lowPriorityWarning;
      var ReactStrictModeWarnings = {
        discardPendingWarnings: function discardPendingWarnings() {},
        flushPendingDeprecationWarnings: function flushPendingDeprecationWarnings() {},
        flushPendingUnsafeLifecycleWarnings: function flushPendingUnsafeLifecycleWarnings() {},
        recordDeprecationWarnings: function recordDeprecationWarnings(fiber, instance) {},
        recordUnsafeLifecycleWarnings: function recordUnsafeLifecycleWarnings(fiber, instance) {}
      };
      {
        var LIFECYCLE_SUGGESTIONS = {
          UNSAFE_componentWillMount: "componentDidMount",
          UNSAFE_componentWillReceiveProps: "static getDerivedStateFromProps",
          UNSAFE_componentWillUpdate: "componentDidUpdate"
        };
        var pendingComponentWillMountWarnings = [];
        var pendingComponentWillReceivePropsWarnings = [];
        var pendingComponentWillUpdateWarnings = [];
        var pendingUnsafeLifecycleWarnings = new Map();
        var didWarnAboutDeprecatedLifecycles = new Set();
        var didWarnAboutUnsafeLifecycles = new Set();

        ReactStrictModeWarnings.discardPendingWarnings = function () {
          pendingComponentWillMountWarnings = [];
          pendingComponentWillReceivePropsWarnings = [];
          pendingComponentWillUpdateWarnings = [];
          pendingUnsafeLifecycleWarnings = new Map();
        };

        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
          pendingUnsafeLifecycleWarnings.forEach(function (lifecycleWarningsMap, strictRoot) {
            var lifecyclesWarningMesages = [];
            Object.keys(lifecycleWarningsMap).forEach(function (lifecycle) {
              var lifecycleWarnings = lifecycleWarningsMap[lifecycle];

              if (lifecycleWarnings.length > 0) {
                var componentNames = new Set();
                lifecycleWarnings.forEach(function (fiber) {
                  componentNames.add(getComponentName(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                var formatted = lifecycle.replace("UNSAFE_", "");
                var suggestion = LIFECYCLE_SUGGESTIONS[lifecycle];
                var sortedComponentNames = Array.from(componentNames).sort().join(", ");
                lifecyclesWarningMesages.push(formatted + ": Please update the following components to use " + (suggestion + " instead: " + sortedComponentNames));
              }
            });

            if (lifecyclesWarningMesages.length > 0) {
              var strictRootComponentStack = getStackAddendumByWorkInProgressFiber(strictRoot);
              warning(false, "Unsafe lifecycle methods were found within a strict-mode tree:%s" + "\n\n%s" + "\n\nLearn more about this warning here:" + "\nhttps://fb.me/react-strict-mode-warnings", strictRootComponentStack, lifecyclesWarningMesages.join("\n\n"));
            }
          });
          pendingUnsafeLifecycleWarnings = new Map();
        };

        var getStrictRoot = function getStrictRoot(fiber) {
          var maybeStrictRoot = null;

          while (fiber !== null) {
            if (fiber.mode & StrictMode) {
              maybeStrictRoot = fiber;
            }

            fiber = fiber["return"];
          }

          return maybeStrictRoot;
        };

        ReactStrictModeWarnings.flushPendingDeprecationWarnings = function () {
          if (pendingComponentWillMountWarnings.length > 0) {
            var uniqueNames = new Set();
            pendingComponentWillMountWarnings.forEach(function (fiber) {
              uniqueNames.add(getComponentName(fiber) || "Component");
              didWarnAboutDeprecatedLifecycles.add(fiber.type);
            });
            var sortedNames = Array.from(uniqueNames).sort().join(", ");
            lowPriorityWarning$1(false, "componentWillMount is deprecated and will be removed in the next major version. " + "Use componentDidMount instead. As a temporary workaround, " + "you can rename to UNSAFE_componentWillMount." + "\n\nPlease update the following components: %s" + "\n\nLearn more about this warning here:" + "\nhttps://fb.me/react-async-component-lifecycle-hooks", sortedNames);
            pendingComponentWillMountWarnings = [];
          }

          if (pendingComponentWillReceivePropsWarnings.length > 0) {
            var _uniqueNames = new Set();

            pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
              _uniqueNames.add(getComponentName(fiber) || "Component");

              didWarnAboutDeprecatedLifecycles.add(fiber.type);
            });

            var _sortedNames = Array.from(_uniqueNames).sort().join(", ");

            lowPriorityWarning$1(false, "componentWillReceiveProps is deprecated and will be removed in the next major version. " + "Use static getDerivedStateFromProps instead." + "\n\nPlease update the following components: %s" + "\n\nLearn more about this warning here:" + "\nhttps://fb.me/react-async-component-lifecycle-hooks", _sortedNames);
            pendingComponentWillReceivePropsWarnings = [];
          }

          if (pendingComponentWillUpdateWarnings.length > 0) {
            var _uniqueNames2 = new Set();

            pendingComponentWillUpdateWarnings.forEach(function (fiber) {
              _uniqueNames2.add(getComponentName(fiber) || "Component");

              didWarnAboutDeprecatedLifecycles.add(fiber.type);
            });

            var _sortedNames2 = Array.from(_uniqueNames2).sort().join(", ");

            lowPriorityWarning$1(false, "componentWillUpdate is deprecated and will be removed in the next major version. " + "Use componentDidUpdate instead. As a temporary workaround, " + "you can rename to UNSAFE_componentWillUpdate." + "\n\nPlease update the following components: %s" + "\n\nLearn more about this warning here:" + "\nhttps://fb.me/react-async-component-lifecycle-hooks", _sortedNames2);
            pendingComponentWillUpdateWarnings = [];
          }
        };

        ReactStrictModeWarnings.recordDeprecationWarnings = function (fiber, instance) {
          if (didWarnAboutDeprecatedLifecycles.has(fiber.type)) {
            return;
          }

          if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
            pendingComponentWillMountWarnings.push(fiber);
          }

          if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
            pendingComponentWillReceivePropsWarnings.push(fiber);
          }

          if (typeof instance.componentWillUpdate === "function") {
            pendingComponentWillUpdateWarnings.push(fiber);
          }
        };

        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
          var strictRoot = getStrictRoot(fiber);

          if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
            return;
          }

          if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning === true) {
            return;
          }

          var warningsForRoot = void 0;

          if (!pendingUnsafeLifecycleWarnings.has(strictRoot)) {
            warningsForRoot = {
              UNSAFE_componentWillMount: [],
              UNSAFE_componentWillReceiveProps: [],
              UNSAFE_componentWillUpdate: []
            };
            pendingUnsafeLifecycleWarnings.set(strictRoot, warningsForRoot);
          } else {
            warningsForRoot = pendingUnsafeLifecycleWarnings.get(strictRoot);
          }

          var unsafeLifecycles = [];

          if (typeof instance.componentWillMount === "function" || typeof instance.UNSAFE_componentWillMount === "function") {
            unsafeLifecycles.push("UNSAFE_componentWillMount");
          }

          if (typeof instance.componentWillReceiveProps === "function" || typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            unsafeLifecycles.push("UNSAFE_componentWillReceiveProps");
          }

          if (typeof instance.componentWillUpdate === "function" || typeof instance.UNSAFE_componentWillUpdate === "function") {
            unsafeLifecycles.push("UNSAFE_componentWillUpdate");
          }

          if (unsafeLifecycles.length > 0) {
            unsafeLifecycles.forEach(function (lifecycle) {
              warningsForRoot[lifecycle].push(fiber);
            });
          }
        };
      }
      var didWarnUpdateInsideUpdate = void 0;
      {
        didWarnUpdateInsideUpdate = false;
      }

      function createUpdateQueue(baseState) {
        var queue = {
          baseState: baseState,
          expirationTime: NoWork,
          first: null,
          last: null,
          callbackList: null,
          hasForceUpdate: false,
          isInitialized: false,
          capturedValues: null
        };
        {
          queue.isProcessing = false;
        }
        return queue;
      }

      function insertUpdateIntoQueue(queue, update) {
        if (queue.last === null) {
          queue.first = queue.last = update;
        } else {
          queue.last.next = update;
          queue.last = update;
        }

        if (queue.expirationTime === NoWork || queue.expirationTime > update.expirationTime) {
          queue.expirationTime = update.expirationTime;
        }
      }

      var q1 = void 0;
      var q2 = void 0;

      function ensureUpdateQueues(fiber) {
        q1 = q2 = null;
        var alternateFiber = fiber.alternate;
        var queue1 = fiber.updateQueue;

        if (queue1 === null) {
          queue1 = fiber.updateQueue = createUpdateQueue(null);
        }

        var queue2 = void 0;

        if (alternateFiber !== null) {
          queue2 = alternateFiber.updateQueue;

          if (queue2 === null) {
            queue2 = alternateFiber.updateQueue = createUpdateQueue(null);
          }
        } else {
          queue2 = null;
        }

        queue2 = queue2 !== queue1 ? queue2 : null;
        q1 = queue1;
        q2 = queue2;
      }

      function insertUpdateIntoFiber(fiber, update) {
        ensureUpdateQueues(fiber);
        var queue1 = q1;
        var queue2 = q2;
        {
          if ((queue1.isProcessing || queue2 !== null && queue2.isProcessing) && !didWarnUpdateInsideUpdate) {
            warning(false, "An update (setState, replaceState, or forceUpdate) was scheduled " + "from inside an update function. Update functions should be pure, " + "with zero side-effects. Consider using componentDidUpdate or a " + "callback.");
            didWarnUpdateInsideUpdate = true;
          }
        }

        if (queue2 === null) {
          insertUpdateIntoQueue(queue1, update);
          return;
        }

        if (queue1.last === null || queue2.last === null) {
          insertUpdateIntoQueue(queue1, update);
          insertUpdateIntoQueue(queue2, update);
          return;
        }

        insertUpdateIntoQueue(queue1, update);
        queue2.last = update;
      }

      function getUpdateExpirationTime(fiber) {
        switch (fiber.tag) {
          case HostRoot:
          case ClassComponent:
            var updateQueue = fiber.updateQueue;

            if (updateQueue === null) {
              return NoWork;
            }

            return updateQueue.expirationTime;

          default:
            return NoWork;
        }
      }

      function getStateFromUpdate(update, instance, prevState, props) {
        var partialState = update.partialState;

        if (typeof partialState === "function") {
          return partialState.call(instance, prevState, props);
        } else {
          return partialState;
        }
      }

      function processUpdateQueue(current, workInProgress, queue, instance, props, renderExpirationTime) {
        if (current !== null && current.updateQueue === queue) {
          var currentQueue = queue;
          queue = workInProgress.updateQueue = {
            baseState: currentQueue.baseState,
            expirationTime: currentQueue.expirationTime,
            first: currentQueue.first,
            last: currentQueue.last,
            isInitialized: currentQueue.isInitialized,
            capturedValues: currentQueue.capturedValues,
            callbackList: null,
            hasForceUpdate: false
          };
        }

        {
          queue.isProcessing = true;
        }
        queue.expirationTime = NoWork;
        var state = void 0;

        if (queue.isInitialized) {
          state = queue.baseState;
        } else {
          state = queue.baseState = workInProgress.memoizedState;
          queue.isInitialized = true;
        }

        var dontMutatePrevState = true;
        var update = queue.first;
        var didSkip = false;

        while (update !== null) {
          var updateExpirationTime = update.expirationTime;

          if (updateExpirationTime > renderExpirationTime) {
            var remainingExpirationTime = queue.expirationTime;

            if (remainingExpirationTime === NoWork || remainingExpirationTime > updateExpirationTime) {
              queue.expirationTime = updateExpirationTime;
            }

            if (!didSkip) {
              didSkip = true;
              queue.baseState = state;
            }

            update = update.next;
            continue;
          }

          if (!didSkip) {
            queue.first = update.next;

            if (queue.first === null) {
              queue.last = null;
            }
          }

          if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
            getStateFromUpdate(update, instance, state, props);
          }

          var _partialState = void 0;

          if (update.isReplace) {
            state = getStateFromUpdate(update, instance, state, props);
            dontMutatePrevState = true;
          } else {
            _partialState = getStateFromUpdate(update, instance, state, props);

            if (_partialState) {
              if (dontMutatePrevState) {
                state = _extends({}, state, _partialState);
              } else {
                state = _extends(state, _partialState);
              }

              dontMutatePrevState = false;
            }
          }

          if (update.isForced) {
            queue.hasForceUpdate = true;
          }

          if (update.callback !== null) {
            var _callbackList = queue.callbackList;

            if (_callbackList === null) {
              _callbackList = queue.callbackList = [];
            }

            _callbackList.push(update);
          }

          if (update.capturedValue !== null) {
            var _capturedValues = queue.capturedValues;

            if (_capturedValues === null) {
              queue.capturedValues = [update.capturedValue];
            } else {
              _capturedValues.push(update.capturedValue);
            }
          }

          update = update.next;
        }

        if (queue.callbackList !== null) {
          workInProgress.effectTag |= Callback;
        } else if (queue.first === null && !queue.hasForceUpdate && queue.capturedValues === null) {
          workInProgress.updateQueue = null;
        }

        if (!didSkip) {
          didSkip = true;
          queue.baseState = state;
        }

        {
          queue.isProcessing = false;
        }
        return state;
      }

      function commitCallbacks(queue, context) {
        var callbackList = queue.callbackList;

        if (callbackList === null) {
          return;
        }

        queue.callbackList = null;

        for (var i = 0; i < callbackList.length; i++) {
          var update = callbackList[i];
          var _callback = update.callback;
          update.callback = null;
          invariant(typeof _callback === "function", "Invalid argument passed as callback. Expected a function. Instead " + "received: %s", _callback);

          _callback.call(context);
        }
      }

      var fakeInternalInstance = {};
      var isArray = Array.isArray;
      var didWarnAboutStateAssignmentForComponent = void 0;
      var didWarnAboutUndefinedDerivedState = void 0;
      var didWarnAboutUninitializedState = void 0;
      var didWarnAboutWillReceivePropsAndDerivedState = void 0;
      var warnOnInvalidCallback = void 0;
      {
        didWarnAboutStateAssignmentForComponent = {};
        didWarnAboutUndefinedDerivedState = {};
        didWarnAboutUninitializedState = {};
        didWarnAboutWillReceivePropsAndDerivedState = {};
        var didWarnOnInvalidCallback = {};

        warnOnInvalidCallback = function warnOnInvalidCallback(callback, callerName) {
          if (callback === null || typeof callback === "function") {
            return;
          }

          var key = callerName + "_" + callback;

          if (!didWarnOnInvalidCallback[key]) {
            warning(false, "%s(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callerName, callback);
            didWarnOnInvalidCallback[key] = true;
          }
        };

        Object.defineProperty(fakeInternalInstance, "_processChildContext", {
          enumerable: false,
          value: function value() {
            invariant(false, "_processChildContext is not available in React 16+. This likely " + "means you have multiple copies of React and are attempting to nest " + "a React 15 tree inside a React 16 tree using " + "unstable_renderSubtreeIntoContainer, which isn't supported. Try " + "to make sure you have only one copy of React (and ideally, switch " + "to ReactDOM.createPortal).");
          }
        });
        Object.freeze(fakeInternalInstance);
      }

      function callGetDerivedStateFromCatch(ctor, capturedValues) {
        var resultState = {};

        for (var i = 0; i < capturedValues.length; i++) {
          var capturedValue = capturedValues[i];
          var error = capturedValue.value;
          var partialState = ctor.getDerivedStateFromCatch.call(null, error);

          if (partialState !== null && partialState !== undefined) {
            _extends(resultState, partialState);
          }
        }

        return resultState;
      }

      var ReactFiberClassComponent = function ReactFiberClassComponent(scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState) {
        var updater = {
          isMounted: isMounted,
          enqueueSetState: function enqueueSetState(instance, partialState, callback) {
            var fiber = get(instance);
            callback = callback === undefined ? null : callback;
            {
              warnOnInvalidCallback(callback, "setState");
            }
            var expirationTime = computeExpirationForFiber(fiber);
            var update = {
              expirationTime: expirationTime,
              partialState: partialState,
              callback: callback,
              isReplace: false,
              isForced: false,
              capturedValue: null,
              next: null
            };
            insertUpdateIntoFiber(fiber, update);
            scheduleWork(fiber, expirationTime);
          },
          enqueueReplaceState: function enqueueReplaceState(instance, state, callback) {
            var fiber = get(instance);
            callback = callback === undefined ? null : callback;
            {
              warnOnInvalidCallback(callback, "replaceState");
            }
            var expirationTime = computeExpirationForFiber(fiber);
            var update = {
              expirationTime: expirationTime,
              partialState: state,
              callback: callback,
              isReplace: true,
              isForced: false,
              capturedValue: null,
              next: null
            };
            insertUpdateIntoFiber(fiber, update);
            scheduleWork(fiber, expirationTime);
          },
          enqueueForceUpdate: function enqueueForceUpdate(instance, callback) {
            var fiber = get(instance);
            callback = callback === undefined ? null : callback;
            {
              warnOnInvalidCallback(callback, "forceUpdate");
            }
            var expirationTime = computeExpirationForFiber(fiber);
            var update = {
              expirationTime: expirationTime,
              partialState: null,
              callback: callback,
              isReplace: false,
              isForced: true,
              capturedValue: null,
              next: null
            };
            insertUpdateIntoFiber(fiber, update);
            scheduleWork(fiber, expirationTime);
          }
        };

        function checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext) {
          if (oldProps === null || workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate) {
            return true;
          }

          var instance = workInProgress.stateNode;
          var ctor = workInProgress.type;

          if (typeof instance.shouldComponentUpdate === "function") {
            startPhaseTimer(workInProgress, "shouldComponentUpdate");
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, newContext);
            stopPhaseTimer();
            {
              warning(shouldUpdate !== undefined, "%s.shouldComponentUpdate(): Returned undefined instead of a " + "boolean value. Make sure to return true or false.", getComponentName(workInProgress) || "Unknown");
            }
            return shouldUpdate;
          }

          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }

          return true;
        }

        function checkClassInstance(workInProgress) {
          var instance = workInProgress.stateNode;
          var type = workInProgress.type;
          {
            var name = getComponentName(workInProgress);
            var renderPresent = instance.render;

            if (!renderPresent) {
              if (type.prototype && typeof type.prototype.render === "function") {
                warning(false, "%s(...): No `render` method found on the returned component " + "instance: did you accidentally return an object from the constructor?", name);
              } else {
                warning(false, "%s(...): No `render` method found on the returned component " + "instance: you may have forgotten to define `render`.", name);
              }
            }

            var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
            warning(noGetInitialStateOnES6, "getInitialState was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Did you mean to define a state property instead?", name);
            var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
            warning(noGetDefaultPropsOnES6, "getDefaultProps was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Use a static property to define defaultProps instead.", name);
            var noInstancePropTypes = !instance.propTypes;
            warning(noInstancePropTypes, "propTypes was defined as an instance property on %s. Use a static " + "property to define propTypes instead.", name);
            var noInstanceContextTypes = !instance.contextTypes;
            warning(noInstanceContextTypes, "contextTypes was defined as an instance property on %s. Use a static " + "property to define contextTypes instead.", name);
            var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== "function";
            warning(noComponentShouldUpdate, "%s has a method called " + "componentShouldUpdate(). Did you mean shouldComponentUpdate()? " + "The name is phrased as a question because the function is " + "expected to return a value.", name);

            if (type.prototype && type.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              warning(false, "%s has a method called shouldComponentUpdate(). " + "shouldComponentUpdate should not be used when extending React.PureComponent. " + "Please extend React.Component if shouldComponentUpdate is used.", getComponentName(workInProgress) || "A pure component");
            }

            var noComponentDidUnmount = typeof instance.componentDidUnmount !== "function";
            warning(noComponentDidUnmount, "%s has a method called " + "componentDidUnmount(). But there is no such lifecycle method. " + "Did you mean componentWillUnmount()?", name);
            var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== "function";
            warning(noComponentDidReceiveProps, "%s has a method called " + "componentDidReceiveProps(). But there is no such lifecycle method. " + "If you meant to update the state in response to changing props, " + "use componentWillReceiveProps(). If you meant to fetch data or " + "run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== "function";
            warning(noComponentWillRecieveProps, "%s has a method called " + "componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            var noUnsafeComponentWillRecieveProps = typeof instance.UNSAFE_componentWillRecieveProps !== "function";
            warning(noUnsafeComponentWillRecieveProps, "%s has a method called " + "UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            var hasMutatedProps = instance.props !== workInProgress.pendingProps;
            warning(instance.props === undefined || !hasMutatedProps, "%s(...): When calling super() in `%s`, make sure to pass " + "up the same props that your component's constructor was passed.", name, name);
            var noInstanceDefaultProps = !instance.defaultProps;
            warning(noInstanceDefaultProps, "Setting defaultProps as an instance property on %s is not supported and will be ignored." + " Instead, define defaultProps as a static property on %s.", name, name);
          }
          var state = instance.state;

          if (state && (typeof state !== "object" || isArray(state))) {
            warning(false, "%s.state: must be set to an object or null", getComponentName(workInProgress));
          }

          if (typeof instance.getChildContext === "function") {
            warning(typeof type.childContextTypes === "object", "%s.getChildContext(): childContextTypes must be defined in order to " + "use getChildContext().", getComponentName(workInProgress));
          }
        }

        function resetInputPointers(workInProgress, instance) {
          instance.props = workInProgress.memoizedProps;
          instance.state = workInProgress.memoizedState;
        }

        function adoptClassInstance(workInProgress, instance) {
          instance.updater = updater;
          workInProgress.stateNode = instance;
          set(instance, workInProgress);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }

        function constructClassInstance(workInProgress, props) {
          var ctor = workInProgress.type;
          var unmaskedContext = getUnmaskedContext(workInProgress);
          var needsContext = isContextConsumer(workInProgress);
          var context = needsContext ? getMaskedContext(workInProgress, unmaskedContext) : emptyObject;

          if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
            new ctor(props, context);
          }

          var instance = new ctor(props, context);
          var state = instance.state !== null && instance.state !== undefined ? instance.state : null;
          adoptClassInstance(workInProgress, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentName(workInProgress) || "Unknown";

              if (!didWarnAboutUninitializedState[componentName]) {
                warning(false, "%s: Did not properly initialize state during construction. " + "Expected state to be an object, but it was %s.", componentName, instance.state === null ? "null" : "undefined");
                didWarnAboutUninitializedState[componentName] = true;
              }
            }
          }
          workInProgress.memoizedState = state;
          var partialState = callGetDerivedStateFromProps(workInProgress, instance, props);

          if (partialState !== null && partialState !== undefined) {
            workInProgress.memoizedState = _extends({}, workInProgress.memoizedState, partialState);
          }

          if (needsContext) {
            cacheContext(workInProgress, unmaskedContext, context);
          }

          return instance;
        }

        function callComponentWillMount(workInProgress, instance) {
          startPhaseTimer(workInProgress, "componentWillMount");
          var oldState = instance.state;

          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }

          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }

          stopPhaseTimer();

          if (oldState !== instance.state) {
            {
              warning(false, "%s.componentWillMount(): Assigning directly to this.state is " + "deprecated (except inside a component's " + "constructor). Use setState instead.", getComponentName(workInProgress));
            }
            updater.enqueueReplaceState(instance, instance.state, null);
          }
        }

        function callComponentWillReceiveProps(workInProgress, instance, newProps, newContext) {
          var oldState = instance.state;
          startPhaseTimer(workInProgress, "componentWillReceiveProps");

          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, newContext);
          }

          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, newContext);
          }

          stopPhaseTimer();

          if (instance.state !== oldState) {
            {
              var componentName = getComponentName(workInProgress) || "Component";

              if (!didWarnAboutStateAssignmentForComponent[componentName]) {
                warning(false, "%s.componentWillReceiveProps(): Assigning directly to " + "this.state is deprecated (except inside a component's " + "constructor). Use setState instead.", componentName);
                didWarnAboutStateAssignmentForComponent[componentName] = true;
              }
            }
            updater.enqueueReplaceState(instance, instance.state, null);
          }
        }

        function callGetDerivedStateFromProps(workInProgress, instance, props) {
          var type = workInProgress.type;

          if (typeof type.getDerivedStateFromProps === "function") {
            {
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                var componentName = getComponentName(workInProgress) || "Unknown";

                if (!didWarnAboutWillReceivePropsAndDerivedState[componentName]) {
                  warning(false, "%s: Defines both componentWillReceiveProps() and static " + "getDerivedStateFromProps() methods. We recommend using " + "only getDerivedStateFromProps().", componentName);
                  didWarnAboutWillReceivePropsAndDerivedState[componentName] = true;
                }
              }
            }

            if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
              type.getDerivedStateFromProps.call(null, props, workInProgress.memoizedState);
            }

            var partialState = type.getDerivedStateFromProps.call(null, props, workInProgress.memoizedState);
            {
              if (partialState === undefined) {
                var _componentName = getComponentName(workInProgress) || "Unknown";

                if (!didWarnAboutUndefinedDerivedState[_componentName]) {
                  warning(false, "%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. " + "You have returned undefined.", _componentName);
                  didWarnAboutUndefinedDerivedState[_componentName] = _componentName;
                }
              }
            }
            return partialState;
          }
        }

        function mountClassInstance(workInProgress, renderExpirationTime) {
          var ctor = workInProgress.type;
          var current = workInProgress.alternate;
          {
            checkClassInstance(workInProgress);
          }
          var instance = workInProgress.stateNode;
          var props = workInProgress.pendingProps;
          var unmaskedContext = getUnmaskedContext(workInProgress);
          instance.props = props;
          instance.state = workInProgress.memoizedState;
          instance.refs = emptyObject;
          instance.context = getMaskedContext(workInProgress, unmaskedContext);
          {
            if (workInProgress.mode & StrictMode) {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
            }

            if (warnAboutDeprecatedLifecycles) {
              ReactStrictModeWarnings.recordDeprecationWarnings(workInProgress, instance);
            }
          }

          if ((typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function") && typeof ctor.getDerivedStateFromProps !== "function") {
            callComponentWillMount(workInProgress, instance);
            var updateQueue = workInProgress.updateQueue;

            if (updateQueue !== null) {
              instance.state = processUpdateQueue(current, workInProgress, updateQueue, instance, props, renderExpirationTime);
            }
          }

          if (typeof instance.componentDidMount === "function") {
            workInProgress.effectTag |= Update;
          }
        }

        function resumeMountClassInstance(workInProgress, renderExpirationTime) {
          var ctor = workInProgress.type;
          var instance = workInProgress.stateNode;
          resetInputPointers(workInProgress, instance);
          var oldProps = workInProgress.memoizedProps;
          var newProps = workInProgress.pendingProps;
          var oldContext = instance.context;
          var newUnmaskedContext = getUnmaskedContext(workInProgress);
          var newContext = getMaskedContext(workInProgress, newUnmaskedContext);

          if ((typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function") && typeof ctor.getDerivedStateFromProps !== "function") {
            if (oldProps !== newProps || oldContext !== newContext) {
              callComponentWillReceiveProps(workInProgress, instance, newProps, newContext);
            }
          }

          var derivedStateFromProps = void 0;

          if (oldProps !== newProps) {
            derivedStateFromProps = callGetDerivedStateFromProps(workInProgress, instance, newProps);
          }

          var oldState = workInProgress.memoizedState;
          var newState = void 0;
          var derivedStateFromCatch = void 0;

          if (workInProgress.updateQueue !== null) {
            newState = processUpdateQueue(null, workInProgress, workInProgress.updateQueue, instance, newProps, renderExpirationTime);
            var updateQueue = workInProgress.updateQueue;

            if (updateQueue !== null && updateQueue.capturedValues !== null && enableGetDerivedStateFromCatch && typeof ctor.getDerivedStateFromCatch === "function") {
              var capturedValues = updateQueue.capturedValues;
              derivedStateFromCatch = callGetDerivedStateFromCatch(ctor, capturedValues);
            }
          } else {
            newState = oldState;
          }

          if (derivedStateFromProps !== null && derivedStateFromProps !== undefined) {
            newState = newState === null || newState === undefined ? derivedStateFromProps : _extends({}, newState, derivedStateFromProps);
          }

          if (derivedStateFromCatch !== null && derivedStateFromCatch !== undefined) {
            newState = newState === null || newState === undefined ? derivedStateFromCatch : _extends({}, newState, derivedStateFromCatch);
          }

          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !(workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate)) {
            if (typeof instance.componentDidMount === "function") {
              workInProgress.effectTag |= Update;
            }

            return false;
          }

          var shouldUpdate = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext);

          if (shouldUpdate) {
            if ((typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function") && typeof ctor.getDerivedStateFromProps !== "function") {
              startPhaseTimer(workInProgress, "componentWillUpdate");

              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, newContext);
              }

              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, newContext);
              }

              stopPhaseTimer();
            }

            if (typeof instance.componentDidUpdate === "function") {
              workInProgress.effectTag |= Update;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              workInProgress.effectTag |= Update;
            }

            memoizeProps(workInProgress, newProps);
            memoizeState(workInProgress, newState);
          }

          instance.props = newProps;
          instance.state = newState;
          instance.context = newContext;
          return shouldUpdate;
        }

        function updateClassInstance(current, workInProgress, renderExpirationTime) {
          var ctor = workInProgress.type;
          var instance = workInProgress.stateNode;
          resetInputPointers(workInProgress, instance);
          var oldProps = workInProgress.memoizedProps;
          var newProps = workInProgress.pendingProps;
          var oldContext = instance.context;
          var newUnmaskedContext = getUnmaskedContext(workInProgress);
          var newContext = getMaskedContext(workInProgress, newUnmaskedContext);

          if ((typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function") && typeof ctor.getDerivedStateFromProps !== "function") {
            if (oldProps !== newProps || oldContext !== newContext) {
              callComponentWillReceiveProps(workInProgress, instance, newProps, newContext);
            }
          }

          var derivedStateFromProps = void 0;

          if (oldProps !== newProps) {
            derivedStateFromProps = callGetDerivedStateFromProps(workInProgress, instance, newProps);
          }

          var oldState = workInProgress.memoizedState;
          var newState = void 0;
          var derivedStateFromCatch = void 0;

          if (workInProgress.updateQueue !== null) {
            newState = processUpdateQueue(current, workInProgress, workInProgress.updateQueue, instance, newProps, renderExpirationTime);
            var updateQueue = workInProgress.updateQueue;

            if (updateQueue !== null && updateQueue.capturedValues !== null && enableGetDerivedStateFromCatch && typeof ctor.getDerivedStateFromCatch === "function") {
              var capturedValues = updateQueue.capturedValues;
              derivedStateFromCatch = callGetDerivedStateFromCatch(ctor, capturedValues);
            }
          } else {
            newState = oldState;
          }

          if (derivedStateFromProps !== null && derivedStateFromProps !== undefined) {
            newState = newState === null || newState === undefined ? derivedStateFromProps : _extends({}, newState, derivedStateFromProps);
          }

          if (derivedStateFromCatch !== null && derivedStateFromCatch !== undefined) {
            newState = newState === null || newState === undefined ? derivedStateFromCatch : _extends({}, newState, derivedStateFromCatch);
          }

          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !(workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate)) {
            if (typeof instance.componentDidUpdate === "function") {
              if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                workInProgress.effectTag |= Update;
              }
            }

            return false;
          }

          var shouldUpdate = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext);

          if (shouldUpdate) {
            if ((typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function") && typeof ctor.getDerivedStateFromProps !== "function") {
              startPhaseTimer(workInProgress, "componentWillUpdate");

              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, newContext);
              }

              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, newContext);
              }

              stopPhaseTimer();
            }

            if (typeof instance.componentDidUpdate === "function") {
              workInProgress.effectTag |= Update;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                workInProgress.effectTag |= Update;
              }
            }

            memoizeProps(workInProgress, newProps);
            memoizeState(workInProgress, newState);
          }

          instance.props = newProps;
          instance.state = newState;
          instance.context = newContext;
          return shouldUpdate;
        }

        return {
          adoptClassInstance: adoptClassInstance,
          callGetDerivedStateFromProps: callGetDerivedStateFromProps,
          constructClassInstance: constructClassInstance,
          mountClassInstance: mountClassInstance,
          resumeMountClassInstance: resumeMountClassInstance,
          updateClassInstance: updateClassInstance
        };
      };

      var getCurrentFiberStackAddendum$1 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;
      var didWarnAboutMaps = void 0;
      var didWarnAboutStringRefInStrictMode = void 0;
      var ownerHasKeyUseWarning = void 0;
      var ownerHasFunctionTypeWarning = void 0;

      var warnForMissingKey = function warnForMissingKey(child) {};

      {
        didWarnAboutMaps = false;
        didWarnAboutStringRefInStrictMode = {};
        ownerHasKeyUseWarning = {};
        ownerHasFunctionTypeWarning = {};

        warnForMissingKey = function warnForMissingKey(child) {
          if (child === null || typeof child !== "object") {
            return;
          }

          if (!child._store || child._store.validated || child.key != null) {
            return;
          }

          invariant(typeof child._store === "object", "React Component in warnForMissingKey should have a _store. " + "This error is likely caused by a bug in React. Please file an issue.");
          child._store.validated = true;
          var currentComponentErrorInfo = "Each child in an array or iterator should have a unique " + '"key" prop. See https://fb.me/react-warning-keys for ' + "more information." + (getCurrentFiberStackAddendum$1() || "");

          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }

          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          warning(false, "Each child in an array or iterator should have a unique " + '"key" prop. See https://fb.me/react-warning-keys for ' + "more information.%s", getCurrentFiberStackAddendum$1());
        };
      }
      var isArray$1 = Array.isArray;

      function coerceRef(returnFiber, current, element) {
        var mixedRef = element.ref;

        if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
          {
            if (returnFiber.mode & StrictMode) {
              var componentName = getComponentName(returnFiber) || "Component";

              if (!didWarnAboutStringRefInStrictMode[componentName]) {
                warning(false, 'A string ref, "%s", has been found within a strict mode tree. ' + "String refs are a source of potential bugs and should be avoided. " + "We recommend using createRef() instead." + "\n%s" + "\n\nLearn more about using refs safely here:" + "\nhttps://fb.me/react-strict-mode-string-ref", mixedRef, getStackAddendumByWorkInProgressFiber(returnFiber));
                didWarnAboutStringRefInStrictMode[componentName] = true;
              }
            }
          }

          if (element._owner) {
            var owner = element._owner;
            var inst = void 0;

            if (owner) {
              var ownerFiber = owner;
              invariant(ownerFiber.tag === ClassComponent, "Stateless function components cannot have refs.");
              inst = ownerFiber.stateNode;
            }

            invariant(inst, "Missing owner for string ref %s. This error is likely caused by a " + "bug in React. Please file an issue.", mixedRef);
            var stringRef = "" + mixedRef;

            if (current !== null && current.ref !== null && current.ref._stringRef === stringRef) {
              return current.ref;
            }

            var ref = function ref(value) {
              var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;

              if (value === null) {
                delete refs[stringRef];
              } else {
                refs[stringRef] = value;
              }
            };

            ref._stringRef = stringRef;
            return ref;
          } else {
            invariant(typeof mixedRef === "string", "Expected ref to be a function or a string.");
            invariant(element._owner, "Element ref was specified as a string (%s) but no owner was set. This could happen for one of" + " the following reasons:\n" + "1. You may be adding a ref to a functional component\n" + "2. You may be adding a ref to a component that was not created inside a component's render method\n" + "3. You have multiple copies of React loaded\n" + "See https://fb.me/react-refs-must-have-owner for more information.", mixedRef);
          }
        }

        return mixedRef;
      }

      function throwOnInvalidObjectType(returnFiber, newChild) {
        if (returnFiber.type !== "textarea") {
          var addendum = "";
          {
            addendum = " If you meant to render a collection of children, use an array " + "instead." + (getCurrentFiberStackAddendum$1() || "");
          }
          invariant(false, "Objects are not valid as a React child (found: %s).%s", Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild, addendum);
        }
      }

      function warnOnFunctionType() {
        var currentComponentErrorInfo = "Functions are not valid as a React child. This may happen if " + "you return a Component instead of <Component /> from render. " + "Or maybe you meant to call this function rather than return it." + (getCurrentFiberStackAddendum$1() || "");

        if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
          return;
        }

        ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
        warning(false, "Functions are not valid as a React child. This may happen if " + "you return a Component instead of <Component /> from render. " + "Or maybe you meant to call this function rather than return it.%s", getCurrentFiberStackAddendum$1() || "");
      }

      function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
          if (!shouldTrackSideEffects) {
            return;
          }

          var last = returnFiber.lastEffect;

          if (last !== null) {
            last.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }

          childToDelete.nextEffect = null;
          childToDelete.effectTag = Deletion;
        }

        function deleteRemainingChildren(returnFiber, currentFirstChild) {
          if (!shouldTrackSideEffects) {
            return null;
          }

          var childToDelete = currentFirstChild;

          while (childToDelete !== null) {
            deleteChild(returnFiber, childToDelete);
            childToDelete = childToDelete.sibling;
          }

          return null;
        }

        function mapRemainingChildren(returnFiber, currentFirstChild) {
          var existingChildren = new Map();
          var existingChild = currentFirstChild;

          while (existingChild !== null) {
            if (existingChild.key !== null) {
              existingChildren.set(existingChild.key, existingChild);
            } else {
              existingChildren.set(existingChild.index, existingChild);
            }

            existingChild = existingChild.sibling;
          }

          return existingChildren;
        }

        function useFiber(fiber, pendingProps, expirationTime) {
          var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
          clone.index = 0;
          clone.sibling = null;
          return clone;
        }

        function placeChild(newFiber, lastPlacedIndex, newIndex) {
          newFiber.index = newIndex;

          if (!shouldTrackSideEffects) {
            return lastPlacedIndex;
          }

          var current = newFiber.alternate;

          if (current !== null) {
            var oldIndex = current.index;

            if (oldIndex < lastPlacedIndex) {
              newFiber.effectTag = Placement;
              return lastPlacedIndex;
            } else {
              return oldIndex;
            }
          } else {
            newFiber.effectTag = Placement;
            return lastPlacedIndex;
          }
        }

        function placeSingleChild(newFiber) {
          if (shouldTrackSideEffects && newFiber.alternate === null) {
            newFiber.effectTag = Placement;
          }

          return newFiber;
        }

        function updateTextNode(returnFiber, current, textContent, expirationTime) {
          if (current === null || current.tag !== HostText) {
            var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
            created["return"] = returnFiber;
            return created;
          } else {
            var existing = useFiber(current, textContent, expirationTime);
            existing["return"] = returnFiber;
            return existing;
          }
        }

        function updateElement(returnFiber, current, element, expirationTime) {
          if (current !== null && current.type === element.type) {
            var existing = useFiber(current, element.props, expirationTime);
            existing.ref = coerceRef(returnFiber, current, element);
            existing["return"] = returnFiber;
            {
              existing._debugSource = element._source;
              existing._debugOwner = element._owner;
            }
            return existing;
          } else {
            var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
            created.ref = coerceRef(returnFiber, current, element);
            created["return"] = returnFiber;
            return created;
          }
        }

        function updatePortal(returnFiber, current, portal, expirationTime) {
          if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
            var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
            created["return"] = returnFiber;
            return created;
          } else {
            var existing = useFiber(current, portal.children || [], expirationTime);
            existing["return"] = returnFiber;
            return existing;
          }
        }

        function updateFragment(returnFiber, current, fragment, expirationTime, key) {
          if (current === null || current.tag !== Fragment) {
            var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
            created["return"] = returnFiber;
            return created;
          } else {
            var existing = useFiber(current, fragment, expirationTime);
            existing["return"] = returnFiber;
            return existing;
          }
        }

        function createChild(returnFiber, newChild, expirationTime) {
          if (typeof newChild === "string" || typeof newChild === "number") {
            var created = createFiberFromText("" + newChild, returnFiber.mode, expirationTime);
            created["return"] = returnFiber;
            return created;
          }

          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);

                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created["return"] = returnFiber;
                  return _created;
                }

              case REACT_PORTAL_TYPE:
                {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);

                  _created2["return"] = returnFiber;
                  return _created2;
                }
            }

            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);

              _created3["return"] = returnFiber;
              return _created3;
            }

            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }
          return null;
        }

        function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
          var key = oldFiber !== null ? oldFiber.key : null;

          if (typeof newChild === "string" || typeof newChild === "number") {
            if (key !== null) {
              return null;
            }

            return updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);
          }

          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                {
                  if (newChild.key === key) {
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
                    }

                    return updateElement(returnFiber, oldFiber, newChild, expirationTime);
                  } else {
                    return null;
                  }
                }

              case REACT_PORTAL_TYPE:
                {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
                  } else {
                    return null;
                  }
                }
            }

            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              if (key !== null) {
                return null;
              }

              return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
            }

            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }
          return null;
        }

        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
          if (typeof newChild === "string" || typeof newChild === "number") {
            var matchedFiber = existingChildren.get(newIdx) || null;
            return updateTextNode(returnFiber, matchedFiber, "" + newChild, expirationTime);
          }

          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
                  }

                  return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
                }

              case REACT_PORTAL_TYPE:
                {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                  return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
                }
            }

            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              var _matchedFiber3 = existingChildren.get(newIdx) || null;

              return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
            }

            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }
          return null;
        }

        function warnOnInvalidKey(child, knownKeys) {
          {
            if (typeof child !== "object" || child === null) {
              return knownKeys;
            }

            switch (child.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                warnForMissingKey(child);
                var key = child.key;

                if (typeof key !== "string") {
                  break;
                }

                if (knownKeys === null) {
                  knownKeys = new Set();
                  knownKeys.add(key);
                  break;
                }

                if (!knownKeys.has(key)) {
                  knownKeys.add(key);
                  break;
                }

                warning(false, "Encountered two children with the same key, `%s`. " + "Keys should be unique so that components maintain their identity " + "across updates. Non-unique keys may cause children to be " + "duplicated and/or omitted — the behavior is unsupported and " + "could change in a future version.%s", key, getCurrentFiberStackAddendum$1());
                break;

              default:
                break;
            }
          }
          return knownKeys;
        }

        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
          {
            var knownKeys = null;

            for (var i = 0; i < newChildren.length; i++) {
              var child = newChildren[i];
              knownKeys = warnOnInvalidKey(child, knownKeys);
            }
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;

          for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }

            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }

              break;
            }

            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }

            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }

            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }

          if (newIdx === newChildren.length) {
            deleteRemainingChildren(returnFiber, oldFiber);
            return resultingFirstChild;
          }

          if (oldFiber === null) {
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);

              if (!_newFiber) {
                continue;
              }

              lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber;
              } else {
                previousNewFiber.sibling = _newFiber;
              }

              previousNewFiber = _newFiber;
            }

            return resultingFirstChild;
          }

          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

          for (; newIdx < newChildren.length; newIdx++) {
            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);

            if (_newFiber2) {
              if (shouldTrackSideEffects) {
                if (_newFiber2.alternate !== null) {
                  existingChildren["delete"](_newFiber2.key === null ? newIdx : _newFiber2.key);
                }
              }

              lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber2;
              } else {
                previousNewFiber.sibling = _newFiber2;
              }

              previousNewFiber = _newFiber2;
            }
          }

          if (shouldTrackSideEffects) {
            existingChildren.forEach(function (child) {
              return deleteChild(returnFiber, child);
            });
          }

          return resultingFirstChild;
        }

        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
          var iteratorFn = getIteratorFn(newChildrenIterable);
          invariant(typeof iteratorFn === "function", "An object is not an iterable. This error is likely caused by a bug in " + "React. Please file an issue.");
          {
            if (typeof newChildrenIterable.entries === "function") {
              var possibleMap = newChildrenIterable;

              if (possibleMap.entries === iteratorFn) {
                warning(didWarnAboutMaps, "Using Maps as children is unsupported and will likely yield " + "unexpected results. Convert it to a sequence/iterable of keyed " + "ReactElements instead.%s", getCurrentFiberStackAddendum$1());
                didWarnAboutMaps = true;
              }
            }

            var _newChildren = iteratorFn.call(newChildrenIterable);

            if (_newChildren) {
              var knownKeys = null;

              var _step = _newChildren.next();

              for (; !_step.done; _step = _newChildren.next()) {
                var child = _step.value;
                knownKeys = warnOnInvalidKey(child, knownKeys);
              }
            }
          }
          var newChildren = iteratorFn.call(newChildrenIterable);
          invariant(newChildren != null, "An iterable object provided no iterator.");
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          var step = newChildren.next();

          for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }

            var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

            if (newFiber === null) {
              if (!oldFiber) {
                oldFiber = nextOldFiber;
              }

              break;
            }

            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }

            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }

            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }

          if (step.done) {
            deleteRemainingChildren(returnFiber, oldFiber);
            return resultingFirstChild;
          }

          if (oldFiber === null) {
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber3 = createChild(returnFiber, step.value, expirationTime);

              if (_newFiber3 === null) {
                continue;
              }

              lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber3;
              } else {
                previousNewFiber.sibling = _newFiber3;
              }

              previousNewFiber = _newFiber3;
            }

            return resultingFirstChild;
          }

          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

          for (; !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);

            if (_newFiber4 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber4.alternate !== null) {
                  existingChildren["delete"](_newFiber4.key === null ? newIdx : _newFiber4.key);
                }
              }

              lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber4;
              } else {
                previousNewFiber.sibling = _newFiber4;
              }

              previousNewFiber = _newFiber4;
            }
          }

          if (shouldTrackSideEffects) {
            existingChildren.forEach(function (child) {
              return deleteChild(returnFiber, child);
            });
          }

          return resultingFirstChild;
        }

        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
          if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
            var existing = useFiber(currentFirstChild, textContent, expirationTime);
            existing["return"] = returnFiber;
            return existing;
          }

          deleteRemainingChildren(returnFiber, currentFirstChild);
          var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
          created["return"] = returnFiber;
          return created;
        }

        function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
          var key = element.key;
          var child = currentFirstChild;

          while (child !== null) {
            if (child.key === key) {
              if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.type === element.type) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
                existing.ref = coerceRef(returnFiber, child, element);
                existing["return"] = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            } else {
              deleteChild(returnFiber, child);
            }

            child = child.sibling;
          }

          if (element.type === REACT_FRAGMENT_TYPE) {
            var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
            created["return"] = returnFiber;
            return created;
          } else {
            var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);

            _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
            _created4["return"] = returnFiber;
            return _created4;
          }
        }

        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
          var key = portal.key;
          var child = currentFirstChild;

          while (child !== null) {
            if (child.key === key) {
              if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, portal.children || [], expirationTime);
                existing["return"] = returnFiber;
                return existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            } else {
              deleteChild(returnFiber, child);
            }

            child = child.sibling;
          }

          var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
          created["return"] = returnFiber;
          return created;
        }

        function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
          if (typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null) {
            newChild = newChild.props.children;
          }

          var isObject = typeof newChild === "object" && newChild !== null;

          if (isObject) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));

              case REACT_PORTAL_TYPE:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
            }
          }

          if (typeof newChild === "string" || typeof newChild === "number") {
            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, expirationTime));
          }

          if (isArray$1(newChild)) {
            return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
          }

          if (getIteratorFn(newChild)) {
            return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
          }

          if (isObject) {
            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }

          if (typeof newChild === "undefined") {
            switch (returnFiber.tag) {
              case ClassComponent:
                {
                  {
                    var instance = returnFiber.stateNode;

                    if (instance.render._isMockFunction) {
                      break;
                    }
                  }
                }

              case FunctionalComponent:
                {
                  var Component = returnFiber.type;
                  invariant(false, "%s(...): Nothing was returned from render. This usually means a " + "return statement is missing. Or, to render nothing, " + "return null.", Component.displayName || Component.name || "Component");
                }
            }
          }

          return deleteRemainingChildren(returnFiber, currentFirstChild);
        }

        return reconcileChildFibers;
      }

      var reconcileChildFibers = ChildReconciler(true);
      var mountChildFibers = ChildReconciler(false);

      function cloneChildFibers(current, workInProgress) {
        invariant(current === null || workInProgress.child === current.child, "Resuming work not yet implemented.");

        if (workInProgress.child === null) {
          return;
        }

        var currentChild = workInProgress.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
        workInProgress.child = newChild;
        newChild["return"] = workInProgress;

        while (currentChild.sibling !== null) {
          currentChild = currentChild.sibling;
          newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
          newChild["return"] = workInProgress;
        }

        newChild.sibling = null;
      }

      var changedBitsStack = [];
      var currentValueStack = [];
      var stack = [];
      var index$1 = -1;
      var rendererSigil = void 0;
      {
        rendererSigil = {};
      }

      function pushProvider(providerFiber) {
        var context = providerFiber.type.context;
        index$1 += 1;
        changedBitsStack[index$1] = context._changedBits;
        currentValueStack[index$1] = context._currentValue;
        stack[index$1] = providerFiber;
        context._currentValue = providerFiber.pendingProps.value;
        context._changedBits = providerFiber.stateNode;
        {
          warning(context._currentRenderer === null || context._currentRenderer === rendererSigil, "Detected multiple renderers concurrently rendering the " + "same context provider. This is currently unsupported.");
          context._currentRenderer = rendererSigil;
        }
      }

      function popProvider(providerFiber) {
        {
          warning(index$1 > -1 && providerFiber === stack[index$1], "Unexpected pop.");
        }
        var changedBits = changedBitsStack[index$1];
        var currentValue = currentValueStack[index$1];
        changedBitsStack[index$1] = null;
        currentValueStack[index$1] = null;
        stack[index$1] = null;
        index$1 -= 1;
        var context = providerFiber.type.context;
        context._currentValue = currentValue;
        context._changedBits = changedBits;
      }

      function resetProviderStack() {
        for (var i = index$1; i > -1; i--) {
          var providerFiber = stack[i];
          var context = providerFiber.type.context;
          context._currentValue = context._defaultValue;
          context._changedBits = 0;
          changedBitsStack[i] = null;
          currentValueStack[i] = null;
          stack[i] = null;
          {
            context._currentRenderer = null;
          }
        }

        index$1 = -1;
      }

      var didWarnAboutBadClass = void 0;
      var didWarnAboutGetDerivedStateOnFunctionalComponent = void 0;
      var didWarnAboutStatelessRefs = void 0;
      {
        didWarnAboutBadClass = {};
        didWarnAboutGetDerivedStateOnFunctionalComponent = {};
        didWarnAboutStatelessRefs = {};
      }

      var ReactFiberBeginWork = function ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleWork, computeExpirationForFiber) {
        var shouldSetTextContent = config.shouldSetTextContent,
            shouldDeprioritizeSubtree = config.shouldDeprioritizeSubtree;
        var pushHostContext = hostContext.pushHostContext,
            pushHostContainer = hostContext.pushHostContainer;
        var enterHydrationState = hydrationContext.enterHydrationState,
            resetHydrationState = hydrationContext.resetHydrationState,
            tryToClaimNextHydratableInstance = hydrationContext.tryToClaimNextHydratableInstance;

        var _ReactFiberClassCompo = ReactFiberClassComponent(scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState),
            adoptClassInstance = _ReactFiberClassCompo.adoptClassInstance,
            callGetDerivedStateFromProps = _ReactFiberClassCompo.callGetDerivedStateFromProps,
            constructClassInstance = _ReactFiberClassCompo.constructClassInstance,
            mountClassInstance = _ReactFiberClassCompo.mountClassInstance,
            resumeMountClassInstance = _ReactFiberClassCompo.resumeMountClassInstance,
            updateClassInstance = _ReactFiberClassCompo.updateClassInstance;

        function reconcileChildren(current, workInProgress, nextChildren) {
          reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, workInProgress.expirationTime);
        }

        function reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime) {
          if (current === null) {
            workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
          } else {
            workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
          }
        }

        function updateFragment(current, workInProgress) {
          var nextChildren = workInProgress.pendingProps;

          if (hasContextChanged()) {} else if (workInProgress.memoizedProps === nextChildren) {
            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }

          reconcileChildren(current, workInProgress, nextChildren);
          memoizeProps(workInProgress, nextChildren);
          return workInProgress.child;
        }

        function updateMode(current, workInProgress) {
          var nextChildren = workInProgress.pendingProps.children;

          if (hasContextChanged()) {} else if (nextChildren === null || workInProgress.memoizedProps === nextChildren) {
            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }

          reconcileChildren(current, workInProgress, nextChildren);
          memoizeProps(workInProgress, nextChildren);
          return workInProgress.child;
        }

        function markRef(current, workInProgress) {
          var ref = workInProgress.ref;

          if (current === null && ref !== null || current !== null && current.ref !== ref) {
            workInProgress.effectTag |= Ref;
          }
        }

        function updateFunctionalComponent(current, workInProgress) {
          var fn = workInProgress.type;
          var nextProps = workInProgress.pendingProps;

          if (hasContextChanged()) {} else {
            if (workInProgress.memoizedProps === nextProps) {
              return bailoutOnAlreadyFinishedWork(current, workInProgress);
            }
          }

          var unmaskedContext = getUnmaskedContext(workInProgress);
          var context = getMaskedContext(workInProgress, unmaskedContext);
          var nextChildren = void 0;
          {
            ReactCurrentOwner.current = workInProgress;
            ReactDebugCurrentFiber.setCurrentPhase("render");
            nextChildren = fn(nextProps, context);
            ReactDebugCurrentFiber.setCurrentPhase(null);
          }
          workInProgress.effectTag |= PerformedWork;
          reconcileChildren(current, workInProgress, nextChildren);
          memoizeProps(workInProgress, nextProps);
          return workInProgress.child;
        }

        function updateClassComponent(current, workInProgress, renderExpirationTime) {
          var hasContext = pushContextProvider(workInProgress);
          var shouldUpdate = void 0;

          if (current === null) {
            if (workInProgress.stateNode === null) {
              constructClassInstance(workInProgress, workInProgress.pendingProps);
              mountClassInstance(workInProgress, renderExpirationTime);
              shouldUpdate = true;
            } else {
              shouldUpdate = resumeMountClassInstance(workInProgress, renderExpirationTime);
            }
          } else {
            shouldUpdate = updateClassInstance(current, workInProgress, renderExpirationTime);
          }

          var didCaptureError = false;
          var updateQueue = workInProgress.updateQueue;

          if (updateQueue !== null && updateQueue.capturedValues !== null) {
            shouldUpdate = true;
            didCaptureError = true;
          }

          return finishClassComponent(current, workInProgress, shouldUpdate, hasContext, didCaptureError, renderExpirationTime);
        }

        function finishClassComponent(current, workInProgress, shouldUpdate, hasContext, didCaptureError, renderExpirationTime) {
          markRef(current, workInProgress);

          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress, false);
            }

            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }

          var ctor = workInProgress.type;
          var instance = workInProgress.stateNode;
          ReactCurrentOwner.current = workInProgress;
          var nextChildren = void 0;

          if (didCaptureError && (!enableGetDerivedStateFromCatch || typeof ctor.getDerivedStateFromCatch !== "function")) {
            nextChildren = null;
          } else {
            {
              ReactDebugCurrentFiber.setCurrentPhase("render");
              nextChildren = instance.render();

              if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
                instance.render();
              }

              ReactDebugCurrentFiber.setCurrentPhase(null);
            }
          }

          workInProgress.effectTag |= PerformedWork;

          if (didCaptureError) {
            reconcileChildrenAtExpirationTime(current, workInProgress, null, renderExpirationTime);
            workInProgress.child = null;
          }

          reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime);
          memoizeState(workInProgress, instance.state);
          memoizeProps(workInProgress, instance.props);

          if (hasContext) {
            invalidateContextProvider(workInProgress, true);
          }

          return workInProgress.child;
        }

        function pushHostRootContext(workInProgress) {
          var root = workInProgress.stateNode;

          if (root.pendingContext) {
            pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
          } else if (root.context) {
            pushTopLevelContextObject(workInProgress, root.context, false);
          }

          pushHostContainer(workInProgress, root.containerInfo);
        }

        function updateHostRoot(current, workInProgress, renderExpirationTime) {
          pushHostRootContext(workInProgress);
          var updateQueue = workInProgress.updateQueue;

          if (updateQueue !== null) {
            var prevState = workInProgress.memoizedState;
            var state = processUpdateQueue(current, workInProgress, updateQueue, null, null, renderExpirationTime);
            memoizeState(workInProgress, state);
            updateQueue = workInProgress.updateQueue;
            var element = void 0;

            if (updateQueue !== null && updateQueue.capturedValues !== null) {
              element = null;
            } else if (prevState === state) {
              resetHydrationState();
              return bailoutOnAlreadyFinishedWork(current, workInProgress);
            } else {
              element = state.element;
            }

            var root = workInProgress.stateNode;

            if ((current === null || current.child === null) && root.hydrate && enterHydrationState(workInProgress)) {
              workInProgress.effectTag |= Placement;
              workInProgress.child = mountChildFibers(workInProgress, null, element, renderExpirationTime);
            } else {
              resetHydrationState();
              reconcileChildren(current, workInProgress, element);
            }

            memoizeState(workInProgress, state);
            return workInProgress.child;
          }

          resetHydrationState();
          return bailoutOnAlreadyFinishedWork(current, workInProgress);
        }

        function updateHostComponent(current, workInProgress, renderExpirationTime) {
          pushHostContext(workInProgress);

          if (current === null) {
            tryToClaimNextHydratableInstance(workInProgress);
          }

          var type = workInProgress.type;
          var memoizedProps = workInProgress.memoizedProps;
          var nextProps = workInProgress.pendingProps;
          var prevProps = current !== null ? current.memoizedProps : null;

          if (hasContextChanged()) {} else if (memoizedProps === nextProps) {
            var isHidden = workInProgress.mode & AsyncMode && shouldDeprioritizeSubtree(type, nextProps);

            if (isHidden) {
              workInProgress.expirationTime = Never;
            }

            if (!isHidden || renderExpirationTime !== Never) {
              return bailoutOnAlreadyFinishedWork(current, workInProgress);
            }
          }

          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);

          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps && shouldSetTextContent(type, prevProps)) {
            workInProgress.effectTag |= ContentReset;
          }

          markRef(current, workInProgress);

          if (renderExpirationTime !== Never && workInProgress.mode & AsyncMode && shouldDeprioritizeSubtree(type, nextProps)) {
            workInProgress.expirationTime = Never;
            workInProgress.memoizedProps = nextProps;
            return null;
          }

          reconcileChildren(current, workInProgress, nextChildren);
          memoizeProps(workInProgress, nextProps);
          return workInProgress.child;
        }

        function updateHostText(current, workInProgress) {
          if (current === null) {
            tryToClaimNextHydratableInstance(workInProgress);
          }

          var nextProps = workInProgress.pendingProps;
          memoizeProps(workInProgress, nextProps);
          return null;
        }

        function mountIndeterminateComponent(current, workInProgress, renderExpirationTime) {
          invariant(current === null, "An indeterminate component should never have mounted. This error is " + "likely caused by a bug in React. Please file an issue.");
          var fn = workInProgress.type;
          var props = workInProgress.pendingProps;
          var unmaskedContext = getUnmaskedContext(workInProgress);
          var context = getMaskedContext(workInProgress, unmaskedContext);
          var value = void 0;
          {
            if (fn.prototype && typeof fn.prototype.render === "function") {
              var componentName = getComponentName(workInProgress) || "Unknown";

              if (!didWarnAboutBadClass[componentName]) {
                warning(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. " + "This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }

            ReactCurrentOwner.current = workInProgress;
            value = fn(props, context);
          }
          workInProgress.effectTag |= PerformedWork;

          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === undefined) {
            var Component = workInProgress.type;
            workInProgress.tag = ClassComponent;
            workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;

            if (typeof Component.getDerivedStateFromProps === "function") {
              var partialState = callGetDerivedStateFromProps(workInProgress, value, props);

              if (partialState !== null && partialState !== undefined) {
                workInProgress.memoizedState = _extends({}, workInProgress.memoizedState, partialState);
              }
            }

            var hasContext = pushContextProvider(workInProgress);
            adoptClassInstance(workInProgress, value);
            mountClassInstance(workInProgress, renderExpirationTime);
            return finishClassComponent(current, workInProgress, true, hasContext, false, renderExpirationTime);
          } else {
            workInProgress.tag = FunctionalComponent;
            {
              var _Component = workInProgress.type;

              if (_Component) {
                warning(!_Component.childContextTypes, "%s(...): childContextTypes cannot be defined on a functional component.", _Component.displayName || _Component.name || "Component");
              }

              if (workInProgress.ref !== null) {
                var info = "";
                var ownerName = ReactDebugCurrentFiber.getCurrentFiberOwnerName();

                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }

                var warningKey = ownerName || workInProgress._debugID || "";
                var debugSource = workInProgress._debugSource;

                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }

                if (!didWarnAboutStatelessRefs[warningKey]) {
                  didWarnAboutStatelessRefs[warningKey] = true;
                  warning(false, "Stateless function components cannot be given refs. " + "Attempts to access this ref will fail.%s%s", info, ReactDebugCurrentFiber.getCurrentFiberStackAddendum());
                }
              }

              if (typeof fn.getDerivedStateFromProps === "function") {
                var _componentName = getComponentName(workInProgress) || "Unknown";

                if (!didWarnAboutGetDerivedStateOnFunctionalComponent[_componentName]) {
                  warning(false, "%s: Stateless functional components do not support getDerivedStateFromProps.", _componentName);
                  didWarnAboutGetDerivedStateOnFunctionalComponent[_componentName] = true;
                }
              }
            }
            reconcileChildren(current, workInProgress, value);
            memoizeProps(workInProgress, props);
            return workInProgress.child;
          }
        }

        function updateCallComponent(current, workInProgress, renderExpirationTime) {
          var nextProps = workInProgress.pendingProps;

          if (hasContextChanged()) {} else if (workInProgress.memoizedProps === nextProps) {
            nextProps = workInProgress.memoizedProps;
          }

          var nextChildren = nextProps.children;

          if (current === null) {
            workInProgress.stateNode = mountChildFibers(workInProgress, workInProgress.stateNode, nextChildren, renderExpirationTime);
          } else {
            workInProgress.stateNode = reconcileChildFibers(workInProgress, current.stateNode, nextChildren, renderExpirationTime);
          }

          memoizeProps(workInProgress, nextProps);
          return workInProgress.stateNode;
        }

        function updatePortalComponent(current, workInProgress, renderExpirationTime) {
          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
          var nextChildren = workInProgress.pendingProps;

          if (hasContextChanged()) {} else if (workInProgress.memoizedProps === nextChildren) {
            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }

          if (current === null) {
            workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
            memoizeProps(workInProgress, nextChildren);
          } else {
            reconcileChildren(current, workInProgress, nextChildren);
            memoizeProps(workInProgress, nextChildren);
          }

          return workInProgress.child;
        }

        function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
          var fiber = workInProgress.child;

          while (fiber !== null) {
            var nextFiber = void 0;

            switch (fiber.tag) {
              case ContextConsumer:
                var observedBits = fiber.stateNode | 0;

                if (fiber.type === context && (observedBits & changedBits) !== 0) {
                  var node = fiber;

                  while (node !== null) {
                    var alternate = node.alternate;

                    if (node.expirationTime === NoWork || node.expirationTime > renderExpirationTime) {
                      node.expirationTime = renderExpirationTime;

                      if (alternate !== null && (alternate.expirationTime === NoWork || alternate.expirationTime > renderExpirationTime)) {
                        alternate.expirationTime = renderExpirationTime;
                      }
                    } else if (alternate !== null && (alternate.expirationTime === NoWork || alternate.expirationTime > renderExpirationTime)) {
                      alternate.expirationTime = renderExpirationTime;
                    } else {
                      break;
                    }

                    node = node["return"];
                  }

                  nextFiber = null;
                } else {
                  nextFiber = fiber.child;
                }

                break;

              case ContextProvider:
                nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
                break;

              default:
                nextFiber = fiber.child;
                break;
            }

            if (nextFiber !== null) {
              nextFiber["return"] = fiber;
            } else {
              nextFiber = fiber;

              while (nextFiber !== null) {
                if (nextFiber === workInProgress) {
                  nextFiber = null;
                  break;
                }

                var sibling = nextFiber.sibling;

                if (sibling !== null) {
                  nextFiber = sibling;
                  break;
                }

                nextFiber = nextFiber["return"];
              }
            }

            fiber = nextFiber;
          }
        }

        function updateContextProvider(current, workInProgress, renderExpirationTime) {
          var providerType = workInProgress.type;
          var context = providerType.context;
          var newProps = workInProgress.pendingProps;
          var oldProps = workInProgress.memoizedProps;

          if (hasContextChanged()) {} else if (oldProps === newProps) {
            workInProgress.stateNode = 0;
            pushProvider(workInProgress);
            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }

          var newValue = newProps.value;
          workInProgress.memoizedProps = newProps;
          var changedBits = void 0;

          if (oldProps === null) {
            changedBits = MAX_SIGNED_31_BIT_INT;
          } else {
            if (oldProps.value === newProps.value) {
              if (oldProps.children === newProps.children) {
                workInProgress.stateNode = 0;
                pushProvider(workInProgress);
                return bailoutOnAlreadyFinishedWork(current, workInProgress);
              }

              changedBits = 0;
            } else {
              var oldValue = oldProps.value;

              if (oldValue === newValue && (oldValue !== 0 || 1 / oldValue === 1 / newValue) || oldValue !== oldValue && newValue !== newValue) {
                  if (oldProps.children === newProps.children) {
                    workInProgress.stateNode = 0;
                    pushProvider(workInProgress);
                    return bailoutOnAlreadyFinishedWork(current, workInProgress);
                  }

                  changedBits = 0;
                } else {
                changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
                {
                  warning((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits, "calculateChangedBits: Expected the return value to be a " + "31-bit integer. Instead received: %s", changedBits);
                }
                changedBits |= 0;

                if (changedBits === 0) {
                  if (oldProps.children === newProps.children) {
                    workInProgress.stateNode = 0;
                    pushProvider(workInProgress);
                    return bailoutOnAlreadyFinishedWork(current, workInProgress);
                  }
                } else {
                  propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
                }
              }
            }
          }

          workInProgress.stateNode = changedBits;
          pushProvider(workInProgress);
          var newChildren = newProps.children;
          reconcileChildren(current, workInProgress, newChildren);
          return workInProgress.child;
        }

        function updateContextConsumer(current, workInProgress, renderExpirationTime) {
          var context = workInProgress.type;
          var newProps = workInProgress.pendingProps;
          var oldProps = workInProgress.memoizedProps;
          var newValue = context._currentValue;
          var changedBits = context._changedBits;

          if (hasContextChanged()) {} else if (changedBits === 0 && oldProps === newProps) {
            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }

          workInProgress.memoizedProps = newProps;
          var observedBits = newProps.unstable_observedBits;

          if (observedBits === undefined || observedBits === null) {
            observedBits = MAX_SIGNED_31_BIT_INT;
          }

          workInProgress.stateNode = observedBits;

          if ((changedBits & observedBits) !== 0) {
            propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
          } else if (oldProps !== null && oldProps.children === newProps.children) {
            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }

          var render = newProps.children;
          {
            warning(typeof render === "function", "A context consumer was rendered with multiple children, or a child " + "that isn't a function. A context consumer expects a single child " + "that is a function. If you did pass a function, make sure there " + "is no trailing or leading whitespace around it.");
          }
          var newChildren = render(newValue);
          reconcileChildren(current, workInProgress, newChildren);
          return workInProgress.child;
        }

        function bailoutOnAlreadyFinishedWork(current, workInProgress) {
          cancelWorkTimer(workInProgress);
          cloneChildFibers(current, workInProgress);
          return workInProgress.child;
        }

        function bailoutOnLowPriority(current, workInProgress) {
          cancelWorkTimer(workInProgress);

          switch (workInProgress.tag) {
            case HostRoot:
              pushHostRootContext(workInProgress);
              break;

            case ClassComponent:
              pushContextProvider(workInProgress);
              break;

            case HostPortal:
              pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
              break;

            case ContextProvider:
              pushProvider(workInProgress);
              break;
          }

          return null;
        }

        function memoizeProps(workInProgress, nextProps) {
          workInProgress.memoizedProps = nextProps;
        }

        function memoizeState(workInProgress, nextState) {
          workInProgress.memoizedState = nextState;
        }

        function beginWork(current, workInProgress, renderExpirationTime) {
          if (workInProgress.expirationTime === NoWork || workInProgress.expirationTime > renderExpirationTime) {
            return bailoutOnLowPriority(current, workInProgress);
          }

          switch (workInProgress.tag) {
            case IndeterminateComponent:
              return mountIndeterminateComponent(current, workInProgress, renderExpirationTime);

            case FunctionalComponent:
              return updateFunctionalComponent(current, workInProgress);

            case ClassComponent:
              return updateClassComponent(current, workInProgress, renderExpirationTime);

            case HostRoot:
              return updateHostRoot(current, workInProgress, renderExpirationTime);

            case HostComponent:
              return updateHostComponent(current, workInProgress, renderExpirationTime);

            case HostText:
              return updateHostText(current, workInProgress);

            case CallHandlerPhase:
              workInProgress.tag = CallComponent;

            case CallComponent:
              return updateCallComponent(current, workInProgress, renderExpirationTime);

            case ReturnComponent:
              return null;

            case HostPortal:
              return updatePortalComponent(current, workInProgress, renderExpirationTime);

            case Fragment:
              return updateFragment(current, workInProgress);

            case Mode:
              return updateMode(current, workInProgress);

            case ContextProvider:
              return updateContextProvider(current, workInProgress, renderExpirationTime);

            case ContextConsumer:
              return updateContextConsumer(current, workInProgress, renderExpirationTime);

            default:
              invariant(false, "Unknown unit of work tag. This error is likely caused by a bug in " + "React. Please file an issue.");
          }
        }

        return {
          beginWork: beginWork
        };
      };

      var ReactFiberCompleteWork = function ReactFiberCompleteWork(config, hostContext, hydrationContext) {
        var createInstance = config.createInstance,
            createTextInstance = config.createTextInstance,
            appendInitialChild = config.appendInitialChild,
            finalizeInitialChildren = config.finalizeInitialChildren,
            prepareUpdate = config.prepareUpdate,
            mutation = config.mutation,
            persistence = config.persistence;
        var getRootHostContainer = hostContext.getRootHostContainer,
            popHostContext = hostContext.popHostContext,
            getHostContext = hostContext.getHostContext,
            popHostContainer = hostContext.popHostContainer;
        var prepareToHydrateHostInstance = hydrationContext.prepareToHydrateHostInstance,
            prepareToHydrateHostTextInstance = hydrationContext.prepareToHydrateHostTextInstance,
            popHydrationState = hydrationContext.popHydrationState;

        function markUpdate(workInProgress) {
          workInProgress.effectTag |= Update;
        }

        function markRef(workInProgress) {
          workInProgress.effectTag |= Ref;
        }

        function appendAllReturns(returns, workInProgress) {
          var node = workInProgress.stateNode;

          if (node) {
            node["return"] = workInProgress;
          }

          while (node !== null) {
            if (node.tag === HostComponent || node.tag === HostText || node.tag === HostPortal) {
              invariant(false, "A call cannot have host component children.");
            } else if (node.tag === ReturnComponent) {
              returns.push(node.pendingProps.value);
            } else if (node.child !== null) {
              node.child["return"] = node;
              node = node.child;
              continue;
            }

            while (node.sibling === null) {
              if (node["return"] === null || node["return"] === workInProgress) {
                return;
              }

              node = node["return"];
            }

            node.sibling["return"] = node["return"];
            node = node.sibling;
          }
        }

        function moveCallToHandlerPhase(current, workInProgress, renderExpirationTime) {
          var props = workInProgress.memoizedProps;
          invariant(props, "Should be resolved by now. This error is likely caused by a bug in " + "React. Please file an issue.");
          workInProgress.tag = CallHandlerPhase;
          var returns = [];
          appendAllReturns(returns, workInProgress);
          var fn = props.handler;
          var childProps = props.props;
          var nextChildren = fn(childProps, returns);
          var currentFirstChild = current !== null ? current.child : null;
          workInProgress.child = reconcileChildFibers(workInProgress, currentFirstChild, nextChildren, renderExpirationTime);
          return workInProgress.child;
        }

        function appendAllChildren(parent, workInProgress) {
          var node = workInProgress.child;

          while (node !== null) {
            if (node.tag === HostComponent || node.tag === HostText) {
              appendInitialChild(parent, node.stateNode);
            } else if (node.tag === HostPortal) {} else if (node.child !== null) {
              node.child["return"] = node;
              node = node.child;
              continue;
            }

            if (node === workInProgress) {
              return;
            }

            while (node.sibling === null) {
              if (node["return"] === null || node["return"] === workInProgress) {
                return;
              }

              node = node["return"];
            }

            node.sibling["return"] = node["return"];
            node = node.sibling;
          }
        }

        var updateHostContainer = void 0;
        var updateHostComponent = void 0;
        var updateHostText = void 0;

        if (mutation) {
          if (enableMutatingReconciler) {
            updateHostContainer = function updateHostContainer(workInProgress) {};

            updateHostComponent = function updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance, currentHostContext) {
              workInProgress.updateQueue = updatePayload;

              if (updatePayload) {
                markUpdate(workInProgress);
              }
            };

            updateHostText = function updateHostText(current, workInProgress, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress);
              }
            };
          } else {
            invariant(false, "Mutating reconciler is disabled.");
          }
        } else if (persistence) {
          if (enablePersistentReconciler) {
            var cloneInstance = persistence.cloneInstance,
                createContainerChildSet = persistence.createContainerChildSet,
                appendChildToContainerChildSet = persistence.appendChildToContainerChildSet,
                finalizeContainerChildren = persistence.finalizeContainerChildren;

            var appendAllChildrenToContainer = function appendAllChildrenToContainer(containerChildSet, workInProgress) {
              var node = workInProgress.child;

              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendChildToContainerChildSet(containerChildSet, node.stateNode);
                } else if (node.tag === HostPortal) {} else if (node.child !== null) {
                  node.child["return"] = node;
                  node = node.child;
                  continue;
                }

                if (node === workInProgress) {
                  return;
                }

                while (node.sibling === null) {
                  if (node["return"] === null || node["return"] === workInProgress) {
                    return;
                  }

                  node = node["return"];
                }

                node.sibling["return"] = node["return"];
                node = node.sibling;
              }
            };

            updateHostContainer = function updateHostContainer(workInProgress) {
              var portalOrRoot = workInProgress.stateNode;
              var childrenUnchanged = workInProgress.firstEffect === null;

              if (childrenUnchanged) {} else {
                var container = portalOrRoot.containerInfo;
                var newChildSet = createContainerChildSet(container);
                appendAllChildrenToContainer(newChildSet, workInProgress);
                portalOrRoot.pendingChildren = newChildSet;
                markUpdate(workInProgress);
                finalizeContainerChildren(container, newChildSet);
              }
            };

            updateHostComponent = function updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance, currentHostContext) {
              var childrenUnchanged = workInProgress.firstEffect === null;
              var currentInstance = current.stateNode;

              if (childrenUnchanged && updatePayload === null) {
                workInProgress.stateNode = currentInstance;
              } else {
                var recyclableInstance = workInProgress.stateNode;
                var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);

                if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {
                  markUpdate(workInProgress);
                }

                workInProgress.stateNode = newInstance;

                if (childrenUnchanged) {
                  markUpdate(workInProgress);
                } else {
                  appendAllChildren(newInstance, workInProgress);
                }
              }
            };

            updateHostText = function updateHostText(current, workInProgress, oldText, newText) {
              if (oldText !== newText) {
                var rootContainerInstance = getRootHostContainer();
                var currentHostContext = getHostContext();
                workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress);
                markUpdate(workInProgress);
              }
            };
          } else {
            invariant(false, "Persistent reconciler is disabled.");
          }
        } else {
          if (enableNoopReconciler) {
            updateHostContainer = function updateHostContainer(workInProgress) {};

            updateHostComponent = function updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance, currentHostContext) {};

            updateHostText = function updateHostText(current, workInProgress, oldText, newText) {};
          } else {
            invariant(false, "Noop reconciler is disabled.");
          }
        }

        function completeWork(current, workInProgress, renderExpirationTime) {
          var newProps = workInProgress.pendingProps;

          switch (workInProgress.tag) {
            case FunctionalComponent:
              return null;

            case ClassComponent:
              {
                popContextProvider(workInProgress);
                var instance = workInProgress.stateNode;
                var updateQueue = workInProgress.updateQueue;

                if (updateQueue !== null && updateQueue.capturedValues !== null) {
                  workInProgress.effectTag &= ~DidCapture;

                  if (typeof instance.componentDidCatch === "function") {
                    workInProgress.effectTag |= ErrLog;
                  } else {
                    updateQueue.capturedValues = null;
                  }
                }

                return null;
              }

            case HostRoot:
              {
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                var fiberRoot = workInProgress.stateNode;

                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }

                if (current === null || current.child === null) {
                  popHydrationState(workInProgress);
                  workInProgress.effectTag &= ~Placement;
                }

                updateHostContainer(workInProgress);
                var _updateQueue = workInProgress.updateQueue;

                if (_updateQueue !== null && _updateQueue.capturedValues !== null) {
                  workInProgress.effectTag |= ErrLog;
                }

                return null;
              }

            case HostComponent:
              {
                popHostContext(workInProgress);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress.type;

                if (current !== null && workInProgress.stateNode != null) {
                  var oldProps = current.memoizedProps;
                  var _instance = workInProgress.stateNode;
                  var currentHostContext = getHostContext();
                  var updatePayload = prepareUpdate(_instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
                  updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance, currentHostContext);

                  if (current.ref !== workInProgress.ref) {
                    markRef(workInProgress);
                  }
                } else {
                  if (!newProps) {
                    invariant(workInProgress.stateNode !== null, "We must have new props for new mounts. This error is likely " + "caused by a bug in React. Please file an issue.");
                    return null;
                  }

                  var _currentHostContext = getHostContext();

                  var wasHydrated = popHydrationState(workInProgress);

                  if (wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, _currentHostContext)) {
                      markUpdate(workInProgress);
                    }
                  } else {
                    var _instance2 = createInstance(type, newProps, rootContainerInstance, _currentHostContext, workInProgress);

                    appendAllChildren(_instance2, workInProgress);

                    if (finalizeInitialChildren(_instance2, type, newProps, rootContainerInstance, _currentHostContext)) {
                      markUpdate(workInProgress);
                    }

                    workInProgress.stateNode = _instance2;
                  }

                  if (workInProgress.ref !== null) {
                    markRef(workInProgress);
                  }
                }

                return null;
              }

            case HostText:
              {
                var newText = newProps;

                if (current && workInProgress.stateNode != null) {
                  var oldText = current.memoizedProps;
                  updateHostText(current, workInProgress, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    invariant(workInProgress.stateNode !== null, "We must have new props for new mounts. This error is likely " + "caused by a bug in React. Please file an issue.");
                    return null;
                  }

                  var _rootContainerInstance = getRootHostContainer();

                  var _currentHostContext2 = getHostContext();

                  var _wasHydrated = popHydrationState(workInProgress);

                  if (_wasHydrated) {
                    if (prepareToHydrateHostTextInstance(workInProgress)) {
                      markUpdate(workInProgress);
                    }
                  } else {
                    workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext2, workInProgress);
                  }
                }

                return null;
              }

            case CallComponent:
              return moveCallToHandlerPhase(current, workInProgress, renderExpirationTime);

            case CallHandlerPhase:
              workInProgress.tag = CallComponent;
              return null;

            case ReturnComponent:
              return null;

            case Fragment:
              return null;

            case Mode:
              return null;

            case HostPortal:
              popHostContainer(workInProgress);
              updateHostContainer(workInProgress);
              return null;

            case ContextProvider:
              popProvider(workInProgress);
              return null;

            case ContextConsumer:
              return null;

            case IndeterminateComponent:
              invariant(false, "An indeterminate component should have become determinate before " + "completing. This error is likely caused by a bug in React. Please " + "file an issue.");

            default:
              invariant(false, "Unknown unit of work tag. This error is likely caused by a bug in " + "React. Please file an issue.");
          }
        }

        return {
          completeWork: completeWork
        };
      };

      function createCapturedValue(value, source) {
        return {
          value: value,
          source: source,
          stack: getStackAddendumByWorkInProgressFiber(source)
        };
      }

      var ReactFiberUnwindWork = function ReactFiberUnwindWork(hostContext, scheduleWork, isAlreadyFailedLegacyErrorBoundary) {
        var popHostContainer = hostContext.popHostContainer,
            popHostContext = hostContext.popHostContext;

        function throwException(returnFiber, sourceFiber, rawValue) {
          sourceFiber.effectTag |= Incomplete;
          sourceFiber.firstEffect = sourceFiber.lastEffect = null;
          var value = createCapturedValue(rawValue, sourceFiber);
          var workInProgress = returnFiber;

          do {
            switch (workInProgress.tag) {
              case HostRoot:
                {
                  var errorInfo = value;
                  ensureUpdateQueues(workInProgress);
                  var updateQueue = workInProgress.updateQueue;
                  updateQueue.capturedValues = [errorInfo];
                  workInProgress.effectTag |= ShouldCapture;
                  return;
                }

              case ClassComponent:
                var ctor = workInProgress.type;
                var _instance = workInProgress.stateNode;

                if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromCatch === "function" && enableGetDerivedStateFromCatch || _instance !== null && typeof _instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(_instance))) {
                  ensureUpdateQueues(workInProgress);
                  var _updateQueue = workInProgress.updateQueue;
                  var capturedValues = _updateQueue.capturedValues;

                  if (capturedValues === null) {
                    _updateQueue.capturedValues = [value];
                  } else {
                    capturedValues.push(value);
                  }

                  workInProgress.effectTag |= ShouldCapture;
                  return;
                }

                break;

              default:
                break;
            }

            workInProgress = workInProgress["return"];
          } while (workInProgress !== null);
        }

        function unwindWork(workInProgress) {
          switch (workInProgress.tag) {
            case ClassComponent:
              {
                popContextProvider(workInProgress);
                var effectTag = workInProgress.effectTag;

                if (effectTag & ShouldCapture) {
                  workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
                  return workInProgress;
                }

                return null;
              }

            case HostRoot:
              {
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                var _effectTag = workInProgress.effectTag;

                if (_effectTag & ShouldCapture) {
                  workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
                  return workInProgress;
                }

                return null;
              }

            case HostComponent:
              {
                popHostContext(workInProgress);
                return null;
              }

            case HostPortal:
              popHostContainer(workInProgress);
              return null;

            case ContextProvider:
              popProvider(workInProgress);
              return null;

            default:
              return null;
          }
        }

        return {
          throwException: throwException,
          unwindWork: unwindWork
        };
      };

      function showErrorDialog(capturedError) {
        var componentStack = capturedError.componentStack,
            error = capturedError.error;
        var errorToHandle = void 0;

        if (error instanceof Error) {
          var message = error.message,
              name = error.name;
          var summary = message ? name + ": " + message : name;
          errorToHandle = error;

          try {
            errorToHandle.message = summary + "\n\nThis error is located at:" + componentStack;
          } catch (e) {}
        } else if (typeof error === "string") {
          errorToHandle = new Error(error + "\n\nThis error is located at:" + componentStack);
        } else {
          errorToHandle = new Error("Unspecified error at:" + componentStack);
        }

        ExceptionsManager.handleException(errorToHandle, false);
        return false;
      }

      function logCapturedError(capturedError) {
        var logError = showErrorDialog(capturedError);

        if (logError === false) {
          return;
        }

        var error = capturedError.error;
        var suppressLogging = error && error.suppressReactErrorLogging;

        if (suppressLogging) {
          return;
        }

        {
          var componentName = capturedError.componentName,
              componentStack = capturedError.componentStack,
              errorBoundaryName = capturedError.errorBoundaryName,
              errorBoundaryFound = capturedError.errorBoundaryFound,
              willRetry = capturedError.willRetry;
          var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
          var errorBoundaryMessage = void 0;

          if (errorBoundaryFound && errorBoundaryName) {
            if (willRetry) {
              errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            } else {
              errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\n" + "Recreating the tree from scratch failed so React will unmount the tree.";
            }
          } else {
            errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\n" + "Visit https://fb.me/react-error-boundaries to learn more about error boundaries.";
          }

          var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage);
          console.error(combinedMessage);
        }
      }

      var invokeGuardedCallback$3 = ReactErrorUtils.invokeGuardedCallback;
      var hasCaughtError$1 = ReactErrorUtils.hasCaughtError;
      var clearCaughtError$1 = ReactErrorUtils.clearCaughtError;

      function logError(boundary, errorInfo) {
        var source = errorInfo.source;
        var stack = errorInfo.stack;

        if (stack === null) {
          stack = getStackAddendumByWorkInProgressFiber(source);
        }

        var capturedError = {
          componentName: source !== null ? getComponentName(source) : null,
          error: errorInfo.value,
          errorBoundary: boundary,
          componentStack: stack !== null ? stack : "",
          errorBoundaryName: null,
          errorBoundaryFound: false,
          willRetry: false
        };

        if (boundary !== null) {
          capturedError.errorBoundaryName = getComponentName(boundary);
          capturedError.errorBoundaryFound = capturedError.willRetry = boundary.tag === ClassComponent;
        } else {
          capturedError.errorBoundaryName = null;
          capturedError.errorBoundaryFound = capturedError.willRetry = false;
        }

        try {
          logCapturedError(capturedError);
        } catch (e) {
          var suppressLogging = e && e.suppressReactErrorLogging;

          if (!suppressLogging) {
            console.error(e);
          }
        }
      }

      var ReactFiberCommitWork = function ReactFiberCommitWork(config, captureError, scheduleWork, computeExpirationForFiber, markLegacyErrorBoundaryAsFailed, recalculateCurrentTime) {
        var getPublicInstance = config.getPublicInstance,
            mutation = config.mutation,
            persistence = config.persistence;

        var callComponentWillUnmountWithTimer = function callComponentWillUnmountWithTimer(current, instance) {
          startPhaseTimer(current, "componentWillUnmount");
          instance.props = current.memoizedProps;
          instance.state = current.memoizedState;
          instance.componentWillUnmount();
          stopPhaseTimer();
        };

        function safelyCallComponentWillUnmount(current, instance) {
          {
            invokeGuardedCallback$3(null, callComponentWillUnmountWithTimer, null, current, instance);

            if (hasCaughtError$1()) {
              var unmountError = clearCaughtError$1();
              captureError(current, unmountError);
            }
          }
        }

        function safelyDetachRef(current) {
          var ref = current.ref;

          if (ref !== null) {
            if (typeof ref === "function") {
              {
                invokeGuardedCallback$3(null, ref, null, null);

                if (hasCaughtError$1()) {
                  var refError = clearCaughtError$1();
                  captureError(current, refError);
                }
              }
            } else {
              ref.value = null;
            }
          }
        }

        function commitLifeCycles(finishedRoot, current, finishedWork, currentTime, committedExpirationTime) {
          switch (finishedWork.tag) {
            case ClassComponent:
              {
                var _instance = finishedWork.stateNode;

                if (finishedWork.effectTag & Update) {
                  if (current === null) {
                    startPhaseTimer(finishedWork, "componentDidMount");
                    _instance.props = finishedWork.memoizedProps;
                    _instance.state = finishedWork.memoizedState;

                    _instance.componentDidMount();

                    stopPhaseTimer();
                  } else {
                    var prevProps = current.memoizedProps;
                    var prevState = current.memoizedState;
                    startPhaseTimer(finishedWork, "componentDidUpdate");
                    _instance.props = finishedWork.memoizedProps;
                    _instance.state = finishedWork.memoizedState;

                    _instance.componentDidUpdate(prevProps, prevState);

                    stopPhaseTimer();
                  }
                }

                var updateQueue = finishedWork.updateQueue;

                if (updateQueue !== null) {
                  commitCallbacks(updateQueue, _instance);
                }

                return;
              }

            case HostRoot:
              {
                var _updateQueue = finishedWork.updateQueue;

                if (_updateQueue !== null) {
                  var _instance2 = null;

                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance2 = getPublicInstance(finishedWork.child.stateNode);
                        break;

                      case ClassComponent:
                        _instance2 = finishedWork.child.stateNode;
                        break;
                    }
                  }

                  commitCallbacks(_updateQueue, _instance2);
                }

                return;
              }

            case HostComponent:
              {
                var _instance3 = finishedWork.stateNode;

                if (current === null && finishedWork.effectTag & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance3, type, props, finishedWork);
                }

                return;
              }

            case HostText:
              {
                return;
              }

            case HostPortal:
              {
                return;
              }

            default:
              {
                invariant(false, "This unit of work tag should not have side-effects. This error is " + "likely caused by a bug in React. Please file an issue.");
              }
          }
        }

        function commitErrorLogging(finishedWork, onUncaughtError) {
          switch (finishedWork.tag) {
            case ClassComponent:
              {
                var ctor = finishedWork.type;
                var _instance4 = finishedWork.stateNode;
                var updateQueue = finishedWork.updateQueue;
                invariant(updateQueue !== null && updateQueue.capturedValues !== null, "An error logging effect should not have been scheduled if no errors " + "were captured. This error is likely caused by a bug in React. " + "Please file an issue.");
                var capturedErrors = updateQueue.capturedValues;
                updateQueue.capturedValues = null;

                if (typeof ctor.getDerivedStateFromCatch !== "function") {
                  markLegacyErrorBoundaryAsFailed(_instance4);
                }

                _instance4.props = finishedWork.memoizedProps;
                _instance4.state = finishedWork.memoizedState;

                for (var i = 0; i < capturedErrors.length; i++) {
                  var errorInfo = capturedErrors[i];
                  var _error = errorInfo.value;
                  logError(finishedWork, errorInfo);

                  _instance4.componentDidCatch(_error);
                }
              }
              break;

            case HostRoot:
              {
                var _updateQueue2 = finishedWork.updateQueue;
                invariant(_updateQueue2 !== null && _updateQueue2.capturedValues !== null, "An error logging effect should not have been scheduled if no errors " + "were captured. This error is likely caused by a bug in React. " + "Please file an issue.");
                var _capturedErrors = _updateQueue2.capturedValues;
                _updateQueue2.capturedValues = null;

                for (var _i = 0; _i < _capturedErrors.length; _i++) {
                  var _errorInfo = _capturedErrors[_i];
                  logError(finishedWork, _errorInfo);
                  onUncaughtError(_errorInfo.value);
                }

                break;
              }

            default:
              invariant(false, "This unit of work tag cannot capture errors.  This error is " + "likely caused by a bug in React. Please file an issue.");
          }
        }

        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;

          if (ref !== null) {
            var _instance5 = finishedWork.stateNode;
            var instanceToUse = void 0;

            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(_instance5);
                break;

              default:
                instanceToUse = _instance5;
            }

            if (typeof ref === "function") {
              ref(instanceToUse);
            } else {
              ref.value = instanceToUse;
            }
          }
        }

        function commitDetachRef(current) {
          var currentRef = current.ref;

          if (currentRef !== null) {
            if (typeof currentRef === "function") {
              currentRef(null);
            } else {
              currentRef.value = null;
            }
          }
        }

        function commitUnmount(current) {
          if (typeof onCommitUnmount === "function") {
            onCommitUnmount(current);
          }

          switch (current.tag) {
            case ClassComponent:
              {
                safelyDetachRef(current);
                var _instance6 = current.stateNode;

                if (typeof _instance6.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(current, _instance6);
                }

                return;
              }

            case HostComponent:
              {
                safelyDetachRef(current);
                return;
              }

            case CallComponent:
              {
                commitNestedUnmounts(current.stateNode);
                return;
              }

            case HostPortal:
              {
                if (enableMutatingReconciler && mutation) {
                  unmountHostComponents(current);
                } else if (enablePersistentReconciler && persistence) {
                  emptyPortalContainer(current);
                }

                return;
              }
          }
        }

        function commitNestedUnmounts(root) {
          var node = root;

          while (true) {
            commitUnmount(node);

            if (node.child !== null && (!mutation || node.tag !== HostPortal)) {
              node.child["return"] = node;
              node = node.child;
              continue;
            }

            if (node === root) {
              return;
            }

            while (node.sibling === null) {
              if (node["return"] === null || node["return"] === root) {
                return;
              }

              node = node["return"];
            }

            node.sibling["return"] = node["return"];
            node = node.sibling;
          }
        }

        function detachFiber(current) {
          current["return"] = null;
          current.child = null;

          if (current.alternate) {
            current.alternate.child = null;
            current.alternate["return"] = null;
          }
        }

        var emptyPortalContainer = void 0;

        if (!mutation) {
          var commitContainer = void 0;

          if (persistence) {
            var replaceContainerChildren = persistence.replaceContainerChildren,
                createContainerChildSet = persistence.createContainerChildSet;

            emptyPortalContainer = function emptyPortalContainer(current) {
              var portal = current.stateNode;
              var containerInfo = portal.containerInfo;
              var emptyChildSet = createContainerChildSet(containerInfo);
              replaceContainerChildren(containerInfo, emptyChildSet);
            };

            commitContainer = function commitContainer(finishedWork) {
              switch (finishedWork.tag) {
                case ClassComponent:
                  {
                    return;
                  }

                case HostComponent:
                  {
                    return;
                  }

                case HostText:
                  {
                    return;
                  }

                case HostRoot:
                case HostPortal:
                  {
                    var portalOrRoot = finishedWork.stateNode;
                    var containerInfo = portalOrRoot.containerInfo,
                        _pendingChildren = portalOrRoot.pendingChildren;
                    replaceContainerChildren(containerInfo, _pendingChildren);
                    return;
                  }

                default:
                  {
                    invariant(false, "This unit of work tag should not have side-effects. This error is " + "likely caused by a bug in React. Please file an issue.");
                  }
              }
            };
          } else {
            commitContainer = function commitContainer(finishedWork) {};
          }

          if (enablePersistentReconciler || enableNoopReconciler) {
            return {
              commitResetTextContent: function commitResetTextContent(finishedWork) {},
              commitPlacement: function commitPlacement(finishedWork) {},
              commitDeletion: function commitDeletion(current) {
                commitNestedUnmounts(current);
                detachFiber(current);
              },
              commitWork: function commitWork(current, finishedWork) {
                commitContainer(finishedWork);
              },
              commitLifeCycles: commitLifeCycles,
              commitErrorLogging: commitErrorLogging,
              commitAttachRef: commitAttachRef,
              commitDetachRef: commitDetachRef
            };
          } else if (persistence) {
            invariant(false, "Persistent reconciler is disabled.");
          } else {
            invariant(false, "Noop reconciler is disabled.");
          }
        }

        var commitMount = mutation.commitMount,
            commitUpdate = mutation.commitUpdate,
            resetTextContent = mutation.resetTextContent,
            commitTextUpdate = mutation.commitTextUpdate,
            appendChild = mutation.appendChild,
            appendChildToContainer = mutation.appendChildToContainer,
            insertBefore = mutation.insertBefore,
            insertInContainerBefore = mutation.insertInContainerBefore,
            removeChild = mutation.removeChild,
            removeChildFromContainer = mutation.removeChildFromContainer;

        function getHostParentFiber(fiber) {
          var parent = fiber["return"];

          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }

            parent = parent["return"];
          }

          invariant(false, "Expected to find a host parent. This error is likely caused by a bug " + "in React. Please file an issue.");
        }

        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }

        function getHostSibling(fiber) {
          var node = fiber;

          siblings: while (true) {
            while (node.sibling === null) {
              if (node["return"] === null || isHostParent(node["return"])) {
                return null;
              }

              node = node["return"];
            }

            node.sibling["return"] = node["return"];
            node = node.sibling;

            while (node.tag !== HostComponent && node.tag !== HostText) {
              if (node.effectTag & Placement) {
                continue siblings;
              }

              if (node.child === null || node.tag === HostPortal) {
                continue siblings;
              } else {
                node.child["return"] = node;
                node = node.child;
              }
            }

            if (!(node.effectTag & Placement)) {
              return node.stateNode;
            }
          }
        }

        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork);
          var parent = void 0;
          var isContainer = void 0;

          switch (parentFiber.tag) {
            case HostComponent:
              parent = parentFiber.stateNode;
              isContainer = false;
              break;

            case HostRoot:
              parent = parentFiber.stateNode.containerInfo;
              isContainer = true;
              break;

            case HostPortal:
              parent = parentFiber.stateNode.containerInfo;
              isContainer = true;
              break;

            default:
              invariant(false, "Invalid host parent fiber. This error is likely caused by a bug " + "in React. Please file an issue.");
          }

          if (parentFiber.effectTag & ContentReset) {
            resetTextContent(parent);
            parentFiber.effectTag &= ~ContentReset;
          }

          var before = getHostSibling(finishedWork);
          var node = finishedWork;

          while (true) {
            if (node.tag === HostComponent || node.tag === HostText) {
              if (before) {
                if (isContainer) {
                  insertInContainerBefore(parent, node.stateNode, before);
                } else {
                  insertBefore(parent, node.stateNode, before);
                }
              } else {
                if (isContainer) {
                  appendChildToContainer(parent, node.stateNode);
                } else {
                  appendChild(parent, node.stateNode);
                }
              }
            } else if (node.tag === HostPortal) {} else if (node.child !== null) {
              node.child["return"] = node;
              node = node.child;
              continue;
            }

            if (node === finishedWork) {
              return;
            }

            while (node.sibling === null) {
              if (node["return"] === null || node["return"] === finishedWork) {
                return;
              }

              node = node["return"];
            }

            node.sibling["return"] = node["return"];
            node = node.sibling;
          }
        }

        function unmountHostComponents(current) {
          var node = current;
          var currentParentIsValid = false;
          var currentParent = void 0;
          var currentParentIsContainer = void 0;

          while (true) {
            if (!currentParentIsValid) {
              var parent = node["return"];

              findParent: while (true) {
                invariant(parent !== null, "Expected to find a host parent. This error is likely caused by " + "a bug in React. Please file an issue.");

                switch (parent.tag) {
                  case HostComponent:
                    currentParent = parent.stateNode;
                    currentParentIsContainer = false;
                    break findParent;

                  case HostRoot:
                    currentParent = parent.stateNode.containerInfo;
                    currentParentIsContainer = true;
                    break findParent;

                  case HostPortal:
                    currentParent = parent.stateNode.containerInfo;
                    currentParentIsContainer = true;
                    break findParent;
                }

                parent = parent["return"];
              }

              currentParentIsValid = true;
            }

            if (node.tag === HostComponent || node.tag === HostText) {
              commitNestedUnmounts(node);

              if (currentParentIsContainer) {
                removeChildFromContainer(currentParent, node.stateNode);
              } else {
                removeChild(currentParent, node.stateNode);
              }
            } else if (node.tag === HostPortal) {
              currentParent = node.stateNode.containerInfo;

              if (node.child !== null) {
                node.child["return"] = node;
                node = node.child;
                continue;
              }
            } else {
              commitUnmount(node);

              if (node.child !== null) {
                node.child["return"] = node;
                node = node.child;
                continue;
              }
            }

            if (node === current) {
              return;
            }

            while (node.sibling === null) {
              if (node["return"] === null || node["return"] === current) {
                return;
              }

              node = node["return"];

              if (node.tag === HostPortal) {
                currentParentIsValid = false;
              }
            }

            node.sibling["return"] = node["return"];
            node = node.sibling;
          }
        }

        function commitDeletion(current) {
          unmountHostComponents(current);
          detachFiber(current);
        }

        function commitWork(current, finishedWork) {
          switch (finishedWork.tag) {
            case ClassComponent:
              {
                return;
              }

            case HostComponent:
              {
                var _instance7 = finishedWork.stateNode;

                if (_instance7 != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current !== null ? current.memoizedProps : newProps;
                  var type = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;

                  if (updatePayload !== null) {
                    commitUpdate(_instance7, updatePayload, type, oldProps, newProps, finishedWork);
                  }
                }

                return;
              }

            case HostText:
              {
                invariant(finishedWork.stateNode !== null, "This should have a text node initialized. This error is likely " + "caused by a bug in React. Please file an issue.");
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current !== null ? current.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
              }

            case HostRoot:
              {
                return;
              }

            default:
              {
                invariant(false, "This unit of work tag should not have side-effects. This error is " + "likely caused by a bug in React. Please file an issue.");
              }
          }
        }

        function commitResetTextContent(current) {
          resetTextContent(current.stateNode);
        }

        if (enableMutatingReconciler) {
          return {
            commitResetTextContent: commitResetTextContent,
            commitPlacement: commitPlacement,
            commitDeletion: commitDeletion,
            commitWork: commitWork,
            commitLifeCycles: commitLifeCycles,
            commitErrorLogging: commitErrorLogging,
            commitAttachRef: commitAttachRef,
            commitDetachRef: commitDetachRef
          };
        } else {
          invariant(false, "Mutating reconciler is disabled.");
        }
      };

      var NO_CONTEXT = {};

      var ReactFiberHostContext = function ReactFiberHostContext(config) {
        var getChildHostContext = config.getChildHostContext,
            getRootHostContext = config.getRootHostContext;
        var contextStackCursor = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);

        function requiredContext(c) {
          invariant(c !== NO_CONTEXT, "Expected host context to exist. This error is likely caused by a bug " + "in React. Please file an issue.");
          return c;
        }

        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }

        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor, nextRootContext, fiber);
        }

        function popHostContainer(fiber) {
          pop(contextStackCursor, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }

        function getHostContext() {
          var context = requiredContext(contextStackCursor.current);
          return context;
        }

        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context = requiredContext(contextStackCursor.current);
          var nextContext = getChildHostContext(context, fiber.type, rootInstance);

          if (context === nextContext) {
            return;
          }

          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor, nextContext, fiber);
        }

        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }

          pop(contextStackCursor, fiber);
          pop(contextFiberStackCursor, fiber);
        }

        function resetHostContainer() {
          contextStackCursor.current = NO_CONTEXT;
          rootInstanceStackCursor.current = NO_CONTEXT;
        }

        return {
          getHostContext: getHostContext,
          getRootHostContainer: getRootHostContainer,
          popHostContainer: popHostContainer,
          popHostContext: popHostContext,
          pushHostContainer: pushHostContainer,
          pushHostContext: pushHostContext,
          resetHostContainer: resetHostContainer
        };
      };

      var ReactFiberHydrationContext = function ReactFiberHydrationContext(config) {
        var shouldSetTextContent = config.shouldSetTextContent,
            hydration = config.hydration;

        if (!hydration) {
          return {
            enterHydrationState: function enterHydrationState() {
              return false;
            },
            resetHydrationState: function resetHydrationState() {},
            tryToClaimNextHydratableInstance: function tryToClaimNextHydratableInstance() {},
            prepareToHydrateHostInstance: function prepareToHydrateHostInstance() {
              invariant(false, "Expected prepareToHydrateHostInstance() to never be called. " + "This error is likely caused by a bug in React. Please file an issue.");
            },
            prepareToHydrateHostTextInstance: function prepareToHydrateHostTextInstance() {
              invariant(false, "Expected prepareToHydrateHostTextInstance() to never be called. " + "This error is likely caused by a bug in React. Please file an issue.");
            },
            popHydrationState: function popHydrationState(fiber) {
              return false;
            }
          };
        }

        var canHydrateInstance = hydration.canHydrateInstance,
            canHydrateTextInstance = hydration.canHydrateTextInstance,
            getNextHydratableSibling = hydration.getNextHydratableSibling,
            getFirstHydratableChild = hydration.getFirstHydratableChild,
            hydrateInstance = hydration.hydrateInstance,
            hydrateTextInstance = hydration.hydrateTextInstance,
            didNotMatchHydratedContainerTextInstance = hydration.didNotMatchHydratedContainerTextInstance,
            didNotMatchHydratedTextInstance = hydration.didNotMatchHydratedTextInstance,
            didNotHydrateContainerInstance = hydration.didNotHydrateContainerInstance,
            didNotHydrateInstance = hydration.didNotHydrateInstance,
            didNotFindHydratableContainerInstance = hydration.didNotFindHydratableContainerInstance,
            didNotFindHydratableContainerTextInstance = hydration.didNotFindHydratableContainerTextInstance,
            didNotFindHydratableInstance = hydration.didNotFindHydratableInstance,
            didNotFindHydratableTextInstance = hydration.didNotFindHydratableTextInstance;
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;

        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChild(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          return true;
        }

        function deleteHydratableInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot:
                didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                break;

              case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
            }
          }
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete["return"] = returnFiber;
          childToDelete.effectTag = Deletion;

          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }
        }

        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.effectTag |= Placement;
          {
            switch (returnFiber.tag) {
              case HostRoot:
                {
                  var parentContainer = returnFiber.stateNode.containerInfo;

                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableContainerInstance(parentContainer, type, props);
                      break;

                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableContainerTextInstance(parentContainer, text);
                      break;
                  }

                  break;
                }

              case HostComponent:
                {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;

                  switch (fiber.tag) {
                    case HostComponent:
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
                      break;

                    case HostText:
                      var _text = fiber.pendingProps;
                      didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                      break;
                  }

                  break;
                }

              default:
                return;
            }
          }
        }

        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent:
              {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type, props);

                if (instance !== null) {
                  fiber.stateNode = instance;
                  return true;
                }

                return false;
              }

            case HostText:
              {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);

                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  return true;
                }

                return false;
              }

            default:
              return false;
          }
        }

        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }

          var nextInstance = nextHydratableInstance;

          if (!nextInstance) {
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }

          if (!tryHydrate(fiber, nextInstance)) {
            nextInstance = getNextHydratableSibling(nextInstance);

            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }

            deleteHydratableInstance(hydrationParentFiber, nextHydratableInstance);
          }

          hydrationParentFiber = fiber;
          nextHydratableInstance = getFirstHydratableChild(nextInstance);
        }

        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
          fiber.updateQueue = updatePayload;

          if (updatePayload !== null) {
            return true;
          }

          return false;
        }

        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          {
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;

              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot:
                    {
                      var parentContainer = returnFiber.stateNode.containerInfo;
                      didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                      break;
                    }

                  case HostComponent:
                    {
                      var parentType = returnFiber.type;
                      var parentProps = returnFiber.memoizedProps;
                      var parentInstance = returnFiber.stateNode;
                      didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                      break;
                    }
                }
              }
            }
          }
          return shouldUpdate;
        }

        function popToNextHostParent(fiber) {
          var parent = fiber["return"];

          while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot) {
            parent = parent["return"];
          }

          hydrationParentFiber = parent;
        }

        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }

          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }

          var type = fiber.type;

          if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
            var nextInstance = nextHydratableInstance;

            while (nextInstance) {
              deleteHydratableInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }

          popToNextHostParent(fiber);
          nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          return true;
        }

        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
        }

        return {
          enterHydrationState: enterHydrationState,
          resetHydrationState: resetHydrationState,
          tryToClaimNextHydratableInstance: tryToClaimNextHydratableInstance,
          prepareToHydrateHostInstance: prepareToHydrateHostInstance,
          prepareToHydrateHostTextInstance: prepareToHydrateHostTextInstance,
          popHydrationState: popHydrationState
        };
      };

      var ReactFiberInstrumentation = {
        debugTool: null
      };
      var ReactFiberInstrumentation_1 = ReactFiberInstrumentation;
      var invokeGuardedCallback$2 = ReactErrorUtils.invokeGuardedCallback;
      var hasCaughtError = ReactErrorUtils.hasCaughtError;
      var clearCaughtError = ReactErrorUtils.clearCaughtError;
      var didWarnAboutStateTransition = void 0;
      var didWarnSetStateChildContext = void 0;
      var warnAboutUpdateOnUnmounted = void 0;
      var warnAboutInvalidUpdates = void 0;
      {
        didWarnAboutStateTransition = false;
        didWarnSetStateChildContext = false;
        var didWarnStateUpdateForUnmountedComponent = {};

        warnAboutUpdateOnUnmounted = function warnAboutUpdateOnUnmounted(fiber) {
          var componentName = getComponentName(fiber) || "ReactClass";

          if (didWarnStateUpdateForUnmountedComponent[componentName]) {
            return;
          }

          warning(false, "Can only update a mounted or mounting " + "component. This usually means you called setState, replaceState, " + "or forceUpdate on an unmounted component. This is a no-op.\n\nPlease " + "check the code for the %s component.", componentName);
          didWarnStateUpdateForUnmountedComponent[componentName] = true;
        };

        warnAboutInvalidUpdates = function warnAboutInvalidUpdates(instance) {
          switch (ReactDebugCurrentFiber.phase) {
            case "getChildContext":
              if (didWarnSetStateChildContext) {
                return;
              }

              warning(false, "setState(...): Cannot call setState() inside getChildContext()");
              didWarnSetStateChildContext = true;
              break;

            case "render":
              if (didWarnAboutStateTransition) {
                return;
              }

              warning(false, "Cannot update during an existing state transition (such as within " + "`render` or another component's constructor). Render methods should " + "be a pure function of props and state; constructor side-effects are " + "an anti-pattern, but can be moved to `componentWillMount`.");
              didWarnAboutStateTransition = true;
              break;
          }
        };
      }

      var ReactFiberScheduler = function ReactFiberScheduler(config) {
        var hostContext = ReactFiberHostContext(config);
        var popHostContext = hostContext.popHostContext,
            popHostContainer = hostContext.popHostContainer;
        var hydrationContext = ReactFiberHydrationContext(config);
        var resetHostContainer = hostContext.resetHostContainer;

        var _ReactFiberBeginWork = ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleWork, computeExpirationForFiber),
            beginWork = _ReactFiberBeginWork.beginWork;

        var _ReactFiberCompleteWo = ReactFiberCompleteWork(config, hostContext, hydrationContext),
            completeWork = _ReactFiberCompleteWo.completeWork;

        var _ReactFiberUnwindWork = ReactFiberUnwindWork(hostContext, scheduleWork, isAlreadyFailedLegacyErrorBoundary),
            throwException = _ReactFiberUnwindWork.throwException,
            unwindWork = _ReactFiberUnwindWork.unwindWork;

        var _ReactFiberCommitWork = ReactFiberCommitWork(config, onCommitPhaseError, scheduleWork, computeExpirationForFiber, markLegacyErrorBoundaryAsFailed, recalculateCurrentTime),
            commitResetTextContent = _ReactFiberCommitWork.commitResetTextContent,
            commitPlacement = _ReactFiberCommitWork.commitPlacement,
            commitDeletion = _ReactFiberCommitWork.commitDeletion,
            commitWork = _ReactFiberCommitWork.commitWork,
            commitLifeCycles = _ReactFiberCommitWork.commitLifeCycles,
            commitErrorLogging = _ReactFiberCommitWork.commitErrorLogging,
            commitAttachRef = _ReactFiberCommitWork.commitAttachRef,
            commitDetachRef = _ReactFiberCommitWork.commitDetachRef;

        var now = config.now,
            scheduleDeferredCallback = config.scheduleDeferredCallback,
            cancelDeferredCallback = config.cancelDeferredCallback,
            prepareForCommit = config.prepareForCommit,
            resetAfterCommit = config.resetAfterCommit;
        var originalStartTimeMs = now();
        var mostRecentCurrentTime = msToExpirationTime(0);
        var mostRecentCurrentTimeMs = originalStartTimeMs;
        var lastUniqueAsyncExpiration = 0;
        var expirationContext = NoWork;
        var isWorking = false;
        var nextUnitOfWork = null;
        var nextRoot = null;
        var nextRenderExpirationTime = NoWork;
        var nextEffect = null;
        var isCommitting = false;
        var isRootReadyForCommit = false;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var interruptedBy = null;
        var stashedWorkInProgressProperties = void 0;
        var replayUnitOfWork = void 0;

        if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
          stashedWorkInProgressProperties = null;

          replayUnitOfWork = function replayUnitOfWork(failedUnitOfWork, isAsync) {
            _extends(failedUnitOfWork, stashedWorkInProgressProperties);

            switch (failedUnitOfWork.tag) {
              case HostRoot:
                popHostContainer(failedUnitOfWork);
                popTopLevelContextObject(failedUnitOfWork);
                break;

              case HostComponent:
                popHostContext(failedUnitOfWork);
                break;

              case ClassComponent:
                popContextProvider(failedUnitOfWork);
                break;

              case HostPortal:
                popHostContainer(failedUnitOfWork);
                break;

              case ContextProvider:
                popProvider(failedUnitOfWork);
                break;
            }

            invokeGuardedCallback$2(null, workLoop, null, isAsync);

            if (hasCaughtError()) {
              clearCaughtError();
            } else {}
          };
        }

        function resetContextStack() {
          reset();
          resetContext();
          resetHostContainer();
          resetProviderStack();
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
          nextRoot = null;
          nextRenderExpirationTime = NoWork;
          nextUnitOfWork = null;
          isRootReadyForCommit = false;
        }

        function commitAllHostEffects() {
          while (nextEffect !== null) {
            {
              ReactDebugCurrentFiber.setCurrentFiber(nextEffect);
            }
            recordEffect();
            var effectTag = nextEffect.effectTag;

            if (effectTag & ContentReset) {
              commitResetTextContent(nextEffect);
            }

            if (effectTag & Ref) {
              var current = nextEffect.alternate;

              if (current !== null) {
                commitDetachRef(current);
              }
            }

            var primaryEffectTag = effectTag & (Placement | Update | Deletion);

            switch (primaryEffectTag) {
              case Placement:
                {
                  commitPlacement(nextEffect);
                  nextEffect.effectTag &= ~Placement;
                  break;
                }

              case PlacementAndUpdate:
                {
                  commitPlacement(nextEffect);
                  nextEffect.effectTag &= ~Placement;
                  var _current = nextEffect.alternate;
                  commitWork(_current, nextEffect);
                  break;
                }

              case Update:
                {
                  var _current2 = nextEffect.alternate;
                  commitWork(_current2, nextEffect);
                  break;
                }

              case Deletion:
                {
                  commitDeletion(nextEffect);
                  break;
                }
            }

            nextEffect = nextEffect.nextEffect;
          }

          {
            ReactDebugCurrentFiber.resetCurrentFiber();
          }
        }

        function commitAllLifeCycles(finishedRoot, currentTime, committedExpirationTime) {
          {
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();

            if (warnAboutDeprecatedLifecycles) {
              ReactStrictModeWarnings.flushPendingDeprecationWarnings();
            }
          }

          while (nextEffect !== null) {
            var effectTag = nextEffect.effectTag;

            if (effectTag & (Update | Callback)) {
              recordEffect();
              var current = nextEffect.alternate;
              commitLifeCycles(finishedRoot, current, nextEffect, currentTime, committedExpirationTime);
            }

            if (effectTag & ErrLog) {
              commitErrorLogging(nextEffect, onUncaughtError);
            }

            if (effectTag & Ref) {
              recordEffect();
              commitAttachRef(nextEffect);
            }

            var next = nextEffect.nextEffect;
            nextEffect.nextEffect = null;
            nextEffect = next;
          }
        }

        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }

        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }

        function commitRoot(finishedWork) {
          isWorking = true;
          isCommitting = true;
          startCommitTimer();
          var root = finishedWork.stateNode;
          invariant(root.current !== finishedWork, "Cannot commit the same tree as before. This is probably a bug " + "related to the return field. This error is likely caused by a bug " + "in React. Please file an issue.");
          var committedExpirationTime = root.pendingCommitExpirationTime;
          invariant(committedExpirationTime !== NoWork, "Cannot commit an incomplete root. This error is likely caused by a " + "bug in React. Please file an issue.");
          root.pendingCommitExpirationTime = NoWork;
          var currentTime = recalculateCurrentTime();
          ReactCurrentOwner.current = null;
          var firstEffect = void 0;

          if (finishedWork.effectTag > PerformedWork) {
            if (finishedWork.lastEffect !== null) {
              finishedWork.lastEffect.nextEffect = finishedWork;
              firstEffect = finishedWork.firstEffect;
            } else {
              firstEffect = finishedWork;
            }
          } else {
            firstEffect = finishedWork.firstEffect;
          }

          prepareForCommit(root.containerInfo);
          nextEffect = firstEffect;
          startCommitHostEffectsTimer();

          while (nextEffect !== null) {
            var didError = false;
            var error = void 0;
            {
              invokeGuardedCallback$2(null, commitAllHostEffects, null);

              if (hasCaughtError()) {
                didError = true;
                error = clearCaughtError();
              }
            }

            if (didError) {
              invariant(nextEffect !== null, "Should have next effect. This error is likely caused by a bug " + "in React. Please file an issue.");
              onCommitPhaseError(nextEffect, error);

              if (nextEffect !== null) {
                nextEffect = nextEffect.nextEffect;
              }
            }
          }

          stopCommitHostEffectsTimer();
          resetAfterCommit(root.containerInfo);
          root.current = finishedWork;
          nextEffect = firstEffect;
          startCommitLifeCyclesTimer();

          while (nextEffect !== null) {
            var _didError = false;

            var _error = void 0;

            {
              invokeGuardedCallback$2(null, commitAllLifeCycles, null, root, currentTime, committedExpirationTime);

              if (hasCaughtError()) {
                _didError = true;
                _error = clearCaughtError();
              }
            }

            if (_didError) {
              invariant(nextEffect !== null, "Should have next effect. This error is likely caused by a bug " + "in React. Please file an issue.");
              onCommitPhaseError(nextEffect, _error);

              if (nextEffect !== null) {
                nextEffect = nextEffect.nextEffect;
              }
            }
          }

          isCommitting = false;
          isWorking = false;
          stopCommitLifeCyclesTimer();
          stopCommitTimer();

          if (typeof onCommitRoot === "function") {
            onCommitRoot(finishedWork.stateNode);
          }

          if (true && ReactFiberInstrumentation_1.debugTool) {
            ReactFiberInstrumentation_1.debugTool.onCommitWork(finishedWork);
          }

          var remainingTime = root.current.expirationTime;

          if (remainingTime === NoWork) {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }

          return remainingTime;
        }

        function resetExpirationTime(workInProgress, renderTime) {
          if (renderTime !== Never && workInProgress.expirationTime === Never) {
            return;
          }

          var newExpirationTime = getUpdateExpirationTime(workInProgress);
          var child = workInProgress.child;

          while (child !== null) {
            if (child.expirationTime !== NoWork && (newExpirationTime === NoWork || newExpirationTime > child.expirationTime)) {
              newExpirationTime = child.expirationTime;
            }

            child = child.sibling;
          }

          workInProgress.expirationTime = newExpirationTime;
        }

        function completeUnitOfWork(workInProgress) {
          while (true) {
            var current = workInProgress.alternate;
            {
              ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
            }
            var returnFiber = workInProgress["return"];
            var siblingFiber = workInProgress.sibling;

            if ((workInProgress.effectTag & Incomplete) === NoEffect) {
              var next = completeWork(current, workInProgress, nextRenderExpirationTime);
              stopWorkTimer(workInProgress);
              resetExpirationTime(workInProgress, nextRenderExpirationTime);
              {
                ReactDebugCurrentFiber.resetCurrentFiber();
              }

              if (next !== null) {
                stopWorkTimer(workInProgress);

                if (true && ReactFiberInstrumentation_1.debugTool) {
                  ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
                }

                return next;
              }

              if (returnFiber !== null && (returnFiber.effectTag & Incomplete) === NoEffect) {
                if (returnFiber.firstEffect === null) {
                  returnFiber.firstEffect = workInProgress.firstEffect;
                }

                if (workInProgress.lastEffect !== null) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
                  }

                  returnFiber.lastEffect = workInProgress.lastEffect;
                }

                var effectTag = workInProgress.effectTag;

                if (effectTag > PerformedWork) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = workInProgress;
                  } else {
                    returnFiber.firstEffect = workInProgress;
                  }

                  returnFiber.lastEffect = workInProgress;
                }
              }

              if (true && ReactFiberInstrumentation_1.debugTool) {
                ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
              }

              if (siblingFiber !== null) {
                return siblingFiber;
              } else if (returnFiber !== null) {
                workInProgress = returnFiber;
                continue;
              } else {
                isRootReadyForCommit = true;
                return null;
              }
            } else {
              var _next = unwindWork(workInProgress);

              if (workInProgress.effectTag & DidCapture) {
                stopFailedWorkTimer(workInProgress);
              } else {
                stopWorkTimer(workInProgress);
              }

              {
                ReactDebugCurrentFiber.resetCurrentFiber();
              }

              if (_next !== null) {
                stopWorkTimer(workInProgress);

                if (true && ReactFiberInstrumentation_1.debugTool) {
                  ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
                }

                _next.effectTag &= HostEffectMask;
                return _next;
              }

              if (returnFiber !== null) {
                returnFiber.firstEffect = returnFiber.lastEffect = null;
                returnFiber.effectTag |= Incomplete;
              }

              if (true && ReactFiberInstrumentation_1.debugTool) {
                ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
              }

              if (siblingFiber !== null) {
                return siblingFiber;
              } else if (returnFiber !== null) {
                workInProgress = returnFiber;
                continue;
              } else {
                return null;
              }
            }
          }

          return null;
        }

        function performUnitOfWork(workInProgress) {
          var current = workInProgress.alternate;
          startWorkTimer(workInProgress);
          {
            ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
          }

          if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
            stashedWorkInProgressProperties = _extends({}, workInProgress);
          }

          var next = beginWork(current, workInProgress, nextRenderExpirationTime);
          {
            ReactDebugCurrentFiber.resetCurrentFiber();
          }

          if (true && ReactFiberInstrumentation_1.debugTool) {
            ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
          }

          if (next === null) {
            next = completeUnitOfWork(workInProgress);
          }

          ReactCurrentOwner.current = null;
          return next;
        }

        function workLoop(isAsync) {
          if (!isAsync) {
            while (nextUnitOfWork !== null) {
              nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
            }
          } else {
            while (nextUnitOfWork !== null && !shouldYield()) {
              nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
            }
          }
        }

        function renderRoot(root, expirationTime, isAsync) {
          invariant(!isWorking, "renderRoot was called recursively. This error is likely caused " + "by a bug in React. Please file an issue.");
          isWorking = true;

          if (expirationTime !== nextRenderExpirationTime || root !== nextRoot || nextUnitOfWork === null) {
            resetContextStack();
            nextRoot = root;
            nextRenderExpirationTime = expirationTime;
            nextUnitOfWork = createWorkInProgress(nextRoot.current, null, nextRenderExpirationTime);
            root.pendingCommitExpirationTime = NoWork;
          }

          var didFatal = false;
          startWorkLoopTimer(nextUnitOfWork);

          do {
            try {
              workLoop(isAsync);
            } catch (thrownValue) {
              if (nextUnitOfWork === null) {
                didFatal = true;
                onUncaughtError(thrownValue);
                break;
              }

              if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
                var failedUnitOfWork = nextUnitOfWork;
                replayUnitOfWork(failedUnitOfWork, isAsync);
              }

              var sourceFiber = nextUnitOfWork;
              var returnFiber = sourceFiber["return"];

              if (returnFiber === null) {
                didFatal = true;
                onUncaughtError(thrownValue);
                break;
              }

              throwException(returnFiber, sourceFiber, thrownValue);
              nextUnitOfWork = completeUnitOfWork(sourceFiber);
            }

            break;
          } while (true);

          stopWorkLoopTimer(interruptedBy);
          interruptedBy = null;
          isWorking = false;

          if (didFatal) {
            return null;
          } else if (nextUnitOfWork === null) {
            if (isRootReadyForCommit) {
              root.pendingCommitExpirationTime = expirationTime;
              var finishedWork = root.current.alternate;
              return finishedWork;
            } else {
              invariant(false, "Expired work should have completed. This error is likely caused " + "by a bug in React. Please file an issue.");
            }
          } else {
            return null;
          }
        }

        function scheduleCapture(sourceFiber, boundaryFiber, value, expirationTime) {
          var capturedValue = createCapturedValue(value, sourceFiber);
          var update = {
            expirationTime: expirationTime,
            partialState: null,
            callback: null,
            isReplace: false,
            isForced: false,
            capturedValue: capturedValue,
            next: null
          };
          insertUpdateIntoFiber(boundaryFiber, update);
          scheduleWork(boundaryFiber, expirationTime);
        }

        function dispatch(sourceFiber, value, expirationTime) {
          invariant(!isWorking || isCommitting, "dispatch: Cannot dispatch during the render phase.");
          var fiber = sourceFiber["return"];

          while (fiber !== null) {
            switch (fiber.tag) {
              case ClassComponent:
                var ctor = fiber.type;
                var instance = fiber.stateNode;

                if (typeof ctor.getDerivedStateFromCatch === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  scheduleCapture(sourceFiber, fiber, value, expirationTime);
                  return;
                }

                break;

              case HostRoot:
                scheduleCapture(sourceFiber, fiber, value, expirationTime);
                return;
            }

            fiber = fiber["return"];
          }

          if (sourceFiber.tag === HostRoot) {
            scheduleCapture(sourceFiber, sourceFiber, value, expirationTime);
          }
        }

        function onCommitPhaseError(fiber, error) {
          return dispatch(fiber, error, Sync);
        }

        function computeAsyncExpiration(currentTime) {
          var expirationMs = 5000;
          var bucketSizeMs = 250;
          return computeExpirationBucket(currentTime, expirationMs, bucketSizeMs);
        }

        function computeInteractiveExpiration(currentTime) {
          var expirationMs = 500;
          var bucketSizeMs = 100;
          return computeExpirationBucket(currentTime, expirationMs, bucketSizeMs);
        }

        function computeUniqueAsyncExpiration() {
          var currentTime = recalculateCurrentTime();
          var result = computeAsyncExpiration(currentTime);

          if (result <= lastUniqueAsyncExpiration) {
            result = lastUniqueAsyncExpiration + 1;
          }

          lastUniqueAsyncExpiration = result;
          return lastUniqueAsyncExpiration;
        }

        function computeExpirationForFiber(fiber) {
          var expirationTime = void 0;

          if (expirationContext !== NoWork) {
            expirationTime = expirationContext;
          } else if (isWorking) {
            if (isCommitting) {
              expirationTime = Sync;
            } else {
              expirationTime = nextRenderExpirationTime;
            }
          } else {
            if (fiber.mode & AsyncMode) {
              if (isBatchingInteractiveUpdates) {
                var currentTime = recalculateCurrentTime();
                expirationTime = computeInteractiveExpiration(currentTime);
              } else {
                var _currentTime = recalculateCurrentTime();

                expirationTime = computeAsyncExpiration(_currentTime);
              }
            } else {
              expirationTime = Sync;
            }
          }

          if (isBatchingInteractiveUpdates) {
            if (lowestPendingInteractiveExpirationTime === NoWork || expirationTime > lowestPendingInteractiveExpirationTime) {
              lowestPendingInteractiveExpirationTime = expirationTime;
            }
          }

          return expirationTime;
        }

        function scheduleWork(fiber, expirationTime) {
          return scheduleWorkImpl(fiber, expirationTime, false);
        }

        function scheduleWorkImpl(fiber, expirationTime, isErrorRecovery) {
          recordScheduleUpdate();
          {
            if (!isErrorRecovery && fiber.tag === ClassComponent) {
              var instance = fiber.stateNode;
              warnAboutInvalidUpdates(instance);
            }
          }
          var node = fiber;

          while (node !== null) {
            if (node.expirationTime === NoWork || node.expirationTime > expirationTime) {
              node.expirationTime = expirationTime;
            }

            if (node.alternate !== null) {
              if (node.alternate.expirationTime === NoWork || node.alternate.expirationTime > expirationTime) {
                node.alternate.expirationTime = expirationTime;
              }
            }

            if (node["return"] === null) {
              if (node.tag === HostRoot) {
                var root = node.stateNode;

                if (!isWorking && nextRenderExpirationTime !== NoWork && expirationTime < nextRenderExpirationTime) {
                  interruptedBy = fiber;
                  resetContextStack();
                }

                if (nextRoot !== root || !isWorking) {
                  requestWork(root, expirationTime);
                }

                if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
                  invariant(false, "Maximum update depth exceeded. This can happen when a " + "component repeatedly calls setState inside " + "componentWillUpdate or componentDidUpdate. React limits " + "the number of nested updates to prevent infinite loops.");
                }
              } else {
                {
                  if (!isErrorRecovery && fiber.tag === ClassComponent) {
                    warnAboutUpdateOnUnmounted(fiber);
                  }
                }
                return;
              }
            }

            node = node["return"];
          }
        }

        function recalculateCurrentTime() {
          mostRecentCurrentTimeMs = now() - originalStartTimeMs;
          mostRecentCurrentTime = msToExpirationTime(mostRecentCurrentTimeMs);
          return mostRecentCurrentTime;
        }

        function deferredUpdates(fn) {
          var previousExpirationContext = expirationContext;
          var currentTime = recalculateCurrentTime();
          expirationContext = computeAsyncExpiration(currentTime);

          try {
            return fn();
          } finally {
            expirationContext = previousExpirationContext;
          }
        }

        function syncUpdates(fn, a, b, c, d) {
          var previousExpirationContext = expirationContext;
          expirationContext = Sync;

          try {
            return fn(a, b, c, d);
          } finally {
            expirationContext = previousExpirationContext;
          }
        }

        var firstScheduledRoot = null;
        var lastScheduledRoot = null;
        var callbackExpirationTime = NoWork;
        var callbackID = -1;
        var isRendering = false;
        var nextFlushedRoot = null;
        var nextFlushedExpirationTime = NoWork;
        var lowestPendingInteractiveExpirationTime = NoWork;
        var deadlineDidExpire = false;
        var hasUnhandledError = false;
        var unhandledError = null;
        var deadline = null;
        var isBatchingUpdates = false;
        var isUnbatchingUpdates = false;
        var isBatchingInteractiveUpdates = false;
        var completedBatches = null;
        var NESTED_UPDATE_LIMIT = 1000;
        var nestedUpdateCount = 0;
        var timeHeuristicForUnitOfWork = 1;

        function scheduleCallbackWithExpiration(expirationTime) {
          if (callbackExpirationTime !== NoWork) {
            if (expirationTime > callbackExpirationTime) {
              return;
            } else {
              cancelDeferredCallback(callbackID);
            }
          } else {
            startRequestCallbackTimer();
          }

          var currentMs = now() - originalStartTimeMs;
          var expirationMs = expirationTimeToMs(expirationTime);
          var timeout = expirationMs - currentMs;
          callbackExpirationTime = expirationTime;
          callbackID = scheduleDeferredCallback(performAsyncWork, {
            timeout: timeout
          });
        }

        function requestWork(root, expirationTime) {
          addRootToSchedule(root, expirationTime);

          if (isRendering) {
            return;
          }

          if (isBatchingUpdates) {
            if (isUnbatchingUpdates) {
              nextFlushedRoot = root;
              nextFlushedExpirationTime = Sync;
              performWorkOnRoot(root, Sync, false);
            }

            return;
          }

          if (expirationTime === Sync) {
            performSyncWork();
          } else {
            scheduleCallbackWithExpiration(expirationTime);
          }
        }

        function addRootToSchedule(root, expirationTime) {
          if (root.nextScheduledRoot === null) {
            root.remainingExpirationTime = expirationTime;

            if (lastScheduledRoot === null) {
              firstScheduledRoot = lastScheduledRoot = root;
              root.nextScheduledRoot = root;
            } else {
              lastScheduledRoot.nextScheduledRoot = root;
              lastScheduledRoot = root;
              lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
            }
          } else {
            var remainingExpirationTime = root.remainingExpirationTime;

            if (remainingExpirationTime === NoWork || expirationTime < remainingExpirationTime) {
              root.remainingExpirationTime = expirationTime;
            }
          }
        }

        function findHighestPriorityRoot() {
          var highestPriorityWork = NoWork;
          var highestPriorityRoot = null;

          if (lastScheduledRoot !== null) {
            var previousScheduledRoot = lastScheduledRoot;
            var root = firstScheduledRoot;

            while (root !== null) {
              var remainingExpirationTime = root.remainingExpirationTime;

              if (remainingExpirationTime === NoWork) {
                invariant(previousScheduledRoot !== null && lastScheduledRoot !== null, "Should have a previous and last root. This error is likely " + "caused by a bug in React. Please file an issue.");

                if (root === root.nextScheduledRoot) {
                  root.nextScheduledRoot = null;
                  firstScheduledRoot = lastScheduledRoot = null;
                  break;
                } else if (root === firstScheduledRoot) {
                  var next = root.nextScheduledRoot;
                  firstScheduledRoot = next;
                  lastScheduledRoot.nextScheduledRoot = next;
                  root.nextScheduledRoot = null;
                } else if (root === lastScheduledRoot) {
                  lastScheduledRoot = previousScheduledRoot;
                  lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
                  root.nextScheduledRoot = null;
                  break;
                } else {
                  previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot;
                  root.nextScheduledRoot = null;
                }

                root = previousScheduledRoot.nextScheduledRoot;
              } else {
                if (highestPriorityWork === NoWork || remainingExpirationTime < highestPriorityWork) {
                  highestPriorityWork = remainingExpirationTime;
                  highestPriorityRoot = root;
                }

                if (root === lastScheduledRoot) {
                  break;
                }

                previousScheduledRoot = root;
                root = root.nextScheduledRoot;
              }
            }
          }

          var previousFlushedRoot = nextFlushedRoot;

          if (previousFlushedRoot !== null && previousFlushedRoot === highestPriorityRoot && highestPriorityWork === Sync) {
            nestedUpdateCount++;
          } else {
            nestedUpdateCount = 0;
          }

          nextFlushedRoot = highestPriorityRoot;
          nextFlushedExpirationTime = highestPriorityWork;
        }

        function performAsyncWork(dl) {
          performWork(NoWork, true, dl);
        }

        function performSyncWork() {
          performWork(Sync, false, null);
        }

        function performWork(minExpirationTime, isAsync, dl) {
          deadline = dl;
          findHighestPriorityRoot();

          if (enableUserTimingAPI && deadline !== null) {
            var didExpire = nextFlushedExpirationTime < recalculateCurrentTime();
            stopRequestCallbackTimer(didExpire);
          }

          if (isAsync) {
            while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && (minExpirationTime === NoWork || minExpirationTime >= nextFlushedExpirationTime) && (!deadlineDidExpire || recalculateCurrentTime() >= nextFlushedExpirationTime)) {
              performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, !deadlineDidExpire);
              findHighestPriorityRoot();
            }
          } else {
            while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && (minExpirationTime === NoWork || minExpirationTime >= nextFlushedExpirationTime)) {
              performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, false);
              findHighestPriorityRoot();
            }
          }

          if (deadline !== null) {
            callbackExpirationTime = NoWork;
            callbackID = -1;
          }

          if (nextFlushedExpirationTime !== NoWork) {
            scheduleCallbackWithExpiration(nextFlushedExpirationTime);
          }

          deadline = null;
          deadlineDidExpire = false;
          finishRendering();
        }

        function flushRoot(root, expirationTime) {
          invariant(!isRendering, "work.commit(): Cannot commit while already rendering. This likely " + "means you attempted to commit from inside a lifecycle method.");
          performWorkOnRoot(root, expirationTime, false);
          finishRendering();
        }

        function finishRendering() {
          nestedUpdateCount = 0;

          if (completedBatches !== null) {
            var batches = completedBatches;
            completedBatches = null;

            for (var i = 0; i < batches.length; i++) {
              var batch = batches[i];

              try {
                batch._onComplete();
              } catch (error) {
                if (!hasUnhandledError) {
                  hasUnhandledError = true;
                  unhandledError = error;
                }
              }
            }
          }

          if (hasUnhandledError) {
            var error = unhandledError;
            unhandledError = null;
            hasUnhandledError = false;
            throw error;
          }
        }

        function performWorkOnRoot(root, expirationTime, isAsync) {
          invariant(!isRendering, "performWorkOnRoot was called recursively. This error is likely caused " + "by a bug in React. Please file an issue.");
          isRendering = true;

          if (!isAsync) {
            var finishedWork = root.finishedWork;

            if (finishedWork !== null) {
              completeRoot(root, finishedWork, expirationTime);
            } else {
              root.finishedWork = null;
              finishedWork = renderRoot(root, expirationTime, false);

              if (finishedWork !== null) {
                completeRoot(root, finishedWork, expirationTime);
              }
            }
          } else {
            var _finishedWork = root.finishedWork;

            if (_finishedWork !== null) {
              completeRoot(root, _finishedWork, expirationTime);
            } else {
              root.finishedWork = null;
              _finishedWork = renderRoot(root, expirationTime, true);

              if (_finishedWork !== null) {
                if (!shouldYield()) {
                  completeRoot(root, _finishedWork, expirationTime);
                } else {
                  root.finishedWork = _finishedWork;
                }
              }
            }
          }

          isRendering = false;
        }

        function completeRoot(root, finishedWork, expirationTime) {
          var firstBatch = root.firstBatch;

          if (firstBatch !== null && firstBatch._expirationTime <= expirationTime) {
            if (completedBatches === null) {
              completedBatches = [firstBatch];
            } else {
              completedBatches.push(firstBatch);
            }

            if (firstBatch._defer) {
              root.finishedWork = finishedWork;
              root.remainingExpirationTime = NoWork;
              return;
            }
          }

          root.finishedWork = null;
          root.remainingExpirationTime = commitRoot(finishedWork);
        }

        function shouldYield() {
          if (deadline === null) {
            return false;
          }

          if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
            return false;
          }

          deadlineDidExpire = true;
          return true;
        }

        function onUncaughtError(error) {
          invariant(nextFlushedRoot !== null, "Should be working on a root. This error is likely caused by a bug in " + "React. Please file an issue.");
          nextFlushedRoot.remainingExpirationTime = NoWork;

          if (!hasUnhandledError) {
            hasUnhandledError = true;
            unhandledError = error;
          }
        }

        function batchedUpdates(fn, a) {
          var previousIsBatchingUpdates = isBatchingUpdates;
          isBatchingUpdates = true;

          try {
            return fn(a);
          } finally {
            isBatchingUpdates = previousIsBatchingUpdates;

            if (!isBatchingUpdates && !isRendering) {
              performSyncWork();
            }
          }
        }

        function unbatchedUpdates(fn, a) {
          if (isBatchingUpdates && !isUnbatchingUpdates) {
            isUnbatchingUpdates = true;

            try {
              return fn(a);
            } finally {
              isUnbatchingUpdates = false;
            }
          }

          return fn(a);
        }

        function flushSync(fn, a) {
          invariant(!isRendering, "flushSync was called from inside a lifecycle method. It cannot be " + "called when React is already rendering.");
          var previousIsBatchingUpdates = isBatchingUpdates;
          isBatchingUpdates = true;

          try {
            return syncUpdates(fn, a);
          } finally {
            isBatchingUpdates = previousIsBatchingUpdates;
            performSyncWork();
          }
        }

        function interactiveUpdates(fn, a, b) {
          if (isBatchingInteractiveUpdates) {
            return fn(a, b);
          }

          if (!isBatchingUpdates && !isRendering && lowestPendingInteractiveExpirationTime !== NoWork) {
            performWork(lowestPendingInteractiveExpirationTime, false, null);
            lowestPendingInteractiveExpirationTime = NoWork;
          }

          var previousIsBatchingInteractiveUpdates = isBatchingInteractiveUpdates;
          var previousIsBatchingUpdates = isBatchingUpdates;
          isBatchingInteractiveUpdates = true;
          isBatchingUpdates = true;

          try {
            return fn(a, b);
          } finally {
            isBatchingInteractiveUpdates = previousIsBatchingInteractiveUpdates;
            isBatchingUpdates = previousIsBatchingUpdates;

            if (!isBatchingUpdates && !isRendering) {
              performSyncWork();
            }
          }
        }

        function flushInteractiveUpdates() {
          if (!isRendering && lowestPendingInteractiveExpirationTime !== NoWork) {
            performWork(lowestPendingInteractiveExpirationTime, false, null);
            lowestPendingInteractiveExpirationTime = NoWork;
          }
        }

        function flushControlled(fn) {
          var previousIsBatchingUpdates = isBatchingUpdates;
          isBatchingUpdates = true;

          try {
            syncUpdates(fn);
          } finally {
            isBatchingUpdates = previousIsBatchingUpdates;

            if (!isBatchingUpdates && !isRendering) {
              performWork(Sync, false, null);
            }
          }
        }

        return {
          recalculateCurrentTime: recalculateCurrentTime,
          computeExpirationForFiber: computeExpirationForFiber,
          scheduleWork: scheduleWork,
          requestWork: requestWork,
          flushRoot: flushRoot,
          batchedUpdates: batchedUpdates,
          unbatchedUpdates: unbatchedUpdates,
          flushSync: flushSync,
          flushControlled: flushControlled,
          deferredUpdates: deferredUpdates,
          syncUpdates: syncUpdates,
          interactiveUpdates: interactiveUpdates,
          flushInteractiveUpdates: flushInteractiveUpdates,
          computeUniqueAsyncExpiration: computeUniqueAsyncExpiration
        };
      };

      var didWarnAboutNestedUpdates = void 0;
      {
        didWarnAboutNestedUpdates = false;
      }

      function getContextForSubtree(parentComponent) {
        if (!parentComponent) {
          return emptyObject;
        }

        var fiber = get(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        return isContextProvider(fiber) ? processChildContext(fiber, parentContext) : parentContext;
      }

      var ReactFiberReconciler$1 = function ReactFiberReconciler$1(config) {
        var getPublicInstance = config.getPublicInstance;

        var _ReactFiberScheduler = ReactFiberScheduler(config),
            computeUniqueAsyncExpiration = _ReactFiberScheduler.computeUniqueAsyncExpiration,
            recalculateCurrentTime = _ReactFiberScheduler.recalculateCurrentTime,
            computeExpirationForFiber = _ReactFiberScheduler.computeExpirationForFiber,
            scheduleWork = _ReactFiberScheduler.scheduleWork,
            requestWork = _ReactFiberScheduler.requestWork,
            flushRoot = _ReactFiberScheduler.flushRoot,
            batchedUpdates = _ReactFiberScheduler.batchedUpdates,
            unbatchedUpdates = _ReactFiberScheduler.unbatchedUpdates,
            flushSync = _ReactFiberScheduler.flushSync,
            flushControlled = _ReactFiberScheduler.flushControlled,
            deferredUpdates = _ReactFiberScheduler.deferredUpdates,
            syncUpdates = _ReactFiberScheduler.syncUpdates,
            interactiveUpdates = _ReactFiberScheduler.interactiveUpdates,
            flushInteractiveUpdates = _ReactFiberScheduler.flushInteractiveUpdates;

        function scheduleRootUpdate(current, element, currentTime, expirationTime, callback) {
          {
            if (ReactDebugCurrentFiber.phase === "render" && ReactDebugCurrentFiber.current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              warning(false, "Render methods should be a pure function of props and state; " + "triggering nested component updates from render is not allowed. " + "If necessary, trigger nested updates in componentDidUpdate.\n\n" + "Check the render method of %s.", getComponentName(ReactDebugCurrentFiber.current) || "Unknown");
            }
          }
          callback = callback === undefined ? null : callback;
          {
            warning(callback === null || typeof callback === "function", "render(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callback);
          }
          var update = {
            expirationTime: expirationTime,
            partialState: {
              element: element
            },
            callback: callback,
            isReplace: false,
            isForced: false,
            capturedValue: null,
            next: null
          };
          insertUpdateIntoFiber(current, update);
          scheduleWork(current, expirationTime);
          return expirationTime;
        }

        function _updateContainerAtExpirationTime(element, container, parentComponent, currentTime, expirationTime, callback) {
          var current = container.current;
          {
            if (ReactFiberInstrumentation_1.debugTool) {
              if (current.alternate === null) {
                ReactFiberInstrumentation_1.debugTool.onMountContainer(container);
              } else if (element === null) {
                ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);
              } else {
                ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);
              }
            }
          }
          var context = getContextForSubtree(parentComponent);

          if (container.context === null) {
            container.context = context;
          } else {
            container.pendingContext = context;
          }

          return scheduleRootUpdate(current, element, currentTime, expirationTime, callback);
        }

        function findHostInstance(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);

          if (hostFiber === null) {
            return null;
          }

          return hostFiber.stateNode;
        }

        return {
          createContainer: function createContainer(containerInfo, isAsync, hydrate) {
            return createFiberRoot(containerInfo, isAsync, hydrate);
          },
          updateContainer: function updateContainer(element, container, parentComponent, callback) {
            var current = container.current;
            var currentTime = recalculateCurrentTime();
            var expirationTime = computeExpirationForFiber(current);
            return _updateContainerAtExpirationTime(element, container, parentComponent, currentTime, expirationTime, callback);
          },
          updateContainerAtExpirationTime: function updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback) {
            var currentTime = recalculateCurrentTime();
            return _updateContainerAtExpirationTime(element, container, parentComponent, currentTime, expirationTime, callback);
          },
          flushRoot: flushRoot,
          requestWork: requestWork,
          computeUniqueAsyncExpiration: computeUniqueAsyncExpiration,
          batchedUpdates: batchedUpdates,
          unbatchedUpdates: unbatchedUpdates,
          deferredUpdates: deferredUpdates,
          syncUpdates: syncUpdates,
          interactiveUpdates: interactiveUpdates,
          flushInteractiveUpdates: flushInteractiveUpdates,
          flushControlled: flushControlled,
          flushSync: flushSync,
          getPublicRootInstance: function getPublicRootInstance(container) {
            var containerFiber = container.current;

            if (!containerFiber.child) {
              return null;
            }

            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);

              default:
                return containerFiber.child.stateNode;
            }
          },
          findHostInstance: findHostInstance,
          findHostInstanceWithNoPortals: function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

            if (hostFiber === null) {
              return null;
            }

            return hostFiber.stateNode;
          },
          injectIntoDevTools: function injectIntoDevTools(devToolsConfig) {
            var _findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            return injectInternals(_extends({}, devToolsConfig, {
              findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {
                return findHostInstance(fiber);
              },
              findFiberByHostInstance: function findFiberByHostInstance(instance) {
                if (!_findFiberByHostInstance) {
                  return null;
                }

                return _findFiberByHostInstance(instance);
              }
            }));
          }
        };
      };

      var ReactFiberReconciler$2 = Object.freeze({
        default: ReactFiberReconciler$1
      });
      var ReactFiberReconciler$3 = ReactFiberReconciler$2 && ReactFiberReconciler$1 || ReactFiberReconciler$2;
      var reactReconciler = ReactFiberReconciler$3["default"] ? ReactFiberReconciler$3["default"] : ReactFiberReconciler$3;
      var viewConfigCallbacks = new Map();
      var viewConfigs = new Map();

      function register(name, callback) {
        invariant(!viewConfigCallbacks.has(name), "Tried to register two views with the same name %s", name);
        viewConfigCallbacks.set(name, callback);
        return name;
      }

      function get$1(name) {
        var viewConfig = void 0;

        if (!viewConfigs.has(name)) {
          var callback = viewConfigCallbacks.get(name);
          invariant(typeof callback === "function", "View config not found for name %s", name);
          viewConfigCallbacks.set(name, null);
          viewConfig = callback();
          viewConfigs.set(name, viewConfig);
        } else {
          viewConfig = viewConfigs.get(name);
        }

        invariant(viewConfig, "View config not found for name %s", name);
        return viewConfig;
      }

      function _classCallCheck$2(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      var ReactNativeFiberHostComponent = function () {
        function ReactNativeFiberHostComponent(tag, viewConfig) {
          _classCallCheck$2(this, ReactNativeFiberHostComponent);

          this._nativeTag = tag;
          this._children = [];
          this.viewConfig = viewConfig;
        }

        ReactNativeFiberHostComponent.prototype.blur = function blur() {
          TextInputState.blurTextInput(this._nativeTag);
        };

        ReactNativeFiberHostComponent.prototype.focus = function focus() {
          TextInputState.focusTextInput(this._nativeTag);
        };

        ReactNativeFiberHostComponent.prototype.measure = function measure(callback) {
          UIManager.measure(this._nativeTag, mountSafeCallback(this, callback));
        };

        ReactNativeFiberHostComponent.prototype.measureInWindow = function measureInWindow(callback) {
          UIManager.measureInWindow(this._nativeTag, mountSafeCallback(this, callback));
        };

        ReactNativeFiberHostComponent.prototype.measureLayout = function measureLayout(relativeToNativeNode, onSuccess, onFail) {
          UIManager.measureLayout(this._nativeTag, relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
        };

        ReactNativeFiberHostComponent.prototype.setNativeProps = function setNativeProps(nativeProps) {
          {
            warnForStyleProps(nativeProps, this.viewConfig.validAttributes);
          }
          var updatePayload = create(nativeProps, this.viewConfig.validAttributes);

          if (updatePayload != null) {
            UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, updatePayload);
          }
        };

        return ReactNativeFiberHostComponent;
      }();

      var hasNativePerformanceNow = typeof performance === "object" && typeof performance.now === "function";
      var now = hasNativePerformanceNow ? function () {
        return performance.now();
      } : function () {
        return Date.now();
      };
      var scheduledCallback = null;
      var frameDeadline = 0;
      var frameDeadlineObject = {
        timeRemaining: function timeRemaining() {
          return frameDeadline - now();
        }
      };

      function setTimeoutCallback() {
        frameDeadline = now() + 5;
        var callback = scheduledCallback;
        scheduledCallback = null;

        if (callback !== null) {
          callback(frameDeadlineObject);
        }
      }

      function scheduleDeferredCallback(callback) {
        scheduledCallback = callback;
        return setTimeout(setTimeoutCallback, 1);
      }

      function cancelDeferredCallback(callbackID) {
        scheduledCallback = null;
        clearTimeout(callbackID);
      }

      function recursivelyUncacheFiberNode(node) {
        if (typeof node === "number") {
          uncacheFiberNode(node);
        } else {
          uncacheFiberNode(node._nativeTag);

          node._children.forEach(recursivelyUncacheFiberNode);
        }
      }

      var NativeRenderer = reactReconciler({
        appendInitialChild: function appendInitialChild(parentInstance, child) {
          parentInstance._children.push(child);
        },
        createInstance: function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var tag = ReactNativeTagHandles.allocateTag();
          var viewConfig = get$1(type);
          {
            for (var key in viewConfig.validAttributes) {
              if (props.hasOwnProperty(key)) {
                deepFreezeAndThrowOnMutationInDev(props[key]);
              }
            }
          }
          var updatePayload = create(props, viewConfig.validAttributes);
          UIManager.createView(tag, viewConfig.uiViewClassName, rootContainerInstance, updatePayload);
          var component = new ReactNativeFiberHostComponent(tag, viewConfig);
          precacheFiberNode(internalInstanceHandle, tag);
          updateFiberProps(tag, props);
          return component;
        },
        createTextInstance: function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          var tag = ReactNativeTagHandles.allocateTag();
          UIManager.createView(tag, "RCTRawText", rootContainerInstance, {
            text: text
          });
          precacheFiberNode(internalInstanceHandle, tag);
          return tag;
        },
        finalizeInitialChildren: function finalizeInitialChildren(parentInstance, type, props, rootContainerInstance) {
          if (parentInstance._children.length === 0) {
            return false;
          }

          var nativeTags = parentInstance._children.map(function (child) {
            return typeof child === "number" ? child : child._nativeTag;
          });

          UIManager.setChildren(parentInstance._nativeTag, nativeTags);
          return false;
        },
        getRootHostContext: function getRootHostContext() {
          return emptyObject;
        },
        getChildHostContext: function getChildHostContext() {
          return emptyObject;
        },
        getPublicInstance: function getPublicInstance(instance) {
          return instance;
        },
        now: now,
        prepareForCommit: function prepareForCommit() {},
        prepareUpdate: function prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, hostContext) {
          return emptyObject;
        },
        resetAfterCommit: function resetAfterCommit() {},
        scheduleDeferredCallback: scheduleDeferredCallback,
        cancelDeferredCallback: cancelDeferredCallback,
        shouldDeprioritizeSubtree: function shouldDeprioritizeSubtree(type, props) {
          return false;
        },
        shouldSetTextContent: function shouldSetTextContent(type, props) {
          return false;
        },
        mutation: {
          appendChild: function appendChild(parentInstance, child) {
            var childTag = typeof child === "number" ? child : child._nativeTag;
            var children = parentInstance._children;
            var index = children.indexOf(child);

            if (index >= 0) {
              children.splice(index, 1);
              children.push(child);
              UIManager.manageChildren(parentInstance._nativeTag, [index], [children.length - 1], [], [], []);
            } else {
              children.push(child);
              UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [children.length - 1], []);
            }
          },
          appendChildToContainer: function appendChildToContainer(parentInstance, child) {
            var childTag = typeof child === "number" ? child : child._nativeTag;
            UIManager.setChildren(parentInstance, [childTag]);
          },
          commitTextUpdate: function commitTextUpdate(textInstance, oldText, newText) {
            UIManager.updateView(textInstance, "RCTRawText", {
              text: newText
            });
          },
          commitMount: function commitMount(instance, type, newProps, internalInstanceHandle) {},
          commitUpdate: function commitUpdate(instance, updatePayloadTODO, type, oldProps, newProps, internalInstanceHandle) {
            var viewConfig = instance.viewConfig;
            updateFiberProps(instance._nativeTag, newProps);
            var updatePayload = diff(oldProps, newProps, viewConfig.validAttributes);

            if (updatePayload != null) {
              UIManager.updateView(instance._nativeTag, viewConfig.uiViewClassName, updatePayload);
            }
          },
          insertBefore: function insertBefore(parentInstance, child, beforeChild) {
            var children = parentInstance._children;
            var index = children.indexOf(child);

            if (index >= 0) {
              children.splice(index, 1);
              var beforeChildIndex = children.indexOf(beforeChild);
              children.splice(beforeChildIndex, 0, child);
              UIManager.manageChildren(parentInstance._nativeTag, [index], [beforeChildIndex], [], [], []);
            } else {
              var _beforeChildIndex = children.indexOf(beforeChild);

              children.splice(_beforeChildIndex, 0, child);
              var childTag = typeof child === "number" ? child : child._nativeTag;
              UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [_beforeChildIndex], []);
            }
          },
          insertInContainerBefore: function insertInContainerBefore(parentInstance, child, beforeChild) {
            invariant(typeof parentInstance !== "number", "Container does not support insertBefore operation");
          },
          removeChild: function removeChild(parentInstance, child) {
            recursivelyUncacheFiberNode(child);
            var children = parentInstance._children;
            var index = children.indexOf(child);
            children.splice(index, 1);
            UIManager.manageChildren(parentInstance._nativeTag, [], [], [], [], [index]);
          },
          removeChildFromContainer: function removeChildFromContainer(parentInstance, child) {
            recursivelyUncacheFiberNode(child);
            UIManager.manageChildren(parentInstance, [], [], [], [], [0]);
          },
          resetTextContent: function resetTextContent(instance) {}
        }
      });
      var getInspectorDataForViewTag = void 0;
      {
        var traverseOwnerTreeUp = function traverseOwnerTreeUp(hierarchy, instance) {
          if (instance) {
            hierarchy.unshift(instance);
            traverseOwnerTreeUp(hierarchy, instance._debugOwner);
          }
        };

        var getOwnerHierarchy = function getOwnerHierarchy(instance) {
          var hierarchy = [];
          traverseOwnerTreeUp(hierarchy, instance);
          return hierarchy;
        };

        var lastNonHostInstance = function lastNonHostInstance(hierarchy) {
          for (var i = hierarchy.length - 1; i > 1; i--) {
            var instance = hierarchy[i];

            if (instance.tag !== HostComponent) {
              return instance;
            }
          }

          return hierarchy[0];
        };

        var getHostProps = function getHostProps(fiber) {
          var host = findCurrentHostFiber(fiber);

          if (host) {
            return host.memoizedProps || emptyObject;
          }

          return emptyObject;
        };

        var getHostNode = function getHostNode(fiber, findNodeHandle) {
          var hostNode = void 0;

          while (fiber) {
            if (fiber.stateNode !== null && fiber.tag === HostComponent) {
              hostNode = findNodeHandle(fiber.stateNode);
            }

            if (hostNode) {
              return hostNode;
            }

            fiber = fiber.child;
          }

          return null;
        };

        var createHierarchy = function createHierarchy(fiberHierarchy) {
          return fiberHierarchy.map(function (fiber) {
            return {
              name: getComponentName(fiber),
              getInspectorData: function getInspectorData(findNodeHandle) {
                return {
                  measure: function measure(callback) {
                    return UIManager.measure(getHostNode(fiber, findNodeHandle), callback);
                  },
                  props: getHostProps(fiber),
                  source: fiber._debugSource
                };
              }
            };
          });
        };

        getInspectorDataForViewTag = function getInspectorDataForViewTag(viewTag) {
          var closestInstance = getInstanceFromTag(viewTag);

          if (!closestInstance) {
            return {
              hierarchy: [],
              props: emptyObject,
              selection: null,
              source: null
            };
          }

          var fiber = findCurrentFiberUsingSlowPath(closestInstance);
          var fiberHierarchy = getOwnerHierarchy(fiber);
          var instance = lastNonHostInstance(fiberHierarchy);
          var hierarchy = createHierarchy(fiberHierarchy);
          var props = getHostProps(instance);
          var source = instance._debugSource;
          var selection = fiberHierarchy.indexOf(instance);
          return {
            hierarchy: hierarchy,
            props: props,
            selection: selection,
            source: source
          };
        };
      }

      var createReactNativeComponentClass = function createReactNativeComponentClass(name, callback) {
        return register(name, callback);
      };

      function takeSnapshot(view, options) {
        if (typeof view !== "number" && view !== "window") {
          view = findNumericNodeHandleFiber(view) || "window";
        }

        return UIManager.__takeSnapshot(view, options);
      }

      injectFindHostInstance(NativeRenderer.findHostInstance);
      injection$2.injectRenderer(NativeRenderer);
      var roots = new Map();
      var ReactNativeRenderer = {
        NativeComponent: ReactNativeComponent,
        findNodeHandle: findNumericNodeHandleFiber,
        render: function render(element, containerTag, callback) {
          var root = roots.get(containerTag);

          if (!root) {
            root = NativeRenderer.createContainer(containerTag, false, false);
            roots.set(containerTag, root);
          }

          NativeRenderer.updateContainer(element, root, null, callback);
          return NativeRenderer.getPublicRootInstance(root);
        },
        unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
          var root = roots.get(containerTag);

          if (root) {
            NativeRenderer.updateContainer(null, root, null, function () {
              roots["delete"](containerTag);
            });
          }
        },
        unmountComponentAtNodeAndRemoveContainer: function unmountComponentAtNodeAndRemoveContainer(containerTag) {
          ReactNativeRenderer.unmountComponentAtNode(containerTag);
          UIManager.removeRootView(containerTag);
        },
        createPortal: function createPortal(children, containerTag) {
          var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
          return _createPortal(children, containerTag, null, key);
        },
        unstable_batchedUpdates: batchedUpdates,
        flushSync: NativeRenderer.flushSync,
        __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
          NativeMethodsMixin: NativeMethodsMixin,
          ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin,
          ReactNativeComponentTree: ReactNativeComponentTree,
          ReactNativePropRegistry: ReactNativePropRegistry,
          TouchHistoryMath: TouchHistoryMath,
          createReactNativeComponentClass: createReactNativeComponentClass,
          takeSnapshot: takeSnapshot
        }
      };
      {
        _extends(ReactNativeRenderer.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {
          ReactDebugTool: {
            addHook: function addHook() {},
            removeHook: function removeHook() {}
          },
          ReactPerf: {
            start: function start() {},
            stop: function stop() {},
            printInclusive: function printInclusive() {},
            printWasted: function printWasted() {}
          }
        });
      }
      NativeRenderer.injectIntoDevTools({
        findFiberByHostInstance: getInstanceFromTag,
        getInspectorDataForViewTag: getInspectorDataForViewTag,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: "react-native-renderer"
      });
      var ReactNativeRenderer$2 = Object.freeze({
        default: ReactNativeRenderer
      });
      var ReactNativeRenderer$3 = ReactNativeRenderer$2 && ReactNativeRenderer || ReactNativeRenderer$2;
      var reactNativeRenderer = ReactNativeRenderer$3["default"] ? ReactNativeRenderer$3["default"] : ReactNativeRenderer$3;
      module.exports = reactNativeRenderer;
    })();
  }
},22,[23,13,56,57,109,110,111,112,104,113,116,118,120,31,121,122],"ReactNativeRenderer-dev");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  if (global.GLOBAL === undefined) {
    global.GLOBAL = global;
  }

  if (global.window === undefined) {
    global.window = global;
  }

  var defineLazyObjectProperty = _require2(_dependencyMap[0], 'defineLazyObjectProperty');

  var _shouldPolyfillCollection = _require2(_dependencyMap[1], '_shouldPolyfillES6Collection');

  if (_shouldPolyfillCollection('Map')) {
    polyfillGlobal('Map', function () {
      return _require2(_dependencyMap[2], 'Map');
    });
  }

  if (_shouldPolyfillCollection('Set')) {
    polyfillGlobal('Set', function () {
      return _require2(_dependencyMap[3], 'Set');
    });
  }

  function defineLazyProperty(object, name, getValue) {
    var descriptor = Object.getOwnPropertyDescriptor(object, name);

    if (__DEV__ && descriptor) {
      var backupName = "original" + name[0].toUpperCase() + name.substr(1);
      Object.defineProperty(object, backupName, _extends({}, descriptor, {
        value: object[name]
      }));
    }

    var _ref = descriptor || {},
        enumerable = _ref.enumerable,
        writable = _ref.writable,
        configurable = _ref.configurable;

    if (descriptor && !configurable) {
      console.error('Failed to set polyfill. ' + name + ' is not configurable.');
      return;
    }

    defineLazyObjectProperty(object, name, {
      get: getValue,
      enumerable: enumerable !== false,
      writable: writable !== false
    });
  }

  function polyfillGlobal(name, getValue) {
    defineLazyProperty(global, name, getValue);
  }

  global.process = global.process || {};
  global.process.env = global.process.env || {};

  if (!global.process.env.NODE_ENV) {
    global.process.env.NODE_ENV = __DEV__ ? 'development' : 'production';
  }

  if (global.__RCTProfileIsProfiling) {
    var Systrace = _require2(_dependencyMap[4], 'Systrace');

    Systrace.installReactHook(true);
    Systrace.setEnabled(true);
  }

  var ExceptionsManager = _require2(_dependencyMap[5], 'ExceptionsManager');

  ExceptionsManager.installConsoleErrorReporter();

  if (!global.__fbDisableExceptionsManager) {
    var handleError = function handleError(e, isFatal) {
      try {
        ExceptionsManager.handleException(e, isFatal);
      } catch (ee) {
        console.log('Failed to print error: ', ee.message);
        throw e;
      }
    };

    var ErrorUtils = _require2(_dependencyMap[6], 'ErrorUtils');

    ErrorUtils.setGlobalHandler(handleError);
  }

  var ReactNativeVersionCheck = _require2(_dependencyMap[7], 'ReactNativeVersionCheck');

  ReactNativeVersionCheck.checkVersions();
  polyfillGlobal('Promise', function () {
    return _require2(_dependencyMap[8], 'Promise');
  });
  polyfillGlobal('regeneratorRuntime', function () {
    delete global.regeneratorRuntime;

    _require2(_dependencyMap[9], 'regenerator-runtime/runtime');

    return global.regeneratorRuntime;
  });

  var defineLazyTimer = function defineLazyTimer(name) {
    polyfillGlobal(name, function () {
      return _require2(_dependencyMap[10], 'JSTimers')[name];
    });
  };

  defineLazyTimer('setTimeout');
  defineLazyTimer('setInterval');
  defineLazyTimer('setImmediate');
  defineLazyTimer('clearTimeout');
  defineLazyTimer('clearInterval');
  defineLazyTimer('clearImmediate');
  defineLazyTimer('requestAnimationFrame');
  defineLazyTimer('cancelAnimationFrame');
  defineLazyTimer('requestIdleCallback');
  defineLazyTimer('cancelIdleCallback');
  polyfillGlobal('XMLHttpRequest', function () {
    return _require2(_dependencyMap[11], 'XMLHttpRequest');
  });
  polyfillGlobal('FormData', function () {
    return _require2(_dependencyMap[12], 'FormData');
  });
  polyfillGlobal('fetch', function () {
    return _require2(_dependencyMap[13], 'fetch').fetch;
  });
  polyfillGlobal('Headers', function () {
    return _require2(_dependencyMap[13], 'fetch').Headers;
  });
  polyfillGlobal('Request', function () {
    return _require2(_dependencyMap[13], 'fetch').Request;
  });
  polyfillGlobal('Response', function () {
    return _require2(_dependencyMap[13], 'fetch').Response;
  });
  polyfillGlobal('WebSocket', function () {
    return _require2(_dependencyMap[14], 'WebSocket');
  });
  polyfillGlobal('Blob', function () {
    return _require2(_dependencyMap[15], 'Blob');
  });
  polyfillGlobal('File', function () {
    return _require2(_dependencyMap[16], 'File');
  });
  polyfillGlobal('FileReader', function () {
    return _require2(_dependencyMap[17], 'FileReader');
  });
  polyfillGlobal('URL', function () {
    return _require2(_dependencyMap[18], 'URL');
  });

  if (!global.alert) {
    global.alert = function (text) {
      _require2(_dependencyMap[19], 'Alert').alert('Alert', '' + text);
    };
  }

  var navigator = global.navigator;

  if (navigator === undefined) {
    global.navigator = navigator = {};
  }

  defineLazyProperty(navigator, 'product', function () {
    return 'ReactNative';
  });
  defineLazyProperty(navigator, 'geolocation', function () {
    return _require2(_dependencyMap[20], 'Geolocation');
  });

  var BatchedBridge = _require2(_dependencyMap[21], 'BatchedBridge');

  BatchedBridge.registerLazyCallableModule('Systrace', function () {
    return _require2(_dependencyMap[4], 'Systrace');
  });
  BatchedBridge.registerLazyCallableModule('JSTimers', function () {
    return _require2(_dependencyMap[10], 'JSTimers');
  });
  BatchedBridge.registerLazyCallableModule('HeapCapture', function () {
    return _require2(_dependencyMap[22], 'HeapCapture');
  });
  BatchedBridge.registerLazyCallableModule('SamplingProfiler', function () {
    return _require2(_dependencyMap[23], 'SamplingProfiler');
  });
  BatchedBridge.registerLazyCallableModule('RCTLog', function () {
    return _require2(_dependencyMap[24], 'RCTLog');
  });
  BatchedBridge.registerLazyCallableModule('RCTDeviceEventEmitter', function () {
    return _require2(_dependencyMap[25], 'RCTDeviceEventEmitter');
  });
  BatchedBridge.registerLazyCallableModule('RCTNativeAppEventEmitter', function () {
    return _require2(_dependencyMap[26], 'RCTNativeAppEventEmitter');
  });
  BatchedBridge.registerLazyCallableModule('PerformanceLogger', function () {
    return _require2(_dependencyMap[27], 'PerformanceLogger');
  });
  BatchedBridge.registerLazyCallableModule('JSDevSupportModule', function () {
    return _require2(_dependencyMap[28], 'JSDevSupportModule');
  });

  global.fetchSegment = function (segmentId, callback) {
    var _require = _require2(_dependencyMap[29], 'NativeModules'),
        SegmentFetcher = _require.SegmentFetcher;

    if (!SegmentFetcher) {
      throw new Error('SegmentFetcher is missing. Please ensure that it is ' + 'included as a NativeModule.');
    }

    SegmentFetcher.fetchSegment(segmentId, function (errorObject) {
      if (errorObject) {
        var error = new Error(errorObject.message);
        error.code = errorObject.code;
        callback(error);
      }

      callback(null);
    });
  };

  if (__DEV__) {
    if (!global.__RCTProfileIsProfiling) {
      BatchedBridge.registerCallableModule('HMRClient', _require2(_dependencyMap[30], 'HMRClient'));

      if (!window.document) {
        _require2(_dependencyMap[31], 'setupDevtools');
      }

      var JSInspector = _require2(_dependencyMap[32], 'JSInspector');

      JSInspector.registerAgent(_require2(_dependencyMap[33], 'NetworkAgent'));
    }
  }
},23,[24,25,26,30,19,31,18,40,42,50,51,58,77,37,78,74,80,81,82,83,85,16,88,89,90,70,91,92,94,15,95,101,106,107],"InitializeCore");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function defineLazyObjectProperty(object, name, descriptor) {
    var get = descriptor.get;
    var enumerable = descriptor.enumerable !== false;
    var writable = descriptor.writable !== false;
    var value = void 0;
    var valueSet = false;

    function getValue() {
      if (!valueSet) {
        valueSet = true;
        setValue(get());
      }

      return value;
    }

    function setValue(newValue) {
      value = newValue;
      valueSet = true;
      Object.defineProperty(object, name, {
        value: newValue,
        configurable: true,
        enumerable: enumerable,
        writable: writable
      });
    }

    Object.defineProperty(object, name, {
      get: getValue,
      set: setValue,
      configurable: true,
      enumerable: enumerable
    });
  }

  module.exports = defineLazyObjectProperty;
},24,[],"defineLazyObjectProperty");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function _shouldActuallyPolyfillES6Collection(collectionName) {
    var Collection = global[collectionName];

    if (Collection == null) {
      return true;
    }

    if (typeof global.Symbol !== 'function') {
      return true;
    }

    var proto = Collection.prototype;
    return Collection == null || typeof Collection !== 'function' || typeof proto.clear !== 'function' || new Collection().size !== 0 || typeof proto.keys !== 'function' || typeof proto.forEach !== 'function';
  }

  var cache = {};

  function _shouldPolyfillES6Collection(collectionName) {
    var result = cache[collectionName];

    if (result !== undefined) {
      return result;
    }

    result = _shouldActuallyPolyfillES6Collection(collectionName);
    cache[collectionName] = result;
    return result;
  }

  module.exports = _shouldPolyfillES6Collection;
},25,[],"_shouldPolyfillES6Collection");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var _shouldPolyfillES6Collection = _require(_dependencyMap[0], '_shouldPolyfillES6Collection');

  var guid = _require(_dependencyMap[1], 'guid');

  var isNode = _require(_dependencyMap[2], 'fbjs/lib/isNode');

  var toIterator = _require(_dependencyMap[3], 'toIterator');

  module.exports = function (global, undefined) {
    if (!_shouldPolyfillES6Collection('Map')) {
      return global.Map;
    }

    var KIND_KEY = 'key';
    var KIND_VALUE = 'value';
    var KIND_KEY_VALUE = 'key+value';
    var KEY_PREFIX = '$map_';
    var SECRET_SIZE_PROP;

    if (__DEV__) {
      SECRET_SIZE_PROP = '$size' + guid();
    }

    var OLD_IE_HASH_PREFIX = 'IE_HASH_';

    var Map = function () {
      function Map(iterable) {
        _classCallCheck(this, Map);

        if (!isObject(this)) {
          throw new TypeError('Wrong map object type.');
        }

        initMap(this);

        if (iterable != null) {
          var it = toIterator(iterable);
          var next;

          while (!(next = it.next()).done) {
            if (!isObject(next.value)) {
              throw new TypeError('Expected iterable items to be pair objects.');
            }

            this.set(next.value[0], next.value[1]);
          }
        }
      }

      _createClass(Map, [{
        key: "clear",
        value: function clear() {
          initMap(this);
        }
      }, {
        key: "has",
        value: function has(key) {
          var index = getIndex(this, key);
          return !!(index != null && this._mapData[index]);
        }
      }, {
        key: "set",
        value: function set(key, value) {
          var index = getIndex(this, key);

          if (index != null && this._mapData[index]) {
            this._mapData[index][1] = value;
          } else {
            index = this._mapData.push([key, value]) - 1;
            setIndex(this, key, index);

            if (__DEV__) {
              this[SECRET_SIZE_PROP] += 1;
            } else {
              this.size += 1;
            }
          }

          return this;
        }
      }, {
        key: "get",
        value: function get(key) {
          var index = getIndex(this, key);

          if (index == null) {
            return undefined;
          } else {
            return this._mapData[index][1];
          }
        }
      }, {
        key: "delete",
        value: function _delete(key) {
          var index = getIndex(this, key);

          if (index != null && this._mapData[index]) {
            setIndex(this, key, undefined);
            this._mapData[index] = undefined;

            if (__DEV__) {
              this[SECRET_SIZE_PROP] -= 1;
            } else {
              this.size -= 1;
            }

            return true;
          } else {
            return false;
          }
        }
      }, {
        key: "entries",
        value: function entries() {
          return new MapIterator(this, KIND_KEY_VALUE);
        }
      }, {
        key: "keys",
        value: function keys() {
          return new MapIterator(this, KIND_KEY);
        }
      }, {
        key: "values",
        value: function values() {
          return new MapIterator(this, KIND_VALUE);
        }
      }, {
        key: "forEach",
        value: function forEach(callback, thisArg) {
          if (typeof callback !== 'function') {
            throw new TypeError('Callback must be callable.');
          }

          var boundCallback = callback.bind(thisArg || undefined);
          var mapData = this._mapData;

          for (var i = 0; i < mapData.length; i++) {
            var entry = mapData[i];

            if (entry != null) {
              boundCallback(entry[1], entry[0], this);
            }
          }
        }
      }]);

      return Map;
    }();

    Map.prototype[toIterator.ITERATOR_SYMBOL] = Map.prototype.entries;

    var MapIterator = function () {
      function MapIterator(map, kind) {
        _classCallCheck(this, MapIterator);

        if (!(isObject(map) && map._mapData)) {
          throw new TypeError('Object is not a map.');
        }

        if ([KIND_KEY, KIND_KEY_VALUE, KIND_VALUE].indexOf(kind) === -1) {
          throw new Error('Invalid iteration kind.');
        }

        this._map = map;
        this._nextIndex = 0;
        this._kind = kind;
      }

      _createClass(MapIterator, [{
        key: "next",
        value: function next() {
          if (!this instanceof Map) {
            throw new TypeError('Expected to be called on a MapIterator.');
          }

          var map = this._map;
          var index = this._nextIndex;
          var kind = this._kind;

          if (map == null) {
            return createIterResultObject(undefined, true);
          }

          var entries = map._mapData;

          while (index < entries.length) {
            var record = entries[index];
            index += 1;
            this._nextIndex = index;

            if (record) {
              if (kind === KIND_KEY) {
                return createIterResultObject(record[0], false);
              } else if (kind === KIND_VALUE) {
                return createIterResultObject(record[1], false);
              } else if (kind) {
                return createIterResultObject(record, false);
              }
            }
          }

          this._map = undefined;
          return createIterResultObject(undefined, true);
        }
      }]);

      return MapIterator;
    }();

    MapIterator.prototype[toIterator.ITERATOR_SYMBOL] = function () {
      return this;
    };

    function getIndex(map, key) {
      if (isObject(key)) {
        var hash = getHash(key);
        return map._objectIndex[hash];
      } else {
        var prefixedKey = KEY_PREFIX + key;

        if (typeof key === 'string') {
          return map._stringIndex[prefixedKey];
        } else {
          return map._otherIndex[prefixedKey];
        }
      }
    }

    function setIndex(map, key, index) {
      var shouldDelete = index == null;

      if (isObject(key)) {
        var hash = getHash(key);

        if (shouldDelete) {
          delete map._objectIndex[hash];
        } else {
          map._objectIndex[hash] = index;
        }
      } else {
        var prefixedKey = KEY_PREFIX + key;

        if (typeof key === 'string') {
          if (shouldDelete) {
            delete map._stringIndex[prefixedKey];
          } else {
            map._stringIndex[prefixedKey] = index;
          }
        } else {
          if (shouldDelete) {
            delete map._otherIndex[prefixedKey];
          } else {
            map._otherIndex[prefixedKey] = index;
          }
        }
      }
    }

    function initMap(map) {
      map._mapData = [];
      map._objectIndex = {};
      map._stringIndex = {};
      map._otherIndex = {};

      if (__DEV__) {
        if (isES5) {
          if (map.hasOwnProperty(SECRET_SIZE_PROP)) {
            map[SECRET_SIZE_PROP] = 0;
          } else {
            Object.defineProperty(map, SECRET_SIZE_PROP, {
              value: 0,
              writable: true
            });
            Object.defineProperty(map, 'size', {
              set: function set(v) {
                console.error('PLEASE FIX ME: You are changing the map size property which ' + 'should not be writable and will break in production.');
                throw new Error('The map size property is not writable.');
              },
              get: function get() {
                return map[SECRET_SIZE_PROP];
              }
            });
          }

          return;
        }
      }

      map.size = 0;
    }

    function isObject(o) {
      return o != null && (typeof o === 'object' || typeof o === 'function');
    }

    function createIterResultObject(value, done) {
      return {
        value: value,
        done: done
      };
    }

    var isES5 = function () {
      try {
        Object.defineProperty({}, 'x', {});
        return true;
      } catch (e) {
        return false;
      }
    }();

    function isExtensible(o) {
      if (!isES5) {
        return true;
      } else {
        return Object.isExtensible(o);
      }
    }

    function getIENodeHash(node) {
      var uniqueID;

      switch (node.nodeType) {
        case 1:
          uniqueID = node.uniqueID;
          break;

        case 9:
          uniqueID = node.documentElement.uniqueID;
          break;

        default:
          return null;
      }

      if (uniqueID) {
        return OLD_IE_HASH_PREFIX + uniqueID;
      } else {
        return null;
      }
    }

    var getHash = function () {
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      var hashProperty = guid();
      var hashCounter = 0;
      return function getHash(o) {
        if (o[hashProperty]) {
          return o[hashProperty];
        } else if (!isES5 && o.propertyIsEnumerable && o.propertyIsEnumerable[hashProperty]) {
          return o.propertyIsEnumerable[hashProperty];
        } else if (!isES5 && isNode(o) && getIENodeHash(o)) {
          return getIENodeHash(o);
        } else if (!isES5 && o[hashProperty]) {
          return o[hashProperty];
        }

        if (isExtensible(o)) {
          hashCounter += 1;

          if (isES5) {
            Object.defineProperty(o, hashProperty, {
              enumerable: false,
              writable: false,
              configurable: false,
              value: hashCounter
            });
          } else if (o.propertyIsEnumerable) {
            o.propertyIsEnumerable = function () {
              return propIsEnumerable.apply(this, arguments);
            };

            o.propertyIsEnumerable[hashProperty] = hashCounter;
          } else if (isNode(o)) {
            o[hashProperty] = hashCounter;
          } else {
            throw new Error('Unable to set a non-enumerable property on object.');
          }

          return hashCounter;
        } else {
          throw new Error('Non-extensible objects are not allowed as keys.');
        }
      };
    }();

    return Map;
  }(Function('return this')());
},26,[25,27,28,29],"Map");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function guid() {
    return 'f' + (Math.random() * (1 << 30)).toString(16).replace('.', '');
  }

  module.exports = guid;
},27,[],"guid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function isNode(object) {
    var doc = object ? object.ownerDocument || object : document;
    var defaultView = doc.defaultView || window;
    return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
  }

  module.exports = isNode;
},28,[],"node_modules\\fbjs\\lib\\isNode.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var KIND_KEY = 'key';
  var KIND_VALUE = 'value';
  var KIND_KEY_VAL = 'key+value';
  var ITERATOR_SYMBOL = typeof Symbol === 'function' ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : '@@iterator';

  var toIterator = function () {
    if (!(Array.prototype[ITERATOR_SYMBOL] && String.prototype[ITERATOR_SYMBOL])) {
      return function () {
        var ArrayIterator = function () {
          function ArrayIterator(array, kind) {
            _classCallCheck(this, ArrayIterator);

            if (!Array.isArray(array)) {
              throw new TypeError('Object is not an Array');
            }

            this._iteratedObject = array;
            this._kind = kind;
            this._nextIndex = 0;
          }

          _createClass(ArrayIterator, [{
            key: "next",
            value: function next() {
              if (!this instanceof ArrayIterator) {
                throw new TypeError('Object is not an ArrayIterator');
              }

              if (this._iteratedObject == null) {
                return createIterResultObject(undefined, true);
              }

              var array = this._iteratedObject;
              var len = this._iteratedObject.length;
              var index = this._nextIndex;
              var kind = this._kind;

              if (index >= len) {
                this._iteratedObject = undefined;
                return createIterResultObject(undefined, true);
              }

              this._nextIndex = index + 1;

              if (kind === KIND_KEY) {
                return createIterResultObject(index, false);
              } else if (kind === KIND_VALUE) {
                return createIterResultObject(array[index], false);
              } else if (kind === KIND_KEY_VAL) {
                return createIterResultObject([index, array[index]], false);
              }
            }
          }, {
            key: '@@iterator',
            value: function iterator() {
              return this;
            }
          }]);

          return ArrayIterator;
        }();

        var StringIterator = function () {
          function StringIterator(string) {
            _classCallCheck(this, StringIterator);

            if (typeof string !== 'string') {
              throw new TypeError('Object is not a string');
            }

            this._iteratedString = string;
            this._nextIndex = 0;
          }

          _createClass(StringIterator, [{
            key: "next",
            value: function next() {
              if (!this instanceof StringIterator) {
                throw new TypeError('Object is not a StringIterator');
              }

              if (this._iteratedString == null) {
                return createIterResultObject(undefined, true);
              }

              var index = this._nextIndex;
              var s = this._iteratedString;
              var len = s.length;

              if (index >= len) {
                this._iteratedString = undefined;
                return createIterResultObject(undefined, true);
              }

              var ret;
              var first = s.charCodeAt(index);

              if (first < 0xD800 || first > 0xDBFF || index + 1 === len) {
                ret = s[index];
              } else {
                var second = s.charCodeAt(index + 1);

                if (second < 0xDC00 || second > 0xDFFF) {
                  ret = s[index];
                } else {
                  ret = s[index] + s[index + 1];
                }
              }

              this._nextIndex = index + ret.length;
              return createIterResultObject(ret, false);
            }
          }, {
            key: '@@iterator',
            value: function iterator() {
              return this;
            }
          }]);

          return StringIterator;
        }();

        function createIterResultObject(value, done) {
          return {
            value: value,
            done: done
          };
        }

        return function (object, kind) {
          if (typeof object === 'string') {
            return new StringIterator(object);
          } else if (Array.isArray(object)) {
            return new ArrayIterator(object, kind || KIND_VALUE);
          } else {
            return object[ITERATOR_SYMBOL]();
          }
        };
      }();
    } else {
      return function (object) {
        return object[ITERATOR_SYMBOL]();
      };
    }
  }();

  _extends(toIterator, {
    KIND_KEY: KIND_KEY,
    KIND_VALUE: KIND_VALUE,
    KIND_KEY_VAL: KIND_KEY_VAL,
    ITERATOR_SYMBOL: ITERATOR_SYMBOL
  });

  module.exports = toIterator;
},29,[],"toIterator");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var Map = _require(_dependencyMap[0], 'Map');

  var _shouldPolyfillES6Collection = _require(_dependencyMap[1], '_shouldPolyfillES6Collection');

  var toIterator = _require(_dependencyMap[2], 'toIterator');

  module.exports = function (global) {
    if (!_shouldPolyfillES6Collection('Set')) {
      return global.Set;
    }

    var Set = function () {
      function Set(iterable) {
        _classCallCheck(this, Set);

        if (this == null || typeof this !== 'object' && typeof this !== 'function') {
          throw new TypeError('Wrong set object type.');
        }

        initSet(this);

        if (iterable != null) {
          var it = toIterator(iterable);
          var next;

          while (!(next = it.next()).done) {
            this.add(next.value);
          }
        }
      }

      _createClass(Set, [{
        key: "add",
        value: function add(value) {
          this._map.set(value, value);

          this.size = this._map.size;
          return this;
        }
      }, {
        key: "clear",
        value: function clear() {
          initSet(this);
        }
      }, {
        key: "delete",
        value: function _delete(value) {
          var ret = this._map.delete(value);

          this.size = this._map.size;
          return ret;
        }
      }, {
        key: "entries",
        value: function entries() {
          return this._map.entries();
        }
      }, {
        key: "forEach",
        value: function forEach(callback) {
          var thisArg = arguments[1];

          var it = this._map.keys();

          var next;

          while (!(next = it.next()).done) {
            callback.call(thisArg, next.value, next.value, this);
          }
        }
      }, {
        key: "has",
        value: function has(value) {
          return this._map.has(value);
        }
      }, {
        key: "values",
        value: function values() {
          return this._map.values();
        }
      }]);

      return Set;
    }();

    Set.prototype[toIterator.ITERATOR_SYMBOL] = Set.prototype.values;
    Set.prototype.keys = Set.prototype.values;

    function initSet(set) {
      set._map = new Map();
      set.size = set._map.size;
    }

    return Set;
  }(Function('return this')());
},30,[26,25,29],"Set");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var exceptionID = 0;

  function reportException(e, isFatal) {
    var _require = _require2(_dependencyMap[0], 'NativeModules'),
        ExceptionsManager = _require.ExceptionsManager;

    if (ExceptionsManager) {
      var parseErrorStack = _require2(_dependencyMap[1], 'parseErrorStack');

      var stack = parseErrorStack(e);
      var currentExceptionID = ++exceptionID;

      if (isFatal) {
        ExceptionsManager.reportFatalException(e.message, stack, currentExceptionID);
      } else {
        ExceptionsManager.reportSoftException(e.message, stack, currentExceptionID);
      }

      if (__DEV__) {
        var symbolicateStackTrace = _require2(_dependencyMap[2], 'symbolicateStackTrace');

        symbolicateStackTrace(stack).then(function (prettyStack) {
          if (prettyStack) {
            ExceptionsManager.updateExceptionMessage(e.message, prettyStack, currentExceptionID);
          } else {
            throw new Error('The stack is null');
          }
        }).catch(function (error) {
          return console.warn('Unable to symbolicate stack trace: ' + error.message);
        });
      }
    }
  }

  function handleException(e, isFatal) {
    if (!e.message) {
      e = new Error(e);
    }

    if (console._errorOriginal) {
      console._errorOriginal(e.message);
    } else {
      console.error(e.message);
    }

    reportException(e, isFatal);
  }

  function reactConsoleErrorHandler() {
    console._errorOriginal.apply(console, arguments);

    if (!console.reportErrorsAsExceptions) {
      return;
    }

    if (arguments[0] && arguments[0].stack) {
      reportException(arguments[0], false);
    } else {
      var stringifySafe = _require2(_dependencyMap[3], 'stringifySafe');

      var str = Array.prototype.map.call(arguments, stringifySafe).join(', ');

      if (str.slice(0, 10) === '"Warning: ') {
        return;
      }

      var error = new Error('console.error: ' + str);
      error.framesToPop = 1;
      reportException(error, false);
    }
  }

  function installConsoleErrorReporter() {
    if (console._errorOriginal) {
      return;
    }

    console._errorOriginal = console.error.bind(console);
    console.error = reactConsoleErrorHandler;

    if (console.reportErrorsAsExceptions === undefined) {
      console.reportErrorsAsExceptions = true;
    }
  }

  module.exports = {
    handleException: handleException,
    installConsoleErrorReporter: installConsoleErrorReporter
  };
},31,[15,32,35,39],"ExceptionsManager");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function parseErrorStack(e) {
    if (!e || !e.stack) {
      return [];
    }

    var stacktraceParser = _require(_dependencyMap[0], 'stacktrace-parser');

    var stack = Array.isArray(e.stack) ? e.stack : stacktraceParser.parse(e.stack);
    var framesToPop = typeof e.framesToPop === 'number' ? e.framesToPop : 0;

    while (framesToPop--) {
      stack.shift();
    }

    return stack;
  }

  module.exports = parseErrorStack;
},32,[33],"parseErrorStack");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], './lib/stacktrace-parser.js');
},33,[34],"node_modules\\stacktrace-parser\\index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var UNKNOWN_FUNCTION = '<unknown>';
    var StackTraceParser = {
        parse: function parse(stackString) {
            var chrome = /^\s*at (?:(?:(?:Anonymous function)?|((?:\[object object\])?\S+(?: \[as \S+\])?)) )?\(?((?:file|http|https):.*?):(\d+)(?::(\d+))?\)?\s*$/i,
                gecko = /^(?:\s*([^@]*)(?:\((.*?)\))?@)?(\S.*?):(\d+)(?::(\d+))?\s*$/i,
                node = /^\s*at (?:((?:\[object object\])?\S+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i,
                lines = stackString.split('\n'),
                stack = [],
                parts,
                element;

            for (var i = 0, j = lines.length; i < j; ++i) {
                if (parts = gecko.exec(lines[i])) {
                    element = {
                        'file': parts[3],
                        'methodName': parts[1] || UNKNOWN_FUNCTION,
                        'lineNumber': +parts[4],
                        'column': parts[5] ? +parts[5] : null
                    };
                } else if (parts = chrome.exec(lines[i])) {
                    element = {
                        'file': parts[2],
                        'methodName': parts[1] || UNKNOWN_FUNCTION,
                        'lineNumber': +parts[3],
                        'column': parts[4] ? +parts[4] : null
                    };
                } else if (parts = node.exec(lines[i])) {
                    element = {
                        'file': parts[2],
                        'methodName': parts[1] || UNKNOWN_FUNCTION,
                        'lineNumber': +parts[3],
                        'column': parts[4] ? +parts[4] : null
                    };
                } else {
                    continue;
                }

                stack.push(element);
            }

            return stack;
        }
    };
    module.exports = StackTraceParser;
},34,[],"node_modules\\stacktrace-parser\\lib\\stacktrace-parser.js");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var getDevServer = _require2(_dependencyMap[0], 'getDevServer');

  var _require = _require2(_dependencyMap[1], 'NativeModules'),
      SourceCode = _require.SourceCode;

  var fetch = void 0;

  function isSourcedFromDisk(sourcePath) {
    return !/^http/.test(sourcePath) && /[\\/]/.test(sourcePath);
  }

  function symbolicateStackTrace(stack) {
    var devServer, stackCopy, foundInternalSource, response, json;
    return regeneratorRuntime.async(function symbolicateStackTrace$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!fetch) {
              fetch = global.fetch || _require2(_dependencyMap[2], 'fetch').fetch;
            }

            devServer = getDevServer();

            if (devServer.bundleLoadedFromServer) {
              _context.next = 4;
              break;
            }

            throw new Error('Bundle was not loaded from the packager');

          case 4:
            stackCopy = stack;

            if (SourceCode.scriptURL) {
              foundInternalSource = false;
              stackCopy = stack.map(function (frame) {
                if (!foundInternalSource && isSourcedFromDisk(frame.file)) {
                  return _extends({}, frame, {
                    file: SourceCode.scriptURL
                  });
                }

                foundInternalSource = true;
                return frame;
              });
            }

            _context.next = 8;
            return regeneratorRuntime.awrap(fetch(devServer.url + 'symbolicate', {
              method: 'POST',
              body: JSON.stringify({
                stack: stackCopy
              })
            }));

          case 8:
            response = _context.sent;
            _context.next = 11;
            return regeneratorRuntime.awrap(response.json());

          case 11:
            json = _context.sent;
            return _context.abrupt("return", json.stack);

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  module.exports = symbolicateStackTrace;
},35,[36,15,37],"symbolicateStackTrace");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], 'NativeModules'),
      SourceCode = _require.SourceCode;

  var _cachedDevServerURL = void 0;

  var FALLBACK = 'http://localhost:8081/';

  function getDevServer() {
    if (_cachedDevServerURL === undefined) {
      var match = SourceCode.scriptURL && SourceCode.scriptURL.match(/^https?:\/\/.*?\//);
      _cachedDevServerURL = match ? match[0] : null;
    }

    return {
      url: _cachedDevServerURL || FALLBACK,
      bundleLoadedFromServer: _cachedDevServerURL !== null
    };
  }

  module.exports = getDevServer;
},36,[15],"getDevServer");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _whatwgFetch = _require(_dependencyMap[0], "whatwg-fetch");

  var _whatwgFetch2 = _interopRequireDefault(_whatwgFetch);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  if (_whatwgFetch2.default && _whatwgFetch2.default.fetch) {
    module.exports = _whatwgFetch2.default;
  } else {
    module.exports = {
      fetch: fetch,
      Headers: Headers,
      Request: Request,
      Response: Response
    };
  }
},37,[38],"fetch");
__d(function (global, _require, module, exports, _dependencyMap) {
  (function (self) {
    'use strict';

    if (self.fetch) {
      return;
    }

    var support = {
      searchParams: 'URLSearchParams' in self,
      iterable: 'Symbol' in self && 'iterator' in Symbol,
      blob: 'FileReader' in self && 'Blob' in self && function () {
        try {
          new Blob();
          return true;
        } catch (e) {
          return false;
        }
      }(),
      formData: 'FormData' in self,
      arrayBuffer: 'ArrayBuffer' in self
    };

    if (support.arrayBuffer) {
      var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];

      var isDataView = function isDataView(obj) {
        return obj && DataView.prototype.isPrototypeOf(obj);
      };

      var isArrayBufferView = ArrayBuffer.isView || function (obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
      };
    }

    function normalizeName(name) {
      if (typeof name !== 'string') {
        name = String(name);
      }

      if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
        throw new TypeError('Invalid character in header field name');
      }

      return name.toLowerCase();
    }

    function normalizeValue(value) {
      if (typeof value !== 'string') {
        value = String(value);
      }

      return value;
    }

    function iteratorFor(items) {
      var iterator = {
        next: function next() {
          var value = items.shift();
          return {
            done: value === undefined,
            value: value
          };
        }
      };

      if (support.iterable) {
        iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] = function () {
          return iterator;
        };
      }

      return iterator;
    }

    function Headers(headers) {
      this.map = {};

      if (headers instanceof Headers) {
        headers.forEach(function (value, name) {
          this.append(name, value);
        }, this);
      } else if (headers) {
        Object.getOwnPropertyNames(headers).forEach(function (name) {
          this.append(name, headers[name]);
        }, this);
      }
    }

    Headers.prototype.append = function (name, value) {
      name = normalizeName(name);
      value = normalizeValue(value);
      var list = this.map[name];

      if (!list) {
        list = [];
        this.map[name] = list;
      }

      list.push(value);
    };

    Headers.prototype['delete'] = function (name) {
      delete this.map[normalizeName(name)];
    };

    Headers.prototype.get = function (name) {
      var values = this.map[normalizeName(name)];
      return values ? values[0] : null;
    };

    Headers.prototype.getAll = function (name) {
      return this.map[normalizeName(name)] || [];
    };

    Headers.prototype.has = function (name) {
      return this.map.hasOwnProperty(normalizeName(name));
    };

    Headers.prototype.set = function (name, value) {
      this.map[normalizeName(name)] = [normalizeValue(value)];
    };

    Headers.prototype.forEach = function (callback, thisArg) {
      Object.getOwnPropertyNames(this.map).forEach(function (name) {
        this.map[name].forEach(function (value) {
          callback.call(thisArg, value, name, this);
        }, this);
      }, this);
    };

    Headers.prototype.keys = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push(name);
      });
      return iteratorFor(items);
    };

    Headers.prototype.values = function () {
      var items = [];
      this.forEach(function (value) {
        items.push(value);
      });
      return iteratorFor(items);
    };

    Headers.prototype.entries = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push([name, value]);
      });
      return iteratorFor(items);
    };

    if (support.iterable) {
      Headers.prototype[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] = Headers.prototype.entries;
    }

    function consumed(body) {
      if (body.bodyUsed) {
        return Promise.reject(new TypeError('Already read'));
      }

      body.bodyUsed = true;
    }

    function fileReaderReady(reader) {
      return new Promise(function (resolve, reject) {
        reader.onload = function () {
          resolve(reader.result);
        };

        reader.onerror = function () {
          reject(reader.error);
        };
      });
    }

    function readBlobAsArrayBuffer(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsArrayBuffer(blob);
      return promise;
    }

    function readBlobAsText(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsText(blob);
      return promise;
    }

    function readArrayBufferAsText(buf) {
      var view = new Uint8Array(buf);
      var chars = new Array(view.length);

      for (var i = 0; i < view.length; i++) {
        chars[i] = String.fromCharCode(view[i]);
      }

      return chars.join('');
    }

    function bufferClone(buf) {
      if (buf.slice) {
        return buf.slice(0);
      } else {
        var view = new Uint8Array(buf.byteLength);
        view.set(new Uint8Array(buf));
        return view.buffer;
      }
    }

    function Body() {
      this.bodyUsed = false;

      this._initBody = function (body) {
        this._bodyInit = body;

        if (!body) {
          this._bodyText = '';
        } else if (typeof body === 'string') {
          this._bodyText = body;
        } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
          this._bodyBlob = body;
        } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
          this._bodyFormData = body;
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this._bodyText = body.toString();
        } else if (support.arrayBuffer && support.blob && isDataView(body)) {
          this._bodyArrayBuffer = bufferClone(body.buffer);
          this._bodyInit = new Blob([this._bodyArrayBuffer]);
        } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
          this._bodyArrayBuffer = bufferClone(body);
        } else {
          throw new Error('unsupported BodyInit type');
        }

        if (!this.headers.get('content-type')) {
          if (typeof body === 'string') {
            this.headers.set('content-type', 'text/plain;charset=UTF-8');
          } else if (this._bodyBlob && this._bodyBlob.type) {
            this.headers.set('content-type', this._bodyBlob.type);
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
          }
        }
      };

      if (support.blob) {
        this.blob = function () {
          var rejected = consumed(this);

          if (rejected) {
            return rejected;
          }

          if (this._bodyBlob) {
            return Promise.resolve(this._bodyBlob);
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(new Blob([this._bodyArrayBuffer]));
          } else if (this._bodyFormData) {
            throw new Error('could not read FormData body as blob');
          } else {
            return Promise.resolve(new Blob([this._bodyText]));
          }
        };

        this.arrayBuffer = function () {
          if (this._bodyArrayBuffer) {
            return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
          } else {
            return this.blob().then(readBlobAsArrayBuffer);
          }
        };
      }

      this.text = function () {
        var rejected = consumed(this);

        if (rejected) {
          return rejected;
        }

        if (this._bodyBlob) {
          return readBlobAsText(this._bodyBlob);
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as text');
        } else {
          return Promise.resolve(this._bodyText);
        }
      };

      if (support.formData) {
        this.formData = function () {
          return this.text().then(decode);
        };
      }

      this.json = function () {
        return this.text().then(JSON.parse);
      };

      return this;
    }

    var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

    function normalizeMethod(method) {
      var upcased = method.toUpperCase();
      return methods.indexOf(upcased) > -1 ? upcased : method;
    }

    function Request(input, options) {
      options = options || {};
      var body = options.body;

      if (typeof input === 'string') {
        this.url = input;
      } else {
        if (input.bodyUsed) {
          throw new TypeError('Already read');
        }

        this.url = input.url;
        this.credentials = input.credentials;

        if (!options.headers) {
          this.headers = new Headers(input.headers);
        }

        this.method = input.method;
        this.mode = input.mode;

        if (!body && input._bodyInit != null) {
          body = input._bodyInit;
          input.bodyUsed = true;
        }
      }

      this.credentials = options.credentials || this.credentials || 'omit';

      if (options.headers || !this.headers) {
        this.headers = new Headers(options.headers);
      }

      this.method = normalizeMethod(options.method || this.method || 'GET');
      this.mode = options.mode || this.mode || null;
      this.referrer = null;

      if ((this.method === 'GET' || this.method === 'HEAD') && body) {
        throw new TypeError('Body not allowed for GET or HEAD requests');
      }

      this._initBody(body);
    }

    Request.prototype.clone = function () {
      return new Request(this, {
        body: this._bodyInit
      });
    };

    function decode(body) {
      var form = new FormData();
      body.trim().split('&').forEach(function (bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
      return form;
    }

    function parseHeaders(rawHeaders) {
      var headers = new Headers();
      rawHeaders.split('\r\n').forEach(function (line) {
        var parts = line.split(':');
        var key = parts.shift().trim();

        if (key) {
          var value = parts.join(':').trim();
          headers.append(key, value);
        }
      });
      return headers;
    }

    Body.call(Request.prototype);

    function Response(bodyInit, options) {
      if (!options) {
        options = {};
      }

      this.type = 'default';
      this.status = 'status' in options ? options.status : 200;
      this.ok = this.status >= 200 && this.status < 300;
      this.statusText = 'statusText' in options ? options.statusText : 'OK';
      this.headers = new Headers(options.headers);
      this.url = options.url || '';

      this._initBody(bodyInit);
    }

    Body.call(Response.prototype);

    Response.prototype.clone = function () {
      return new Response(this._bodyInit, {
        status: this.status,
        statusText: this.statusText,
        headers: new Headers(this.headers),
        url: this.url
      });
    };

    Response.error = function () {
      var response = new Response(null, {
        status: 0,
        statusText: ''
      });
      response.type = 'error';
      return response;
    };

    var redirectStatuses = [301, 302, 303, 307, 308];

    Response.redirect = function (url, status) {
      if (redirectStatuses.indexOf(status) === -1) {
        throw new RangeError('Invalid status code');
      }

      return new Response(null, {
        status: status,
        headers: {
          location: url
        }
      });
    };

    self.Headers = Headers;
    self.Request = Request;
    self.Response = Response;

    self.fetch = function (input, init) {
      return new Promise(function (resolve, reject) {
        var request = new Request(input, init);
        var xhr = new XMLHttpRequest();

        xhr.onload = function () {
          var options = {
            status: xhr.status,
            statusText: xhr.statusText,
            headers: parseHeaders(xhr.getAllResponseHeaders() || '')
          };
          options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
          var body = 'response' in xhr ? xhr.response : xhr.responseText;
          resolve(new Response(body, options));
        };

        xhr.onerror = function () {
          reject(new TypeError('Network request failed'));
        };

        xhr.ontimeout = function () {
          reject(new TypeError('Network request failed'));
        };

        xhr.open(request.method, request.url, true);

        if (request.credentials === 'include') {
          xhr.withCredentials = true;
        }

        if ('responseType' in xhr && support.blob) {
          xhr.responseType = 'blob';
        }

        request.headers.forEach(function (value, name) {
          xhr.setRequestHeader(name, value);
        });
        xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
      });
    };

    self.fetch.polyfill = true;
  })(typeof self !== 'undefined' ? self : this);
},38,[],"node_modules\\whatwg-fetch\\fetch.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function stringifySafe(arg) {
    var ret;
    var type = typeof arg;

    if (arg === undefined) {
      ret = 'undefined';
    } else if (arg === null) {
      ret = 'null';
    } else if (type === 'string') {
      ret = '"' + arg + '"';
    } else if (type === 'function') {
      try {
        ret = arg.toString();
      } catch (e) {
        ret = '[function unknown]';
      }
    } else {
      try {
        ret = JSON.stringify(arg);
      } catch (e) {
        if (typeof arg.toString === 'function') {
          try {
            ret = arg.toString();
          } catch (E) {}
        }
      }
    }

    return ret || '["' + type + '" failed to stringify]';
  }

  module.exports = stringifySafe;
},39,[],"stringifySafe");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], 'NativeModules'),
      PlatformConstants = _require.PlatformConstants;

  var ReactNativeVersion = _require2(_dependencyMap[1], 'ReactNativeVersion');

  exports.checkVersions = function checkVersions() {
    if (!PlatformConstants) {
      return;
    }

    var nativeVersion = PlatformConstants.reactNativeVersion;

    if (ReactNativeVersion.version.major !== nativeVersion.major || ReactNativeVersion.version.minor !== nativeVersion.minor) {
      console.error("React Native version mismatch.\n\nJavaScript version: " + _formatVersion(ReactNativeVersion.version) + "\n" + ("Native version: " + _formatVersion(nativeVersion) + "\n\n") + 'Make sure that you have rebuilt the native code. If the problem ' + 'persists try clearing the Watchman and packager caches with ' + '`watchman watch-del-all && react-native start --reset-cache`.');
    }
  };

  function _formatVersion(version) {
    return version.major + "." + version.minor + "." + version.patch + (version.prerelease !== null ? "-" + version.prerelease : '');
  }
},40,[15,41],"ReactNativeVersionCheck");
__d(function (global, _require, module, exports, _dependencyMap) {
  exports.version = {
    major: 0,
    minor: 54,
    patch: 3,
    prerelease: null
  };
},41,[],"ReactNativeVersion");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Promise = _require(_dependencyMap[0], 'fbjs/lib/Promise.native');

  if (__DEV__) {
    _require(_dependencyMap[1], 'promise/setimmediate/rejection-tracking').enable({
      allRejections: true,
      onUnhandled: function onUnhandled(id) {
        var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var message = void 0;
        var stack = void 0;
        var stringValue = Object.prototype.toString.call(error);

        if (stringValue === '[object Error]') {
          message = Error.prototype.toString.call(error);
          stack = error.stack;
        } else {
          message = _require(_dependencyMap[2], 'pretty-format')(error);
        }

        var warning = "Possible Unhandled Promise Rejection (id: " + id + "):\n" + (message + "\n") + (stack == null ? '' : stack);
        console.warn(warning);
      },
      onHandled: function onHandled(id) {
        var warning = "Promise Rejection Handled (id: " + id + ")\n" + 'This means you can ignore any previous messages of the form ' + ("\"Possible Unhandled Promise Rejection (id: " + id + "):\"");
        console.warn(warning);
      }
    });
  }

  module.exports = Promise;
},42,[43,47,48],"Promise");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Promise = _require(_dependencyMap[0], 'promise/setimmediate/es6-extensions');

  _require(_dependencyMap[1], 'promise/setimmediate/done');

  Promise.prototype['finally'] = function (onSettled) {
    return this.then(onSettled, onSettled);
  };

  module.exports = Promise;
},43,[44,46],"node_modules\\fbjs\\lib\\Promise.native.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Promise = _require(_dependencyMap[0], './core.js');

  module.exports = Promise;
  var TRUE = valuePromise(true);
  var FALSE = valuePromise(false);
  var NULL = valuePromise(null);
  var UNDEFINED = valuePromise(undefined);
  var ZERO = valuePromise(0);
  var EMPTYSTRING = valuePromise('');

  function valuePromise(value) {
    var p = new Promise(Promise._61);
    p._65 = 1;
    p._55 = value;
    return p;
  }

  Promise.resolve = function (value) {
    if (value instanceof Promise) return value;
    if (value === null) return NULL;
    if (value === undefined) return UNDEFINED;
    if (value === true) return TRUE;
    if (value === false) return FALSE;
    if (value === 0) return ZERO;
    if (value === '') return EMPTYSTRING;

    if (typeof value === 'object' || typeof value === 'function') {
      try {
        var then = value.then;

        if (typeof then === 'function') {
          return new Promise(then.bind(value));
        }
      } catch (ex) {
        return new Promise(function (resolve, reject) {
          reject(ex);
        });
      }
    }

    return valuePromise(value);
  };

  Promise.all = function (arr) {
    var args = Array.prototype.slice.call(arr);
    return new Promise(function (resolve, reject) {
      if (args.length === 0) return resolve([]);
      var remaining = args.length;

      function res(i, val) {
        if (val && (typeof val === 'object' || typeof val === 'function')) {
          if (val instanceof Promise && val.then === Promise.prototype.then) {
            while (val._65 === 3) {
              val = val._55;
            }

            if (val._65 === 1) return res(i, val._55);
            if (val._65 === 2) reject(val._55);
            val.then(function (val) {
              res(i, val);
            }, reject);
            return;
          } else {
            var then = val.then;

            if (typeof then === 'function') {
              var p = new Promise(then.bind(val));
              p.then(function (val) {
                res(i, val);
              }, reject);
              return;
            }
          }
        }

        args[i] = val;

        if (--remaining === 0) {
          resolve(args);
        }
      }

      for (var i = 0; i < args.length; i++) {
        res(i, args[i]);
      }
    });
  };

  Promise.reject = function (value) {
    return new Promise(function (resolve, reject) {
      reject(value);
    });
  };

  Promise.race = function (values) {
    return new Promise(function (resolve, reject) {
      values.forEach(function (value) {
        Promise.resolve(value).then(resolve, reject);
      });
    });
  };

  Promise.prototype['catch'] = function (onRejected) {
    return this.then(null, onRejected);
  };
},44,[45],"node_modules\\promise\\setimmediate\\es6-extensions.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function noop() {}

  var LAST_ERROR = null;
  var IS_ERROR = {};

  function getThen(obj) {
    try {
      return obj.then;
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }

  function tryCallOne(fn, a) {
    try {
      return fn(a);
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }

  function tryCallTwo(fn, a, b) {
    try {
      fn(a, b);
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }

  module.exports = Promise;

  function Promise(fn) {
    if (typeof this !== 'object') {
      throw new TypeError('Promises must be constructed via new');
    }

    if (typeof fn !== 'function') {
      throw new TypeError('Promise constructor\'s argument is not a function');
    }

    this._40 = 0;
    this._65 = 0;
    this._55 = null;
    this._72 = null;
    if (fn === noop) return;
    doResolve(fn, this);
  }

  Promise._37 = null;
  Promise._87 = null;
  Promise._61 = noop;

  Promise.prototype.then = function (onFulfilled, onRejected) {
    if (this.constructor !== Promise) {
      return safeThen(this, onFulfilled, onRejected);
    }

    var res = new Promise(noop);
    handle(this, new Handler(onFulfilled, onRejected, res));
    return res;
  };

  function safeThen(self, onFulfilled, onRejected) {
    return new self.constructor(function (resolve, reject) {
      var res = new Promise(noop);
      res.then(resolve, reject);
      handle(self, new Handler(onFulfilled, onRejected, res));
    });
  }

  function handle(self, deferred) {
    while (self._65 === 3) {
      self = self._55;
    }

    if (Promise._37) {
      Promise._37(self);
    }

    if (self._65 === 0) {
      if (self._40 === 0) {
        self._40 = 1;
        self._72 = deferred;
        return;
      }

      if (self._40 === 1) {
        self._40 = 2;
        self._72 = [self._72, deferred];
        return;
      }

      self._72.push(deferred);

      return;
    }

    handleResolved(self, deferred);
  }

  function handleResolved(self, deferred) {
    setImmediate(function () {
      var cb = self._65 === 1 ? deferred.onFulfilled : deferred.onRejected;

      if (cb === null) {
        if (self._65 === 1) {
          resolve(deferred.promise, self._55);
        } else {
          reject(deferred.promise, self._55);
        }

        return;
      }

      var ret = tryCallOne(cb, self._55);

      if (ret === IS_ERROR) {
        reject(deferred.promise, LAST_ERROR);
      } else {
        resolve(deferred.promise, ret);
      }
    });
  }

  function resolve(self, newValue) {
    if (newValue === self) {
      return reject(self, new TypeError('A promise cannot be resolved with itself.'));
    }

    if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
      var then = getThen(newValue);

      if (then === IS_ERROR) {
        return reject(self, LAST_ERROR);
      }

      if (then === self.then && newValue instanceof Promise) {
        self._65 = 3;
        self._55 = newValue;
        finale(self);
        return;
      } else if (typeof then === 'function') {
        doResolve(then.bind(newValue), self);
        return;
      }
    }

    self._65 = 1;
    self._55 = newValue;
    finale(self);
  }

  function reject(self, newValue) {
    self._65 = 2;
    self._55 = newValue;

    if (Promise._87) {
      Promise._87(self, newValue);
    }

    finale(self);
  }

  function finale(self) {
    if (self._40 === 1) {
      handle(self, self._72);
      self._72 = null;
    }

    if (self._40 === 2) {
      for (var i = 0; i < self._72.length; i++) {
        handle(self, self._72[i]);
      }

      self._72 = null;
    }
  }

  function Handler(onFulfilled, onRejected, promise) {
    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
    this.promise = promise;
  }

  function doResolve(fn, promise) {
    var done = false;
    var res = tryCallTwo(fn, function (value) {
      if (done) return;
      done = true;
      resolve(promise, value);
    }, function (reason) {
      if (done) return;
      done = true;
      reject(promise, reason);
    });

    if (!done && res === IS_ERROR) {
      done = true;
      reject(promise, LAST_ERROR);
    }
  }
},45,[],"node_modules\\promise\\setimmediate\\core.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Promise = _require(_dependencyMap[0], './core.js');

  module.exports = Promise;

  Promise.prototype.done = function (onFulfilled, onRejected) {
    var self = arguments.length ? this.then.apply(this, arguments) : this;
    self.then(null, function (err) {
      setTimeout(function () {
        throw err;
      }, 0);
    });
  };
},46,[45],"node_modules\\promise\\setimmediate\\done.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Promise = _require(_dependencyMap[0], './core');

  var DEFAULT_WHITELIST = [ReferenceError, TypeError, RangeError];
  var enabled = false;
  exports.disable = disable;

  function disable() {
    enabled = false;
    Promise._37 = null;
    Promise._87 = null;
  }

  exports.enable = enable;

  function enable(options) {
    options = options || {};
    if (enabled) disable();
    enabled = true;
    var id = 0;
    var displayId = 0;
    var rejections = {};

    Promise._37 = function (promise) {
      if (promise._65 === 2 && rejections[promise._51]) {
        if (rejections[promise._51].logged) {
          onHandled(promise._51);
        } else {
          clearTimeout(rejections[promise._51].timeout);
        }

        delete rejections[promise._51];
      }
    };

    Promise._87 = function (promise, err) {
      if (promise._40 === 0) {
        promise._51 = id++;
        rejections[promise._51] = {
          displayId: null,
          error: err,
          timeout: setTimeout(onUnhandled.bind(null, promise._51), matchWhitelist(err, DEFAULT_WHITELIST) ? 100 : 2000),
          logged: false
        };
      }
    };

    function onUnhandled(id) {
      if (options.allRejections || matchWhitelist(rejections[id].error, options.whitelist || DEFAULT_WHITELIST)) {
        rejections[id].displayId = displayId++;

        if (options.onUnhandled) {
          rejections[id].logged = true;
          options.onUnhandled(rejections[id].displayId, rejections[id].error);
        } else {
          rejections[id].logged = true;
          logError(rejections[id].displayId, rejections[id].error);
        }
      }
    }

    function onHandled(id) {
      if (rejections[id].logged) {
        if (options.onHandled) {
          options.onHandled(rejections[id].displayId, rejections[id].error);
        } else if (!rejections[id].onUnhandled) {
          console.warn('Promise Rejection Handled (id: ' + rejections[id].displayId + '):');
          console.warn('  This means you can ignore any previous messages of the form "Possible Unhandled Promise Rejection" with id ' + rejections[id].displayId + '.');
        }
      }
    }
  }

  function logError(id, error) {
    console.warn('Possible Unhandled Promise Rejection (id: ' + id + '):');
    var errStr = (error && (error.stack || error)) + '';
    errStr.split('\n').forEach(function (line) {
      console.warn('  ' + line);
    });
  }

  function matchWhitelist(error, list) {
    return list.some(function (cls) {
      return error instanceof cls;
    });
  }
},47,[45],"node_modules\\promise\\setimmediate\\rejection-tracking.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var printString = _require(_dependencyMap[0], './printString');

  var toString = Object.prototype.toString;
  var toISOString = Date.prototype.toISOString;
  var errorToString = Error.prototype.toString;
  var regExpToString = RegExp.prototype.toString;
  var symbolToString = (typeof Symbol === "function" ? Symbol.prototype : "@@prototype").toString;
  var SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;
  var NEWLINE_REGEXP = /\n/ig;

  var getSymbols = Object.getOwnPropertySymbols || function (obj) {
    return [];
  };

  function isToStringedArrayType(toStringed) {
    return toStringed === '[object Array]' || toStringed === '[object ArrayBuffer]' || toStringed === '[object DataView]' || toStringed === '[object Float32Array]' || toStringed === '[object Float64Array]' || toStringed === '[object Int8Array]' || toStringed === '[object Int16Array]' || toStringed === '[object Int32Array]' || toStringed === '[object Uint8Array]' || toStringed === '[object Uint8ClampedArray]' || toStringed === '[object Uint16Array]' || toStringed === '[object Uint32Array]';
  }

  function printNumber(val) {
    if (val != +val) return 'NaN';
    var isNegativeZero = val === 0 && 1 / val < 0;
    return isNegativeZero ? '-0' : '' + val;
  }

  function printFunction(val, printFunctionName) {
    if (!printFunctionName) {
      return '[Function]';
    } else if (val.name === '') {
      return '[Function anonymous]';
    } else {
      return '[Function ' + val.name + ']';
    }
  }

  function printSymbol(val) {
    return symbolToString.call(val).replace(SYMBOL_REGEXP, 'Symbol($1)');
  }

  function printError(val) {
    return '[' + errorToString.call(val) + ']';
  }

  function printBasicValue(val, printFunctionName, escapeRegex) {
    if (val === true || val === false) return '' + val;
    if (val === undefined) return 'undefined';
    if (val === null) return 'null';
    var typeOf = typeof val;
    if (typeOf === 'number') return printNumber(val);
    if (typeOf === 'string') return '"' + printString(val) + '"';
    if (typeOf === 'function') return printFunction(val, printFunctionName);
    if (typeOf === 'symbol') return printSymbol(val);
    var toStringed = toString.call(val);
    if (toStringed === '[object WeakMap]') return 'WeakMap {}';
    if (toStringed === '[object WeakSet]') return 'WeakSet {}';
    if (toStringed === '[object Function]' || toStringed === '[object GeneratorFunction]') return printFunction(val, printFunctionName);
    if (toStringed === '[object Symbol]') return printSymbol(val);
    if (toStringed === '[object Date]') return toISOString.call(val);
    if (toStringed === '[object Error]') return printError(val);

    if (toStringed === '[object RegExp]') {
      if (escapeRegex) {
        return printString(regExpToString.call(val));
      }

      return regExpToString.call(val);
    }

    ;
    if (toStringed === '[object Arguments]' && val.length === 0) return 'Arguments []';
    if (isToStringedArrayType(toStringed) && val.length === 0) return val.constructor.name + ' []';
    if (val instanceof Error) return printError(val);
    return false;
  }

  function printList(list, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    var body = '';

    if (list.length) {
      body += edgeSpacing;
      var innerIndent = prevIndent + indent;

      for (var i = 0; i < list.length; i++) {
        body += innerIndent + print(list[i], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);

        if (i < list.length - 1) {
          body += ',' + spacing;
        }
      }

      body += (min ? '' : ',') + edgeSpacing + prevIndent;
    }

    return '[' + body + ']';
  }

  function printArguments(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    return (min ? '' : 'Arguments ') + printList(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
  }

  function printArray(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    return (min ? '' : val.constructor.name + ' ') + printList(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
  }

  function printMap(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    var result = 'Map {';
    var iterator = val.entries();
    var current = iterator.next();

    if (!current.done) {
      result += edgeSpacing;
      var innerIndent = prevIndent + indent;

      while (!current.done) {
        var key = print(current.value[0], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
        var value = print(current.value[1], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
        result += innerIndent + key + ' => ' + value;
        current = iterator.next();

        if (!current.done) {
          result += ',' + spacing;
        }
      }

      result += (min ? '' : ',') + edgeSpacing + prevIndent;
    }

    return result + '}';
  }

  function printObject(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    var constructor = min ? '' : val.constructor ? val.constructor.name + ' ' : 'Object ';
    var result = constructor + '{';
    var keys = Object.keys(val).sort();
    var symbols = getSymbols(val);

    if (symbols.length) {
      keys = keys.filter(function (key) {
        return !(typeof key === 'symbol' || toString.call(key) === '[object Symbol]');
      }).concat(symbols);
    }

    if (keys.length) {
      result += edgeSpacing;
      var innerIndent = prevIndent + indent;

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var name = print(key, indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
        var value = print(val[key], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
        result += innerIndent + name + ': ' + value;

        if (i < keys.length - 1) {
          result += ',' + spacing;
        }
      }

      result += (min ? '' : ',') + edgeSpacing + prevIndent;
    }

    return result + '}';
  }

  function printSet(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    var result = 'Set {';
    var iterator = val.entries();
    var current = iterator.next();

    if (!current.done) {
      result += edgeSpacing;
      var innerIndent = prevIndent + indent;

      while (!current.done) {
        result += innerIndent + print(current.value[1], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
        current = iterator.next();

        if (!current.done) {
          result += ',' + spacing;
        }
      }

      result += (min ? '' : ',') + edgeSpacing + prevIndent;
    }

    return result + '}';
  }

  function printComplexValue(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    refs = refs.slice();

    if (refs.indexOf(val) > -1) {
      return '[Circular]';
    } else {
      refs.push(val);
    }

    currentDepth++;
    var hitMaxDepth = currentDepth > maxDepth;

    if (callToJSON && !hitMaxDepth && val.toJSON && typeof val.toJSON === 'function') {
      return print(val.toJSON(), indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    }

    var toStringed = toString.call(val);

    if (toStringed === '[object Arguments]') {
      return hitMaxDepth ? '[Arguments]' : printArguments(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    } else if (isToStringedArrayType(toStringed)) {
      return hitMaxDepth ? '[Array]' : printArray(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    } else if (toStringed === '[object Map]') {
      return hitMaxDepth ? '[Map]' : printMap(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    } else if (toStringed === '[object Set]') {
      return hitMaxDepth ? '[Set]' : printSet(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    } else if (typeof val === 'object') {
      return hitMaxDepth ? '[Object]' : printObject(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    }
  }

  function printPlugin(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    var match = false;
    var plugin = void 0;

    for (var p = 0; p < plugins.length; p++) {
      plugin = plugins[p];

      if (plugin.test(val)) {
        match = true;
        break;
      }
    }

    if (!match) {
      return false;
    }

    function boundPrint(val) {
      return print(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    }

    function boundIndent(str) {
      var indentation = prevIndent + indent;
      return indentation + str.replace(NEWLINE_REGEXP, '\n' + indentation);
    }

    return plugin.print(val, boundPrint, boundIndent, {
      edgeSpacing: edgeSpacing,
      spacing: spacing
    });
  }

  function print(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    var basic = printBasicValue(val, printFunctionName, escapeRegex);
    if (basic) return basic;
    var plugin = printPlugin(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    if (plugin) return plugin;
    return printComplexValue(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
  }

  var DEFAULTS = {
    callToJSON: true,
    indent: 2,
    maxDepth: Infinity,
    min: false,
    plugins: [],
    printFunctionName: true,
    escapeRegex: false
  };

  function validateOptions(opts) {
    Object.keys(opts).forEach(function (key) {
      if (!DEFAULTS.hasOwnProperty(key)) {
        throw new Error('prettyFormat: Invalid option: ' + key);
      }
    });

    if (opts.min && opts.indent !== undefined && opts.indent !== 0) {
      throw new Error('prettyFormat: Cannot run with min option and indent');
    }
  }

  function normalizeOptions(opts) {
    var result = {};
    Object.keys(DEFAULTS).forEach(function (key) {
      return result[key] = opts.hasOwnProperty(key) ? opts[key] : DEFAULTS[key];
    });

    if (result.min) {
      result.indent = 0;
    }

    return result;
  }

  function createIndent(indent) {
    return new Array(indent + 1).join(' ');
  }

  function prettyFormat(val, opts) {
    if (!opts) {
      opts = DEFAULTS;
    } else {
      validateOptions(opts);
      opts = normalizeOptions(opts);
    }

    var indent = void 0;
    var refs = void 0;
    var prevIndent = '';
    var currentDepth = 0;
    var spacing = opts.min ? ' ' : '\n';
    var edgeSpacing = opts.min ? '' : '\n';

    if (opts && opts.plugins.length) {
      indent = createIndent(opts.indent);
      refs = [];
      var pluginsResult = printPlugin(val, indent, prevIndent, spacing, edgeSpacing, refs, opts.maxDepth, currentDepth, opts.plugins, opts.min, opts.callToJSON, opts.printFunctionName, opts.escapeRegex);
      if (pluginsResult) return pluginsResult;
    }

    var basicResult = printBasicValue(val, opts.printFunctionName, opts.escapeRegex);
    if (basicResult) return basicResult;
    if (!indent) indent = createIndent(opts.indent);
    if (!refs) refs = [];
    return printComplexValue(val, indent, prevIndent, spacing, edgeSpacing, refs, opts.maxDepth, currentDepth, opts.plugins, opts.min, opts.callToJSON, opts.printFunctionName, opts.escapeRegex);
  }

  module.exports = prettyFormat;
},48,[49],"node_modules\\pretty-format\\index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ESCAPED_CHARACTERS = /(\\|\"|\')/g;

  module.exports = function printString(val) {
    return val.replace(ESCAPED_CHARACTERS, '\\$1');
  };
},49,[],"node_modules\\pretty-format\\printString.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  !function (global) {
    "use strict";

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined;
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    var inModule = typeof module === "object";
    var runtime = global.regeneratorRuntime;

    if (runtime) {
      if (inModule) {
        module.exports = runtime;
      }

      return;
    }

    runtime = global.regeneratorRuntime = inModule ? module.exports : {};

    function wrap(innerFn, outerFn, self, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);
      generator._invoke = makeInvokeMethod(innerFn, self, context);
      return generator;
    }

    runtime.wrap = wrap;

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    var ContinueSentinel = {};

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {}

    var IteratorPrototype = {};

    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        prototype[method] = function (arg) {
          return this._invoke(method, arg);
        };
      });
    }

    runtime.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    runtime.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;

        if (!(toStringTagSymbol in genFun)) {
          genFun[toStringTagSymbol] = "GeneratorFunction";
        }
      }

      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    runtime.awrap = function (arg) {
      return {
        __await: arg
      };
    };

    function AsyncIterator(generator) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;

          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return Promise.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return Promise.resolve(value).then(function (unwrapped) {
            result.value = unwrapped;
            resolve(result);
          }, reject);
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new Promise(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }

      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);

    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };

    runtime.AsyncIterator = AsyncIterator;

    runtime.async = function (innerFn, outerFn, self, tryLocsList) {
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
      return runtime.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);

          if (record.type === "normal") {
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted;
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (method === undefined) {
        context.delegate = null;

        if (context.method === "throw") {
          if (delegate.iterator.return) {
            context.method = "return";
            context.arg = undefined;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        context[delegate.resultName] = info.value;
        context.next = delegate.nextLoc;

        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined;
        }
      } else {
        return info;
      }

      context.delegate = null;
      return ContinueSentinel;
    }

    defineIteratorMethods(Gp);
    Gp[toStringTagSymbol] = "Generator";

    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    runtime.keys = function (object) {
      var keys = [];

      for (var key in object) {
        keys.push(key);
      }

      keys.reverse();
      return function next() {
        while (keys.length) {
          var key = keys.pop();

          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];

        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined;
            next.done = true;
            return next;
          };

          return next.next = next;
        }
      }

      return {
        next: doneResult
      };
    }

    runtime.values = values;

    function doneResult() {
      return {
        value: undefined,
        done: true
      };
    }

    Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        this.sent = this._sent = undefined;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined;
        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined;
            }
          }
        }
      },
      stop: function stop() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;

        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;

        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            context.method = "next";
            context.arg = undefined;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        }

        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          this.arg = undefined;
        }

        return ContinueSentinel;
      }
    };
  }(function () {
    return this;
  }() || Function("return this")());
},50,[],"node_modules\\regenerator-runtime\\runtime.js");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _require2(_dependencyMap[0], 'Platform');

  var Systrace = _require2(_dependencyMap[1], 'Systrace');

  var invariant = _require2(_dependencyMap[2], 'fbjs/lib/invariant');

  var _require = _require2(_dependencyMap[3], 'NativeModules'),
      Timing = _require.Timing;

  var _performanceNow = null;

  function performanceNow() {
    if (!_performanceNow) {
      _performanceNow = _require2(_dependencyMap[4], 'fbjs/lib/performanceNow');
    }

    return _performanceNow();
  }

  var FRAME_DURATION = 1000 / 60;
  var IDLE_CALLBACK_FRAME_DEADLINE = 1;
  var MAX_TIMER_DURATION_MS = 60 * 1000;
  var IS_ANDROID = Platform.OS === 'android';
  var ANDROID_LONG_TIMER_MESSAGE = 'Setting a timer for a long period of time, i.e. multiple minutes, is a ' + 'performance and correctness issue on Android as it keeps the timer ' + 'module awake, and timers can only be called when the app is in the foreground. ' + 'See https://github.com/facebook/react-native/issues/12981 for more info.';
  var callbacks = [];
  var types = [];
  var timerIDs = [];
  var immediates = [];
  var requestIdleCallbacks = [];
  var requestIdleCallbackTimeouts = {};
  var identifiers = [];
  var GUID = 1;
  var errors = null;
  var hasEmittedTimeDriftWarning = false;

  function _getFreeIndex() {
    var freeIndex = timerIDs.indexOf(null);

    if (freeIndex === -1) {
      freeIndex = timerIDs.length;
    }

    return freeIndex;
  }

  function _allocateCallback(func, type) {
    var id = GUID++;

    var freeIndex = _getFreeIndex();

    timerIDs[freeIndex] = id;
    callbacks[freeIndex] = func;
    types[freeIndex] = type;

    if (__DEV__) {
      var parseErrorStack = _require2(_dependencyMap[5], 'parseErrorStack');

      var error = new Error();
      error.framesToPop = 1;
      var stack = parseErrorStack(error);

      if (stack) {
        identifiers[freeIndex] = stack.shift();
      }
    }

    return id;
  }

  function _callTimer(timerID, frameTime, didTimeout) {
    _require2(_dependencyMap[6], 'fbjs/lib/warning')(timerID <= GUID, 'Tried to call timer with ID %s but no such timer exists.', timerID);

    var timerIndex = timerIDs.indexOf(timerID);

    if (timerIndex === -1) {
      return;
    }

    var type = types[timerIndex];
    var callback = callbacks[timerIndex];

    if (!callback || !type) {
      console.error('No callback found for timerID ' + timerID);
      return;
    }

    if (__DEV__) {
      var identifier = identifiers[timerIndex] || {};
      Systrace.beginEvent('Systrace.callTimer: ' + identifier.methodName);
    }

    if (type === 'setTimeout' || type === 'setImmediate' || type === 'requestAnimationFrame' || type === 'requestIdleCallback') {
      _clearIndex(timerIndex);
    }

    try {
      if (type === 'setTimeout' || type === 'setInterval' || type === 'setImmediate') {
        callback();
      } else if (type === 'requestAnimationFrame') {
        callback(performanceNow());
      } else if (type === 'requestIdleCallback') {
        callback({
          timeRemaining: function timeRemaining() {
            return Math.max(0, FRAME_DURATION - (performanceNow() - frameTime));
          },
          didTimeout: !!didTimeout
        });
      } else {
        console.error('Tried to call a callback with invalid type: ' + type);
      }
    } catch (e) {
      if (!errors) {
        errors = [e];
      } else {
        errors.push(e);
      }
    }

    if (__DEV__) {
      Systrace.endEvent();
    }
  }

  function _callImmediatesPass() {
    if (__DEV__) {
      Systrace.beginEvent('callImmediatesPass()');
    }

    if (immediates.length > 0) {
      var passImmediates = immediates.slice();
      immediates = [];

      for (var i = 0; i < passImmediates.length; ++i) {
        _callTimer(passImmediates[i], 0);
      }
    }

    if (__DEV__) {
      Systrace.endEvent();
    }

    return immediates.length > 0;
  }

  function _clearIndex(i) {
    timerIDs[i] = null;
    callbacks[i] = null;
    types[i] = null;
    identifiers[i] = null;
  }

  function _freeCallback(timerID) {
    if (timerID == null) {
      return;
    }

    var index = timerIDs.indexOf(timerID);

    if (index !== -1) {
      _clearIndex(index);

      var type = types[index];

      if (type !== 'setImmediate' && type !== 'requestIdleCallback') {
        Timing.deleteTimer(timerID);
      }
    }
  }

  var JSTimers = {
    setTimeout: function setTimeout(func, duration) {
      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      if (__DEV__ && IS_ANDROID && duration > MAX_TIMER_DURATION_MS) {
        console.warn(ANDROID_LONG_TIMER_MESSAGE + '\n' + '(Saw setTimeout with duration ' + duration + 'ms)');
      }

      var id = _allocateCallback(function () {
        return func.apply(undefined, args);
      }, 'setTimeout');

      Timing.createTimer(id, duration || 0, Date.now(), false);
      return id;
    },
    setInterval: function setInterval(func, duration) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      if (__DEV__ && IS_ANDROID && duration > MAX_TIMER_DURATION_MS) {
        console.warn(ANDROID_LONG_TIMER_MESSAGE + '\n' + '(Saw setInterval with duration ' + duration + 'ms)');
      }

      var id = _allocateCallback(function () {
        return func.apply(undefined, args);
      }, 'setInterval');

      Timing.createTimer(id, duration || 0, Date.now(), true);
      return id;
    },
    setImmediate: function setImmediate(func) {
      for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }

      var id = _allocateCallback(function () {
        return func.apply(undefined, args);
      }, 'setImmediate');

      immediates.push(id);
      return id;
    },
    requestAnimationFrame: function requestAnimationFrame(func) {
      var id = _allocateCallback(func, 'requestAnimationFrame');

      Timing.createTimer(id, 1, Date.now(), false);
      return id;
    },
    requestIdleCallback: function requestIdleCallback(func, options) {
      if (requestIdleCallbacks.length === 0) {
        Timing.setSendIdleEvents(true);
      }

      var timeout = options && options.timeout;

      var id = _allocateCallback(timeout != null ? function (deadline) {
        var timeoutId = requestIdleCallbackTimeouts[id];

        if (timeoutId) {
          JSTimers.clearTimeout(timeoutId);
          delete requestIdleCallbackTimeouts[id];
        }

        return func(deadline);
      } : func, 'requestIdleCallback');

      requestIdleCallbacks.push(id);

      if (timeout != null) {
        var timeoutId = JSTimers.setTimeout(function () {
          var index = requestIdleCallbacks.indexOf(id);

          if (index > -1) {
            requestIdleCallbacks.splice(index, 1);

            _callTimer(id, performanceNow(), true);
          }

          delete requestIdleCallbackTimeouts[id];

          if (requestIdleCallbacks.length === 0) {
            Timing.setSendIdleEvents(false);
          }
        }, timeout);
        requestIdleCallbackTimeouts[id] = timeoutId;
      }

      return id;
    },
    cancelIdleCallback: function cancelIdleCallback(timerID) {
      _freeCallback(timerID);

      var index = requestIdleCallbacks.indexOf(timerID);

      if (index !== -1) {
        requestIdleCallbacks.splice(index, 1);
      }

      var timeoutId = requestIdleCallbackTimeouts[timerID];

      if (timeoutId) {
        JSTimers.clearTimeout(timeoutId);
        delete requestIdleCallbackTimeouts[timerID];
      }

      if (requestIdleCallbacks.length === 0) {
        Timing.setSendIdleEvents(false);
      }
    },
    clearTimeout: function clearTimeout(timerID) {
      _freeCallback(timerID);
    },
    clearInterval: function clearInterval(timerID) {
      _freeCallback(timerID);
    },
    clearImmediate: function clearImmediate(timerID) {
      _freeCallback(timerID);

      var index = immediates.indexOf(timerID);

      if (index !== -1) {
        immediates.splice(index, 1);
      }
    },
    cancelAnimationFrame: function cancelAnimationFrame(timerID) {
      _freeCallback(timerID);
    },
    callTimers: function callTimers(timersToCall) {
      invariant(timersToCall.length !== 0, 'Cannot call `callTimers` with an empty list of IDs.');
      errors = null;

      for (var i = 0; i < timersToCall.length; i++) {
        _callTimer(timersToCall[i], 0);
      }

      if (errors) {
        var errorCount = errors.length;

        if (errorCount > 1) {
          for (var ii = 1; ii < errorCount; ii++) {
            JSTimers.setTimeout(function (error) {
              throw error;
            }.bind(null, errors[ii]), 0);
          }
        }

        throw errors[0];
      }
    },
    callIdleCallbacks: function callIdleCallbacks(frameTime) {
      if (FRAME_DURATION - (performanceNow() - frameTime) < IDLE_CALLBACK_FRAME_DEADLINE) {
        return;
      }

      errors = null;

      if (requestIdleCallbacks.length > 0) {
        var passIdleCallbacks = requestIdleCallbacks.slice();
        requestIdleCallbacks = [];

        for (var i = 0; i < passIdleCallbacks.length; ++i) {
          _callTimer(passIdleCallbacks[i], frameTime);
        }
      }

      if (requestIdleCallbacks.length === 0) {
        Timing.setSendIdleEvents(false);
      }

      if (errors) {
        errors.forEach(function (error) {
          return JSTimers.setTimeout(function () {
            throw error;
          }, 0);
        });
      }
    },
    callImmediates: function callImmediates() {
      errors = null;

      while (_callImmediatesPass()) {}

      if (errors) {
        errors.forEach(function (error) {
          return JSTimers.setTimeout(function () {
            throw error;
          }, 0);
        });
      }
    },
    emitTimeDriftWarning: function emitTimeDriftWarning(warningMessage) {
      if (hasEmittedTimeDriftWarning) {
        return;
      }

      hasEmittedTimeDriftWarning = true;
      console.warn(warningMessage);
    }
  };

  if (!Timing) {
    console.warn("Timing native module is not available, can't set timers.");
    module.exports = {
      callImmediates: JSTimers.callImmediates,
      setImmediate: JSTimers.setImmediate
    };
  } else {
    module.exports = JSTimers;
  }
},51,[52,19,13,15,53,32,56],"JSTimers");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = _require(_dependencyMap[0], 'NativeModules');

  var Platform = {
    OS: 'android',

    get Version() {
      var constants = NativeModules.PlatformConstants;
      return constants && constants.Version;
    },

    get isTesting() {
      var constants = NativeModules.PlatformConstants;
      return constants && constants.isTesting;
    },

    select: function select(obj) {
      return 'android' in obj ? obj.android : obj.default;
    }
  };
  module.exports = Platform;
},52,[15],"Platform");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var performance = _require(_dependencyMap[0], './performance');

  var performanceNow;

  if (performance.now) {
    performanceNow = function performanceNow() {
      return performance.now();
    };
  } else {
    performanceNow = function performanceNow() {
      return Date.now();
    };
  }

  module.exports = performanceNow;
},53,[54],"node_modules\\fbjs\\lib\\performanceNow.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ExecutionEnvironment = _require(_dependencyMap[0], './ExecutionEnvironment');

  var performance;

  if (ExecutionEnvironment.canUseDOM) {
    performance = window.performance || window.msPerformance || window.webkitPerformance;
  }

  module.exports = performance || {};
},54,[55],"node_modules\\fbjs\\lib\\performance.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
  var ExecutionEnvironment = {
    canUseDOM: canUseDOM,
    canUseWorkers: typeof Worker !== 'undefined',
    canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
    canUseViewport: canUseDOM && !!window.screen,
    isInWorker: !canUseDOM
  };
  module.exports = ExecutionEnvironment;
},55,[],"node_modules\\fbjs\\lib\\ExecutionEnvironment.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var emptyFunction = _require(_dependencyMap[0], './emptyFunction');

  var warning = emptyFunction;

  if (process.env.NODE_ENV !== 'production') {
    var printWarning = function printWarning(format) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });

      if (typeof console !== 'undefined') {
        console.error(message);
      }

      try {
        throw new Error(message);
      } catch (x) {}
    };

    warning = function warning(condition, format) {
      if (format === undefined) {
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
      }

      if (format.indexOf('Failed Composite propType: ') === 0) {
        return;
      }

      if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }

        printWarning.apply(undefined, [format].concat(args));
      }
    };
  }

  module.exports = warning;
},56,[57],"node_modules\\fbjs\\lib\\warning.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function makeEmptyFunction(arg) {
    return function () {
      return arg;
    };
  }

  var emptyFunction = function emptyFunction() {};

  emptyFunction.thatReturns = makeEmptyFunction;
  emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
  emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
  emptyFunction.thatReturnsNull = makeEmptyFunction(null);

  emptyFunction.thatReturnsThis = function () {
    return this;
  };

  emptyFunction.thatReturnsArgument = function (arg) {
    return arg;
  };

  module.exports = emptyFunction;
},57,[],"node_modules\\fbjs\\lib\\emptyFunction.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var EventTarget = _require(_dependencyMap[0], 'event-target-shim');

  var RCTNetworking = _require(_dependencyMap[1], 'RCTNetworking');

  var base64 = _require(_dependencyMap[2], 'base64-js');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var warning = _require(_dependencyMap[4], 'fbjs/lib/warning');

  var BlobManager = _require(_dependencyMap[5], 'BlobManager');

  if (BlobManager.isAvailable) {
    BlobManager.addNetworkingHandler();
  }

  var UNSENT = 0;
  var OPENED = 1;
  var HEADERS_RECEIVED = 2;
  var LOADING = 3;
  var DONE = 4;
  var SUPPORTED_RESPONSE_TYPES = {
    arraybuffer: typeof global.ArrayBuffer === 'function',
    blob: typeof global.Blob === 'function',
    document: false,
    json: true,
    text: true,
    '': true
  };
  var REQUEST_EVENTS = ['abort', 'error', 'load', 'loadstart', 'progress', 'timeout', 'loadend'];
  var XHR_EVENTS = REQUEST_EVENTS.concat('readystatechange');

  var XMLHttpRequestEventTarget = function (_EventTarget) {
    _inherits(XMLHttpRequestEventTarget, _EventTarget);

    function XMLHttpRequestEventTarget() {
      _classCallCheck(this, XMLHttpRequestEventTarget);

      return _possibleConstructorReturn(this, (XMLHttpRequestEventTarget.__proto__ || Object.getPrototypeOf(XMLHttpRequestEventTarget)).apply(this, arguments));
    }

    return XMLHttpRequestEventTarget;
  }(EventTarget.apply(undefined, REQUEST_EVENTS));

  var XMLHttpRequest = function (_EventTarget2) {
    _inherits(XMLHttpRequest, _EventTarget2);

    _createClass(XMLHttpRequest, null, [{
      key: "setInterceptor",
      value: function setInterceptor(interceptor) {
        XMLHttpRequest._interceptor = interceptor;
      }
    }]);

    function XMLHttpRequest() {
      _classCallCheck(this, XMLHttpRequest);

      var _this2 = _possibleConstructorReturn(this, (XMLHttpRequest.__proto__ || Object.getPrototypeOf(XMLHttpRequest)).call(this));

      _this2.UNSENT = UNSENT;
      _this2.OPENED = OPENED;
      _this2.HEADERS_RECEIVED = HEADERS_RECEIVED;
      _this2.LOADING = LOADING;
      _this2.DONE = DONE;
      _this2.readyState = UNSENT;
      _this2.status = 0;
      _this2.timeout = 0;
      _this2.withCredentials = true;
      _this2.upload = new XMLHttpRequestEventTarget();
      _this2._aborted = false;
      _this2._hasError = false;
      _this2._method = null;
      _this2._response = '';
      _this2._url = null;
      _this2._timedOut = false;
      _this2._trackingName = 'unknown';
      _this2._incrementalEvents = false;

      _this2._reset();

      return _this2;
    }

    _createClass(XMLHttpRequest, [{
      key: "_reset",
      value: function _reset() {
        this.readyState = this.UNSENT;
        this.responseHeaders = undefined;
        this.status = 0;
        delete this.responseURL;
        this._requestId = null;
        this._cachedResponse = undefined;
        this._hasError = false;
        this._headers = {};
        this._response = '';
        this._responseType = '';
        this._sent = false;
        this._lowerCaseResponseHeaders = {};

        this._clearSubscriptions();

        this._timedOut = false;
      }
    }, {
      key: "__didCreateRequest",
      value: function __didCreateRequest(requestId) {
        this._requestId = requestId;
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.requestSent(requestId, this._url || '', this._method || 'GET', this._headers);
      }
    }, {
      key: "__didUploadProgress",
      value: function __didUploadProgress(requestId, progress, total) {
        if (requestId === this._requestId) {
          this.upload.dispatchEvent({
            type: 'progress',
            lengthComputable: true,
            loaded: progress,
            total: total
          });
        }
      }
    }, {
      key: "__didReceiveResponse",
      value: function __didReceiveResponse(requestId, status, responseHeaders, responseURL) {
        if (requestId === this._requestId) {
          this.status = status;
          this.setResponseHeaders(responseHeaders);
          this.setReadyState(this.HEADERS_RECEIVED);

          if (responseURL || responseURL === '') {
            this.responseURL = responseURL;
          } else {
            delete this.responseURL;
          }

          XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.responseReceived(requestId, responseURL || this._url || '', status, responseHeaders || {});
        }
      }
    }, {
      key: "__didReceiveData",
      value: function __didReceiveData(requestId, response) {
        if (requestId !== this._requestId) {
          return;
        }

        this._response = response;
        this._cachedResponse = undefined;
        this.setReadyState(this.LOADING);
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, response);
      }
    }, {
      key: "__didReceiveIncrementalData",
      value: function __didReceiveIncrementalData(requestId, responseText, progress, total) {
        if (requestId !== this._requestId) {
          return;
        }

        if (!this._response) {
          this._response = responseText;
        } else {
          this._response += responseText;
        }

        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, responseText);
        this.setReadyState(this.LOADING);

        this.__didReceiveDataProgress(requestId, progress, total);
      }
    }, {
      key: "__didReceiveDataProgress",
      value: function __didReceiveDataProgress(requestId, loaded, total) {
        if (requestId !== this._requestId) {
          return;
        }

        this.dispatchEvent({
          type: 'progress',
          lengthComputable: total >= 0,
          loaded: loaded,
          total: total
        });
      }
    }, {
      key: "__didCompleteResponse",
      value: function __didCompleteResponse(requestId, error, timeOutError) {
        if (requestId === this._requestId) {
          if (error) {
            if (this._responseType === '' || this._responseType === 'text') {
              this._response = error;
            }

            this._hasError = true;

            if (timeOutError) {
              this._timedOut = true;
            }
          }

          this._clearSubscriptions();

          this._requestId = null;
          this.setReadyState(this.DONE);

          if (error) {
            XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFailed(requestId, error);
          } else {
            XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFinished(requestId, this._response.length);
          }
        }
      }
    }, {
      key: "_clearSubscriptions",
      value: function _clearSubscriptions() {
        (this._subscriptions || []).forEach(function (sub) {
          if (sub) {
            sub.remove();
          }
        });
        this._subscriptions = [];
      }
    }, {
      key: "getAllResponseHeaders",
      value: function getAllResponseHeaders() {
        if (!this.responseHeaders) {
          return null;
        }

        var headers = this.responseHeaders || {};
        return Object.keys(headers).map(function (headerName) {
          return headerName + ': ' + headers[headerName];
        }).join('\r\n');
      }
    }, {
      key: "getResponseHeader",
      value: function getResponseHeader(header) {
        var value = this._lowerCaseResponseHeaders[header.toLowerCase()];

        return value !== undefined ? value : null;
      }
    }, {
      key: "setRequestHeader",
      value: function setRequestHeader(header, value) {
        if (this.readyState !== this.OPENED) {
          throw new Error('Request has not been opened');
        }

        this._headers[header.toLowerCase()] = String(value);
      }
    }, {
      key: "setTrackingName",
      value: function setTrackingName(trackingName) {
        this._trackingName = trackingName;
        return this;
      }
    }, {
      key: "open",
      value: function open(method, url, async) {
        if (this.readyState !== this.UNSENT) {
          throw new Error('Cannot open, already sending');
        }

        if (async !== undefined && !async) {
          throw new Error('Synchronous http requests are not supported');
        }

        if (!url) {
          throw new Error('Cannot load an empty url');
        }

        this._method = method.toUpperCase();
        this._url = url;
        this._aborted = false;
        this.setReadyState(this.OPENED);
      }
    }, {
      key: "send",
      value: function send(data) {
        var _this3 = this;

        if (this.readyState !== this.OPENED) {
          throw new Error('Request has not been opened');
        }

        if (this._sent) {
          throw new Error('Request has already been sent');
        }

        this._sent = true;
        var incrementalEvents = this._incrementalEvents || !!this.onreadystatechange || !!this.onprogress;

        this._subscriptions.push(RCTNetworking.addListener('didSendNetworkData', function (args) {
          return _this3.__didUploadProgress.apply(_this3, _toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkResponse', function (args) {
          return _this3.__didReceiveResponse.apply(_this3, _toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkData', function (args) {
          return _this3.__didReceiveData.apply(_this3, _toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkIncrementalData', function (args) {
          return _this3.__didReceiveIncrementalData.apply(_this3, _toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkDataProgress', function (args) {
          return _this3.__didReceiveDataProgress.apply(_this3, _toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didCompleteNetworkResponse', function (args) {
          return _this3.__didCompleteResponse.apply(_this3, _toConsumableArray(args));
        }));

        var nativeResponseType = 'text';

        if (this._responseType === 'arraybuffer') {
          nativeResponseType = 'base64';
        }

        if (this._responseType === 'blob') {
          nativeResponseType = 'blob';
        }

        invariant(this._method, 'Request method needs to be defined.');
        invariant(this._url, 'Request URL needs to be defined.');
        RCTNetworking.sendRequest(this._method, this._trackingName, this._url, this._headers, data, nativeResponseType, incrementalEvents, this.timeout, this.__didCreateRequest.bind(this), this.withCredentials);
      }
    }, {
      key: "abort",
      value: function abort() {
        this._aborted = true;

        if (this._requestId) {
          RCTNetworking.abortRequest(this._requestId);
        }

        if (!(this.readyState === this.UNSENT || this.readyState === this.OPENED && !this._sent || this.readyState === this.DONE)) {
          this._reset();

          this.setReadyState(this.DONE);
        }

        this._reset();
      }
    }, {
      key: "setResponseHeaders",
      value: function setResponseHeaders(responseHeaders) {
        this.responseHeaders = responseHeaders || null;
        var headers = responseHeaders || {};
        this._lowerCaseResponseHeaders = Object.keys(headers).reduce(function (lcaseHeaders, headerName) {
          lcaseHeaders[headerName.toLowerCase()] = headers[headerName];
          return lcaseHeaders;
        }, {});
      }
    }, {
      key: "setReadyState",
      value: function setReadyState(newState) {
        this.readyState = newState;
        this.dispatchEvent({
          type: 'readystatechange'
        });

        if (newState === this.DONE) {
          if (this._aborted) {
            this.dispatchEvent({
              type: 'abort'
            });
          } else if (this._hasError) {
            if (this._timedOut) {
              this.dispatchEvent({
                type: 'timeout'
              });
            } else {
              this.dispatchEvent({
                type: 'error'
              });
            }
          } else {
            this.dispatchEvent({
              type: 'load'
            });
          }

          this.dispatchEvent({
            type: 'loadend'
          });
        }
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, listener) {
        if (type === 'readystatechange' || type === 'progress') {
          this._incrementalEvents = true;
        }

        _get(XMLHttpRequest.prototype.__proto__ || Object.getPrototypeOf(XMLHttpRequest.prototype), "addEventListener", this).call(this, type, listener);
      }
    }, {
      key: "responseType",
      get: function get() {
        return this._responseType;
      },
      set: function set(responseType) {
        if (this._sent) {
          throw new Error('Failed to set the \'responseType\' property on \'XMLHttpRequest\': The ' + 'response type cannot be set after the request has been sent.');
        }

        if (!SUPPORTED_RESPONSE_TYPES.hasOwnProperty(responseType)) {
          warning(false, "The provided value '" + responseType + "' is not a valid 'responseType'.");
          return;
        }

        invariant(SUPPORTED_RESPONSE_TYPES[responseType] || responseType === 'document', "The provided value '" + responseType + "' is unsupported in this environment.");

        if (responseType === 'blob') {
          invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');
        }

        this._responseType = responseType;
      }
    }, {
      key: "responseText",
      get: function get() {
        if (this._responseType !== '' && this._responseType !== 'text') {
          throw new Error("The 'responseText' property is only available if 'responseType' " + ("is set to '' or 'text', but it is '" + this._responseType + "'."));
        }

        if (this.readyState < LOADING) {
          return '';
        }

        return this._response;
      }
    }, {
      key: "response",
      get: function get() {
        var responseType = this.responseType;

        if (responseType === '' || responseType === 'text') {
          return this.readyState < LOADING || this._hasError ? '' : this._response;
        }

        if (this.readyState !== DONE) {
          return null;
        }

        if (this._cachedResponse !== undefined) {
          return this._cachedResponse;
        }

        switch (responseType) {
          case 'document':
            this._cachedResponse = null;
            break;

          case 'arraybuffer':
            this._cachedResponse = base64.toByteArray(this._response).buffer;
            break;

          case 'blob':
            if (typeof this._response === 'object' && this._response) {
              this._cachedResponse = BlobManager.createFromOptions(this._response);
            } else {
              throw new Error("Invalid response for blob: " + this._response);
            }

            break;

          case 'json':
            try {
              this._cachedResponse = JSON.parse(this._response);
            } catch (_) {
              this._cachedResponse = null;
            }

            break;

          default:
            this._cachedResponse = null;
        }

        return this._cachedResponse;
      }
    }]);

    return XMLHttpRequest;
  }(EventTarget.apply(undefined, _toConsumableArray(XHR_EVENTS)));

  XMLHttpRequest.UNSENT = UNSENT;
  XMLHttpRequest.OPENED = OPENED;
  XMLHttpRequest.HEADERS_RECEIVED = HEADERS_RECEIVED;
  XMLHttpRequest.LOADING = LOADING;
  XMLHttpRequest.DONE = DONE;
  XMLHttpRequest._interceptor = null;
  module.exports = XMLHttpRequest;
},58,[59,63,73,13,56,75],"XMLHttpRequest");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var Commons = _require(_dependencyMap[0], "./commons");

    var CustomEventTarget = _require(_dependencyMap[1], "./custom-event-target");

    var EventWrapper = _require(_dependencyMap[2], "./event-wrapper");

    var LISTENERS = Commons.LISTENERS;
    var CAPTURE = Commons.CAPTURE;
    var BUBBLE = Commons.BUBBLE;
    var ATTRIBUTE = Commons.ATTRIBUTE;
    var newNode = Commons.newNode;
    var defineCustomEventTarget = CustomEventTarget.defineCustomEventTarget;
    var createEventWrapper = EventWrapper.createEventWrapper;
    var STOP_IMMEDIATE_PROPAGATION_FLAG = EventWrapper.STOP_IMMEDIATE_PROPAGATION_FLAG;
    var HAS_EVENTTARGET_INTERFACE = typeof window !== "undefined" && typeof window.EventTarget !== "undefined";

    var EventTarget = module.exports = function EventTarget() {
        if (this instanceof EventTarget) {
            Object.defineProperty(this, LISTENERS, {
                value: Object.create(null)
            });
        } else if (arguments.length === 1 && Array.isArray(arguments[0])) {
            return defineCustomEventTarget(EventTarget, arguments[0]);
        } else if (arguments.length > 0) {
            var types = Array(arguments.length);

            for (var i = 0; i < arguments.length; ++i) {
                types[i] = arguments[i];
            }

            return defineCustomEventTarget(EventTarget, types);
        } else {
            throw new TypeError("Cannot call a class as a function");
        }
    };

    EventTarget.prototype = Object.create((HAS_EVENTTARGET_INTERFACE ? window.EventTarget : Object).prototype, {
        constructor: {
            value: EventTarget,
            writable: true,
            configurable: true
        },
        addEventListener: {
            value: function addEventListener(type, listener, capture) {
                if (listener == null) {
                    return false;
                }

                if (typeof listener !== "function" && typeof listener !== "object") {
                    throw new TypeError("\"listener\" is not an object.");
                }

                var kind = capture ? CAPTURE : BUBBLE;
                var node = this[LISTENERS][type];

                if (node == null) {
                    this[LISTENERS][type] = newNode(listener, kind);
                    return true;
                }

                var prev = null;

                while (node != null) {
                    if (node.listener === listener && node.kind === kind) {
                        return false;
                    }

                    prev = node;
                    node = node.next;
                }

                prev.next = newNode(listener, kind);
                return true;
            },
            configurable: true,
            writable: true
        },
        removeEventListener: {
            value: function removeEventListener(type, listener, capture) {
                if (listener == null) {
                    return false;
                }

                var kind = capture ? CAPTURE : BUBBLE;
                var prev = null;
                var node = this[LISTENERS][type];

                while (node != null) {
                    if (node.listener === listener && node.kind === kind) {
                        if (prev == null) {
                            this[LISTENERS][type] = node.next;
                        } else {
                            prev.next = node.next;
                        }

                        return true;
                    }

                    prev = node;
                    node = node.next;
                }

                return false;
            },
            configurable: true,
            writable: true
        },
        dispatchEvent: {
            value: function dispatchEvent(event) {
                var node = this[LISTENERS][event.type];

                if (node == null) {
                    return true;
                }

                var wrapped = createEventWrapper(event, this);

                while (node != null) {
                    if (typeof node.listener === "function") {
                        node.listener.call(this, wrapped);
                    } else if (node.kind !== ATTRIBUTE && typeof node.listener.handleEvent === "function") {
                        node.listener.handleEvent(wrapped);
                    }

                    if (wrapped[STOP_IMMEDIATE_PROPAGATION_FLAG]) {
                        break;
                    }

                    node = node.next;
                }

                return !wrapped.defaultPrevented;
            },
            configurable: true,
            writable: true
        }
    });
},59,[60,61,62],"node_modules\\event-target-shim\\lib\\event-target.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var createUniqueKey = exports.createUniqueKey = typeof Symbol !== "undefined" ? Symbol : function createUniqueKey(name) {
    return "[[" + name + "_" + Math.random().toFixed(8).slice(2) + "]]";
  };
  exports.LISTENERS = createUniqueKey("listeners");
  exports.CAPTURE = 1;
  exports.BUBBLE = 2;
  exports.ATTRIBUTE = 3;

  exports.newNode = function newNode(listener, kind) {
    return {
      listener: listener,
      kind: kind,
      next: null
    };
  };
},60,[],"node_modules\\event-target-shim\\lib\\commons.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var Commons = _require(_dependencyMap[0], "./commons");

    var LISTENERS = Commons.LISTENERS;
    var ATTRIBUTE = Commons.ATTRIBUTE;
    var newNode = Commons.newNode;

    function getAttributeListener(eventTarget, type) {
        var node = eventTarget[LISTENERS][type];

        while (node != null) {
            if (node.kind === ATTRIBUTE) {
                return node.listener;
            }

            node = node.next;
        }

        return null;
    }

    function setAttributeListener(eventTarget, type, listener) {
        if (typeof listener !== "function" && typeof listener !== "object") {
            listener = null;
        }

        var prev = null;
        var node = eventTarget[LISTENERS][type];

        while (node != null) {
            if (node.kind === ATTRIBUTE) {
                if (prev == null) {
                    eventTarget[LISTENERS][type] = node.next;
                } else {
                    prev.next = node.next;
                }
            } else {
                prev = node;
            }

            node = node.next;
        }

        if (listener != null) {
            if (prev == null) {
                eventTarget[LISTENERS][type] = newNode(listener, ATTRIBUTE);
            } else {
                prev.next = newNode(listener, ATTRIBUTE);
            }
        }
    }

    exports.defineCustomEventTarget = function (EventTargetBase, types) {
        function EventTarget() {
            EventTargetBase.call(this);
        }

        var descripter = {
            constructor: {
                value: EventTarget,
                configurable: true,
                writable: true
            }
        };
        types.forEach(function (type) {
            descripter["on" + type] = {
                get: function get() {
                    return getAttributeListener(this, type);
                },
                set: function set(listener) {
                    setAttributeListener(this, type, listener);
                },
                configurable: true,
                enumerable: true
            };
        });
        EventTarget.prototype = Object.create(EventTargetBase.prototype, descripter);
        return EventTarget;
    };
},61,[60],"node_modules\\event-target-shim\\lib\\custom-event-target.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var createUniqueKey = _require(_dependencyMap[0], "./commons").createUniqueKey;

    var STOP_IMMEDIATE_PROPAGATION_FLAG = createUniqueKey("stop_immediate_propagation_flag");
    var CANCELED_FLAG = createUniqueKey("canceled_flag");
    var ORIGINAL_EVENT = createUniqueKey("original_event");
    var wrapperPrototypeDefinition = Object.freeze({
        stopPropagation: Object.freeze({
            value: function stopPropagation() {
                var e = this[ORIGINAL_EVENT];

                if (typeof e.stopPropagation === "function") {
                    e.stopPropagation();
                }
            },
            writable: true,
            configurable: true
        }),
        stopImmediatePropagation: Object.freeze({
            value: function stopImmediatePropagation() {
                this[STOP_IMMEDIATE_PROPAGATION_FLAG] = true;
                var e = this[ORIGINAL_EVENT];

                if (typeof e.stopImmediatePropagation === "function") {
                    e.stopImmediatePropagation();
                }
            },
            writable: true,
            configurable: true
        }),
        preventDefault: Object.freeze({
            value: function preventDefault() {
                if (this.cancelable === true) {
                    this[CANCELED_FLAG] = true;
                }

                var e = this[ORIGINAL_EVENT];

                if (typeof e.preventDefault === "function") {
                    e.preventDefault();
                }
            },
            writable: true,
            configurable: true
        }),
        defaultPrevented: Object.freeze({
            get: function defaultPrevented() {
                return this[CANCELED_FLAG];
            },
            enumerable: true,
            configurable: true
        })
    });
    exports.STOP_IMMEDIATE_PROPAGATION_FLAG = STOP_IMMEDIATE_PROPAGATION_FLAG;

    exports.createEventWrapper = function createEventWrapper(event, eventTarget) {
        var timeStamp = typeof event.timeStamp === "number" ? event.timeStamp : Date.now();
        var propertyDefinition = {
            type: {
                value: event.type,
                enumerable: true
            },
            target: {
                value: eventTarget,
                enumerable: true
            },
            currentTarget: {
                value: eventTarget,
                enumerable: true
            },
            eventPhase: {
                value: 2,
                enumerable: true
            },
            bubbles: {
                value: Boolean(event.bubbles),
                enumerable: true
            },
            cancelable: {
                value: Boolean(event.cancelable),
                enumerable: true
            },
            timeStamp: {
                value: timeStamp,
                enumerable: true
            },
            isTrusted: {
                value: false,
                enumerable: true
            }
        };
        propertyDefinition[STOP_IMMEDIATE_PROPAGATION_FLAG] = {
            value: false,
            writable: true
        };
        propertyDefinition[CANCELED_FLAG] = {
            value: false,
            writable: true
        };
        propertyDefinition[ORIGINAL_EVENT] = {
            value: event
        };

        if (typeof event.detail !== "undefined") {
            propertyDefinition.detail = {
                value: event.detail,
                enumerable: true
            };
        }

        return Object.create(Object.create(event, wrapperPrototypeDefinition), propertyDefinition);
    };
},62,[60],"node_modules\\event-target-shim\\lib\\event-wrapper.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var MissingNativeEventEmitterShim = _require(_dependencyMap[0], 'MissingNativeEventEmitterShim');

  var NativeEventEmitter = _require(_dependencyMap[1], 'NativeEventEmitter');

  var RCTNetworkingNative = _require(_dependencyMap[2], 'NativeModules').Networking;

  var convertRequestBody = _require(_dependencyMap[3], 'convertRequestBody');

  function convertHeadersMapToArray(headers) {
    var headerArray = [];

    for (var name in headers) {
      headerArray.push([name, headers[name]]);
    }

    return headerArray;
  }

  var _requestId = 1;

  function generateRequestId() {
    return _requestId++;
  }

  var RCTNetworking = function (_NativeEventEmitter) {
    _inherits(RCTNetworking, _NativeEventEmitter);

    function RCTNetworking() {
      _classCallCheck(this, RCTNetworking);

      var _this = _possibleConstructorReturn(this, (RCTNetworking.__proto__ || Object.getPrototypeOf(RCTNetworking)).call(this, RCTNetworkingNative));

      _this.isAvailable = true;
      return _this;
    }

    _createClass(RCTNetworking, [{
      key: "sendRequest",
      value: function sendRequest(method, trackingName, url, headers, data, responseType, incrementalUpdates, timeout, callback, withCredentials) {
        var body = convertRequestBody(data);

        if (body && body.formData) {
          body.formData = body.formData.map(function (part) {
            return _extends({}, part, {
              headers: convertHeadersMapToArray(part.headers)
            });
          });
        }

        var requestId = generateRequestId();
        RCTNetworkingNative.sendRequest(method, url, requestId, convertHeadersMapToArray(headers), _extends({}, body, {
          trackingName: trackingName
        }), responseType, incrementalUpdates, timeout, withCredentials);
        callback(requestId);
      }
    }, {
      key: "abortRequest",
      value: function abortRequest(requestId) {
        RCTNetworkingNative.abortRequest(requestId);
      }
    }, {
      key: "clearCookies",
      value: function clearCookies(callback) {
        RCTNetworkingNative.clearCookies(callback);
      }
    }]);

    return RCTNetworking;
  }(NativeEventEmitter);

  if (__DEV__ && !RCTNetworkingNative) {
    var MissingNativeRCTNetworkingShim = function (_MissingNativeEventEm) {
      _inherits(MissingNativeRCTNetworkingShim, _MissingNativeEventEm);

      function MissingNativeRCTNetworkingShim() {
        _classCallCheck(this, MissingNativeRCTNetworkingShim);

        return _possibleConstructorReturn(this, (MissingNativeRCTNetworkingShim.__proto__ || Object.getPrototypeOf(MissingNativeRCTNetworkingShim)).call(this, 'RCTNetworking', 'Networking'));
      }

      _createClass(MissingNativeRCTNetworkingShim, [{
        key: "sendRequest",
        value: function sendRequest() {
          this.throwMissingNativeModule();
        }
      }, {
        key: "abortRequest",
        value: function abortRequest() {
          this.throwMissingNativeModule();
        }
      }, {
        key: "clearCookies",
        value: function clearCookies() {
          this.throwMissingNativeModule();
        }
      }]);

      return MissingNativeRCTNetworkingShim;
    }(MissingNativeEventEmitterShim);

    RCTNetworking = new MissingNativeRCTNetworkingShim();
  } else {
    RCTNetworking = new RCTNetworking();
  }

  module.exports = RCTNetworking;
},63,[64,69,15,71],"RCTNetworking");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var EmitterSubscription = _require(_dependencyMap[0], 'EmitterSubscription');

  var EventEmitter = _require(_dependencyMap[1], 'EventEmitter');

  var invariant = _require(_dependencyMap[2], 'fbjs/lib/invariant');

  var MissingNativeEventEmitterShim = function (_EventEmitter) {
    _inherits(MissingNativeEventEmitterShim, _EventEmitter);

    function MissingNativeEventEmitterShim(nativeModuleName, nativeEventEmitterName) {
      _classCallCheck(this, MissingNativeEventEmitterShim);

      var _this = _possibleConstructorReturn(this, (MissingNativeEventEmitterShim.__proto__ || Object.getPrototypeOf(MissingNativeEventEmitterShim)).call(this, null));

      _this.isAvailable = false;
      _this._nativeModuleName = nativeModuleName;
      _this._nativeEventEmitterName = nativeEventEmitterName;
      return _this;
    }

    _createClass(MissingNativeEventEmitterShim, [{
      key: "throwMissingNativeModule",
      value: function throwMissingNativeModule() {
        invariant(false, "Cannot use '" + this._nativeEventEmitterName + "' module when " + ("native '" + this._nativeModuleName + "' is not included in the build. ") + ("Either include it, or check '" + this._nativeEventEmitterName + "'.isAvailable ") + 'before calling any methods.');
      }
    }, {
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        this.throwMissingNativeModule();
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        this.throwMissingNativeModule();
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        this.throwMissingNativeModule();
      }
    }]);

    return MissingNativeEventEmitterShim;
  }(EventEmitter);

  module.exports = MissingNativeEventEmitterShim;
},64,[65,67,13],"MissingNativeEventEmitterShim");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var EventSubscription = _require(_dependencyMap[0], 'EventSubscription');

  var EmitterSubscription = function (_EventSubscription) {
    _inherits(EmitterSubscription, _EventSubscription);

    function EmitterSubscription(emitter, subscriber, listener, context) {
      _classCallCheck(this, EmitterSubscription);

      var _this = _possibleConstructorReturn(this, (EmitterSubscription.__proto__ || Object.getPrototypeOf(EmitterSubscription)).call(this, subscriber));

      _this.emitter = emitter;
      _this.listener = listener;
      _this.context = context;
      return _this;
    }

    _createClass(EmitterSubscription, [{
      key: "remove",
      value: function remove() {
        this.emitter.removeSubscription(this);
      }
    }]);

    return EmitterSubscription;
  }(EventSubscription);

  module.exports = EmitterSubscription;
},65,[66],"EmitterSubscription");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var EventSubscription = function () {
    function EventSubscription(subscriber) {
      _classCallCheck(this, EventSubscription);

      this.subscriber = subscriber;
    }

    _createClass(EventSubscription, [{
      key: "remove",
      value: function remove() {
        this.subscriber.removeSubscription(this);
      }
    }]);

    return EventSubscription;
  }();

  module.exports = EventSubscription;
},66,[],"EventSubscription");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var EmitterSubscription = _require(_dependencyMap[0], 'EmitterSubscription');

  var EventSubscriptionVendor = _require(_dependencyMap[1], 'EventSubscriptionVendor');

  var emptyFunction = _require(_dependencyMap[2], 'fbjs/lib/emptyFunction');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var EventEmitter = function () {
    function EventEmitter(subscriber) {
      _classCallCheck(this, EventEmitter);

      this._subscriber = subscriber || new EventSubscriptionVendor();
    }

    _createClass(EventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));
      }
    }, {
      key: "once",
      value: function once(eventType, listener, context) {
        var _this = this;

        return this.addListener(eventType, function () {
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this.removeCurrentListener();

          listener.apply(context, args);
        });
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        this._subscriber.removeAllSubscriptions(eventType);
      }
    }, {
      key: "removeCurrentListener",
      value: function removeCurrentListener() {
        invariant(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');
        this.removeSubscription(this._currentSubscription);
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');

        this._subscriber.removeSubscription(subscription);
      }
    }, {
      key: "listeners",
      value: function listeners(eventType) {
        var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

        return subscriptions ? subscriptions.filter(emptyFunction.thatReturnsTrue).map(function (subscription) {
          return subscription.listener;
        }) : [];
      }
    }, {
      key: "emit",
      value: function emit(eventType) {
        var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

        if (subscriptions) {
          for (var i = 0, l = subscriptions.length; i < l; i++) {
            var subscription = subscriptions[i];

            if (subscription) {
              this._currentSubscription = subscription;
              subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));
            }
          }

          this._currentSubscription = null;
        }
      }
    }, {
      key: "removeListener",
      value: function removeListener(eventType, listener) {
        var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

        if (subscriptions) {
          for (var i = 0, l = subscriptions.length; i < l; i++) {
            var subscription = subscriptions[i];

            if (subscription && subscription.listener === listener) {
              subscription.remove();
            }
          }
        }
      }
    }]);

    return EventEmitter;
  }();

  module.exports = EventEmitter;
},67,[65,68,57,13],"EventEmitter");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var EventSubscriptionVendor = function () {
    function EventSubscriptionVendor() {
      _classCallCheck(this, EventSubscriptionVendor);

      this._subscriptionsForType = {};
      this._currentSubscription = null;
    }

    _createClass(EventSubscriptionVendor, [{
      key: "addSubscription",
      value: function addSubscription(eventType, subscription) {
        invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');

        if (!this._subscriptionsForType[eventType]) {
          this._subscriptionsForType[eventType] = [];
        }

        var key = this._subscriptionsForType[eventType].length;

        this._subscriptionsForType[eventType].push(subscription);

        subscription.eventType = eventType;
        subscription.key = key;
        return subscription;
      }
    }, {
      key: "removeAllSubscriptions",
      value: function removeAllSubscriptions(eventType) {
        if (eventType === undefined) {
          this._subscriptionsForType = {};
        } else {
          delete this._subscriptionsForType[eventType];
        }
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        var eventType = subscription.eventType;
        var key = subscription.key;
        var subscriptionsForType = this._subscriptionsForType[eventType];

        if (subscriptionsForType) {
          delete subscriptionsForType[key];
        }
      }
    }, {
      key: "getSubscriptionsForType",
      value: function getSubscriptionsForType(eventType) {
        return this._subscriptionsForType[eventType];
      }
    }]);

    return EventSubscriptionVendor;
  }();

  module.exports = EventSubscriptionVendor;
},68,[13],"EventSubscriptionVendor");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var EventEmitter = _require(_dependencyMap[0], 'EventEmitter');

  var Platform = _require(_dependencyMap[1], 'Platform');

  var RCTDeviceEventEmitter = _require(_dependencyMap[2], 'RCTDeviceEventEmitter');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var NativeEventEmitter = function (_EventEmitter) {
    _inherits(NativeEventEmitter, _EventEmitter);

    function NativeEventEmitter(nativeModule) {
      _classCallCheck(this, NativeEventEmitter);

      var _this = _possibleConstructorReturn(this, (NativeEventEmitter.__proto__ || Object.getPrototypeOf(NativeEventEmitter)).call(this, RCTDeviceEventEmitter.sharedSubscriber));

      if (Platform.OS === 'ios') {
        invariant(nativeModule, 'Native module cannot be null.');
        _this._nativeModule = nativeModule;
      }

      return _this;
    }

    _createClass(NativeEventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        if (this._nativeModule != null) {
          this._nativeModule.addListener(eventType);
        }

        return _get(NativeEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NativeEventEmitter.prototype), "addListener", this).call(this, eventType, listener, context);
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        invariant(eventType, 'eventType argument is required.');
        var count = this.listeners(eventType).length;

        if (this._nativeModule != null) {
          this._nativeModule.removeListeners(count);
        }

        _get(NativeEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NativeEventEmitter.prototype), "removeAllListeners", this).call(this, eventType);
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        if (this._nativeModule != null) {
          this._nativeModule.removeListeners(1);
        }

        _get(NativeEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NativeEventEmitter.prototype), "removeSubscription", this).call(this, subscription);
      }
    }]);

    return NativeEventEmitter;
  }(EventEmitter);

  module.exports = NativeEventEmitter;
},69,[67,52,70,13],"NativeEventEmitter");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var EventEmitter = _require(_dependencyMap[0], 'EventEmitter');

  var EventSubscriptionVendor = _require(_dependencyMap[1], 'EventSubscriptionVendor');

  function checkNativeEventModule(eventType) {
    if (eventType) {
      if (eventType.lastIndexOf('statusBar', 0) === 0) {
        throw new Error('`' + eventType + '` event should be registered via the StatusBarIOS module');
      }

      if (eventType.lastIndexOf('keyboard', 0) === 0) {
        throw new Error('`' + eventType + '` event should be registered via the Keyboard module');
      }

      if (eventType === 'appStateDidChange' || eventType === 'memoryWarning') {
        throw new Error('`' + eventType + '` event should be registered via the AppState module');
      }
    }
  }

  var RCTDeviceEventEmitter = function (_EventEmitter) {
    _inherits(RCTDeviceEventEmitter, _EventEmitter);

    function RCTDeviceEventEmitter() {
      _classCallCheck(this, RCTDeviceEventEmitter);

      var sharedSubscriber = new EventSubscriptionVendor();

      var _this = _possibleConstructorReturn(this, (RCTDeviceEventEmitter.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter)).call(this, sharedSubscriber));

      _this.sharedSubscriber = sharedSubscriber;
      return _this;
    }

    _createClass(RCTDeviceEventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        if (__DEV__) {
          checkNativeEventModule(eventType);
        }

        return _get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), "addListener", this).call(this, eventType, listener, context);
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        if (__DEV__) {
          checkNativeEventModule(eventType);
        }

        _get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), "removeAllListeners", this).call(this, eventType);
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        if (subscription.emitter !== this) {
          subscription.emitter.removeSubscription(subscription);
        } else {
          _get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), "removeSubscription", this).call(this, subscription);
        }
      }
    }]);

    return RCTDeviceEventEmitter;
  }(EventEmitter);

  module.exports = new RCTDeviceEventEmitter();
},70,[67,68],"RCTDeviceEventEmitter");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var binaryToBase64 = _require(_dependencyMap[0], 'binaryToBase64');

  var Blob = _require(_dependencyMap[1], 'Blob');

  var FormData = _require(_dependencyMap[2], 'FormData');

  function convertRequestBody(body) {
    if (typeof body === 'string') {
      return {
        string: body
      };
    }

    if (body instanceof Blob) {
      return {
        blob: body.data
      };
    }

    if (body instanceof FormData) {
      return {
        formData: body.getParts()
      };
    }

    if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {
      return {
        base64: binaryToBase64(body)
      };
    }

    return body;
  }

  module.exports = convertRequestBody;
},71,[72,74,77],"convertRequestBody");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var base64 = _require(_dependencyMap[0], 'base64-js');

  function binaryToBase64(data) {
    if (data instanceof ArrayBuffer) {
      data = new Uint8Array(data);
    }

    if (data instanceof Uint8Array) {
      return base64.fromByteArray(data);
    }

    if (!ArrayBuffer.isView(data)) {
      throw new Error('data must be ArrayBuffer or typed array');
    }

    var _data = data,
        buffer = _data.buffer,
        byteOffset = _data.byteOffset,
        byteLength = _data.byteLength;
    return base64.fromByteArray(new Uint8Array(buffer, byteOffset, byteLength));
  }

  module.exports = binaryToBase64;
},72,[73],"binaryToBase64");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  exports.byteLength = byteLength;
  exports.toByteArray = toByteArray;
  exports.fromByteArray = fromByteArray;
  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }

  revLookup['-'.charCodeAt(0)] = 62;
  revLookup['_'.charCodeAt(0)] = 63;

  function placeHoldersCount(b64) {
    var len = b64.length;

    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4');
    }

    return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;
  }

  function byteLength(b64) {
    return b64.length * 3 / 4 - placeHoldersCount(b64);
  }

  function toByteArray(b64) {
    var i, l, tmp, placeHolders, arr;
    var len = b64.length;
    placeHolders = placeHoldersCount(b64);
    arr = new Arr(len * 3 / 4 - placeHolders);
    l = placeHolders > 0 ? len - 4 : len;
    var L = 0;

    for (i = 0; i < l; i += 4) {
      tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
      arr[L++] = tmp >> 16 & 0xFF;
      arr[L++] = tmp >> 8 & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    if (placeHolders === 2) {
      tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
      arr[L++] = tmp & 0xFF;
    } else if (placeHolders === 1) {
      tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
      arr[L++] = tmp >> 8 & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    return arr;
  }

  function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
  }

  function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];

    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
      output.push(tripletToBase64(tmp));
    }

    return output.join('');
  }

  function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3;
    var output = '';
    var parts = [];
    var maxChunkLength = 16383;

    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    }

    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      output += lookup[tmp >> 2];
      output += lookup[tmp << 4 & 0x3F];
      output += '==';
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + uint8[len - 1];
      output += lookup[tmp >> 10];
      output += lookup[tmp >> 4 & 0x3F];
      output += lookup[tmp << 2 & 0x3F];
      output += '=';
    }

    parts.push(output);
    return parts.join('');
  }
},73,[],"node_modules\\base64-js\\index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var Blob = function () {
    function Blob() {
      var parts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var options = arguments[1];

      _classCallCheck(this, Blob);

      var BlobManager = _require(_dependencyMap[0], 'BlobManager');

      this.data = BlobManager.createFromParts(parts, options).data;
    }

    _createClass(Blob, [{
      key: "slice",
      value: function slice(start, end) {
        var BlobManager = _require(_dependencyMap[0], 'BlobManager');

        var _data = this.data,
            offset = _data.offset,
            size = _data.size;

        if (typeof start === 'number') {
          if (start > size) {
            start = size;
          }

          offset += start;
          size -= start;

          if (typeof end === 'number') {
            if (end < 0) {
              end = this.size + end;
            }

            size = end - start;
          }
        }

        return BlobManager.createFromOptions({
          blobId: this.data.blobId,
          offset: offset,
          size: size
        });
      }
    }, {
      key: "close",
      value: function close() {
        var BlobManager = _require(_dependencyMap[0], 'BlobManager');

        BlobManager.release(this.data.blobId);
        this.data = null;
      }
    }, {
      key: "data",
      set: function set(data) {
        this._data = data;
      },
      get: function get() {
        if (!this._data) {
          throw new Error('Blob has been closed and is no longer available');
        }

        return this._data;
      }
    }, {
      key: "size",
      get: function get() {
        return this.data.size;
      }
    }, {
      key: "type",
      get: function get() {
        return this.data.type || '';
      }
    }]);

    return Blob;
  }();

  module.exports = Blob;
},74,[75],"Blob");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var Blob = _require2(_dependencyMap[0], 'Blob');

  var BlobRegistry = _require2(_dependencyMap[1], 'BlobRegistry');

  var _require = _require2(_dependencyMap[2], 'NativeModules'),
      BlobModule = _require.BlobModule;

  function uuidv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      var r = Math.random() * 16 | 0,
          v = c == 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  }

  var BlobManager = function () {
    function BlobManager() {
      _classCallCheck(this, BlobManager);
    }

    _createClass(BlobManager, null, [{
      key: "createFromParts",
      value: function createFromParts(parts, options) {
        var blobId = uuidv4();
        var items = parts.map(function (part) {
          if (part instanceof ArrayBuffer || global.ArrayBufferView && part instanceof global.ArrayBufferView) {
            throw new Error("Creating blobs from 'ArrayBuffer' and 'ArrayBufferView' are not supported");
          }

          if (part instanceof Blob) {
            return {
              data: part.data,
              type: 'blob'
            };
          } else {
            return {
              data: String(part),
              type: 'string'
            };
          }
        });
        var size = items.reduce(function (acc, curr) {
          if (curr.type === 'string') {
            return acc + global.unescape(encodeURI(curr.data)).length;
          } else {
            return acc + curr.data.size;
          }
        }, 0);
        BlobModule.createFromParts(items, blobId);
        return BlobManager.createFromOptions({
          blobId: blobId,
          offset: 0,
          size: size,
          type: options ? options.type : '',
          lastModified: options ? options.lastModified : Date.now()
        });
      }
    }, {
      key: "createFromOptions",
      value: function createFromOptions(options) {
        BlobRegistry.register(options.blobId);
        return _extends(Object.create(Blob.prototype), {
          data: options
        });
      }
    }, {
      key: "release",
      value: function release(blobId) {
        BlobRegistry.unregister(blobId);

        if (BlobRegistry.has(blobId)) {
          return;
        }

        BlobModule.release(blobId);
      }
    }, {
      key: "addNetworkingHandler",
      value: function addNetworkingHandler() {
        BlobModule.addNetworkingHandler();
      }
    }, {
      key: "addWebSocketHandler",
      value: function addWebSocketHandler(socketId) {
        BlobModule.addWebSocketHandler(socketId);
      }
    }, {
      key: "removeWebSocketHandler",
      value: function removeWebSocketHandler(socketId) {
        BlobModule.removeWebSocketHandler(socketId);
      }
    }, {
      key: "sendOverSocket",
      value: function sendOverSocket(blob, socketId) {
        BlobModule.sendOverSocket(blob.data, socketId);
      }
    }]);

    return BlobManager;
  }();

  BlobManager.isAvailable = !!BlobModule;
  module.exports = BlobManager;
},75,[74,76,15],"BlobManager");
__d(function (global, _require, module, exports, _dependencyMap) {
  var registry = {};

  var register = function register(id) {
    if (registry[id]) {
      registry[id]++;
    } else {
      registry[id] = 1;
    }
  };

  var unregister = function unregister(id) {
    if (registry[id]) {
      registry[id]--;

      if (registry[id] <= 0) {
        delete registry[id];
      }
    }
  };

  var has = function has(id) {
    return registry[id] && registry[id] > 0;
  };

  module.exports = {
    register: register,
    unregister: unregister,
    has: has
  };
},76,[],"BlobRegistry");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var FormData = function () {
    function FormData() {
      _classCallCheck(this, FormData);

      this._parts = [];
    }

    _createClass(FormData, [{
      key: "append",
      value: function append(key, value) {
        this._parts.push([key, value]);
      }
    }, {
      key: "getParts",
      value: function getParts() {
        return this._parts.map(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              name = _ref2[0],
              value = _ref2[1];

          var contentDisposition = 'form-data; name="' + name + '"';
          var headers = {
            'content-disposition': contentDisposition
          };

          if (typeof value === 'object' && value) {
            if (typeof value.name === 'string') {
              headers['content-disposition'] += '; filename="' + value.name + '"';
            }

            if (typeof value.type === 'string') {
              headers['content-type'] = value.type;
            }

            return _extends({}, value, {
              headers: headers,
              fieldName: name
            });
          }

          return {
            string: String(value),
            headers: headers,
            fieldName: name
          };
        });
      }
    }]);

    return FormData;
  }();

  module.exports = FormData;
},77,[],"FormData");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Blob = _require(_dependencyMap[0], 'Blob');

  var EventTarget = _require(_dependencyMap[1], 'event-target-shim');

  var NativeEventEmitter = _require(_dependencyMap[2], 'NativeEventEmitter');

  var BlobManager = _require(_dependencyMap[3], 'BlobManager');

  var NativeModules = _require(_dependencyMap[4], 'NativeModules');

  var Platform = _require(_dependencyMap[5], 'Platform');

  var WebSocketEvent = _require(_dependencyMap[6], 'WebSocketEvent');

  var base64 = _require(_dependencyMap[7], 'base64-js');

  var binaryToBase64 = _require(_dependencyMap[8], 'binaryToBase64');

  var invariant = _require(_dependencyMap[9], 'fbjs/lib/invariant');

  var WebSocketModule = NativeModules.WebSocketModule;
  var CONNECTING = 0;
  var OPEN = 1;
  var CLOSING = 2;
  var CLOSED = 3;
  var CLOSE_NORMAL = 1000;
  var WEBSOCKET_EVENTS = ['close', 'error', 'message', 'open'];
  var nextWebSocketId = 0;

  var WebSocket = function (_EventTarget) {
    _inherits(WebSocket, _EventTarget);

    function WebSocket(url, protocols, options) {
      _classCallCheck(this, WebSocket);

      var _this = _possibleConstructorReturn(this, (WebSocket.__proto__ || Object.getPrototypeOf(WebSocket)).call(this));

      _this.CONNECTING = CONNECTING;
      _this.OPEN = OPEN;
      _this.CLOSING = CLOSING;
      _this.CLOSED = CLOSED;
      _this.readyState = CONNECTING;

      if (typeof protocols === 'string') {
        protocols = [protocols];
      }

      var _ref = options || {},
          _ref$headers = _ref.headers,
          headers = _ref$headers === undefined ? {} : _ref$headers,
          unrecognized = _objectWithoutProperties(_ref, ["headers"]);

      if (unrecognized && typeof unrecognized.origin === 'string') {
        console.warn('Specifying `origin` as a WebSocket connection option is deprecated. Include it under `headers` instead.');
        headers.origin = unrecognized.origin;
        delete unrecognized.origin;
      }

      if (Object.keys(unrecognized).length > 0) {
        console.warn('Unrecognized WebSocket connection option(s) `' + Object.keys(unrecognized).join('`, `') + '`. ' + 'Did you mean to put these under `headers`?');
      }

      if (!Array.isArray(protocols)) {
        protocols = null;
      }

      if (!WebSocket.isAvailable) {
        throw new Error('Cannot initialize WebSocket module. ' + 'Native module WebSocketModule is missing.');
      }

      _this._eventEmitter = new NativeEventEmitter(WebSocketModule);
      _this._socketId = nextWebSocketId++;

      _this._registerEvents();

      WebSocketModule.connect(url, protocols, {
        headers: headers
      }, _this._socketId);
      return _this;
    }

    _createClass(WebSocket, [{
      key: "close",
      value: function close(code, reason) {
        if (this.readyState === this.CLOSING || this.readyState === this.CLOSED) {
          return;
        }

        this.readyState = this.CLOSING;

        this._close(code, reason);
      }
    }, {
      key: "send",
      value: function send(data) {
        if (this.readyState === this.CONNECTING) {
          throw new Error('INVALID_STATE_ERR');
        }

        if (data instanceof Blob) {
          invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');
          BlobManager.sendOverSocket(data, this._socketId);
          return;
        }

        if (typeof data === 'string') {
          WebSocketModule.send(data, this._socketId);
          return;
        }

        if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
          WebSocketModule.sendBinary(binaryToBase64(data), this._socketId);
          return;
        }

        throw new Error('Unsupported data type');
      }
    }, {
      key: "ping",
      value: function ping() {
        if (this.readyState === this.CONNECTING) {
          throw new Error('INVALID_STATE_ERR');
        }

        WebSocketModule.ping(this._socketId);
      }
    }, {
      key: "_close",
      value: function _close(code, reason) {
        if (Platform.OS === 'android') {
          var statusCode = typeof code === 'number' ? code : CLOSE_NORMAL;
          var closeReason = typeof reason === 'string' ? reason : '';
          WebSocketModule.close(statusCode, closeReason, this._socketId);
        } else {
          WebSocketModule.close(this._socketId);
        }

        if (BlobManager.isAvailable && this._binaryType === 'blob') {
          BlobManager.removeWebSocketHandler(this._socketId);
        }
      }
    }, {
      key: "_unregisterEvents",
      value: function _unregisterEvents() {
        this._subscriptions.forEach(function (e) {
          return e.remove();
        });

        this._subscriptions = [];
      }
    }, {
      key: "_registerEvents",
      value: function _registerEvents() {
        var _this2 = this;

        this._subscriptions = [this._eventEmitter.addListener('websocketMessage', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          var data = ev.data;

          switch (ev.type) {
            case 'binary':
              data = base64.toByteArray(ev.data).buffer;
              break;

            case 'blob':
              data = BlobManager.createFromOptions(ev.data);
              break;
          }

          _this2.dispatchEvent(new WebSocketEvent('message', {
            data: data
          }));
        }), this._eventEmitter.addListener('websocketOpen', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          _this2.readyState = _this2.OPEN;

          _this2.dispatchEvent(new WebSocketEvent('open'));
        }), this._eventEmitter.addListener('websocketClosed', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          _this2.readyState = _this2.CLOSED;

          _this2.dispatchEvent(new WebSocketEvent('close', {
            code: ev.code,
            reason: ev.reason
          }));

          _this2._unregisterEvents();

          _this2.close();
        }), this._eventEmitter.addListener('websocketFailed', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          _this2.readyState = _this2.CLOSED;

          _this2.dispatchEvent(new WebSocketEvent('error', {
            message: ev.message
          }));

          _this2.dispatchEvent(new WebSocketEvent('close', {
            message: ev.message
          }));

          _this2._unregisterEvents();

          _this2.close();
        })];
      }
    }, {
      key: "binaryType",
      get: function get() {
        return this._binaryType;
      },
      set: function set(binaryType) {
        if (binaryType !== 'blob' && binaryType !== 'arraybuffer') {
          throw new Error('binaryType must be either \'blob\' or \'arraybuffer\'');
        }

        if (this._binaryType === 'blob' || binaryType === 'blob') {
          invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');

          if (binaryType === 'blob') {
            BlobManager.addWebSocketHandler(this._socketId);
          } else {
            BlobManager.removeWebSocketHandler(this._socketId);
          }
        }

        this._binaryType = binaryType;
      }
    }]);

    return WebSocket;
  }(EventTarget.apply(undefined, WEBSOCKET_EVENTS));

  WebSocket.CONNECTING = CONNECTING;
  WebSocket.OPEN = OPEN;
  WebSocket.CLOSING = CLOSING;
  WebSocket.CLOSED = CLOSED;
  WebSocket.isAvailable = !!WebSocketModule;
  module.exports = WebSocket;
},78,[74,59,69,75,15,52,79,73,72,13],"WebSocket");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var WebSocketEvent = function WebSocketEvent(type, eventInitDict) {
    _classCallCheck(this, WebSocketEvent);

    this.type = type.toString();

    _extends(this, eventInitDict);
  };

  module.exports = WebSocketEvent;
},79,[],"WebSocketEvent");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Blob = _require(_dependencyMap[0], 'Blob');

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  var File = function (_Blob) {
    _inherits(File, _Blob);

    function File(parts, name, options) {
      _classCallCheck(this, File);

      invariant(parts != null && name != null, 'Failed to construct `File`: Must pass both `parts` and `name` arguments.');

      var _this = _possibleConstructorReturn(this, (File.__proto__ || Object.getPrototypeOf(File)).call(this, parts, options));

      _this.data.name = name;
      return _this;
    }

    _createClass(File, [{
      key: "name",
      get: function get() {
        invariant(this.data.name != null, 'Files must have a name set.');
        return this.data.name;
      }
    }, {
      key: "lastModified",
      get: function get() {
        return this.data.lastModified || 0;
      }
    }]);

    return File;
  }(Blob);

  module.exports = File;
},80,[74,13],"File");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var EventTarget = _require2(_dependencyMap[0], 'event-target-shim');

  var Blob = _require2(_dependencyMap[1], 'Blob');

  var _require = _require2(_dependencyMap[2], 'NativeModules'),
      FileReaderModule = _require.FileReaderModule;

  var READER_EVENTS = ['abort', 'error', 'load', 'loadstart', 'loadend', 'progress'];
  var EMPTY = 0;
  var LOADING = 1;
  var DONE = 2;

  var FileReader = function (_EventTarget) {
    _inherits(FileReader, _EventTarget);

    function FileReader() {
      _classCallCheck(this, FileReader);

      var _this = _possibleConstructorReturn(this, (FileReader.__proto__ || Object.getPrototypeOf(FileReader)).call(this));

      _this.EMPTY = EMPTY;
      _this.LOADING = LOADING;
      _this.DONE = DONE;
      _this._aborted = false;
      _this._subscriptions = [];

      _this._reset();

      return _this;
    }

    _createClass(FileReader, [{
      key: "_reset",
      value: function _reset() {
        this._readyState = EMPTY;
        this._error = null;
        this._result = null;
      }
    }, {
      key: "_clearSubscriptions",
      value: function _clearSubscriptions() {
        this._subscriptions.forEach(function (sub) {
          return sub.remove();
        });

        this._subscriptions = [];
      }
    }, {
      key: "_setReadyState",
      value: function _setReadyState(newState) {
        this._readyState = newState;
        this.dispatchEvent({
          type: 'readystatechange'
        });

        if (newState === DONE) {
          if (this._aborted) {
            this.dispatchEvent({
              type: 'abort'
            });
          } else if (this._error) {
            this.dispatchEvent({
              type: 'error'
            });
          } else {
            this.dispatchEvent({
              type: 'load'
            });
          }

          this.dispatchEvent({
            type: 'loadend'
          });
        }
      }
    }, {
      key: "readAsArrayBuffer",
      value: function readAsArrayBuffer() {
        throw new Error('FileReader.readAsArrayBuffer is not implemented');
      }
    }, {
      key: "readAsDataURL",
      value: function readAsDataURL(blob) {
        var _this2 = this;

        this._aborted = false;
        FileReaderModule.readAsDataURL(blob.data).then(function (text) {
          if (_this2._aborted) {
            return;
          }

          _this2._result = text;

          _this2._setReadyState(DONE);
        }, function (error) {
          if (_this2._aborted) {
            return;
          }

          _this2._error = error;

          _this2._setReadyState(DONE);
        });
      }
    }, {
      key: "readAsText",
      value: function readAsText(blob) {
        var _this3 = this;

        var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'UTF-8';
        this._aborted = false;
        FileReaderModule.readAsText(blob.data, encoding).then(function (text) {
          if (_this3._aborted) {
            return;
          }

          _this3._result = text;

          _this3._setReadyState(DONE);
        }, function (error) {
          if (_this3._aborted) {
            return;
          }

          _this3._error = error;

          _this3._setReadyState(DONE);
        });
      }
    }, {
      key: "abort",
      value: function abort() {
        this._aborted = true;

        if (this._readyState !== EMPTY && this._readyState !== DONE) {
          this._reset();

          this._setReadyState(DONE);
        }

        this._reset();
      }
    }, {
      key: "readyState",
      get: function get() {
        return this._readyState;
      }
    }, {
      key: "error",
      get: function get() {
        return this._error;
      }
    }, {
      key: "result",
      get: function get() {
        return this._result;
      }
    }]);

    return FileReader;
  }(EventTarget.apply(undefined, READER_EVENTS));

  FileReader.EMPTY = EMPTY;
  FileReader.LOADING = LOADING;
  FileReader.DONE = DONE;
  module.exports = FileReader;
},81,[59,74,15],"FileReader");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var Blob = _require2(_dependencyMap[0], 'Blob');

  var _require = _require2(_dependencyMap[1], 'NativeModules'),
      BlobModule = _require.BlobModule;

  var BLOB_URL_PREFIX = null;

  if (BlobModule && typeof BlobModule.BLOB_URI_SCHEME === 'string') {
    BLOB_URL_PREFIX = BlobModule.BLOB_URI_SCHEME + ':';

    if (typeof BlobModule.BLOB_URI_HOST === 'string') {
      BLOB_URL_PREFIX += "//" + BlobModule.BLOB_URI_HOST + "/";
    }
  }

  var URL = function () {
    function URL() {
      _classCallCheck(this, URL);

      throw new Error('Creating URL objects is not supported yet.');
    }

    _createClass(URL, null, [{
      key: "createObjectURL",
      value: function createObjectURL(blob) {
        if (BLOB_URL_PREFIX === null) {
          throw new Error('Cannot create URL for blob!');
        }

        return "" + BLOB_URL_PREFIX + blob.data.blobId + "?offset=" + blob.data.offset + "&size=" + blob.size;
      }
    }, {
      key: "revokeObjectURL",
      value: function revokeObjectURL(url) {}
    }]);

    return URL;
  }();

  module.exports = URL;
},82,[74,15],"URL");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var AlertIOS = _require(_dependencyMap[0], 'AlertIOS');

  var NativeModules = _require(_dependencyMap[1], 'NativeModules');

  var Platform = _require(_dependencyMap[2], 'Platform');

  var Alert = function () {
    function Alert() {
      _classCallCheck(this, Alert);
    }

    _createClass(Alert, null, [{
      key: "alert",
      value: function alert(title, message, buttons, options, type) {
        if (Platform.OS === 'ios') {
          if (typeof type !== 'undefined') {
            console.warn('Alert.alert() with a 5th "type" parameter is deprecated and will be removed. Use AlertIOS.prompt() instead.');
            AlertIOS.alert(title, message, buttons, type);
            return;
          }

          AlertIOS.alert(title, message, buttons);
        } else if (Platform.OS === 'android') {
          AlertAndroid.alert(title, message, buttons, options);
        }
      }
    }]);

    return Alert;
  }();

  var AlertAndroid = function () {
    function AlertAndroid() {
      _classCallCheck(this, AlertAndroid);
    }

    _createClass(AlertAndroid, null, [{
      key: "alert",
      value: function alert(title, message, buttons, options) {
        var config = {
          title: title || '',
          message: message || ''
        };

        if (options) {
          config = _extends({}, config, {
            cancelable: options.cancelable
          });
        }

        var validButtons = buttons ? buttons.slice(0, 3) : [{
          text: 'OK'
        }];
        var buttonPositive = validButtons.pop();
        var buttonNegative = validButtons.pop();
        var buttonNeutral = validButtons.pop();

        if (buttonNeutral) {
          config = _extends({}, config, {
            buttonNeutral: buttonNeutral.text || ''
          });
        }

        if (buttonNegative) {
          config = _extends({}, config, {
            buttonNegative: buttonNegative.text || ''
          });
        }

        if (buttonPositive) {
          config = _extends({}, config, {
            buttonPositive: buttonPositive.text || ''
          });
        }

        NativeModules.DialogManagerAndroid.showAlert(config, function (errorMessage) {
          return console.warn(errorMessage);
        }, function (action, buttonKey) {
          if (action === NativeModules.DialogManagerAndroid.buttonClicked) {
            if (buttonKey === NativeModules.DialogManagerAndroid.buttonNeutral) {
              buttonNeutral.onPress && buttonNeutral.onPress();
            } else if (buttonKey === NativeModules.DialogManagerAndroid.buttonNegative) {
              buttonNegative.onPress && buttonNegative.onPress();
            } else if (buttonKey === NativeModules.DialogManagerAndroid.buttonPositive) {
              buttonPositive.onPress && buttonPositive.onPress();
            }
          } else if (action === NativeModules.DialogManagerAndroid.dismissed) {
            options && options.onDismiss && options.onDismiss();
          }
        });
      }
    }]);

    return AlertAndroid;
  }();

  module.exports = Alert;
},83,[84,15,52],"Alert");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var RCTAlertManager = _require(_dependencyMap[0], 'NativeModules').AlertManager;

  var AlertIOS = function () {
    function AlertIOS() {
      _classCallCheck(this, AlertIOS);
    }

    _createClass(AlertIOS, null, [{
      key: "alert",
      value: function alert(title, message, callbackOrButtons, type) {
        if (typeof type !== 'undefined') {
          console.warn('AlertIOS.alert() with a 4th "type" parameter is deprecated and will be removed. Use AlertIOS.prompt() instead.');
          this.prompt(title, message, callbackOrButtons, type);
          return;
        }

        this.prompt(title, message, callbackOrButtons, 'default');
      }
    }, {
      key: "prompt",
      value: function prompt(title, message, callbackOrButtons) {
        var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'plain-text';
        var defaultValue = arguments[4];
        var keyboardType = arguments[5];

        if (typeof type === 'function') {
          console.warn('You passed a callback function as the "type" argument to AlertIOS.prompt(). React Native is ' + 'assuming  you want to use the deprecated AlertIOS.prompt(title, defaultValue, buttons, callback) ' + 'signature. The current signature is AlertIOS.prompt(title, message, callbackOrButtons, type, defaultValue, ' + 'keyboardType) and the old syntax will be removed in a future version.');
          var callback = type;
          var defaultValue = message;
          RCTAlertManager.alertWithArgs({
            title: title || '',
            type: 'plain-text',
            defaultValue: defaultValue
          }, function (id, value) {
            callback(value);
          });
          return;
        }

        var callbacks = [];
        var buttons = [];
        var cancelButtonKey;
        var destructiveButtonKey;

        if (typeof callbackOrButtons === 'function') {
          callbacks = [callbackOrButtons];
        } else if (callbackOrButtons instanceof Array) {
          callbackOrButtons.forEach(function (btn, index) {
            callbacks[index] = btn.onPress;

            if (btn.style === 'cancel') {
              cancelButtonKey = String(index);
            } else if (btn.style === 'destructive') {
              destructiveButtonKey = String(index);
            }

            if (btn.text || index < (callbackOrButtons || []).length - 1) {
              var btnDef = {};
              btnDef[index] = btn.text || '';
              buttons.push(btnDef);
            }
          });
        }

        RCTAlertManager.alertWithArgs({
          title: title || '',
          message: message || undefined,
          buttons: buttons,
          type: type || undefined,
          defaultValue: defaultValue,
          cancelButtonKey: cancelButtonKey,
          destructiveButtonKey: destructiveButtonKey,
          keyboardType: keyboardType
        }, function (id, value) {
          var cb = callbacks[id];
          cb && cb(value);
        });
      }
    }]);

    return AlertIOS;
  }();

  module.exports = AlertIOS;
},84,[15],"AlertIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeEventEmitter = _require(_dependencyMap[0], 'NativeEventEmitter');

  var RCTLocationObserver = _require(_dependencyMap[1], 'NativeModules').LocationObserver;

  var invariant = _require(_dependencyMap[2], 'fbjs/lib/invariant');

  var logError = _require(_dependencyMap[3], 'logError');

  var warning = _require(_dependencyMap[4], 'fbjs/lib/warning');

  var LocationEventEmitter = new NativeEventEmitter(RCTLocationObserver);

  var Platform = _require(_dependencyMap[5], 'Platform');

  var PermissionsAndroid = _require(_dependencyMap[6], 'PermissionsAndroid');

  var subscriptions = [];
  var updatesEnabled = false;
  var Geolocation = {
    setRNConfiguration: function setRNConfiguration(config) {
      if (RCTLocationObserver.setConfiguration) {
        RCTLocationObserver.setConfiguration(config);
      }
    },
    requestAuthorization: function requestAuthorization() {
      RCTLocationObserver.requestAuthorization();
    },
    getCurrentPosition: function getCurrentPosition(geo_success, geo_error, geo_options) {
      var hasPermission, status;
      return regeneratorRuntime.async(function getCurrentPosition$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              invariant(typeof geo_success === 'function', 'Must provide a valid geo_success callback.');
              hasPermission = true;

              if (!(Platform.OS === 'android' && Platform.Version >= 23)) {
                _context.next = 11;
                break;
              }

              _context.next = 5;
              return regeneratorRuntime.awrap(PermissionsAndroid.check(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION));

            case 5:
              hasPermission = _context.sent;

              if (hasPermission) {
                _context.next = 11;
                break;
              }

              _context.next = 9;
              return regeneratorRuntime.awrap(PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION));

            case 9:
              status = _context.sent;
              hasPermission = status === PermissionsAndroid.RESULTS.GRANTED;

            case 11:
              if (hasPermission) {
                RCTLocationObserver.getCurrentPosition(geo_options || {}, geo_success, geo_error || logError);
              }

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    },
    watchPosition: function watchPosition(success, error, options) {
      if (!updatesEnabled) {
        RCTLocationObserver.startObserving(options || {});
        updatesEnabled = true;
      }

      var watchID = subscriptions.length;
      subscriptions.push([LocationEventEmitter.addListener('geolocationDidChange', success), error ? LocationEventEmitter.addListener('geolocationError', error) : null]);
      return watchID;
    },
    clearWatch: function clearWatch(watchID) {
      var sub = subscriptions[watchID];

      if (!sub) {
        return;
      }

      sub[0].remove();
      var sub1 = sub[1];
      sub1 && sub1.remove();
      subscriptions[watchID] = undefined;
      var noWatchers = true;

      for (var ii = 0; ii < subscriptions.length; ii++) {
        if (subscriptions[ii]) {
          noWatchers = false;
        }
      }

      if (noWatchers) {
        Geolocation.stopObserving();
      }
    },
    stopObserving: function stopObserving() {
      if (updatesEnabled) {
        RCTLocationObserver.stopObserving();
        updatesEnabled = false;

        for (var ii = 0; ii < subscriptions.length; ii++) {
          var sub = subscriptions[ii];

          if (sub) {
            warning(false, 'Called stopObserving with existing subscriptions.');
            sub[0].remove();
            var sub1 = sub[1];
            sub1 && sub1.remove();
          }
        }

        subscriptions = [];
      }
    }
  };
  module.exports = Geolocation;
},85,[69,15,13,86,56,52,87],"Geolocation");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var logError = function logError() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (args.length === 1 && args[0] instanceof Error) {
      var err = args[0];
      console.error('Error: "' + err.message + '".  Stack:\n' + err.stack);
    } else {
      console.error.apply(console, args);
    }
  };

  module.exports = logError;
},86,[],"logError");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var NativeModules = _require(_dependencyMap[0], 'NativeModules');

  var PermissionsAndroid = function () {
    function PermissionsAndroid() {
      _classCallCheck(this, PermissionsAndroid);

      this.PERMISSIONS = {
        READ_CALENDAR: 'android.permission.READ_CALENDAR',
        WRITE_CALENDAR: 'android.permission.WRITE_CALENDAR',
        CAMERA: 'android.permission.CAMERA',
        READ_CONTACTS: 'android.permission.READ_CONTACTS',
        WRITE_CONTACTS: 'android.permission.WRITE_CONTACTS',
        GET_ACCOUNTS: 'android.permission.GET_ACCOUNTS',
        ACCESS_FINE_LOCATION: 'android.permission.ACCESS_FINE_LOCATION',
        ACCESS_COARSE_LOCATION: 'android.permission.ACCESS_COARSE_LOCATION',
        RECORD_AUDIO: 'android.permission.RECORD_AUDIO',
        READ_PHONE_STATE: 'android.permission.READ_PHONE_STATE',
        CALL_PHONE: 'android.permission.CALL_PHONE',
        READ_CALL_LOG: 'android.permission.READ_CALL_LOG',
        WRITE_CALL_LOG: 'android.permission.WRITE_CALL_LOG',
        ADD_VOICEMAIL: 'com.android.voicemail.permission.ADD_VOICEMAIL',
        USE_SIP: 'android.permission.USE_SIP',
        PROCESS_OUTGOING_CALLS: 'android.permission.PROCESS_OUTGOING_CALLS',
        BODY_SENSORS: 'android.permission.BODY_SENSORS',
        SEND_SMS: 'android.permission.SEND_SMS',
        RECEIVE_SMS: 'android.permission.RECEIVE_SMS',
        READ_SMS: 'android.permission.READ_SMS',
        RECEIVE_WAP_PUSH: 'android.permission.RECEIVE_WAP_PUSH',
        RECEIVE_MMS: 'android.permission.RECEIVE_MMS',
        READ_EXTERNAL_STORAGE: 'android.permission.READ_EXTERNAL_STORAGE',
        WRITE_EXTERNAL_STORAGE: 'android.permission.WRITE_EXTERNAL_STORAGE'
      };
      this.RESULTS = {
        GRANTED: 'granted',
        DENIED: 'denied',
        NEVER_ASK_AGAIN: 'never_ask_again'
      };
    }

    _createClass(PermissionsAndroid, [{
      key: "checkPermission",
      value: function checkPermission(permission) {
        console.warn('"PermissionsAndroid.checkPermission" is deprecated. Use "PermissionsAndroid.check" instead');
        return NativeModules.PermissionsAndroid.checkPermission(permission);
      }
    }, {
      key: "check",
      value: function check(permission) {
        return NativeModules.PermissionsAndroid.checkPermission(permission);
      }
    }, {
      key: "requestPermission",
      value: function requestPermission(permission, rationale) {
        var response;
        return regeneratorRuntime.async(function requestPermission$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                console.warn('"PermissionsAndroid.requestPermission" is deprecated. Use "PermissionsAndroid.request" instead');
                _context.next = 3;
                return regeneratorRuntime.awrap(this.request(permission, rationale));

              case 3:
                response = _context.sent;
                return _context.abrupt("return", response === this.RESULTS.GRANTED);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "request",
      value: function request(permission, rationale) {
        var shouldShowRationale;
        return regeneratorRuntime.async(function request$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!rationale) {
                  _context2.next = 6;
                  break;
                }

                _context2.next = 3;
                return regeneratorRuntime.awrap(NativeModules.PermissionsAndroid.shouldShowRequestPermissionRationale(permission));

              case 3:
                shouldShowRationale = _context2.sent;

                if (!shouldShowRationale) {
                  _context2.next = 6;
                  break;
                }

                return _context2.abrupt("return", new Promise(function (resolve, reject) {
                  NativeModules.DialogManagerAndroid.showAlert(rationale, function () {
                    return reject(new Error('Error showing rationale'));
                  }, function () {
                    return resolve(NativeModules.PermissionsAndroid.requestPermission(permission));
                  });
                }));

              case 6:
                return _context2.abrupt("return", NativeModules.PermissionsAndroid.requestPermission(permission));

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "requestMultiple",
      value: function requestMultiple(permissions) {
        return NativeModules.PermissionsAndroid.requestMultiplePermissions(permissions);
      }
    }]);

    return PermissionsAndroid;
  }();

  PermissionsAndroid = new PermissionsAndroid();
  module.exports = PermissionsAndroid;
},87,[15],"PermissionsAndroid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var HeapCapture = {
    captureHeap: function captureHeap(path) {
      var error = null;

      try {
        global.nativeCaptureHeap(path);
        console.log('HeapCapture.captureHeap succeeded: ' + path);
      } catch (e) {
        console.log('HeapCapture.captureHeap error: ' + e.toString());
        error = e.toString();
      }

      _require(_dependencyMap[0], 'NativeModules').JSCHeapCapture.captureComplete(path, error);
    }
  };
  module.exports = HeapCapture;
},88,[15],"HeapCapture");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var SamplingProfiler = {
    poke: function poke(token) {
      var error = null;
      var result = null;

      try {
        result = global.pokeSamplingProfiler();

        if (result === null) {
          console.log('The JSC Sampling Profiler has started');
        } else {
          console.log('The JSC Sampling Profiler has stopped');
        }
      } catch (e) {
        console.log('Error occurred when restarting Sampling Profiler: ' + e.toString());
        error = e.toString();
      }

      var _require = _require2(_dependencyMap[0], 'NativeModules'),
          JSCSamplingProfiler = _require.JSCSamplingProfiler;

      JSCSamplingProfiler.operationComplete(token, result, error);
    }
  };
  module.exports = SamplingProfiler;
},89,[15],"SamplingProfiler");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var levelsMap = {
    log: 'log',
    info: 'info',
    warn: 'warn',
    error: 'error',
    fatal: 'error'
  };
  var warningHandler = null;
  var RCTLog = {
    logIfNoNativeHook: function logIfNoNativeHook(level) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      if (typeof global.nativeLoggingHook === 'undefined') {
        RCTLog.logToConsole.apply(RCTLog, [level].concat(_toConsumableArray(args)));
      } else {
        if (warningHandler && level === 'warn') {
          warningHandler.apply(undefined, _toConsumableArray(args));
        }
      }
    },
    logToConsole: function logToConsole(level) {
      var _console;

      var logFn = levelsMap[level];
      invariant(logFn, 'Level "' + level + '" not one of ' + Object.keys(levelsMap).toString());

      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      (_console = console)[logFn].apply(_console, _toConsumableArray(args));
    },
    setWarningHandler: function setWarningHandler(handler) {
      warningHandler = handler;
    }
  };
  module.exports = RCTLog;
},90,[13],"RCTLog");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var RCTDeviceEventEmitter = _require(_dependencyMap[0], 'RCTDeviceEventEmitter');

  var RCTNativeAppEventEmitter = RCTDeviceEventEmitter;
  module.exports = RCTNativeAppEventEmitter;
},91,[70],"RCTNativeAppEventEmitter");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Systrace = _require(_dependencyMap[0], 'Systrace');

  var infoLog = _require(_dependencyMap[1], 'infoLog');

  var performanceNow = global.nativePerformanceNow || _require(_dependencyMap[2], 'fbjs/lib/performanceNow');

  var timespans = {};
  var extras = {};
  var cookies = {};
  var PRINT_TO_CONSOLE = false;
  var PerformanceLogger = {
    addTimespan: function addTimespan(key, lengthInMs, description) {
      if (timespans[key]) {
        if (__DEV__) {
          infoLog('PerformanceLogger: Attempting to add a timespan that already exists ', key);
        }

        return;
      }

      timespans[key] = {
        description: description,
        totalTime: lengthInMs
      };
    },
    startTimespan: function startTimespan(key, description) {
      if (timespans[key]) {
        if (__DEV__) {
          infoLog('PerformanceLogger: Attempting to start a timespan that already exists ', key);
        }

        return;
      }

      timespans[key] = {
        description: description,
        startTime: performanceNow()
      };
      cookies[key] = Systrace.beginAsyncEvent(key);

      if (__DEV__ && PRINT_TO_CONSOLE) {
        infoLog('PerformanceLogger.js', 'start: ' + key);
      }
    },
    stopTimespan: function stopTimespan(key) {
      var timespan = timespans[key];

      if (!timespan || !timespan.startTime) {
        if (__DEV__) {
          infoLog('PerformanceLogger: Attempting to end a timespan that has not started ', key);
        }

        return;
      }

      if (timespan.endTime) {
        if (__DEV__) {
          infoLog('PerformanceLogger: Attempting to end a timespan that has already ended ', key);
        }

        return;
      }

      timespan.endTime = performanceNow();
      timespan.totalTime = timespan.endTime - (timespan.startTime || 0);

      if (__DEV__ && PRINT_TO_CONSOLE) {
        infoLog('PerformanceLogger.js', 'end: ' + key);
      }

      Systrace.endAsyncEvent(key, cookies[key]);
      delete cookies[key];
    },
    clear: function clear() {
      timespans = {};
      extras = {};
    },
    clearCompleted: function clearCompleted() {
      for (var _key in timespans) {
        if (timespans[_key].totalTime) {
          delete timespans[_key];
        }
      }

      extras = {};
    },
    clearExceptTimespans: function clearExceptTimespans(keys) {
      timespans = Object.keys(timespans).reduce(function (previous, key) {
        if (keys.indexOf(key) !== -1) {
          previous[key] = timespans[key];
        }

        return previous;
      }, {});
      extras = {};
    },
    currentTimestamp: function currentTimestamp() {
      return performanceNow();
    },
    getTimespans: function getTimespans() {
      return timespans;
    },
    hasTimespan: function hasTimespan(key) {
      return !!timespans[key];
    },
    logTimespans: function logTimespans() {
      for (var _key2 in timespans) {
        if (timespans[_key2].totalTime) {
          infoLog(_key2 + ': ' + timespans[_key2].totalTime + 'ms');
        }
      }
    },
    addTimespans: function addTimespans(newTimespans, labels) {
      for (var ii = 0, l = newTimespans.length; ii < l; ii += 2) {
        var label = labels[ii / 2];
        PerformanceLogger.addTimespan(label, newTimespans[ii + 1] - newTimespans[ii], label);
      }
    },
    setExtra: function setExtra(key, value) {
      if (extras[key]) {
        if (__DEV__) {
          infoLog('PerformanceLogger: Attempting to set an extra that already exists ', {
            key: key,
            currentValue: extras[key],
            attemptedValue: value
          });
        }

        return;
      }

      extras[key] = value;
    },
    getExtras: function getExtras() {
      return extras;
    }
  };
  module.exports = PerformanceLogger;
},92,[19,93,53],"PerformanceLogger");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function infoLog() {
    var _console;

    return (_console = console).log.apply(_console, arguments);
  }

  module.exports = infoLog;
},93,[],"infoLog");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var JSDevSupportModule = {
    getJSHierarchy: function getJSHierarchy(tag) {
      var hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
      var renderers = hook._renderers;
      var keys = Object.keys(renderers);
      var renderer = renderers[keys[0]];
      var result = renderer.getInspectorDataForViewTag(tag);
      var path = result.hierarchy.map(function (item) {
        return item.name;
      }).join(' -> ');
      console.error('StackOverflowException rendering JSComponent: ' + path);

      _require(_dependencyMap[0], 'NativeModules').JSDevSupport.setResult(path, null);
    }
  };
  module.exports = JSDevSupportModule;
},94,[15],"JSDevSupportModule");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _require(_dependencyMap[0], 'Platform');

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  var MetroHMRClient = _require(_dependencyMap[2], 'metro/src/lib/bundle-modules/HMRClient');

  var HMRClient = {
    enable: function enable(platform, bundleEntry, host, port) {
      invariant(platform, 'Missing required parameter `platform`');
      invariant(bundleEntry, 'Missing required paramenter `bundleEntry`');
      invariant(host, 'Missing required paramenter `host`');

      var HMRLoadingView = _require(_dependencyMap[3], 'HMRLoadingView');

      var wsHostPort = port !== null && port !== '' ? host + ":" + port : host;
      bundleEntry = bundleEntry.replace(/\.(bundle|delta)/, '.js');
      var wsUrl = "ws://" + wsHostPort + "/hot?" + ("platform=" + platform + "&") + ("bundleEntry=" + bundleEntry);
      var hmrClient = new MetroHMRClient(wsUrl);
      hmrClient.on('connection-error', function (e) {
        var error = "Hot loading isn't working because it cannot connect to the development server.\n\nTry the following to fix the issue:\n- Ensure that the packager server is running and available on the same network";

        if (Platform.OS === 'ios') {
          error += "\n- Ensure that the Packager server URL is correctly set in AppDelegate";
        } else {
          error += "\n- Ensure that your device/emulator is connected to your machine and has USB debugging enabled - run 'adb devices' to see a list of connected devices\n- If you're on a physical device connected to the same machine, run 'adb reverse tcp:8081 tcp:8081' to forward requests from your device\n- If your device is on the same Wi-Fi network, set 'Debug server host & port for device' in 'Dev settings' to your machine's IP address and the port of the local dev server - e.g. 10.0.1.1:8081";
        }

        error += "\n\nURL: " + host + ":" + port + "\n\nError: " + e.message;
        throw new Error(error);
      });
      hmrClient.on('update-start', function () {
        HMRLoadingView.showMessage('Hot Loading...');
      });
      hmrClient.on('update', function () {
        if (Platform.OS === 'ios') {
          var RCTRedBox = _require(_dependencyMap[4], 'NativeModules').RedBox;

          RCTRedBox && RCTRedBox.dismiss && RCTRedBox.dismiss();
        } else {
          var RCTExceptionsManager = _require(_dependencyMap[4], 'NativeModules').ExceptionsManager;

          RCTExceptionsManager && RCTExceptionsManager.dismissRedbox && RCTExceptionsManager.dismissRedbox();
        }
      });
      hmrClient.on('update-done', function () {
        HMRLoadingView.hide();
      });
      hmrClient.on('error', function (data) {
        HMRLoadingView.hide();
        throw new Error(data.type + " " + data.message);
      });
      hmrClient.enable();
    }
  };
  module.exports = HMRClient;
},95,[52,13,96,99,15],"HMRClient");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _require(_dependencyMap[0], './MetroClient');
},96,[97],"node_modules\\metro\\src\\lib\\bundle-modules\\HMRClient.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var EventEmitter = _require(_dependencyMap[0], 'eventemitter3');

  var MetroClient = function (_EventEmitter) {
    _inherits(MetroClient, _EventEmitter);

    function MetroClient(url) {
      _classCallCheck(this, MetroClient);

      var _this = _possibleConstructorReturn(this, (MetroClient.__proto__ || Object.getPrototypeOf(MetroClient)).call(this));

      _this._url = url;
      return _this;
    }

    _createClass(MetroClient, [{
      key: "enable",
      value: function enable() {
        var _this2 = this;

        if (this._ws) {
          this.disable();
        }

        this._ws = new global.WebSocket(this._url);

        this._ws.onerror = function (error) {
          _this2.emit('connection-error', error);
        };

        this._ws.onclose = function () {
          _this2.emit('close');
        };

        this._ws.onmessage = function (message) {
          var data = JSON.parse(message.data);

          switch (data.type) {
            case 'update-start':
              _this2.emit('update-start');

              break;

            case 'update':
              var _data$body = data.body;
              var modules = _data$body.modules,
                  sourceMappingURLs = _data$body.sourceMappingURLs,
                  sourceURLs = _data$body.sourceURLs;

              _this2.emit('update');

              modules.forEach(function (_ref, i) {
                var id = _ref.id,
                    code = _ref.code;
                code += '\n\n' + sourceMappingURLs[i];
                var injectFunction = typeof global.nativeInjectHMRUpdate === 'function' ? global.nativeInjectHMRUpdate : eval;
                injectFunction(code, sourceURLs[i]);
              });
              break;

            case 'update-done':
              _this2.emit('update-done');

              break;

            case 'error':
              _this2.emit('error', {
                type: data.body.type,
                message: data.body.message
              });

              break;

            default:
              _this2.emit('error', {
                type: 'unknown-message',
                message: data
              });

          }
        };
      }
    }, {
      key: "disable",
      value: function disable() {
        if (this._ws) {
          this._ws.close();

          this._ws = undefined;
        }
      }
    }]);

    return MetroClient;
  }(EventEmitter);

  module.exports = MetroClient;
},97,[98],"node_modules\\metro\\src\\lib\\bundle-modules\\MetroClient.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var has = Object.prototype.hasOwnProperty,
      prefix = '~';

  function Events() {}

  if (Object.create) {
    Events.prototype = Object.create(null);
    if (!new Events().__proto__) prefix = false;
  }

  function EE(fn, context, once) {
    this.fn = fn;
    this.context = context;
    this.once = once || false;
  }

  function addListener(emitter, event, fn, context, once) {
    if (typeof fn !== 'function') {
      throw new TypeError('The listener must be a function');
    }

    var listener = new EE(fn, context || emitter, once),
        evt = prefix ? prefix + event : event;
    if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);else emitter._events[evt] = [emitter._events[evt], listener];
    return emitter;
  }

  function clearEvent(emitter, evt) {
    if (--emitter._eventsCount === 0) emitter._events = new Events();else delete emitter._events[evt];
  }

  function EventEmitter() {
    this._events = new Events();
    this._eventsCount = 0;
  }

  EventEmitter.prototype.eventNames = function eventNames() {
    var names = [],
        events,
        name;
    if (this._eventsCount === 0) return names;

    for (name in events = this._events) {
      if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
    }

    if (Object.getOwnPropertySymbols) {
      return names.concat(Object.getOwnPropertySymbols(events));
    }

    return names;
  };

  EventEmitter.prototype.listeners = function listeners(event) {
    var evt = prefix ? prefix + event : event,
        handlers = this._events[evt];
    if (!handlers) return [];
    if (handlers.fn) return [handlers.fn];

    for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
      ee[i] = handlers[i].fn;
    }

    return ee;
  };

  EventEmitter.prototype.listenerCount = function listenerCount(event) {
    var evt = prefix ? prefix + event : event,
        listeners = this._events[evt];
    if (!listeners) return 0;
    if (listeners.fn) return 1;
    return listeners.length;
  };

  EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt]) return false;
    var listeners = this._events[evt],
        len = arguments.length,
        args,
        i;

    if (listeners.fn) {
      if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

      switch (len) {
        case 1:
          return listeners.fn.call(listeners.context), true;

        case 2:
          return listeners.fn.call(listeners.context, a1), true;

        case 3:
          return listeners.fn.call(listeners.context, a1, a2), true;

        case 4:
          return listeners.fn.call(listeners.context, a1, a2, a3), true;

        case 5:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;

        case 6:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
      }

      for (i = 1, args = new Array(len - 1); i < len; i++) {
        args[i - 1] = arguments[i];
      }

      listeners.fn.apply(listeners.context, args);
    } else {
      var length = listeners.length,
          j;

      for (i = 0; i < length; i++) {
        if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

        switch (len) {
          case 1:
            listeners[i].fn.call(listeners[i].context);
            break;

          case 2:
            listeners[i].fn.call(listeners[i].context, a1);
            break;

          case 3:
            listeners[i].fn.call(listeners[i].context, a1, a2);
            break;

          case 4:
            listeners[i].fn.call(listeners[i].context, a1, a2, a3);
            break;

          default:
            if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
              args[j - 1] = arguments[j];
            }
            listeners[i].fn.apply(listeners[i].context, args);
        }
      }
    }

    return true;
  };

  EventEmitter.prototype.on = function on(event, fn, context) {
    return addListener(this, event, fn, context, false);
  };

  EventEmitter.prototype.once = function once(event, fn, context) {
    return addListener(this, event, fn, context, true);
  };

  EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt]) return this;

    if (!fn) {
      clearEvent(this, evt);
      return this;
    }

    var listeners = this._events[evt];

    if (listeners.fn) {
      if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
        clearEvent(this, evt);
      }
    } else {
      for (var i = 0, events = [], length = listeners.length; i < length; i++) {
        if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
          events.push(listeners[i]);
        }
      }

      if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;else clearEvent(this, evt);
    }

    return this;
  };

  EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    var evt;

    if (event) {
      evt = prefix ? prefix + event : event;
      if (this._events[evt]) clearEvent(this, evt);
    } else {
      this._events = new Events();
      this._eventsCount = 0;
    }

    return this;
  };

  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  EventEmitter.prototype.addListener = EventEmitter.prototype.on;
  EventEmitter.prefixed = prefix;
  EventEmitter.EventEmitter = EventEmitter;

  if ('undefined' !== typeof module) {
    module.exports = EventEmitter;
  }
},98,[],"node_modules\\eventemitter3\\index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var ToastAndroid = _require(_dependencyMap[0], 'ToastAndroid');

  var TOAST_SHORT_DELAY = 2000;

  var HMRLoadingView = function () {
    function HMRLoadingView() {
      _classCallCheck(this, HMRLoadingView);
    }

    _createClass(HMRLoadingView, null, [{
      key: "showMessage",
      value: function showMessage(message) {
        if (HMRLoadingView._showing) {
          return;
        }

        ToastAndroid.show(message, ToastAndroid.SHORT);
        HMRLoadingView._showing = true;
        setTimeout(function () {
          HMRLoadingView._showing = false;
        }, TOAST_SHORT_DELAY);
      }
    }, {
      key: "hide",
      value: function hide() {}
    }]);

    return HMRLoadingView;
  }();

  module.exports = HMRLoadingView;
},99,[100],"HMRLoadingView");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var RCTToastAndroid = _require(_dependencyMap[0], 'NativeModules').ToastAndroid;

  var ToastAndroid = {
    SHORT: RCTToastAndroid.SHORT,
    LONG: RCTToastAndroid.LONG,
    TOP: RCTToastAndroid.TOP,
    BOTTOM: RCTToastAndroid.BOTTOM,
    CENTER: RCTToastAndroid.CENTER,
    show: function show(message, duration) {
      RCTToastAndroid.show(message, duration);
    },
    showWithGravity: function showWithGravity(message, duration, gravity) {
      RCTToastAndroid.showWithGravity(message, duration, gravity);
    },
    showWithGravityAndOffset: function showWithGravityAndOffset(message, duration, gravity, xOffset, yOffset) {
      RCTToastAndroid.showWithGravityAndOffset(message, duration, gravity, xOffset, yOffset);
    }
  };
  module.exports = ToastAndroid;
},100,[15],"ToastAndroid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var register = function register() {};

  if (__DEV__) {
    var AppState = _require(_dependencyMap[0], 'AppState');

    var WebSocket = _require(_dependencyMap[1], 'WebSocket');

    var reactDevTools = _require(_dependencyMap[2], 'react-devtools-core');

    var getDevServer = _require(_dependencyMap[3], 'getDevServer');

    if (WebSocket.isAvailable) {
      var _isAppActive = function _isAppActive() {
        return AppState.currentState !== 'background';
      };

      var devServer = getDevServer();

      var _host = devServer.bundleLoadedFromServer ? devServer.url.replace(/https?:\/\//, '').split(':')[0] : 'localhost';

      reactDevTools.connectToDevTools({
        isAppActive: _isAppActive,
        host: _host,
        port: window.__REACT_DEVTOOLS_PORT__,
        resolveRNStyle: _require(_dependencyMap[4], 'flattenStyle')
      });
    }
  }

  module.exports = {
    register: register
  };
},101,[102,78,103,36,104],"setupDevtools");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var MissingNativeEventEmitterShim = _require(_dependencyMap[0], 'MissingNativeEventEmitterShim');

  var NativeEventEmitter = _require(_dependencyMap[1], 'NativeEventEmitter');

  var NativeModules = _require(_dependencyMap[2], 'NativeModules');

  var RCTAppState = NativeModules.AppState;

  var logError = _require(_dependencyMap[3], 'logError');

  var invariant = _require(_dependencyMap[4], 'fbjs/lib/invariant');

  var AppState = function (_NativeEventEmitter) {
    _inherits(AppState, _NativeEventEmitter);

    function AppState() {
      _classCallCheck(this, AppState);

      var _this = _possibleConstructorReturn(this, (AppState.__proto__ || Object.getPrototypeOf(AppState)).call(this, RCTAppState));

      _this.isAvailable = true;
      _this.isAvailable = true;
      _this._eventHandlers = {
        change: new Map(),
        memoryWarning: new Map()
      };
      _this.currentState = RCTAppState.initialAppState || 'active';
      var eventUpdated = false;

      _this.addListener('appStateDidChange', function (appStateData) {
        eventUpdated = true;
        _this.currentState = appStateData.app_state;
      });

      RCTAppState.getCurrentAppState(function (appStateData) {
        if (!eventUpdated) {
          _this.currentState = appStateData.app_state;
        }
      }, logError);
      return _this;
    }

    _createClass(AppState, [{
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        invariant(['change', 'memoryWarning'].indexOf(type) !== -1, 'Trying to subscribe to unknown event: "%s"', type);

        if (type === 'change') {
          this._eventHandlers[type].set(handler, this.addListener('appStateDidChange', function (appStateData) {
            handler(appStateData.app_state);
          }));
        } else if (type === 'memoryWarning') {
          this._eventHandlers[type].set(handler, this.addListener('memoryWarning', handler));
        }
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        invariant(['change', 'memoryWarning'].indexOf(type) !== -1, 'Trying to remove listener for unknown event: "%s"', type);

        if (!this._eventHandlers[type].has(handler)) {
          return;
        }

        this._eventHandlers[type].get(handler).remove();

        this._eventHandlers[type].delete(handler);
      }
    }]);

    return AppState;
  }(NativeEventEmitter);

  if (__DEV__ && !RCTAppState) {
    var MissingNativeAppStateShim = function (_MissingNativeEventEm) {
      _inherits(MissingNativeAppStateShim, _MissingNativeEventEm);

      function MissingNativeAppStateShim() {
        _classCallCheck(this, MissingNativeAppStateShim);

        return _possibleConstructorReturn(this, (MissingNativeAppStateShim.__proto__ || Object.getPrototypeOf(MissingNativeAppStateShim)).call(this, 'RCTAppState', 'AppState'));
      }

      _createClass(MissingNativeAppStateShim, [{
        key: "addEventListener",
        value: function addEventListener() {
          this.throwMissingNativeModule();
        }
      }, {
        key: "removeEventListener",
        value: function removeEventListener() {
          this.throwMissingNativeModule();
        }
      }, {
        key: "currentState",
        get: function get() {
          this.throwMissingNativeModule();
        }
      }]);

      return MissingNativeAppStateShim;
    }(MissingNativeEventEmitterShim);

    AppState = new MissingNativeAppStateShim();
  } else {
    AppState = new AppState();
  }

  module.exports = AppState;
},102,[64,69,15,86,13],"AppState");
__d(function (global, _require3, module, exports, _dependencyMap) {
    var _extends2 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    !function (root, factory) {
        "object" == typeof exports && "object" == typeof module ? module.exports = factory() : "function" == typeof define && define.amd ? define([], factory) : "object" == typeof exports ? exports.ReactDevToolsBackend = factory() : root.ReactDevToolsBackend = factory();
    }(this, function () {
        return function (modules) {
            function __webpack_require__(moduleId) {
                if (installedModules[moduleId]) return installedModules[moduleId].exports;
                var module = installedModules[moduleId] = {
                    exports: {},
                    id: moduleId,
                    loaded: !1
                };
                return modules[moduleId].call(module.exports, module, module.exports, __webpack_require__), module.loaded = !0, module.exports;
            }

            var installedModules = {};
            return __webpack_require__.m = modules, __webpack_require__.c = installedModules, __webpack_require__.p = "", __webpack_require__(0);
        }([function (module, exports, __webpack_require__) {
            "use strict";

            function connectToDevTools(options) {
                function scheduleRetry() {
                    setTimeout(function () {
                        return connectToDevTools(options);
                    }, 2e3);
                }

                function handleClose() {
                    hasClosed || (hasClosed = !0, scheduleRetry(), closeListeners.forEach(function (fn) {
                        return fn();
                    }));
                }

                function handleMessage(evt) {
                    var data;

                    try {
                        data = JSON.parse(evt.data);
                    } catch (e) {
                        return void console.error("failed to parse json: " + evt.data);
                    }

                    messageListeners.forEach(function (fn) {
                        try {
                            fn(data);
                        } catch (e) {
                            throw console.log(data), e;
                        }
                    });
                }

                var _ref = options || {},
                    _ref$host = _ref.host,
                    host = void 0 === _ref$host ? "localhost" : _ref$host,
                    _ref$port = _ref.port,
                    port = void 0 === _ref$port ? 8097 : _ref$port,
                    websocket = _ref.websocket,
                    _ref$resolveRNStyle = _ref.resolveRNStyle,
                    resolveRNStyle = void 0 === _ref$resolveRNStyle ? null : _ref$resolveRNStyle,
                    _ref$isAppActive = _ref.isAppActive,
                    isAppActive = void 0 === _ref$isAppActive ? function () {
                    return !0;
                } : _ref$isAppActive;

                if (!isAppActive()) return void scheduleRetry();
                var messageListeners = [],
                    closeListeners = [],
                    uri = "ws://" + host + ":" + port,
                    ws = websocket ? websocket : new window.WebSocket(uri);
                ws.onclose = handleClose, ws.onerror = handleClose, ws.onmessage = handleMessage, ws.onopen = function () {
                    var wall = {
                        listen: function listen(fn) {
                            messageListeners.push(fn);
                        },
                        onClose: function onClose(fn) {
                            closeListeners.push(fn);
                        },
                        send: function send(data) {
                            ws.send(JSON.stringify(data));
                        }
                    };
                    setupBackend(wall, resolveRNStyle);
                };
                var hasClosed = !1;
            }

            function setupBackend(wall, resolveRNStyle) {
                wall.onClose(function () {
                    agent && agent.emit("shutdown"), window.__REACT_DEVTOOLS_GLOBAL_HOOK__.emit("shutdown"), bridge = null, agent = null, console.log("closing devtools");
                });
                var bridge = new Bridge(wall),
                    agent = new Agent(window, {
                    rnStyle: !!resolveRNStyle,
                    rnStyleMeasure: !!resolveRNStyle
                });
                agent.addBridge(bridge), resolveRNStyle && setupRNStyle(bridge, agent, resolveRNStyle), setupRelay(bridge, agent, window.__REACT_DEVTOOLS_GLOBAL_HOOK__);

                var _connectTimeout = setTimeout(function () {
                    console.warn("react-devtools agent got no connection");
                }, 2e4);

                agent.once("connected", function () {
                    agent && (inject(window.__REACT_DEVTOOLS_GLOBAL_HOOK__, agent), clearTimeout(_connectTimeout));
                });
            }

            var Agent = __webpack_require__(1),
                Bridge = __webpack_require__(6),
                installGlobalHook = __webpack_require__(31),
                installRelayHook = __webpack_require__(32),
                inject = __webpack_require__(33),
                setupRNStyle = __webpack_require__(46),
                setupRelay = __webpack_require__(48);

            installGlobalHook(window), installRelayHook(window), window.document && window.__REACT_DEVTOOLS_GLOBAL_HOOK__.on("react-devtools", function (agent) {
                var setupHighlighter = __webpack_require__(49);

                setupHighlighter(agent);
            }), module.exports = {
                connectToDevTools: connectToDevTools
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }

            function _possibleConstructorReturn(self, call) {
                if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                return !call || "object" != typeof call && "function" != typeof call ? self : call;
            }

            function _inherits(subClass, superClass) {
                if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0
                    }
                }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
            }

            var _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
            },
                _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
                };
            }(),
                _require = __webpack_require__(2),
                EventEmitter = _require.EventEmitter,
                assign = __webpack_require__(3),
                guid = __webpack_require__(4),
                getIn = __webpack_require__(5),
                Agent = function (_EventEmitter) {
                function Agent(global, capabilities) {
                    _classCallCheck(this, Agent);

                    var _this = _possibleConstructorReturn(this, (Agent.__proto__ || Object.getPrototypeOf(Agent)).call(this));

                    _this.global = global, _this.internalInstancesById = new Map(), _this.idsByInternalInstances = new WeakMap(), _this.renderers = new Map(), _this.elementData = new Map(), _this.roots = new Set(), _this.reactInternals = {};
                    var lastSelected;
                    _this.on("selected", function (id) {
                        var data = _this.elementData.get(id);

                        data && data.publicInstance && _this.global.$r === lastSelected && (_this.global.$r = data.publicInstance, lastSelected = data.publicInstance);
                    }), _this._prevSelected = null, _this._scrollUpdate = !1;
                    var isReactDOM = window.document && "function" == typeof window.document.createElement;
                    return _this.capabilities = assign({
                        scroll: isReactDOM && "function" == typeof window.document.body.scrollIntoView,
                        dom: isReactDOM,
                        editTextContent: !1
                    }, capabilities), isReactDOM && (_this._updateScroll = _this._updateScroll.bind(_this), window.addEventListener("scroll", _this._onScroll.bind(_this), !0), window.addEventListener("click", _this._onClick.bind(_this), !0), window.addEventListener("mouseover", _this._onMouseOver.bind(_this), !0), window.addEventListener("resize", _this._onResize.bind(_this), !0)), _this;
                }

                return _inherits(Agent, _EventEmitter), _createClass(Agent, [{
                    key: "sub",
                    value: function value(ev, fn) {
                        var _this2 = this;

                        return this.on(ev, fn), function () {
                            _this2.removeListener(ev, fn);
                        };
                    }
                }, {
                    key: "setReactInternals",
                    value: function value(renderer, reactInternals) {
                        this.reactInternals[renderer] = reactInternals;
                    }
                }, {
                    key: "addBridge",
                    value: function value(bridge) {
                        var _this3 = this;

                        bridge.on("requestCapabilities", function () {
                            bridge.send("capabilities", _this3.capabilities), _this3.emit("connected");
                        }), bridge.on("setState", this._setState.bind(this)), bridge.on("setProps", this._setProps.bind(this)), bridge.on("setContext", this._setContext.bind(this)), bridge.on("makeGlobal", this._makeGlobal.bind(this)), bridge.on("highlight", function (id) {
                            return _this3.highlight(id);
                        }), bridge.on("highlightMany", function (id) {
                            return _this3.highlightMany(id);
                        }), bridge.on("hideHighlight", function () {
                            return _this3.emit("hideHighlight");
                        }), bridge.on("startInspecting", function () {
                            return _this3.emit("startInspecting");
                        }), bridge.on("stopInspecting", function () {
                            return _this3.emit("stopInspecting");
                        }), bridge.on("selected", function (id) {
                            return _this3.emit("selected", id);
                        }), bridge.on("setInspectEnabled", function (enabled) {
                            _this3._inspectEnabled = enabled, _this3.emit("stopInspecting");
                        }), bridge.on("shutdown", function () {
                            return _this3.emit("shutdown");
                        }), bridge.on("changeTextContent", function (_ref) {
                            var id = _ref.id,
                                text = _ref.text,
                                node = _this3.getNodeForID(id);

                            node && (node.textContent = text);
                        }), bridge.on("putSelectedNode", function (id) {
                            window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$node = _this3.getNodeForID(id);
                        }), bridge.on("putSelectedInstance", function (id) {
                            var node = _this3.elementData.get(id);

                            node ? window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$type = node.type : window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$type = null, node && node.publicInstance ? window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$inst = node.publicInstance : window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$inst = null;
                        }), bridge.on("checkSelection", function () {
                            var newSelected = window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$0;

                            if (newSelected !== _this3._prevSelected) {
                                _this3._prevSelected = newSelected;
                                var sentSelected = window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$node;
                                newSelected !== sentSelected && _this3.selectFromDOMNode(newSelected, !0);
                            }
                        }), bridge.on("scrollToNode", function (id) {
                            return _this3.scrollToNode(id);
                        }), bridge.on("traceupdatesstatechange", function (value) {
                            return _this3.emit("traceupdatesstatechange", value);
                        }), bridge.on("colorizerchange", function (value) {
                            return _this3.emit("colorizerchange", value);
                        }), this.on("root", function (id) {
                            return bridge.send("root", id);
                        }), this.on("mount", function (data) {
                            return bridge.send("mount", data);
                        }), this.on("update", function (data) {
                            return bridge.send("update", data);
                        }), this.on("unmount", function (id) {
                            bridge.send("unmount", id), bridge.forget(id);
                        }), this.on("setSelection", function (data) {
                            return bridge.send("select", data);
                        }), this.on("setInspectEnabled", function (data) {
                            return bridge.send("setInspectEnabled", data);
                        });
                    }
                }, {
                    key: "scrollToNode",
                    value: function value(id) {
                        var node = this.getNodeForID(id);
                        if (!node) return void console.warn("unable to get the node for scrolling");
                        var domElement = node.nodeType === Node.ELEMENT_NODE ? node : node.parentElement;
                        return domElement ? ("function" == typeof domElement.scrollIntoViewIfNeeded ? domElement.scrollIntoViewIfNeeded() : "function" == typeof domElement.scrollIntoView && domElement.scrollIntoView(), void this.highlight(id)) : void console.warn("unable to get the domElement for scrolling");
                    }
                }, {
                    key: "highlight",
                    value: function value(id) {
                        var data = this.elementData.get(id),
                            node = this.getNodeForID(id);
                        data && node && this.emit("highlight", {
                            node: node,
                            name: data.name,
                            props: data.props
                        });
                    }
                }, {
                    key: "highlightMany",
                    value: function value(ids) {
                        var _this4 = this,
                            nodes = [];

                        ids.forEach(function (id) {
                            var node = _this4.getNodeForID(id);

                            node && nodes.push(node);
                        }), nodes.length && this.emit("highlightMany", nodes);
                    }
                }, {
                    key: "getNodeForID",
                    value: function value(id) {
                        var component = this.internalInstancesById.get(id);
                        if (!component) return null;
                        var renderer = this.renderers.get(id);
                        return renderer && this.reactInternals[renderer].getNativeFromReactElement ? this.reactInternals[renderer].getNativeFromReactElement(component) : null;
                    }
                }, {
                    key: "selectFromDOMNode",
                    value: function value(node, quiet) {
                        var offsetFromLeaf = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,
                            id = this.getIDForNode(node);
                        id && this.emit("setSelection", {
                            id: id,
                            quiet: quiet,
                            offsetFromLeaf: offsetFromLeaf
                        });
                    }
                }, {
                    key: "selectFromReactInstance",
                    value: function value(instance, quiet) {
                        var id = this.getId(instance);
                        return id ? void this.emit("setSelection", {
                            id: id,
                            quiet: quiet
                        }) : void console.log("no instance id", instance);
                    }
                }, {
                    key: "getIDForNode",
                    value: function value(node) {
                        if (!this.reactInternals) return null;
                        var component;

                        for (var renderer in this.reactInternals) {
                            try {
                                component = this.reactInternals[renderer].getReactElementFromNative(node);
                            } catch (e) {}

                            if (component) return this.getId(component);
                        }

                        return null;
                    }
                }, {
                    key: "_setProps",
                    value: function value(_ref2) {
                        var id = _ref2.id,
                            path = _ref2.path,
                            value = _ref2.value,
                            data = this.elementData.get(id);
                        data && data.updater && data.updater.setInProps ? data.updater.setInProps(path, value) : console.warn("trying to set props on a component that doesn't support it");
                    }
                }, {
                    key: "_setState",
                    value: function value(_ref3) {
                        var id = _ref3.id,
                            path = _ref3.path,
                            value = _ref3.value,
                            data = this.elementData.get(id);
                        data && data.updater && data.updater.setInState ? data.updater.setInState(path, value) : console.warn("trying to set state on a component that doesn't support it");
                    }
                }, {
                    key: "_setContext",
                    value: function value(_ref4) {
                        var id = _ref4.id,
                            path = _ref4.path,
                            value = _ref4.value,
                            data = this.elementData.get(id);
                        data && data.updater && data.updater.setInContext ? data.updater.setInContext(path, value) : console.warn("trying to set context on a component that doesn't support it");
                    }
                }, {
                    key: "_makeGlobal",
                    value: function value(_ref5) {
                        var id = _ref5.id,
                            path = _ref5.path,
                            data = this.elementData.get(id);

                        if (data) {
                            var value;
                            value = "instance" === path ? data.publicInstance : getIn(data, path), this.global.$tmp = value, console.log("$tmp =", value);
                        }
                    }
                }, {
                    key: "getId",
                    value: function value(internalInstance) {
                        return "object" === ("undefined" == typeof internalInstance ? "undefined" : _typeof(internalInstance)) && internalInstance ? (this.idsByInternalInstances.has(internalInstance) || (this.idsByInternalInstances.set(internalInstance, guid()), this.internalInstancesById.set(this.idsByInternalInstances.get(internalInstance), internalInstance)), this.idsByInternalInstances.get(internalInstance)) : internalInstance;
                    }
                }, {
                    key: "addRoot",
                    value: function value(renderer, internalInstance) {
                        var id = this.getId(internalInstance);
                        this.roots.add(id), this.emit("root", id);
                    }
                }, {
                    key: "onMounted",
                    value: function value(renderer, component, data) {
                        var _this5 = this,
                            id = this.getId(component);

                        this.renderers.set(id, renderer), this.elementData.set(id, data);
                        var send = assign({}, data);
                        send.children && send.children.map && (send.children = send.children.map(function (c) {
                            return _this5.getId(c);
                        })), send.id = id, send.canUpdate = send.updater && !!send.updater.forceUpdate, delete send.type, delete send.updater, this.emit("mount", send);
                    }
                }, {
                    key: "onUpdated",
                    value: function value(component, data) {
                        var _this6 = this,
                            id = this.getId(component);

                        this.elementData.set(id, data);
                        var send = assign({}, data);
                        send.children && send.children.map && (send.children = send.children.map(function (c) {
                            return _this6.getId(c);
                        })), send.id = id, send.canUpdate = send.updater && !!send.updater.forceUpdate, delete send.type, delete send.updater, this.emit("update", send);
                    }
                }, {
                    key: "onUnmounted",
                    value: function value(component) {
                        var id = this.getId(component);
                        this.elementData["delete"](id), this.roots["delete"](id), this.renderers["delete"](id), this.emit("unmount", id), this.idsByInternalInstances["delete"](component);
                    }
                }, {
                    key: "_onScroll",
                    value: function value() {
                        this._scrollUpdate || (this._scrollUpdate = !0, window.requestAnimationFrame(this._updateScroll));
                    }
                }, {
                    key: "_updateScroll",
                    value: function value() {
                        this.emit("refreshMultiOverlay"), this.emit("stopInspecting"), this._scrollUpdate = !1;
                    }
                }, {
                    key: "_onClick",
                    value: function value(event) {
                        if (this._inspectEnabled) {
                            var id = this.getIDForNode(event.target);
                            id && (event.stopPropagation(), event.preventDefault(), this.emit("setSelection", {
                                id: id
                            }), this.emit("setInspectEnabled", !1));
                        }
                    }
                }, {
                    key: "_onMouseOver",
                    value: function value(event) {
                        if (this._inspectEnabled) {
                            var id = this.getIDForNode(event.target);
                            if (!id) return;
                            this.highlight(id);
                        }
                    }
                }, {
                    key: "_onResize",
                    value: function value(event) {
                        this.emit("stopInspecting");
                    }
                }]), Agent;
            }(EventEmitter);

            module.exports = Agent;
        }, function (module, exports) {
            function EventEmitter() {
                this._events = this._events || {}, this._maxListeners = this._maxListeners || void 0;
            }

            function isFunction(arg) {
                return "function" == typeof arg;
            }

            function isNumber(arg) {
                return "number" == typeof arg;
            }

            function isObject(arg) {
                return "object" == typeof arg && null !== arg;
            }

            function isUndefined(arg) {
                return void 0 === arg;
            }

            module.exports = EventEmitter, EventEmitter.EventEmitter = EventEmitter, EventEmitter.prototype._events = void 0, EventEmitter.prototype._maxListeners = void 0, EventEmitter.defaultMaxListeners = 10, EventEmitter.prototype.setMaxListeners = function (n) {
                if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError("n must be a positive number");
                return this._maxListeners = n, this;
            }, EventEmitter.prototype.emit = function (type) {
                var er, handler, len, args, i, listeners;

                if (this._events || (this._events = {}), "error" === type && (!this._events.error || isObject(this._events.error) && !this._events.error.length)) {
                    if (er = arguments[1], er instanceof Error) throw er;
                    var err = new Error('Uncaught, unspecified "error" event. (' + er + ")");
                    throw err.context = er, err;
                }

                if (handler = this._events[type], isUndefined(handler)) return !1;
                if (isFunction(handler)) switch (arguments.length) {
                    case 1:
                        handler.call(this);
                        break;

                    case 2:
                        handler.call(this, arguments[1]);
                        break;

                    case 3:
                        handler.call(this, arguments[1], arguments[2]);
                        break;

                    default:
                        args = Array.prototype.slice.call(arguments, 1), handler.apply(this, args);
                } else if (isObject(handler)) for (args = Array.prototype.slice.call(arguments, 1), listeners = handler.slice(), len = listeners.length, i = 0; i < len; i++) {
                    listeners[i].apply(this, args);
                }
                return !0;
            }, EventEmitter.prototype.addListener = function (type, listener) {
                var m;
                if (!isFunction(listener)) throw TypeError("listener must be a function");
                return this._events || (this._events = {}), this._events.newListener && this.emit("newListener", type, isFunction(listener.listener) ? listener.listener : listener), this._events[type] ? isObject(this._events[type]) ? this._events[type].push(listener) : this._events[type] = [this._events[type], listener] : this._events[type] = listener, isObject(this._events[type]) && !this._events[type].warned && (m = isUndefined(this._maxListeners) ? EventEmitter.defaultMaxListeners : this._maxListeners, m && m > 0 && this._events[type].length > m && (this._events[type].warned = !0, console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.", this._events[type].length), "function" == typeof console.trace && console.trace())), this;
            }, EventEmitter.prototype.on = EventEmitter.prototype.addListener, EventEmitter.prototype.once = function (type, listener) {
                function g() {
                    this.removeListener(type, g), fired || (fired = !0, listener.apply(this, arguments));
                }

                if (!isFunction(listener)) throw TypeError("listener must be a function");
                var fired = !1;
                return g.listener = listener, this.on(type, g), this;
            }, EventEmitter.prototype.removeListener = function (type, listener) {
                var list, position, length, i;
                if (!isFunction(listener)) throw TypeError("listener must be a function");
                if (!this._events || !this._events[type]) return this;
                if (list = this._events[type], length = list.length, position = -1, list === listener || isFunction(list.listener) && list.listener === listener) delete this._events[type], this._events.removeListener && this.emit("removeListener", type, listener);else if (isObject(list)) {
                    for (i = length; i-- > 0;) {
                        if (list[i] === listener || list[i].listener && list[i].listener === listener) {
                            position = i;
                            break;
                        }
                    }

                    if (position < 0) return this;
                    1 === list.length ? (list.length = 0, delete this._events[type]) : list.splice(position, 1), this._events.removeListener && this.emit("removeListener", type, listener);
                }
                return this;
            }, EventEmitter.prototype.removeAllListeners = function (type) {
                var key, listeners;
                if (!this._events) return this;
                if (!this._events.removeListener) return 0 === arguments.length ? this._events = {} : this._events[type] && delete this._events[type], this;

                if (0 === arguments.length) {
                    for (key in this._events) {
                        "removeListener" !== key && this.removeAllListeners(key);
                    }

                    return this.removeAllListeners("removeListener"), this._events = {}, this;
                }

                if (listeners = this._events[type], isFunction(listeners)) this.removeListener(type, listeners);else if (listeners) for (; listeners.length;) {
                    this.removeListener(type, listeners[listeners.length - 1]);
                }
                return delete this._events[type], this;
            }, EventEmitter.prototype.listeners = function (type) {
                var ret;
                return ret = this._events && this._events[type] ? isFunction(this._events[type]) ? [this._events[type]] : this._events[type].slice() : [];
            }, EventEmitter.prototype.listenerCount = function (type) {
                if (this._events) {
                    var evlistener = this._events[type];
                    if (isFunction(evlistener)) return 1;
                    if (evlistener) return evlistener.length;
                }

                return 0;
            }, EventEmitter.listenerCount = function (emitter, type) {
                return emitter.listenerCount(type);
            };
        }, function (module, exports) {
            "use strict";

            function toObject(val) {
                if (null === val || void 0 === val) throw new TypeError("Object.assign cannot be called with null or undefined");
                return Object(val);
            }

            var hasOwnProperty = Object.prototype.hasOwnProperty,
                propIsEnumerable = Object.prototype.propertyIsEnumerable;

            module.exports = Object.assign || function (target, source) {
                for (var from, symbols, to = toObject(target), s = 1; s < arguments.length; s++) {
                    from = Object(arguments[s]);

                    for (var key in from) {
                        hasOwnProperty.call(from, key) && (to[key] = from[key]);
                    }

                    if (Object.getOwnPropertySymbols) {
                        symbols = Object.getOwnPropertySymbols(from);

                        for (var i = 0; i < symbols.length; i++) {
                            propIsEnumerable.call(from, symbols[i]) && (to[symbols[i]] = from[symbols[i]]);
                        }
                    }
                }

                return to;
            };
        }, function (module, exports) {
            "use strict";

            function guid() {
                return "g" + Math.random().toString(16).substr(2);
            }

            module.exports = guid;
        }, function (module, exports) {
            "use strict";

            function _toConsumableArray(arr) {
                if (Array.isArray(arr)) {
                    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                        arr2[i] = arr[i];
                    }

                    return arr2;
                }

                return Array.from(arr);
            }

            function getIn(base, path) {
                return path.reduce(function (obj, attr) {
                    if (obj) {
                        if (obj.hasOwnProperty(attr)) return obj[attr];
                        if ("function" == typeof obj[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]) return [].concat(_toConsumableArray(obj))[attr];
                    }

                    return null;
                }, base);
            }

            module.exports = getIn;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function _toConsumableArray(arr) {
                if (Array.isArray(arr)) {
                    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                        arr2[i] = arr[i];
                    }

                    return arr2;
                }

                return Array.from(arr);
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }

            function getWindowFunction(name, polyfill) {
                return String(window[name]).indexOf("[native code]") === -1 ? polyfill : window[name];
            }

            var _extends = Object.assign || function (target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];

                    for (var key in source) {
                        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
                    }
                }

                return target;
            },
                _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
                };
            }(),
                consts = __webpack_require__(7),
                hydrate = __webpack_require__(26),
                dehydrate = __webpack_require__(27),
                getIn = __webpack_require__(5),
                performanceNow = __webpack_require__(28),
                lastRunTimeMS = 5,
                cancelIdleCallback = getWindowFunction("cancelIdleCallback", clearTimeout),
                requestIdleCallback = getWindowFunction("requestIdleCallback", function (cb, options) {
                var delayMS = 3e3 * lastRunTimeMS;
                return delayMS > 500 && (delayMS = 500), setTimeout(function () {
                    var startTime = performanceNow();
                    cb({
                        didTimeout: !1,
                        timeRemaining: function timeRemaining() {
                            return 1 / 0;
                        }
                    });
                    var endTime = performanceNow();
                    lastRunTimeMS = (endTime - startTime) / 1e3;
                }, delayMS);
            }),
                Bridge = function () {
                function Bridge(wall) {
                    _classCallCheck(this, Bridge), this._cbs = new Map(), this._inspectables = new Map(), this._cid = 0, this._listeners = {}, this._buffer = [], this._flushHandle = null, this._callers = {}, this._paused = !1, this._wall = wall, wall.listen(this._handleMessage.bind(this));
                }

                return _createClass(Bridge, [{
                    key: "inspect",
                    value: function value(id, path, cb) {
                        var _cid = this._cid++;

                        this._cbs.set(_cid, function (data, cleaned, proto, protoclean) {
                            cleaned.length && hydrate(data, cleaned), proto && protoclean.length && hydrate(proto, protoclean), proto && (data[consts.proto] = proto), cb(data);
                        }), this._wall.send({
                            type: "inspect",
                            callback: _cid,
                            path: path,
                            id: id
                        });
                    }
                }, {
                    key: "call",
                    value: function value(name, args, cb) {
                        var _cid = this._cid++;

                        this._cbs.set(_cid, cb), this._wall.send({
                            type: "call",
                            callback: _cid,
                            args: args,
                            name: name
                        });
                    }
                }, {
                    key: "onCall",
                    value: function value(name, handler) {
                        if (this._callers[name]) throw new Error("only one call handler per call name allowed");
                        this._callers[name] = handler;
                    }
                }, {
                    key: "pause",
                    value: function value() {
                        this._wall.send({
                            type: "pause"
                        });
                    }
                }, {
                    key: "resume",
                    value: function value() {
                        this._wall.send({
                            type: "resume"
                        });
                    }
                }, {
                    key: "setInspectable",
                    value: function value(id, data) {
                        var prev = this._inspectables.get(id);

                        return prev ? void this._inspectables.set(id, _extends({}, prev, data)) : void this._inspectables.set(id, data);
                    }
                }, {
                    key: "send",
                    value: function value(evt, data) {
                        this._buffer.push({
                            evt: evt,
                            data: data
                        }), this.scheduleFlush();
                    }
                }, {
                    key: "scheduleFlush",
                    value: function value() {
                        if (!this._flushHandle && this._buffer.length) {
                            var timeout = this._paused ? 5e3 : 500;
                            this._flushHandle = requestIdleCallback(this.flushBufferWhileIdle.bind(this), {
                                timeout: timeout
                            });
                        }
                    }
                }, {
                    key: "cancelFlush",
                    value: function value() {
                        this._flushHandle && (cancelIdleCallback(this._flushHandle), this._flushHandle = null);
                    }
                }, {
                    key: "flushBufferWhileIdle",
                    value: function value(deadline) {
                        this._flushHandle = null;

                        for (var chunkCount = this._paused ? 20 : 10, chunkSize = Math.round(this._buffer.length / chunkCount), minChunkSize = this._paused ? 50 : 100; this._buffer.length && (deadline.timeRemaining() > 0 || deadline.didTimeout);) {
                            var take = Math.min(this._buffer.length, Math.max(minChunkSize, chunkSize)),
                                currentBuffer = this._buffer.splice(0, take);

                            this.flushBufferSlice(currentBuffer);
                        }

                        this._buffer.length && this.scheduleFlush();
                    }
                }, {
                    key: "flushBufferSlice",
                    value: function value(bufferSlice) {
                        var _this = this,
                            events = bufferSlice.map(function (_ref) {
                            var evt = _ref.evt,
                                data = _ref.data,
                                cleaned = [],
                                san = dehydrate(data, cleaned);
                            return cleaned.length && _this.setInspectable(data.id, data), {
                                type: "event",
                                evt: evt,
                                data: san,
                                cleaned: cleaned
                            };
                        });

                        this._wall.send({
                            type: "many-events",
                            events: events
                        });
                    }
                }, {
                    key: "forget",
                    value: function value(id) {
                        this._inspectables["delete"](id);
                    }
                }, {
                    key: "on",
                    value: function value(evt, fn) {
                        this._listeners[evt] ? this._listeners[evt].push(fn) : this._listeners[evt] = [fn];
                    }
                }, {
                    key: "off",
                    value: function value(evt, fn) {
                        if (this._listeners[evt]) {
                            var ix = this._listeners[evt].indexOf(fn);

                            ix !== -1 && this._listeners[evt].splice(ix, 1);
                        }
                    }
                }, {
                    key: "once",
                    value: function value(evt, fn) {
                        var self = this,
                            listener = function listener() {
                            fn.apply(this, arguments), self.off(evt, listener);
                        };

                        this.on(evt, listener);
                    }
                }, {
                    key: "_handleMessage",
                    value: function value(payload) {
                        var _this2 = this;

                        if ("resume" === payload.type) return this._paused = !1, void this.scheduleFlush();
                        if ("pause" === payload.type) return this._paused = !0, void this.cancelFlush();

                        if ("callback" === payload.type) {
                            var callback = this._cbs.get(payload.id);

                            return void (callback && (callback.apply(void 0, _toConsumableArray(payload.args)), this._cbs["delete"](payload.id)));
                        }

                        if ("call" === payload.type) return void this._handleCall(payload.name, payload.args, payload.callback);
                        if ("inspect" === payload.type) return void this._inspectResponse(payload.id, payload.path, payload.callback);

                        if ("event" === payload.type) {
                            payload.cleaned && hydrate(payload.data, payload.cleaned);
                            var fns = this._listeners[payload.evt],
                                data = payload.data;
                            fns && fns.forEach(function (fn) {
                                return fn(data);
                            });
                        }

                        "many-events" === payload.type && payload.events.forEach(function (event) {
                            event.cleaned && hydrate(event.data, event.cleaned);
                            var handlers = _this2._listeners[event.evt];
                            handlers && handlers.forEach(function (fn) {
                                return fn(event.data);
                            });
                        });
                    }
                }, {
                    key: "_handleCall",
                    value: function value(name, args, callback) {
                        if (!this._callers[name]) return void console.warn('unknown call: "' + name + '"');
                        args = Array.isArray(args) ? args : [args];
                        var result;

                        try {
                            result = this._callers[name].apply(null, args);
                        } catch (e) {
                            return void console.error("Failed to call", e);
                        }

                        this._wall.send({
                            type: "callback",
                            id: callback,
                            args: [result]
                        });
                    }
                }, {
                    key: "_inspectResponse",
                    value: function value(id, path, callback) {
                        var inspectable = this._inspectables.get(id),
                            result = {},
                            cleaned = [],
                            proto = null,
                            protoclean = [];

                        if (inspectable) {
                            var val = getIn(inspectable, path),
                                protod = !1,
                                isFn = "function" == typeof val;

                            if (val && "function" == typeof val[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]) {
                                var iterVal = Object.create({}),
                                    count = 0,
                                    _iteratorNormalCompletion = !0,
                                    _didIteratorError = !1,
                                    _iteratorError = void 0;

                                try {
                                    for (var _step, _iterator = val[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {
                                        var entry = _step.value;
                                        if (count > 100) break;
                                        iterVal[count] = entry, count++;
                                    }
                                } catch (err) {
                                    _didIteratorError = !0, _iteratorError = err;
                                } finally {
                                    try {
                                        !_iteratorNormalCompletion && _iterator["return"] && _iterator["return"]();
                                    } finally {
                                        if (_didIteratorError) throw _iteratorError;
                                    }
                                }

                                val = iterVal;
                            }

                            if (Object.getOwnPropertyNames(val).forEach(function (name) {
                                "__proto__" === name && (protod = !0), (!isFn || "arguments" !== name && "callee" !== name && "caller" !== name) && (result[name] = dehydrate(val[name], cleaned, [name]));
                            }), !protod && val.__proto__ && "Object" !== val.constructor.name) {
                                var newProto = {},
                                    pIsFn = "function" == typeof val.__proto__;
                                Object.getOwnPropertyNames(val.__proto__).forEach(function (name) {
                                    (!pIsFn || "arguments" !== name && "callee" !== name && "caller" !== name) && (newProto[name] = dehydrate(val.__proto__[name], protoclean, [name]));
                                }), proto = newProto;
                            }
                        }

                        this._wall.send({
                            type: "callback",
                            id: callback,
                            args: [result, cleaned, proto, protoclean]
                        });
                    }
                }]), Bridge;
            }();

            module.exports = Bridge;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var _Symbol = __webpack_require__(8);

            module.exports = {
                name: _Symbol("name"),
                type: _Symbol("type"),
                inspected: _Symbol("inspected"),
                meta: _Symbol("meta"),
                proto: _Symbol("proto")
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            module.exports = __webpack_require__(9)() ? Symbol : __webpack_require__(10);
        }, function (module, exports) {
            "use strict";

            module.exports = function () {
                var symbol;
                if ("function" != typeof Symbol) return !1;
                symbol = Symbol("test symbol");

                try {
                    String(symbol);
                } catch (e) {
                    return !1;
                }

                return "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") || "object" == typeof (typeof Symbol === "function" ? Symbol.isConcatSpreadable : "@@isConcatSpreadable") && "object" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") && "object" == typeof (typeof Symbol === "function" ? Symbol.toPrimitive : "@@toPrimitive") && "object" == typeof (typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag") && "object" == typeof (typeof Symbol === "function" ? Symbol.unscopables : "@@unscopables");
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var NativeSymbol,
                SymbolPolyfill,
                _HiddenSymbol,
                d = __webpack_require__(11),
                validateSymbol = __webpack_require__(24),
                create = Object.create,
                defineProperties = Object.defineProperties,
                defineProperty = Object.defineProperty,
                objPrototype = Object.prototype,
                globalSymbols = create(null);

            "function" == typeof Symbol && (NativeSymbol = Symbol);

            var generateName = function () {
                var created = create(null);
                return function (desc) {
                    for (var name, ie11BugWorkaround, postfix = 0; created[desc + (postfix || "")];) {
                        ++postfix;
                    }

                    return desc += postfix || "", created[desc] = !0, name = "@@" + desc, defineProperty(objPrototype, name, d.gs(null, function (value) {
                        ie11BugWorkaround || (ie11BugWorkaround = !0, defineProperty(this, name, d(value)), ie11BugWorkaround = !1);
                    })), name;
                };
            }();

            _HiddenSymbol = function HiddenSymbol(description) {
                if (this instanceof _HiddenSymbol) throw new TypeError("TypeError: Symbol is not a constructor");
                return SymbolPolyfill(description);
            }, module.exports = SymbolPolyfill = function Symbol(description) {
                var symbol;
                if (this instanceof Symbol) throw new TypeError("TypeError: Symbol is not a constructor");
                return symbol = create(_HiddenSymbol.prototype), description = void 0 === description ? "" : String(description), defineProperties(symbol, {
                    __description__: d("", description),
                    __name__: d("", generateName(description))
                });
            }, defineProperties(SymbolPolyfill, {
                "for": d(function (key) {
                    return globalSymbols[key] ? globalSymbols[key] : globalSymbols[key] = SymbolPolyfill(String(key));
                }),
                keyFor: d(function (s) {
                    var key;
                    validateSymbol(s);

                    for (key in globalSymbols) {
                        if (globalSymbols[key] === s) return key;
                    }
                }),
                hasInstance: d("", NativeSymbol && NativeSymbol.hasInstance || SymbolPolyfill("hasInstance")),
                isConcatSpreadable: d("", NativeSymbol && NativeSymbol.isConcatSpreadable || SymbolPolyfill("isConcatSpreadable")),
                iterator: d("", NativeSymbol && NativeSymbol.iterator || SymbolPolyfill("iterator")),
                match: d("", NativeSymbol && NativeSymbol.match || SymbolPolyfill("match")),
                replace: d("", NativeSymbol && NativeSymbol.replace || SymbolPolyfill("replace")),
                search: d("", NativeSymbol && NativeSymbol.search || SymbolPolyfill("search")),
                species: d("", NativeSymbol && NativeSymbol.species || SymbolPolyfill("species")),
                split: d("", NativeSymbol && NativeSymbol.split || SymbolPolyfill("split")),
                toPrimitive: d("", NativeSymbol && NativeSymbol.toPrimitive || SymbolPolyfill("toPrimitive")),
                toStringTag: d("", NativeSymbol && NativeSymbol.toStringTag || SymbolPolyfill("toStringTag")),
                unscopables: d("", NativeSymbol && NativeSymbol.unscopables || SymbolPolyfill("unscopables"))
            }), defineProperties(_HiddenSymbol.prototype, {
                constructor: d(SymbolPolyfill),
                toString: d("", function () {
                    return this.__name__;
                })
            }), defineProperties(SymbolPolyfill.prototype, {
                toString: d(function () {
                    return "Symbol (" + validateSymbol(this).__description__ + ")";
                }),
                valueOf: d(function () {
                    return validateSymbol(this);
                })
            }), defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toPrimitive, d("", function () {
                return validateSymbol(this);
            })), defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toStringTag, d("c", "Symbol")), defineProperty(_HiddenSymbol.prototype, SymbolPolyfill.toStringTag, d("c", SymbolPolyfill.prototype[SymbolPolyfill.toStringTag])), defineProperty(_HiddenSymbol.prototype, SymbolPolyfill.toPrimitive, d("c", SymbolPolyfill.prototype[SymbolPolyfill.toPrimitive]));
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var d,
                assign = __webpack_require__(12),
                normalizeOpts = __webpack_require__(19),
                isCallable = __webpack_require__(20),
                contains = __webpack_require__(21);

            d = module.exports = function (dscr, value) {
                var c, e, w, options, desc;
                return arguments.length < 2 || "string" != typeof dscr ? (options = value, value = dscr, dscr = null) : options = arguments[2], null == dscr ? (c = w = !0, e = !1) : (c = contains.call(dscr, "c"), e = contains.call(dscr, "e"), w = contains.call(dscr, "w")), desc = {
                    value: value,
                    configurable: c,
                    enumerable: e,
                    writable: w
                }, options ? assign(normalizeOpts(options), desc) : desc;
            }, d.gs = function (dscr, get, set) {
                var c, e, options, desc;
                return "string" != typeof dscr ? (options = set, set = get, get = dscr, dscr = null) : options = arguments[3], null == get ? get = void 0 : isCallable(get) ? null == set ? set = void 0 : isCallable(set) || (options = set, set = void 0) : (options = get, get = set = void 0), null == dscr ? (c = !0, e = !1) : (c = contains.call(dscr, "c"), e = contains.call(dscr, "e")), desc = {
                    get: get,
                    set: set,
                    configurable: c,
                    enumerable: e
                }, options ? assign(normalizeOpts(options), desc) : desc;
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            module.exports = __webpack_require__(13)() ? Object.assign : __webpack_require__(14);
        }, function (module, exports) {
            "use strict";

            module.exports = function () {
                var obj,
                    assign = Object.assign;
                return "function" == typeof assign && (obj = {
                    foo: "raz"
                }, assign(obj, {
                    bar: "dwa"
                }, {
                    trzy: "trzy"
                }), obj.foo + obj.bar + obj.trzy === "razdwatrzy");
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var keys = __webpack_require__(15),
                value = __webpack_require__(18),
                max = Math.max;

            module.exports = function (dest, src) {
                var error,
                    i,
                    assign,
                    l = max(arguments.length, 2);

                for (dest = Object(value(dest)), assign = function assign(key) {
                    try {
                        dest[key] = src[key];
                    } catch (e) {
                        error || (error = e);
                    }
                }, i = 1; i < l; ++i) {
                    src = arguments[i], keys(src).forEach(assign);
                }

                if (void 0 !== error) throw error;
                return dest;
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            module.exports = __webpack_require__(16)() ? Object.keys : __webpack_require__(17);
        }, function (module, exports) {
            "use strict";

            module.exports = function () {
                try {
                    return Object.keys("primitive"), !0;
                } catch (e) {
                    return !1;
                }
            };
        }, function (module, exports) {
            "use strict";

            var keys = Object.keys;

            module.exports = function (object) {
                return keys(null == object ? object : Object(object));
            };
        }, function (module, exports) {
            "use strict";

            module.exports = function (value) {
                if (null == value) throw new TypeError("Cannot use null or undefined");
                return value;
            };
        }, function (module, exports) {
            "use strict";

            var forEach = Array.prototype.forEach,
                create = Object.create,
                process = function process(src, obj) {
                var key;

                for (key in src) {
                    obj[key] = src[key];
                }
            };

            module.exports = function (options) {
                var result = create(null);
                return forEach.call(arguments, function (options) {
                    null != options && process(Object(options), result);
                }), result;
            };
        }, function (module, exports) {
            "use strict";

            module.exports = function (obj) {
                return "function" == typeof obj;
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            module.exports = __webpack_require__(22)() ? String.prototype.contains : __webpack_require__(23);
        }, function (module, exports) {
            "use strict";

            var str = "razdwatrzy";

            module.exports = function () {
                return "function" == typeof str.contains && str.contains("dwa") === !0 && str.contains("foo") === !1;
            };
        }, function (module, exports) {
            "use strict";

            var indexOf = String.prototype.indexOf;

            module.exports = function (searchString) {
                return indexOf.call(this, searchString, arguments[1]) > -1;
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var isSymbol = __webpack_require__(25);

            module.exports = function (value) {
                if (!isSymbol(value)) throw new TypeError(value + " is not a symbol");
                return value;
            };
        }, function (module, exports) {
            "use strict";

            module.exports = function (x) {
                return x && ("symbol" == typeof x || "Symbol" === x["@@toStringTag"]) || !1;
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function hydrate(data, cleaned) {
                cleaned.forEach(function (path) {
                    var last = path.pop(),
                        obj = path.reduce(function (obj_, attr) {
                        return obj_ ? obj_[attr] : null;
                    }, data);

                    if (obj && obj[last]) {
                        var replace = {};
                        replace[consts.name] = obj[last].name, replace[consts.type] = obj[last].type, replace[consts.meta] = obj[last].meta, replace[consts.inspected] = !1, obj[last] = replace;
                    }
                });
            }

            var consts = __webpack_require__(7);

            module.exports = hydrate;
        }, function (module, exports) {
            "use strict";

            function getPropType(data) {
                if (!data) return null;
                var type = "undefined" == typeof data ? "undefined" : _typeof(data);

                if ("object" === type) {
                    if (data._reactFragment) return "react_fragment";
                    if (Array.isArray(data)) return "array";
                    if (ArrayBuffer.isView(data)) return data instanceof DataView ? "data_view" : "typed_array";
                    if (data instanceof ArrayBuffer) return "array_buffer";
                    if ("function" == typeof data[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]) return "iterator";
                    if ("[object Date]" === Object.prototype.toString.call(data)) return "date";
                }

                return type;
            }

            function createDehydrated(type, data, cleaned, path) {
                var meta = {};
                return "array" !== type && "typed_array" !== type || (meta.length = data.length), "iterator" !== type && "typed_array" !== type || (meta.readOnly = !0), cleaned.push(path), {
                    type: type,
                    meta: meta,
                    name: data.constructor && "Object" !== data.constructor.name ? data.constructor.name : ""
                };
            }

            function dehydrate(data, cleaned) {
                var path = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [],
                    level = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0,
                    type = getPropType(data);

                switch (type) {
                    case "function":
                        return cleaned.push(path), {
                            name: data.name,
                            type: "function"
                        };

                    case "string":
                        return data.length <= 500 ? data : data.slice(0, 500) + "...";

                    case "symbol":
                        return cleaned.push(path), {
                            type: "symbol",
                            name: data.toString()
                        };

                    case "react_fragment":
                        return "A React Fragment";

                    case "array_buffer":
                    case "data_view":
                        return cleaned.push(path), {
                            type: type,
                            name: "data_view" === type ? "DataView" : "ArrayBuffer",
                            meta: {
                                length: data.byteLength,
                                uninspectable: !0
                            }
                        };

                    case "array":
                        return level > 2 ? createDehydrated(type, data, cleaned, path) : data.map(function (item, i) {
                            return dehydrate(item, cleaned, path.concat([i]), level + 1);
                        });

                    case "typed_array":
                    case "iterator":
                        return createDehydrated(type, data, cleaned, path);

                    case "date":
                        return cleaned.push(path), {
                            name: data.toString(),
                            type: "date",
                            meta: {
                                uninspectable: !0
                            }
                        };

                    case "object":
                        if (level > 2 || data.constructor && "function" == typeof data.constructor && "Object" !== data.constructor.name) return createDehydrated(type, data, cleaned, path);
                        var res = {};

                        for (var name in data) {
                            res[name] = dehydrate(data[name], cleaned, path.concat([name]), level + 1);
                        }

                        return res;

                    default:
                        return data;
                }
            }

            var _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
            };

            module.exports = dehydrate;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var performanceNow,
                performance = __webpack_require__(29);

            performanceNow = performance.now ? function () {
                return performance.now();
            } : function () {
                return Date.now();
            }, module.exports = performanceNow;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var performance,
                ExecutionEnvironment = __webpack_require__(30);

            ExecutionEnvironment.canUseDOM && (performance = window.performance || window.msPerformance || window.webkitPerformance), module.exports = performance || {};
        }, function (module, exports) {
            "use strict";

            var canUseDOM = !("undefined" == typeof window || !window.document || !window.document.createElement),
                ExecutionEnvironment = {
                canUseDOM: canUseDOM,
                canUseWorkers: "undefined" != typeof Worker,
                canUseEventListeners: canUseDOM && !(!window.addEventListener && !window.attachEvent),
                canUseViewport: canUseDOM && !!window.screen,
                isInWorker: !canUseDOM
            };
            module.exports = ExecutionEnvironment;
        }, function (module, exports) {
            "use strict";

            function installGlobalHook(window) {
                function detectReactBuildType(renderer) {
                    try {
                        if ("string" == typeof renderer.version) return renderer.bundleType > 0 ? "development" : "production";
                        var toString = Function.prototype.toString;

                        if (renderer.Mount && renderer.Mount._renderNewRootComponent) {
                            var renderRootCode = toString.call(renderer.Mount._renderNewRootComponent);
                            return 0 !== renderRootCode.indexOf("function") ? "production" : renderRootCode.indexOf("storedMeasure") !== -1 ? "development" : renderRootCode.indexOf("should be a pure function") !== -1 ? renderRootCode.indexOf("NODE_ENV") !== -1 ? "development" : renderRootCode.indexOf("development") !== -1 ? "development" : renderRootCode.indexOf("true") !== -1 ? "development" : renderRootCode.indexOf("nextElement") !== -1 || renderRootCode.indexOf("nextComponent") !== -1 ? "unminified" : "development" : renderRootCode.indexOf("nextElement") !== -1 || renderRootCode.indexOf("nextComponent") !== -1 ? "unminified" : renderRootCode.indexOf("._registerComponent") !== -1 ? "outdated" : "production";
                        }
                    } catch (err) {}

                    return "production";
                }

                if (!window.__REACT_DEVTOOLS_GLOBAL_HOOK__) {
                    var hasDetectedBadDCE = !1,
                        hook = {
                        _renderers: {},
                        helpers: {},
                        checkDCE: function checkDCE(fn) {
                            try {
                                var toString = Function.prototype.toString,
                                    code = toString.call(fn);
                                code.indexOf("^_^") > -1 && (hasDetectedBadDCE = !0, setTimeout(function () {
                                    throw new Error("React is running in production mode, but dead code elimination has not been applied. Read how to correctly configure React for production: https://fb.me/react-perf-use-the-production-build");
                                }));
                            } catch (err) {}
                        },
                        inject: function inject(renderer) {
                            var id = Math.random().toString(16).slice(2);
                            hook._renderers[id] = renderer;
                            var reactBuildType = hasDetectedBadDCE ? "deadcode" : detectReactBuildType(renderer);
                            return hook.emit("renderer", {
                                id: id,
                                renderer: renderer,
                                reactBuildType: reactBuildType
                            }), id;
                        },
                        _listeners: {},
                        sub: function sub(evt, fn) {
                            return hook.on(evt, fn), function () {
                                return hook.off(evt, fn);
                            };
                        },
                        on: function on(evt, fn) {
                            hook._listeners[evt] || (hook._listeners[evt] = []), hook._listeners[evt].push(fn);
                        },
                        off: function off(evt, fn) {
                            if (hook._listeners[evt]) {
                                var ix = hook._listeners[evt].indexOf(fn);

                                ix !== -1 && hook._listeners[evt].splice(ix, 1), hook._listeners[evt].length || (hook._listeners[evt] = null);
                            }
                        },
                        emit: function emit(evt, data) {
                            hook._listeners[evt] && hook._listeners[evt].map(function (fn) {
                                return fn(data);
                            });
                        },
                        supportsFiber: !0,
                        _fiberRoots: {},
                        getFiberRoots: function getFiberRoots(rendererID) {
                            var roots = hook._fiberRoots;
                            return roots[rendererID] || (roots[rendererID] = new Set()), roots[rendererID];
                        },
                        onCommitFiberUnmount: function onCommitFiberUnmount(rendererID, fiber) {
                            hook.helpers[rendererID] && hook.helpers[rendererID].handleCommitFiberUnmount(fiber);
                        },
                        onCommitFiberRoot: function onCommitFiberRoot(rendererID, root) {
                            var mountedRoots = hook.getFiberRoots(rendererID),
                                current = root.current,
                                isKnownRoot = mountedRoots.has(root),
                                isUnmounting = null == current.memoizedState || null == current.memoizedState.element;
                            isKnownRoot || isUnmounting ? isKnownRoot && isUnmounting && mountedRoots["delete"](root) : mountedRoots.add(root), hook.helpers[rendererID] && hook.helpers[rendererID].handleCommitFiberRoot(root);
                        }
                    };
                    Object.defineProperty(window, "__REACT_DEVTOOLS_GLOBAL_HOOK__", {
                        value: hook
                    });
                }
            }

            module.exports = installGlobalHook;
        }, function (module, exports) {
            "use strict";

            function installRelayHook(window) {
                function decorate(obj, attr, fn) {
                    var old = obj[attr];

                    obj[attr] = function () {
                        var res = old.apply(this, arguments);
                        return fn.apply(this, arguments), res;
                    };
                }

                function emit(name, data) {
                    _eventQueue.push({
                        name: name,
                        data: data
                    }), _listener && _listener(name, data);
                }

                function setRequestListener(listener) {
                    if (_listener) throw new Error("Relay Devtools: Called only call setRequestListener once.");
                    return _listener = listener, _eventQueue.forEach(function (_ref) {
                        var name = _ref.name,
                            data = _ref.data;
                        listener(name, data);
                    }), function () {
                        _listener = null;
                    };
                }

                function recordRequest(type, start, request, requestNumber) {
                    var id = Math.random().toString(16).substr(2);
                    request.then(function (response) {
                        emit("relay:success", {
                            id: id,
                            end: performanceNow(),
                            response: response.response
                        });
                    }, function (error) {
                        emit("relay:failure", {
                            id: id,
                            end: performanceNow(),
                            error: error
                        });
                    });

                    for (var textChunks = [], text = request.getQueryString(); text.length > 0;) {
                        textChunks.push(text.substr(0, TEXT_CHUNK_LENGTH)), text = text.substr(TEXT_CHUNK_LENGTH);
                    }

                    return {
                        id: id,
                        name: request.getDebugName(),
                        requestNumber: requestNumber,
                        start: start,
                        text: textChunks,
                        type: type,
                        variables: request.getVariables()
                    };
                }

                function instrumentRelayRequests(relayInternals) {
                    var NetworkLayer = relayInternals.NetworkLayer;
                    decorate(NetworkLayer, "sendMutation", function (mutation) {
                        requestNumber++, emit("relay:pending", [recordRequest("mutation", performanceNow(), mutation, requestNumber)]);
                    }), decorate(NetworkLayer, "sendQueries", function (queries) {
                        requestNumber++;
                        var start = performanceNow();
                        emit("relay:pending", queries.map(function (query) {
                            return recordRequest("query", start, query, requestNumber);
                        }));
                    });
                    var instrumented = {};

                    for (var key in relayInternals) {
                        relayInternals.hasOwnProperty(key) && (instrumented[key] = relayInternals[key]);
                    }

                    return instrumented.setRequestListener = setRequestListener, instrumented;
                }

                var performanceNow,
                    performance = window.performance;
                performanceNow = performance && "function" == typeof performance.now ? function () {
                    return performance.now();
                } : function () {
                    return Date.now();
                };
                var TEXT_CHUNK_LENGTH = 500,
                    hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;

                if (hook) {
                    var _eventQueue = [],
                        _listener = null,
                        requestNumber = 0,
                        _relayInternals = null;
                    Object.defineProperty(hook, "_relayInternals", {
                        configurable: !0,
                        set: function set(relayInternals) {
                            _relayInternals = instrumentRelayRequests(relayInternals);
                        },
                        get: function get() {
                            return _relayInternals;
                        }
                    });
                }
            }

            module.exports = installRelayHook;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var setupBackend = __webpack_require__(34);

            module.exports = function (hook, agent) {
                var subs = [hook.sub("renderer-attached", function (_ref) {
                    var id = _ref.id,
                        helpers = (_ref.renderer, _ref.helpers);
                    agent.setReactInternals(id, helpers), helpers.walkTree(agent.onMounted.bind(agent, id), agent.addRoot.bind(agent, id));
                }), hook.sub("root", function (_ref2) {
                    var renderer = _ref2.renderer,
                        internalInstance = _ref2.internalInstance;
                    return agent.addRoot(renderer, internalInstance);
                }), hook.sub("mount", function (_ref3) {
                    var renderer = _ref3.renderer,
                        internalInstance = _ref3.internalInstance,
                        data = _ref3.data;
                    return agent.onMounted(renderer, internalInstance, data);
                }), hook.sub("update", function (_ref4) {
                    var internalInstance = (_ref4.renderer, _ref4.internalInstance),
                        data = _ref4.data;
                    return agent.onUpdated(internalInstance, data);
                }), hook.sub("unmount", function (_ref5) {
                    var internalInstance = (_ref5.renderer, _ref5.internalInstance);
                    return agent.onUnmounted(internalInstance);
                })],
                    success = setupBackend(hook);
                success && (hook.emit("react-devtools", agent), hook.reactDevtoolsAgent = agent, agent.on("shutdown", function () {
                    subs.forEach(function (fn) {
                        return fn();
                    }), hook.reactDevtoolsAgent = null;
                }));
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var attachRenderer = __webpack_require__(35);

            module.exports = function (hook) {
                var oldReact = window.React && window.React.__internals;
                oldReact && 0 === Object.keys(hook._renderers).length && hook.inject(oldReact);

                for (var rid in hook._renderers) {
                    hook.helpers[rid] = attachRenderer(hook, rid, hook._renderers[rid]), hook.emit("renderer-attached", {
                        id: rid,
                        renderer: hook._renderers[rid],
                        helpers: hook.helpers[rid]
                    });
                }

                hook.on("renderer", function (_ref) {
                    var id = _ref.id,
                        renderer = _ref.renderer;
                    hook.helpers[id] = attachRenderer(hook, id, renderer), hook.emit("renderer-attached", {
                        id: id,
                        renderer: renderer,
                        helpers: hook.helpers[id]
                    });
                });

                var shutdown = function shutdown() {
                    for (var id in hook.helpers) {
                        hook.helpers[id].cleanup();
                    }

                    hook.off("shutdown", shutdown);
                };

                return hook.on("shutdown", shutdown), !0;
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function attachRenderer(hook, rid, renderer) {
                var rootNodeIDMap = new Map(),
                    extras = {},
                    isPre013 = !renderer.Reconciler;
                if ("function" == typeof renderer.findFiberByHostInstance) return attachRendererFiber(hook, rid, renderer);
                renderer.Mount.findNodeHandle && renderer.Mount.nativeTagToRootNodeID ? (extras.getNativeFromReactElement = function (component) {
                    return renderer.Mount.findNodeHandle(component);
                }, extras.getReactElementFromNative = function (nativeTag) {
                    var id = renderer.Mount.nativeTagToRootNodeID(nativeTag);
                    return rootNodeIDMap.get(id);
                }) : renderer.ComponentTree ? (extras.getNativeFromReactElement = function (component) {
                    return renderer.ComponentTree.getNodeFromInstance(component);
                }, extras.getReactElementFromNative = function (node) {
                    return renderer.ComponentTree.getClosestInstanceFromNode(node);
                }) : renderer.Mount.getID && renderer.Mount.getNode ? (extras.getNativeFromReactElement = function (component) {
                    try {
                        return renderer.Mount.getNode(component._rootNodeID);
                    } catch (e) {
                        return;
                    }
                }, extras.getReactElementFromNative = function (node) {
                    for (var id = renderer.Mount.getID(node); node && node.parentNode && !id;) {
                        node = node.parentNode, id = renderer.Mount.getID(node);
                    }

                    return rootNodeIDMap.get(id);
                }) : console.warn("Unknown react version (does not have getID), probably an unshimmed React Native");
                var oldMethods, oldRenderComponent, oldRenderRoot;
                return renderer.Mount._renderNewRootComponent ? oldRenderRoot = decorateResult(renderer.Mount, "_renderNewRootComponent", function (internalInstance) {
                    hook.emit("root", {
                        renderer: rid,
                        internalInstance: internalInstance
                    });
                }) : renderer.Mount.renderComponent && (oldRenderComponent = decorateResult(renderer.Mount, "renderComponent", function (internalInstance) {
                    hook.emit("root", {
                        renderer: rid,
                        internalInstance: internalInstance._reactInternalInstance
                    });
                })), renderer.Component ? (console.error("You are using a version of React with limited support in this version of the devtools.\nPlease upgrade to use at least 0.13, or you can downgrade to use the old version of the devtools:\ninstructions here https://github.com/facebook/react-devtools/tree/devtools-next#how-do-i-use-this-for-react--013"), oldMethods = decorateMany(renderer.Component.Mixin, {
                    mountComponent: function mountComponent() {
                        var _this = this;

                        rootNodeIDMap.set(this._rootNodeID, this), setTimeout(function () {
                            hook.emit("mount", {
                                internalInstance: _this,
                                data: getData012(_this),
                                renderer: rid
                            });
                        }, 0);
                    },
                    updateComponent: function updateComponent() {
                        var _this2 = this;

                        setTimeout(function () {
                            hook.emit("update", {
                                internalInstance: _this2,
                                data: getData012(_this2),
                                renderer: rid
                            });
                        }, 0);
                    },
                    unmountComponent: function unmountComponent() {
                        hook.emit("unmount", {
                            internalInstance: this,
                            renderer: rid
                        }), rootNodeIDMap["delete"](this._rootNodeID, this);
                    }
                })) : renderer.Reconciler && (oldMethods = decorateMany(renderer.Reconciler, {
                    mountComponent: function mountComponent(internalInstance, rootID, transaction, context) {
                        var data = getData(internalInstance);
                        rootNodeIDMap.set(internalInstance._rootNodeID, internalInstance), hook.emit("mount", {
                            internalInstance: internalInstance,
                            data: data,
                            renderer: rid
                        });
                    },
                    performUpdateIfNecessary: function performUpdateIfNecessary(internalInstance, nextChild, transaction, context) {
                        hook.emit("update", {
                            internalInstance: internalInstance,
                            data: getData(internalInstance),
                            renderer: rid
                        });
                    },
                    receiveComponent: function receiveComponent(internalInstance, nextChild, transaction, context) {
                        hook.emit("update", {
                            internalInstance: internalInstance,
                            data: getData(internalInstance),
                            renderer: rid
                        });
                    },
                    unmountComponent: function unmountComponent(internalInstance) {
                        hook.emit("unmount", {
                            internalInstance: internalInstance,
                            renderer: rid
                        }), rootNodeIDMap["delete"](internalInstance._rootNodeID, internalInstance);
                    }
                })), extras.walkTree = function (visit, visitRoot) {
                    var onMount = function onMount(component, data) {
                        rootNodeIDMap.set(component._rootNodeID, component), visit(component, data);
                    };

                    walkRoots(renderer.Mount._instancesByReactRootID || renderer.Mount._instancesByContainerID, onMount, visitRoot, isPre013);
                }, extras.cleanup = function () {
                    oldMethods && (renderer.Component ? restoreMany(renderer.Component.Mixin, oldMethods) : restoreMany(renderer.Reconciler, oldMethods)), oldRenderRoot && (renderer.Mount._renderNewRootComponent = oldRenderRoot), oldRenderComponent && (renderer.Mount.renderComponent = oldRenderComponent), oldMethods = null, oldRenderRoot = null, oldRenderComponent = null;
                }, extras;
            }

            function walkRoots(roots, onMount, onRoot, isPre013) {
                for (var name in roots) {
                    walkNode(roots[name], onMount, isPre013), onRoot(roots[name]);
                }
            }

            function walkNode(internalInstance, onMount, isPre013) {
                var data = isPre013 ? getData012(internalInstance) : getData(internalInstance);
                data.children && Array.isArray(data.children) && data.children.forEach(function (child) {
                    return walkNode(child, onMount, isPre013);
                }), onMount(internalInstance, data);
            }

            function decorateResult(obj, attr, fn) {
                var old = obj[attr];
                return obj[attr] = function (instance) {
                    var res = old.apply(this, arguments);
                    return fn(res), res;
                }, old;
            }

            function decorate(obj, attr, fn) {
                var old = obj[attr];
                return obj[attr] = function (instance) {
                    var res = old.apply(this, arguments);
                    return fn.apply(this, arguments), res;
                }, old;
            }

            function decorateMany(source, fns) {
                var olds = {};

                for (var name in fns) {
                    olds[name] = decorate(source, name, fns[name]);
                }

                return olds;
            }

            function restoreMany(source, olds) {
                for (var name in olds) {
                    source[name] = olds[name];
                }
            }

            var getData = __webpack_require__(36),
                getData012 = __webpack_require__(41),
                attachRendererFiber = __webpack_require__(42);

            module.exports = attachRenderer;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function getData(internalInstance) {
                var children = null,
                    props = null,
                    state = null,
                    context = null,
                    updater = null,
                    name = null,
                    type = null,
                    key = null,
                    ref = null,
                    source = null,
                    text = null,
                    publicInstance = null,
                    nodeType = "Native";
                if ("object" !== ("undefined" == typeof internalInstance ? "undefined" : _typeof(internalInstance))) nodeType = "Text", text = internalInstance + "";else if (null === internalInstance._currentElement || internalInstance._currentElement === !1) nodeType = "Empty";else if (internalInstance._renderedComponent) nodeType = "NativeWrapper", children = [internalInstance._renderedComponent], props = internalInstance._instance.props, state = internalInstance._instance.state, context = internalInstance._instance.context, context && 0 === Object.keys(context).length && (context = null);else if (internalInstance._renderedChildren) children = childrenList(internalInstance._renderedChildren);else if (internalInstance._currentElement && internalInstance._currentElement.props) {
                    var unfilteredChildren = internalInstance._currentElement.props.children,
                        filteredChildren = [];
                    traverseAllChildrenImpl(unfilteredChildren, "", function (_traverseContext, child) {
                        var childType = "undefined" == typeof child ? "undefined" : _typeof(child);
                        "string" !== childType && "number" !== childType || filteredChildren.push(child);
                    }), children = filteredChildren.length <= 1 ? filteredChildren.length ? String(filteredChildren[0]) : void 0 : filteredChildren;
                }

                if (!props && internalInstance._currentElement && internalInstance._currentElement.props && (props = internalInstance._currentElement.props), null != internalInstance._currentElement && (type = internalInstance._currentElement.type, internalInstance._currentElement.key && (key = String(internalInstance._currentElement.key)), source = internalInstance._currentElement._source, ref = internalInstance._currentElement.ref, "string" == typeof type ? (name = type, null != internalInstance._nativeNode && (publicInstance = internalInstance._nativeNode), null != internalInstance._hostNode && (publicInstance = internalInstance._hostNode)) : "function" == typeof type ? (nodeType = "Composite", name = getDisplayName(type), internalInstance._renderedComponent && (internalInstance._currentElement.props === internalInstance._renderedComponent._currentElement || internalInstance._currentElement.type.isReactTopLevelWrapper) && (nodeType = "Wrapper"), null === name && (name = "No display name")) : "string" == typeof internalInstance._stringText ? (nodeType = "Text", text = internalInstance._stringText) : name = getDisplayName(type)), internalInstance._instance) {
                    var inst = internalInstance._instance,
                        forceUpdate = inst.forceUpdate || inst.updater && inst.updater.enqueueForceUpdate && function (cb) {
                        inst.updater.enqueueForceUpdate(this, cb, "forceUpdate");
                    };

                    updater = {
                        setState: inst.setState && inst.setState.bind(inst),
                        forceUpdate: forceUpdate && forceUpdate.bind(inst),
                        setInProps: forceUpdate && setInProps.bind(null, internalInstance, forceUpdate),
                        setInState: inst.forceUpdate && setInState.bind(null, inst),
                        setInContext: forceUpdate && setInContext.bind(null, inst, forceUpdate)
                    }, "function" == typeof type && (publicInstance = inst), inst._renderedChildren && (children = childrenList(inst._renderedChildren));
                }

                return "function" == typeof internalInstance.setNativeProps && (updater = {
                    setNativeProps: function setNativeProps(nativeProps) {
                        internalInstance.setNativeProps(nativeProps);
                    }
                }), {
                    nodeType: nodeType,
                    type: type,
                    key: key,
                    ref: ref,
                    source: source,
                    name: name,
                    props: props,
                    state: state,
                    context: context,
                    children: children,
                    text: text,
                    updater: updater,
                    publicInstance: publicInstance
                };
            }

            function setInProps(internalInst, forceUpdate, path, value) {
                var element = internalInst._currentElement;
                internalInst._currentElement = _extends({}, element, {
                    props: copyWithSet(element.props, path, value)
                }), forceUpdate.call(internalInst._instance);
            }

            function setInState(inst, path, value) {
                setIn(inst.state, path, value), inst.forceUpdate();
            }

            function setInContext(inst, forceUpdate, path, value) {
                setIn(inst.context, path, value), forceUpdate.call(inst);
            }

            function setIn(obj, path, value) {
                var last = path.pop(),
                    parent = path.reduce(function (obj_, attr) {
                    return obj_ ? obj_[attr] : null;
                }, obj);
                parent && (parent[last] = value);
            }

            function childrenList(children) {
                var res = [];

                for (var name in children) {
                    res.push(children[name]);
                }

                return res;
            }

            var _extends = Object.assign || function (target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];

                    for (var key in source) {
                        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
                    }
                }

                return target;
            },
                _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
            },
                copyWithSet = __webpack_require__(37),
                getDisplayName = __webpack_require__(38),
                traverseAllChildrenImpl = __webpack_require__(39);

            module.exports = getData;
        }, function (module, exports) {
            "use strict";

            function copyWithSetImpl(obj, path, idx, value) {
                if (idx >= path.length) return value;
                var key = path[idx],
                    updated = Array.isArray(obj) ? obj.slice() : _extends({}, obj);
                return updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value), updated;
            }

            function copyWithSet(obj, path, value) {
                return copyWithSetImpl(obj, path, 0, value);
            }

            var _extends = Object.assign || function (target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];

                    for (var key in source) {
                        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
                    }
                }

                return target;
            };

            module.exports = copyWithSet;
        }, function (module, exports) {
            "use strict";

            function getDisplayName(type) {
                if (cachedDisplayNames.has(type)) return cachedDisplayNames.get(type);
                var displayName = void 0;
                "string" == typeof type.displayName && (displayName = type.displayName), displayName || (displayName = type.name || "Unknown");
                var match = displayName.match(FB_MODULE_RE);

                if (match) {
                    var componentName = match[1],
                        moduleName = match[2];
                    componentName && moduleName && (moduleName === componentName || moduleName.startsWith(componentName + ".")) && (displayName = componentName);
                }

                return cachedDisplayNames.set(type, displayName), displayName;
            }

            var FB_MODULE_RE = /^(.*) \[from (.*)\]$/,
                cachedDisplayNames = new WeakMap();
            module.exports = getDisplayName;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function escape(key) {
                var escapeRegex = /[=:]/g,
                    escaperLookup = {
                    "=": "=0",
                    ":": "=2"
                },
                    escapedString = ("" + key).replace(escapeRegex, function (match) {
                    return escaperLookup[match];
                });
                return "$" + escapedString;
            }

            function getComponentKey(component, index) {
                return "object" === ("undefined" == typeof component ? "undefined" : _typeof(component)) && null !== component && null != component.key ? escape(component.key) : index.toString(36);
            }

            function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
                var type = "undefined" == typeof children ? "undefined" : _typeof(children);
                if ("undefined" !== type && "boolean" !== type || (children = null), null === children || "string" === type || "number" === type || "object" === type && children.$$typeof === REACT_ELEMENT_TYPE) return callback(traverseContext, children, "" === nameSoFar ? SEPARATOR + getComponentKey(children, 0) : nameSoFar), 1;
                var child,
                    nextName,
                    subtreeCount = 0,
                    nextNamePrefix = "" === nameSoFar ? SEPARATOR : nameSoFar + SUBSEPARATOR;
                if (Array.isArray(children)) for (var i = 0; i < children.length; i++) {
                    child = children[i], nextName = nextNamePrefix + getComponentKey(child, i), subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
                } else {
                    var iteratorFn = ITERATOR_SYMBOL && children[ITERATOR_SYMBOL] || children[FAUX_ITERATOR_SYMBOL];
                    if ("function" == typeof iteratorFn) for (var step, iterator = iteratorFn.call(children), ii = 0; !(step = iterator.next()).done;) {
                        child = step.value, nextName = nextNamePrefix + getComponentKey(child, ii++), subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
                    } else if ("object" === type) {
                        var addendum = " If you meant to render a collection of children, use an array instead.",
                            childrenString = "" + children;
                        invariant(!1, "The React Devtools cannot render an object as a child. (found: %s).%s", "[object Object]" === childrenString ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString, addendum);
                    }
                }
                return subtreeCount;
            }

            var _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
            },
                invariant = __webpack_require__(40),
                SEPARATOR = ".",
                SUBSEPARATOR = ":",
                FAUX_ITERATOR_SYMBOL = "@@iterator",
                ITERATOR_SYMBOL = "function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator"),
                REACT_ELEMENT_TYPE = "function" == typeof Symbol && Symbol["for"] && Symbol["for"]("react.element") || 60103;

            module.exports = traverseAllChildrenImpl;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function invariant(condition, format, a, b, c, d, e, f) {
                if (!condition) {
                    var error;
                    if (void 0 === format) error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else {
                        var args = [a, b, c, d, e, f],
                            argIndex = 0;
                        error = new Error(format.replace(/%s/g, function () {
                            return args[argIndex++];
                        })), error.name = "Invariant Violation";
                    }
                    throw error.framesToPop = 1, error;
                }
            }

            module.exports = invariant;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function getData012(internalInstance) {
                var children = null,
                    props = internalInstance.props,
                    state = internalInstance.state,
                    context = internalInstance.context,
                    updater = null,
                    name = null,
                    type = null,
                    key = null,
                    ref = null,
                    text = null,
                    publicInstance = null,
                    nodeType = "Native";
                return internalInstance._renderedComponent ? (nodeType = "Wrapper", children = [internalInstance._renderedComponent], context && 0 === Object.keys(context).length && (context = null)) : internalInstance._renderedChildren ? (name = internalInstance.constructor.displayName, children = childrenList(internalInstance._renderedChildren)) : "string" == typeof props.children && (name = internalInstance.constructor.displayName, children = props.children, nodeType = "Native"), !props && internalInstance._currentElement && internalInstance._currentElement.props && (props = internalInstance._currentElement.props), internalInstance._currentElement && (type = internalInstance._currentElement.type, internalInstance._currentElement.key && (key = String(internalInstance._currentElement.key)), ref = internalInstance._currentElement.ref, "string" == typeof type ? name = type : (nodeType = "Composite", name = type.displayName, name || (name = "No display name"))), name || (name = internalInstance.constructor.displayName || "No display name", nodeType = "Composite"), "string" == typeof props && (nodeType = "Text", text = props, props = null, name = null), internalInstance.forceUpdate && (updater = {
                    setState: internalInstance.setState.bind(internalInstance),
                    forceUpdate: internalInstance.forceUpdate.bind(internalInstance),
                    setInProps: internalInstance.forceUpdate && setInProps.bind(null, internalInstance),
                    setInState: internalInstance.forceUpdate && setInState.bind(null, internalInstance),
                    setInContext: internalInstance.forceUpdate && setInContext.bind(null, internalInstance)
                }, publicInstance = internalInstance), {
                    nodeType: nodeType,
                    type: type,
                    key: key,
                    ref: ref,
                    source: null,
                    name: name,
                    props: props,
                    state: state,
                    context: context,
                    children: children,
                    text: text,
                    updater: updater,
                    publicInstance: publicInstance
                };
            }

            function setInProps(inst, path, value) {
                inst.props = copyWithSet(inst.props, path, value), inst.forceUpdate();
            }

            function setInState(inst, path, value) {
                setIn(inst.state, path, value), inst.forceUpdate();
            }

            function setInContext(inst, path, value) {
                setIn(inst.context, path, value), inst.forceUpdate();
            }

            function setIn(obj, path, value) {
                var last = path.pop(),
                    parent = path.reduce(function (obj_, attr) {
                    return obj_ ? obj_[attr] : null;
                }, obj);
                parent && (parent[last] = value);
            }

            function childrenList(children) {
                var res = [];

                for (var name in children) {
                    res.push(children[name]);
                }

                return res;
            }

            var copyWithSet = __webpack_require__(37);

            module.exports = getData012;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function attachRendererFiber(hook, rid, renderer) {
                function getOpaqueNode(fiber) {
                    if (opaqueNodes.has(fiber)) return fiber;
                    var alternate = fiber.alternate;
                    return null != alternate && opaqueNodes.has(alternate) ? alternate : (opaqueNodes.add(fiber), fiber);
                }

                function hasDataChanged(prevFiber, nextFiber) {
                    if (prevFiber.tag === ClassComponent) {
                        if ((nextFiber.effectTag & PerformedWork) !== PerformedWork) return !1;
                        if (prevFiber.stateNode.context !== nextFiber.stateNode.context) return !0;
                        if (null != nextFiber.updateQueue && nextFiber.updateQueue.hasForceUpdate) return !0;
                    }

                    return prevFiber.memoizedProps !== nextFiber.memoizedProps || prevFiber.memoizedState !== nextFiber.memoizedState || prevFiber.ref !== nextFiber.ref || prevFiber._debugSource !== nextFiber._debugSource;
                }

                function flushPendingEvents() {
                    var events = pendingEvents;
                    pendingEvents = [];

                    for (var i = 0; i < events.length; i++) {
                        var event = events[i];
                        hook.emit(event.type, event);
                    }
                }

                function enqueueMount(fiber) {
                    pendingEvents.push({
                        internalInstance: getOpaqueNode(fiber),
                        data: getDataFiber(fiber, getOpaqueNode),
                        renderer: rid,
                        type: "mount"
                    });
                    var isRoot = fiber.tag === HostRoot;
                    isRoot && pendingEvents.push({
                        internalInstance: getOpaqueNode(fiber),
                        renderer: rid,
                        type: "root"
                    });
                }

                function enqueueUpdateIfNecessary(fiber, hasChildOrderChanged) {
                    (hasChildOrderChanged || hasDataChanged(fiber.alternate, fiber)) && pendingEvents.push({
                        internalInstance: getOpaqueNode(fiber),
                        data: getDataFiber(fiber, getOpaqueNode),
                        renderer: rid,
                        type: "update"
                    });
                }

                function enqueueUnmount(fiber) {
                    var isRoot = fiber.tag === HostRoot,
                        opaqueNode = getOpaqueNode(fiber),
                        event = {
                        internalInstance: opaqueNode,
                        renderer: rid,
                        type: "unmount"
                    };
                    isRoot ? pendingEvents.push(event) : pendingEvents.unshift(event), opaqueNodes["delete"](opaqueNode);
                }

                function mountFiber(fiber) {
                    var node = fiber;

                    outer: for (;;) {
                        if (node.child) node.child["return"] = node, node = node.child;else {
                            if (enqueueMount(node), node == fiber) return;

                            if (!node.sibling) {
                                for (; node["return"];) {
                                    if (node = node["return"], enqueueMount(node), node == fiber) return;

                                    if (node.sibling) {
                                        node.sibling["return"] = node["return"], node = node.sibling;
                                        continue outer;
                                    }
                                }

                                return;
                            }

                            node.sibling["return"] = node["return"], node = node.sibling;
                        }
                    }
                }

                function updateFiber(nextFiber, prevFiber) {
                    var hasChildOrderChanged = !1;

                    if (nextFiber.child !== prevFiber.child) {
                        for (var nextChild = nextFiber.child, prevChildAtSameIndex = prevFiber.child; nextChild;) {
                            if (nextChild.alternate) {
                                var prevChild = nextChild.alternate;
                                updateFiber(nextChild, prevChild), hasChildOrderChanged || prevChild === prevChildAtSameIndex || (hasChildOrderChanged = !0);
                            } else mountFiber(nextChild), hasChildOrderChanged || (hasChildOrderChanged = !0);

                            nextChild = nextChild.sibling, hasChildOrderChanged || null == prevChildAtSameIndex || (prevChildAtSameIndex = prevChildAtSameIndex.sibling);
                        }

                        hasChildOrderChanged || null == prevChildAtSameIndex || (hasChildOrderChanged = !0);
                    }

                    enqueueUpdateIfNecessary(nextFiber, hasChildOrderChanged);
                }

                function walkTree() {
                    hook.getFiberRoots(rid).forEach(function (root) {
                        mountFiber(root.current);
                    }), flushPendingEvents();
                }

                function cleanup() {}

                function handleCommitFiberUnmount(fiber) {
                    enqueueUnmount(fiber);
                }

                function handleCommitFiberRoot(root) {
                    var current = root.current,
                        alternate = current.alternate;

                    if (alternate) {
                        var wasMounted = null != alternate.memoizedState && null != alternate.memoizedState.element,
                            isMounted = null != current.memoizedState && null != current.memoizedState.element;
                        !wasMounted && isMounted ? mountFiber(current) : wasMounted && isMounted ? updateFiber(current, alternate) : wasMounted && !isMounted && enqueueUnmount(current);
                    } else mountFiber(current);

                    flushPendingEvents();
                }

                function getNativeFromReactElement(fiber) {
                    try {
                        var opaqueNode = fiber,
                            hostInstance = renderer.findHostInstanceByFiber(opaqueNode);
                        return hostInstance;
                    } catch (err) {
                        return null;
                    }
                }

                function getReactElementFromNative(hostInstance) {
                    var fiber = renderer.findFiberByHostInstance(hostInstance);

                    if (null != fiber) {
                        var opaqueNode = getOpaqueNode(fiber);
                        return opaqueNode;
                    }

                    return null;
                }

                var opaqueNodes = new Set(),
                    pendingEvents = [];
                return {
                    getNativeFromReactElement: getNativeFromReactElement,
                    getReactElementFromNative: getReactElementFromNative,
                    handleCommitFiberRoot: handleCommitFiberRoot,
                    handleCommitFiberUnmount: handleCommitFiberUnmount,
                    cleanup: cleanup,
                    walkTree: walkTree
                };
            }

            var getDataFiber = __webpack_require__(43),
                _require = __webpack_require__(44),
                ClassComponent = _require.ClassComponent,
                HostRoot = _require.HostRoot,
                PerformedWork = 1;

            module.exports = attachRendererFiber;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function getDataFiber(fiber, getOpaqueNode) {
                var type = fiber.type,
                    key = fiber.key,
                    ref = fiber.ref,
                    source = fiber._debugSource,
                    publicInstance = null,
                    props = null,
                    state = null,
                    children = null,
                    context = null,
                    updater = null,
                    nodeType = null,
                    name = null,
                    text = null;

                switch (fiber.tag) {
                    case FunctionalComponent:
                    case ClassComponent:
                        nodeType = "Composite", name = getDisplayName(fiber.type), publicInstance = fiber.stateNode, props = fiber.memoizedProps, state = fiber.memoizedState, null != publicInstance && (context = publicInstance.context, context && 0 === Object.keys(context).length && (context = null));
                        var inst = publicInstance;
                        inst && (updater = {
                            setState: inst.setState && inst.setState.bind(inst),
                            forceUpdate: inst.forceUpdate && inst.forceUpdate.bind(inst),
                            setInProps: inst.forceUpdate && setInProps.bind(null, fiber),
                            setInState: inst.forceUpdate && setInState.bind(null, inst),
                            setInContext: inst.forceUpdate && setInContext.bind(null, inst)
                        }), children = [];
                        break;

                    case HostRoot:
                        nodeType = "Wrapper", children = [];
                        break;

                    case HostPortal:
                        nodeType = "Portal", name = "ReactPortal", props = {
                            target: fiber.stateNode.containerInfo
                        }, children = [];
                        break;

                    case HostComponent:
                        nodeType = "Native", name = fiber.type, name = name.replace("topsecret-", ""), publicInstance = fiber.stateNode, props = fiber.memoizedProps, children = "string" == typeof props.children || "number" == typeof props.children ? props.children.toString() : [], "function" == typeof fiber.stateNode.setNativeProps && (updater = {
                            setNativeProps: function setNativeProps(nativeProps) {
                                fiber.stateNode.setNativeProps(nativeProps);
                            }
                        });
                        break;

                    case HostText:
                        nodeType = "Text", text = fiber.memoizedProps;
                        break;

                    case Fragment:
                        nodeType = "Wrapper", children = [];
                        break;

                    default:
                        var symbolOrNumber = "object" === ("undefined" == typeof type ? "undefined" : _typeof(type)) && null !== type ? type.$$typeof : type,
                            switchValue = "symbol" === ("undefined" == typeof symbolOrNumber ? "undefined" : _typeof(symbolOrNumber)) ? symbolOrNumber.toString() : symbolOrNumber;

                        switch (switchValue) {
                            case ASYNC_MODE_NUMBER:
                            case ASYNC_MODE_SYMBOL_STRING:
                                nodeType = "Composite", name = "AsyncMode", children = [];
                                break;

                            case CONTEXT_PROVIDER_NUMBER:
                            case CONTEXT_PROVIDER_SYMBOL_STRING:
                                nodeType = "Composite", props = fiber.memoizedProps, name = "Context.Provider", children = [];
                                break;

                            case CONTEXT_CONSUMER_NUMBER:
                            case CONTEXT_CONSUMER_SYMBOL_STRING:
                                nodeType = "Composite", props = fiber.memoizedProps, name = "Context.Consumer", children = [];
                                break;

                            case STRICT_MODE_NUMBER:
                            case STRICT_MODE_SYMBOL_STRING:
                                nodeType = "Composite", name = "StrictMode", children = [];
                                break;

                            default:
                                nodeType = "Native", props = fiber.memoizedProps, name = "TODO_NOT_IMPLEMENTED_YET", children = [];
                        }

                }

                if (Array.isArray(children)) for (var child = fiber.child; child;) {
                    children.push(getOpaqueNode(child)), child = child.sibling;
                }
                return {
                    nodeType: nodeType,
                    type: type,
                    key: key,
                    ref: ref,
                    source: source,
                    name: name,
                    props: props,
                    state: state,
                    context: context,
                    children: children,
                    text: text,
                    updater: updater,
                    publicInstance: publicInstance
                };
            }

            function setInProps(fiber, path, value) {
                var inst = fiber.stateNode;
                fiber.pendingProps = copyWithSet(inst.props, path, value), fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps), fiber.stateNode.forceUpdate();
            }

            function setInState(inst, path, value) {
                setIn(inst.state, path, value), inst.forceUpdate();
            }

            function setInContext(inst, path, value) {
                setIn(inst.context, path, value), inst.forceUpdate();
            }

            function setIn(obj, path, value) {
                var last = path.pop(),
                    parent = path.reduce(function (obj_, attr) {
                    return obj_ ? obj_[attr] : null;
                }, obj);
                parent && (parent[last] = value);
            }

            var _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
            },
                copyWithSet = __webpack_require__(37),
                getDisplayName = __webpack_require__(38),
                _require = __webpack_require__(44),
                FunctionalComponent = _require.FunctionalComponent,
                ClassComponent = _require.ClassComponent,
                HostRoot = _require.HostRoot,
                HostPortal = _require.HostPortal,
                HostComponent = _require.HostComponent,
                HostText = _require.HostText,
                Fragment = _require.Fragment,
                _require2 = __webpack_require__(45),
                ASYNC_MODE_NUMBER = _require2.ASYNC_MODE_NUMBER,
                ASYNC_MODE_SYMBOL_STRING = _require2.ASYNC_MODE_SYMBOL_STRING,
                CONTEXT_CONSUMER_NUMBER = _require2.CONTEXT_CONSUMER_NUMBER,
                CONTEXT_CONSUMER_SYMBOL_STRING = _require2.CONTEXT_CONSUMER_SYMBOL_STRING,
                CONTEXT_PROVIDER_NUMBER = _require2.CONTEXT_PROVIDER_NUMBER,
                CONTEXT_PROVIDER_SYMBOL_STRING = _require2.CONTEXT_PROVIDER_SYMBOL_STRING,
                STRICT_MODE_NUMBER = _require2.STRICT_MODE_NUMBER,
                STRICT_MODE_SYMBOL_STRING = _require2.STRICT_MODE_SYMBOL_STRING;

            module.exports = getDataFiber;
        }, function (module, exports) {
            "use strict";

            module.exports = {
                IndeterminateComponent: 0,
                FunctionalComponent: 1,
                ClassComponent: 2,
                HostRoot: 3,
                HostPortal: 4,
                HostComponent: 5,
                HostText: 6,
                CoroutineComponent: 7,
                CoroutineHandlerPhase: 8,
                YieldComponent: 9,
                Fragment: 10
            };
        }, function (module, exports) {
            "use strict";

            module.exports = {
                ASYNC_MODE_NUMBER: 60111,
                ASYNC_MODE_SYMBOL_STRING: "Symbol(react.async_mode)",
                CONTEXT_CONSUMER_NUMBER: 60110,
                CONTEXT_CONSUMER_SYMBOL_STRING: "Symbol(react.context)",
                CONTEXT_PROVIDER_NUMBER: 60109,
                CONTEXT_PROVIDER_SYMBOL_STRING: "Symbol(react.provider)",
                STRICT_MODE_NUMBER: 60108,
                STRICT_MODE_SYMBOL_STRING: "Symbol(react.strict_mode)"
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function _defineProperty(obj, key, value) {
                return key in obj ? Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : obj[key] = value, obj;
            }

            function measureStyle(agent, bridge, resolveRNStyle, id) {
                var node = agent.elementData.get(id);
                if (!node || !node.props) return void bridge.send("rn-style:measure", {});
                var style = resolveRNStyle(node.props.style);
                styleOverridesByHostComponentId[id] && (style = _extends2({}, style, styleOverridesByHostComponentId[id]));
                var instance = node.publicInstance;
                return instance && instance.measure ? void instance.measure(function (x, y, width, height, left, top) {
                    if ("number" != typeof x) return void bridge.send("rn-style:measure", {
                        style: style
                    });
                    var margin = style && resolveBoxStyle("margin", style) || blank,
                        padding = style && resolveBoxStyle("padding", style) || blank;
                    bridge.send("rn-style:measure", {
                        style: style,
                        measuredLayout: {
                            x: x,
                            y: y,
                            width: width,
                            height: height,
                            left: left,
                            top: top,
                            margin: margin,
                            padding: padding
                        }
                    });
                }) : void bridge.send("rn-style:measure", {
                    style: style
                });
            }

            function shallowClone(obj) {
                var nobj = {};

                for (var n in obj) {
                    nobj[n] = obj[n];
                }

                return nobj;
            }

            function renameStyle(agent, id, oldName, newName, val) {
                var _ref3,
                    data = agent.elementData.get(id),
                    newStyle = newName ? (_ref3 = {}, _defineProperty(_ref3, oldName, void 0), _defineProperty(_ref3, newName, val), _ref3) : _defineProperty({}, oldName, void 0);

                if (data && data.updater && data.updater.setInProps) {
                    var customStyle,
                        style = data && data.props && data.props.style;

                    if (Array.isArray(style)) {
                        var lastLength = style.length - 1;
                        "object" !== _typeof(style[lastLength]) || Array.isArray(style[lastLength]) ? (style = style.concat([newStyle]), data.updater.setInProps(["style"], style)) : (customStyle = shallowClone(style[lastLength]), delete customStyle[oldName], newName ? customStyle[newName] = val : customStyle[oldName] = void 0, data.updater.setInProps(["style", lastLength], customStyle));
                    } else "object" === ("undefined" == typeof style ? "undefined" : _typeof(style)) ? (customStyle = shallowClone(style), delete customStyle[oldName], newName ? customStyle[newName] = val : customStyle[oldName] = void 0, data.updater.setInProps(["style"], customStyle)) : (style = [style, newStyle], data.updater.setInProps(["style"], style));
                } else {
                    if (!(data && data.updater && data.updater.setNativeProps)) return;
                    styleOverridesByHostComponentId[id] ? _extends2(styleOverridesByHostComponentId[id], newStyle) : styleOverridesByHostComponentId[id] = newStyle, data.updater.setNativeProps({
                        style: newStyle
                    });
                }

                agent.emit("hideHighlight");
            }

            function setStyle(agent, id, attr, val) {
                var data = agent.elementData.get(id),
                    newStyle = _defineProperty({}, attr, val);

                if (data && data.updater && data.updater.setInProps) {
                    var style = data.props && data.props.style;

                    if (Array.isArray(style)) {
                        var lastLength = style.length - 1;
                        "object" !== _typeof(style[lastLength]) || Array.isArray(style[lastLength]) ? (style = style.concat([newStyle]), data.updater.setInProps(["style"], style)) : data.updater.setInProps(["style", lastLength, attr], val);
                    } else style = [style, newStyle], data.updater.setInProps(["style"], style);
                } else {
                    if (!(data && data.updater && data.updater.setNativeProps)) return;
                    styleOverridesByHostComponentId[id] ? _extends2(styleOverridesByHostComponentId[id], newStyle) : styleOverridesByHostComponentId[id] = newStyle, data.updater.setNativeProps({
                        style: newStyle
                    });
                }

                agent.emit("hideHighlight");
            }

            var _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
            },
                resolveBoxStyle = __webpack_require__(47),
                styleOverridesByHostComponentId = {};

            module.exports = function (bridge, agent, resolveRNStyle) {
                bridge.onCall("rn-style:get", function (id) {
                    var node = agent.elementData.get(id);
                    return node && node.props ? resolveRNStyle(node.props.style) : null;
                }), bridge.on("rn-style:measure", function (id) {
                    measureStyle(agent, bridge, resolveRNStyle, id);
                }), bridge.on("rn-style:rename", function (_ref) {
                    var id = _ref.id,
                        oldName = _ref.oldName,
                        newName = _ref.newName,
                        val = _ref.val;
                    renameStyle(agent, id, oldName, newName, val), setTimeout(function () {
                        return measureStyle(agent, bridge, resolveRNStyle, id);
                    });
                }), bridge.on("rn-style:set", function (_ref2) {
                    var id = _ref2.id,
                        attr = _ref2.attr,
                        val = _ref2.val;
                    setStyle(agent, id, attr, val), setTimeout(function () {
                        return measureStyle(agent, bridge, resolveRNStyle, id);
                    });
                });
            };

            var blank = {
                top: 0,
                left: 0,
                right: 0,
                bottom: 0
            };
        }, function (module, exports) {
            "use strict";

            function resolveBoxStyle(prefix, style) {
                var res = {},
                    subs = ["top", "left", "bottom", "right"],
                    set = !1;
                return subs.forEach(function (sub) {
                    res[sub] = style[prefix] || 0;
                }), style[prefix] && (set = !0), style[prefix + "Vertical"] && (res.top = res.bottom = style[prefix + "Vertical"], set = !0), style[prefix + "Horizontal"] && (res.left = res.right = style[prefix + "Horizontal"], set = !0), subs.forEach(function (sub) {
                    var val = style[prefix + capFirst(sub)];
                    val && (res[sub] = val, set = !0);
                }), set ? res : null;
            }

            function capFirst(text) {
                return text[0].toUpperCase() + text.slice(1);
            }

            module.exports = resolveBoxStyle;
        }, function (module, exports) {
            "use strict";

            function decorate(obj, attr, fn) {
                var old = obj[attr];
                return obj[attr] = function () {
                    var res = old.apply(this, arguments);
                    return fn.apply(this, arguments), res;
                }, function () {
                    obj[attr] = old;
                };
            }

            var subscriptionEnabled = !1;

            module.exports = function (bridge, agent, hook) {
                function sendStoreData() {
                    subscriptionEnabled && bridge.send("relay:store", {
                        id: "relay:store",
                        nodes: DefaultStoreData.getNodeData()
                    });
                }

                var shouldEnable = !!hook._relayInternals;

                if (bridge.onCall("relay:check", function () {
                    return shouldEnable;
                }), shouldEnable) {
                    var _hook$_relayInternals = hook._relayInternals,
                        DefaultStoreData = _hook$_relayInternals.DefaultStoreData,
                        setRequestListener = _hook$_relayInternals.setRequestListener;
                    bridge.onCall("relay:store:enable", function () {
                        subscriptionEnabled = !0, sendStoreData();
                    }), bridge.onCall("relay:store:disable", function () {
                        subscriptionEnabled = !1;
                    }), sendStoreData(), decorate(DefaultStoreData, "handleUpdatePayload", sendStoreData), decorate(DefaultStoreData, "handleQueryPayload", sendStoreData);
                    var removeListener = setRequestListener(function (event, data) {
                        bridge.send(event, data);
                    });
                    hook.on("shutdown", removeListener);
                }
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var Highlighter = __webpack_require__(50);

            module.exports = function (agent) {
                var hl = new Highlighter(window, function (node) {
                    agent.selectFromDOMNode(node);
                });
                agent.on("highlight", function (data) {
                    return hl.highlight(data.node, data.name);
                }), agent.on("highlightMany", function (nodes) {
                    return hl.highlightMany(nodes);
                }), agent.on("hideHighlight", function () {
                    return hl.hideHighlight();
                }), agent.on("refreshMultiOverlay", function () {
                    return hl.refreshMultiOverlay();
                }), agent.on("startInspecting", function () {
                    return hl.startInspecting();
                }), agent.on("stopInspecting", function () {
                    return hl.stopInspecting();
                }), agent.on("shutdown", function () {
                    hl.remove();
                });
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }

            function captureSubscription(obj, evt, cb) {
                return obj.addEventListener(evt, cb, !0), function () {
                    return obj.removeEventListener(evt, cb, !0);
                };
            }

            function makeMagnifier() {
                var button = window.document.createElement("button");
                return button.innerHTML = "&#128269;", button.style.backgroundColor = "transparent", button.style.border = "none", button.style.outline = "none", button.style.cursor = "pointer", button.style.position = "fixed", button.style.bottom = "10px", button.style.right = "10px", button.style.fontSize = "30px", button.style.zIndex = 1e7, button;
            }

            var _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
                };
            }(),
                Overlay = __webpack_require__(51),
                MultiOverlay = __webpack_require__(53),
                Highlighter = function () {
                function Highlighter(win, onSelect) {
                    _classCallCheck(this, Highlighter), this._win = win, this._onSelect = onSelect, this._overlay = null, this._multiOverlay = null, this._subs = [];
                }

                return _createClass(Highlighter, [{
                    key: "startInspecting",
                    value: function value() {
                        this._inspecting = !0, this._subs = [captureSubscription(this._win, "mouseover", this.onHover.bind(this)), captureSubscription(this._win, "mousedown", this.onMouseDown.bind(this)), captureSubscription(this._win, "click", this.onClick.bind(this))];
                    }
                }, {
                    key: "stopInspecting",
                    value: function value() {
                        this._subs.forEach(function (unsub) {
                            return unsub();
                        }), this.hideHighlight();
                    }
                }, {
                    key: "remove",
                    value: function value() {
                        this.stopInspecting(), this._button && this._button.parentNode && this._button.parentNode.removeChild(this._button);
                    }
                }, {
                    key: "highlight",
                    value: function value(node, name) {
                        this.removeMultiOverlay(), node.nodeType !== Node.COMMENT_NODE && (this._overlay || (this._overlay = new Overlay(this._win)), this._overlay.inspect(node, name));
                    }
                }, {
                    key: "highlightMany",
                    value: function value(nodes) {
                        this.removeOverlay(), this._multiOverlay || (this._multiOverlay = new MultiOverlay(this._win)), this._multiOverlay.highlightMany(nodes);
                    }
                }, {
                    key: "hideHighlight",
                    value: function value() {
                        this._inspecting = !1, this.removeOverlay(), this.removeMultiOverlay();
                    }
                }, {
                    key: "refreshMultiOverlay",
                    value: function value() {
                        this._multiOverlay && this._multiOverlay.refresh();
                    }
                }, {
                    key: "removeOverlay",
                    value: function value() {
                        this._overlay && (this._overlay.remove(), this._overlay = null);
                    }
                }, {
                    key: "removeMultiOverlay",
                    value: function value() {
                        this._multiOverlay && (this._multiOverlay.remove(), this._multiOverlay = null);
                    }
                }, {
                    key: "onMouseDown",
                    value: function value(evt) {
                        this._inspecting && (evt.preventDefault(), evt.stopPropagation(), evt.cancelBubble = !0, this._onSelect(evt.target));
                    }
                }, {
                    key: "onClick",
                    value: function value(evt) {
                        this._inspecting && (this._subs.forEach(function (unsub) {
                            return unsub();
                        }), evt.preventDefault(), evt.stopPropagation(), evt.cancelBubble = !0, this.hideHighlight());
                    }
                }, {
                    key: "onHover",
                    value: function value(evt) {
                        this._inspecting && (evt.preventDefault(), evt.stopPropagation(), evt.cancelBubble = !0, this.highlight(evt.target));
                    }
                }, {
                    key: "injectButton",
                    value: function value() {
                        this._button = makeMagnifier(), this._button.onclick = this.startInspecting.bind(this), this._win.document.body.appendChild(this._button);
                    }
                }]), Highlighter;
            }();

            module.exports = Highlighter;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }

            function findTipPos(dims, win) {
                var top,
                    tipHeight = 20,
                    margin = 5;
                return top = dims.top + dims.height + tipHeight <= win.innerHeight ? dims.top + dims.height < 0 ? margin : dims.top + dims.height + margin : dims.top - tipHeight <= win.innerHeight ? dims.top - tipHeight - margin < margin ? margin : dims.top - tipHeight - margin : win.innerHeight - tipHeight - margin, top += "px", dims.left < 0 ? {
                    top: top,
                    left: margin
                } : dims.left + 200 > win.innerWidth ? {
                    top: top,
                    right: margin
                } : {
                    top: top,
                    left: dims.left + margin + "px"
                };
            }

            function getElementDimensions(domElement) {
                var calculatedStyle = window.getComputedStyle(domElement);
                return {
                    borderLeft: +calculatedStyle.borderLeftWidth.match(/[0-9]*/)[0],
                    borderRight: +calculatedStyle.borderRightWidth.match(/[0-9]*/)[0],
                    borderTop: +calculatedStyle.borderTopWidth.match(/[0-9]*/)[0],
                    borderBottom: +calculatedStyle.borderBottomWidth.match(/[0-9]*/)[0],
                    marginLeft: +calculatedStyle.marginLeft.match(/[0-9]*/)[0],
                    marginRight: +calculatedStyle.marginRight.match(/[0-9]*/)[0],
                    marginTop: +calculatedStyle.marginTop.match(/[0-9]*/)[0],
                    marginBottom: +calculatedStyle.marginBottom.match(/[0-9]*/)[0],
                    paddingLeft: +calculatedStyle.paddingLeft.match(/[0-9]*/)[0],
                    paddingRight: +calculatedStyle.paddingRight.match(/[0-9]*/)[0],
                    paddingTop: +calculatedStyle.paddingTop.match(/[0-9]*/)[0],
                    paddingBottom: +calculatedStyle.paddingBottom.match(/[0-9]*/)[0]
                };
            }

            function getOwnerWindow(node) {
                return node.ownerDocument ? node.ownerDocument.defaultView : null;
            }

            function getOwnerIframe(node) {
                var nodeWindow = getOwnerWindow(node);
                return nodeWindow ? nodeWindow.frameElement : null;
            }

            function getBoundingClientRectWithBorderOffset(node) {
                var dimensions = getElementDimensions(node);
                return mergeRectOffsets([node.getBoundingClientRect(), {
                    top: dimensions.borderTop,
                    left: dimensions.borderLeft,
                    bottom: dimensions.borderBottom,
                    right: dimensions.borderRight,
                    width: 0,
                    height: 0
                }]);
            }

            function mergeRectOffsets(rects) {
                return rects.reduce(function (previousRect, rect) {
                    return null == previousRect ? rect : {
                        top: previousRect.top + rect.top,
                        left: previousRect.left + rect.left,
                        width: previousRect.width,
                        height: previousRect.height,
                        bottom: previousRect.bottom + rect.bottom,
                        right: previousRect.right + rect.right
                    };
                });
            }

            function getNestedBoundingClientRect(node, boundaryWindow) {
                var ownerIframe = getOwnerIframe(node);

                if (ownerIframe && ownerIframe !== boundaryWindow) {
                    for (var rects = [node.getBoundingClientRect()], currentIframe = ownerIframe, onlyOneMore = !1; currentIframe;) {
                        var rect = getBoundingClientRectWithBorderOffset(currentIframe);
                        if (rects.push(rect), currentIframe = getOwnerIframe(currentIframe), onlyOneMore) break;
                        currentIframe && getOwnerWindow(currentIframe) === boundaryWindow && (onlyOneMore = !0);
                    }

                    return mergeRectOffsets(rects);
                }

                return node.getBoundingClientRect();
            }

            function boxWrap(dims, what, node) {
                assign(node.style, {
                    borderTopWidth: dims[what + "Top"] + "px",
                    borderLeftWidth: dims[what + "Left"] + "px",
                    borderRightWidth: dims[what + "Right"] + "px",
                    borderBottomWidth: dims[what + "Bottom"] + "px",
                    borderStyle: "solid"
                });
            }

            var _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
                };
            }(),
                assign = __webpack_require__(3),
                _require = __webpack_require__(52),
                monospace = _require.monospace,
                Overlay = function () {
                function Overlay(window) {
                    _classCallCheck(this, Overlay);

                    var doc = window.document;
                    this.win = window, this.container = doc.createElement("div"), this.node = doc.createElement("div"), this.border = doc.createElement("div"), this.padding = doc.createElement("div"), this.content = doc.createElement("div"), this.border.style.borderColor = overlayStyles.border, this.padding.style.borderColor = overlayStyles.padding, this.content.style.backgroundColor = overlayStyles.background, assign(this.node.style, {
                        borderColor: overlayStyles.margin,
                        pointerEvents: "none",
                        position: "fixed"
                    }), this.tip = doc.createElement("div"), assign(this.tip.style, {
                        backgroundColor: "#333740",
                        borderRadius: "2px",
                        fontFamily: monospace.family,
                        fontWeight: "bold",
                        padding: "3px 5px",
                        position: "fixed",
                        fontSize: monospace.sizes.normal
                    }), this.nameSpan = doc.createElement("span"), this.tip.appendChild(this.nameSpan), assign(this.nameSpan.style, {
                        color: "#ee78e6",
                        borderRight: "1px solid #aaaaaa",
                        paddingRight: "0.5rem",
                        marginRight: "0.5rem"
                    }), this.dimSpan = doc.createElement("span"), this.tip.appendChild(this.dimSpan), assign(this.dimSpan.style, {
                        color: "#d7d7d7"
                    }), this.container.style.zIndex = 1e7, this.node.style.zIndex = 1e7, this.tip.style.zIndex = 1e7, this.container.appendChild(this.node), this.container.appendChild(this.tip), this.node.appendChild(this.border), this.border.appendChild(this.padding), this.padding.appendChild(this.content), doc.body.appendChild(this.container);
                }

                return _createClass(Overlay, [{
                    key: "remove",
                    value: function value() {
                        this.container.parentNode && this.container.parentNode.removeChild(this.container);
                    }
                }, {
                    key: "inspect",
                    value: function value(node, name) {
                        if (node.nodeType === Node.ELEMENT_NODE) {
                            var box = getNestedBoundingClientRect(node, this.win),
                                dims = getElementDimensions(node);
                            boxWrap(dims, "margin", this.node), boxWrap(dims, "border", this.border), boxWrap(dims, "padding", this.padding), assign(this.content.style, {
                                height: box.height - dims.borderTop - dims.borderBottom - dims.paddingTop - dims.paddingBottom + "px",
                                width: box.width - dims.borderLeft - dims.borderRight - dims.paddingLeft - dims.paddingRight + "px"
                            }), assign(this.node.style, {
                                top: box.top - dims.marginTop + "px",
                                left: box.left - dims.marginLeft + "px"
                            }), this.nameSpan.textContent = name || node.nodeName.toLowerCase(), this.dimSpan.textContent = box.width + "px × " + box.height + "px";
                            var tipPos = findTipPos({
                                top: box.top - dims.marginTop,
                                left: box.left - dims.marginLeft,
                                height: box.height + dims.marginTop + dims.marginBottom,
                                width: box.width + dims.marginLeft + dims.marginRight
                            }, this.win);
                            assign(this.tip.style, tipPos);
                        }
                    }
                }]), Overlay;
            }(),
                overlayStyles = {
                background: "rgba(120, 170, 210, 0.7)",
                padding: "rgba(77, 200, 0, 0.3)",
                margin: "rgba(255, 155, 0, 0.3)",
                border: "rgba(255, 200, 50, 0.3)"
            };

            module.exports = Overlay;
        }, function (module, exports) {
            "use strict";

            module.exports = {
                monospace: {
                    family: "Menlo, Consolas, monospace",
                    sizes: {
                        normal: 11,
                        large: 14
                    }
                },
                sansSerif: {
                    family: '"Helvetica Neue", "Lucida Grande", -apple-system, BlinkMacSystemFont, "Segoe UI", Ubuntu, sans-serif',
                    sizes: {
                        small: 10,
                        normal: 12,
                        large: 14
                    }
                }
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }

            var _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
                };
            }(),
                assign = __webpack_require__(3),
                MultiOverlay = function () {
                function MultiOverlay(window) {
                    _classCallCheck(this, MultiOverlay), this.win = window;
                    var doc = window.document;
                    this.container = doc.createElement("div"), doc.body.appendChild(this.container), this._currentNodes = null;
                }

                return _createClass(MultiOverlay, [{
                    key: "highlightMany",
                    value: function value(nodes) {
                        var _this = this;

                        this._currentNodes = nodes, this.container.innerHTML = "", nodes.forEach(function (node) {
                            var div = _this.win.document.createElement("div");

                            if ("function" == typeof node.getBoundingClientRect) {
                                var box = node.getBoundingClientRect();
                                box.bottom < 0 || box.top > window.innerHeight || (assign(div.style, {
                                    top: box.top + "px",
                                    left: box.left + "px",
                                    width: box.width + "px",
                                    height: box.height + "px",
                                    border: "2px dotted rgba(200, 100, 100, .8)",
                                    boxSizing: "border-box",
                                    backgroundColor: "rgba(200, 100, 100, .2)",
                                    position: "fixed",
                                    zIndex: 1e7,
                                    pointerEvents: "none"
                                }), _this.container.appendChild(div));
                            }
                        });
                    }
                }, {
                    key: "refresh",
                    value: function value() {
                        this._currentNodes && this.highlightMany(this._currentNodes);
                    }
                }, {
                    key: "remove",
                    value: function value() {
                        this.container.parentNode && (this.container.parentNode.removeChild(this.container), this._currentNodes = null);
                    }
                }]), MultiOverlay;
            }();

            module.exports = MultiOverlay;
        }]);
    });
},103,[],"node_modules\\react-devtools-core\\build\\backend.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var ReactNativePropRegistry;

  function getStyle(style) {
    if (ReactNativePropRegistry === undefined) {
      ReactNativePropRegistry = _require(_dependencyMap[1], 'ReactNativePropRegistry');
    }

    if (typeof style === 'number') {
      return ReactNativePropRegistry.getByID(style);
    }

    return style;
  }

  function flattenStyle(style) {
    if (!style) {
      return undefined;
    }

    invariant(style !== true, 'style may be false but not true');

    if (!Array.isArray(style)) {
      return getStyle(style);
    }

    var result = {};

    for (var i = 0, styleLength = style.length; i < styleLength; ++i) {
      var computedStyle = flattenStyle(style[i]);

      if (computedStyle) {
        for (var key in computedStyle) {
          result[key] = computedStyle[key];
        }
      }
    }

    return result;
  }

  module.exports = flattenStyle;
},104,[13,105],"flattenStyle");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactNativePropRegistry;
},105,[21],"ReactNativePropRegistry");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var JSInspector = {
    registerAgent: function registerAgent(type) {
      if (global.__registerInspectorAgent) {
        global.__registerInspectorAgent(type);
      }
    },
    getTimestamp: function getTimestamp() {
      return global.__inspectorTimestamp();
    }
  };
  module.exports = JSInspector;
},106,[],"JSInspector");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var InspectorAgent = _require(_dependencyMap[0], 'InspectorAgent');

  var JSInspector = _require(_dependencyMap[1], 'JSInspector');

  var Map = _require(_dependencyMap[2], 'Map');

  var XMLHttpRequest = _require(_dependencyMap[3], 'XMLHttpRequest');

  var Interceptor = function () {
    function Interceptor(agent) {
      _classCallCheck(this, Interceptor);

      this._agent = agent;
      this._requests = new Map();
    }

    _createClass(Interceptor, [{
      key: "getData",
      value: function getData(requestId) {
        return this._requests.get(requestId);
      }
    }, {
      key: "requestSent",
      value: function requestSent(id, url, method, headers) {
        var requestId = String(id);

        this._requests.set(requestId, '');

        var request = {
          url: url,
          method: method,
          headers: headers,
          initialPriority: 'Medium'
        };
        var event = {
          requestId: requestId,
          documentURL: '',
          frameId: '1',
          loaderId: '1',
          request: request,
          timestamp: JSInspector.getTimestamp(),
          initiator: {
            type: 'other'
          },
          type: 'Other'
        };

        this._agent.sendEvent('requestWillBeSent', event);
      }
    }, {
      key: "responseReceived",
      value: function responseReceived(id, url, status, headers) {
        var requestId = String(id);
        var response = {
          url: url,
          status: status,
          statusText: String(status),
          headers: headers,
          requestHeaders: {},
          mimeType: this._getMimeType(headers),
          connectionReused: false,
          connectionId: -1,
          encodedDataLength: 0,
          securityState: 'unknown'
        };
        var event = {
          requestId: requestId,
          frameId: '1',
          loaderId: '1',
          timestamp: JSInspector.getTimestamp(),
          type: 'Other',
          response: response
        };

        this._agent.sendEvent('responseReceived', event);
      }
    }, {
      key: "dataReceived",
      value: function dataReceived(id, data) {
        var requestId = String(id);
        var existingData = this._requests.get(requestId) || '';

        this._requests.set(requestId, existingData.concat(data));

        var event = {
          requestId: requestId,
          timestamp: JSInspector.getTimestamp(),
          dataLength: data.length,
          encodedDataLength: data.length
        };

        this._agent.sendEvent('dataReceived', event);
      }
    }, {
      key: "loadingFinished",
      value: function loadingFinished(id, encodedDataLength) {
        var event = {
          requestId: String(id),
          timestamp: JSInspector.getTimestamp(),
          encodedDataLength: encodedDataLength
        };

        this._agent.sendEvent('loadingFinished', event);
      }
    }, {
      key: "loadingFailed",
      value: function loadingFailed(id, error) {
        var event = {
          requestId: String(id),
          timestamp: JSInspector.getTimestamp(),
          type: 'Other',
          errorText: error
        };

        this._agent.sendEvent('loadingFailed', event);
      }
    }, {
      key: "_getMimeType",
      value: function _getMimeType(headers) {
        var contentType = headers['Content-Type'] || '';
        return contentType.split(';')[0];
      }
    }]);

    return Interceptor;
  }();

  var NetworkAgent = function (_InspectorAgent) {
    _inherits(NetworkAgent, _InspectorAgent);

    function NetworkAgent() {
      _classCallCheck(this, NetworkAgent);

      return _possibleConstructorReturn(this, (NetworkAgent.__proto__ || Object.getPrototypeOf(NetworkAgent)).apply(this, arguments));
    }

    _createClass(NetworkAgent, [{
      key: "enable",
      value: function enable(_ref) {
        var maxResourceBufferSize = _ref.maxResourceBufferSize,
            maxTotalBufferSize = _ref.maxTotalBufferSize;
        this._interceptor = new Interceptor(this);
        XMLHttpRequest.setInterceptor(this._interceptor);
      }
    }, {
      key: "disable",
      value: function disable() {
        XMLHttpRequest.setInterceptor(null);
        this._interceptor = null;
      }
    }, {
      key: "getResponseBody",
      value: function getResponseBody(_ref2) {
        var requestId = _ref2.requestId;
        return {
          body: this.interceptor().getData(requestId),
          base64Encoded: false
        };
      }
    }, {
      key: "interceptor",
      value: function interceptor() {
        if (this._interceptor) {
          return this._interceptor;
        } else {
          throw Error('_interceptor can not be null');
        }
      }
    }]);

    return NetworkAgent;
  }(InspectorAgent);

  NetworkAgent.DOMAIN = 'Network';
  module.exports = NetworkAgent;
},107,[108,106,26,58],"NetworkAgent");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var InspectorAgent = function () {
    function InspectorAgent(eventSender) {
      _classCallCheck(this, InspectorAgent);

      this._eventSender = eventSender;
    }

    _createClass(InspectorAgent, [{
      key: "sendEvent",
      value: function sendEvent(name, params) {
        this._eventSender(name, params);
      }
    }]);

    return InspectorAgent;
  }();

  module.exports = InspectorAgent;
},108,[],"InspectorAgent");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = _require(_dependencyMap[0], 'NativeModules');

  var Platform = _require(_dependencyMap[1], 'Platform');

  var defineLazyObjectProperty = _require(_dependencyMap[2], 'defineLazyObjectProperty');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var UIManager = NativeModules.UIManager;
  invariant(UIManager, 'UIManager is undefined. The native module config is probably incorrect.');
  UIManager.__takeSnapshot = UIManager.takeSnapshot;

  UIManager.takeSnapshot = function () {
    invariant(false, 'UIManager.takeSnapshot should not be called directly. ' + 'Use ReactNative.takeSnapshot instead.');
  };

  if (Platform.OS === 'ios') {
    Object.keys(UIManager).forEach(function (viewName) {
      var viewConfig = UIManager[viewName];

      if (viewConfig.Manager) {
        defineLazyObjectProperty(viewConfig, 'Constants', {
          get: function get() {
            var viewManager = NativeModules[viewConfig.Manager];
            var constants = {};
            viewManager && Object.keys(viewManager).forEach(function (key) {
              var value = viewManager[key];

              if (typeof value !== 'function') {
                constants[key] = value;
              }
            });
            return constants;
          }
        });
        defineLazyObjectProperty(viewConfig, 'Commands', {
          get: function get() {
            var viewManager = NativeModules[viewConfig.Manager];
            var commands = {};
            var index = 0;
            viewManager && Object.keys(viewManager).forEach(function (key) {
              var value = viewManager[key];

              if (typeof value === 'function') {
                commands[key] = index++;
              }
            });
            return commands;
          }
        });
      }
    });
  } else if (Platform.OS === 'android' && UIManager.ViewManagerNames) {
    UIManager.ViewManagerNames.forEach(function (viewManagerName) {
      defineLazyObjectProperty(UIManager, viewManagerName, {
        get: function get() {
          return UIManager.getConstantsForViewManager(viewManagerName);
        }
      });
    });
  }

  module.exports = UIManager;
},109,[15,52,24,13],"UIManager");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var BatchedBridge = _require(_dependencyMap[0], 'BatchedBridge');

  var RCTEventEmitter = {
    register: function register(eventEmitter) {
      BatchedBridge.registerCallableModule('RCTEventEmitter', eventEmitter);
    }
  };
  module.exports = RCTEventEmitter;
},110,[16],"RCTEventEmitter");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _require(_dependencyMap[0], 'Platform');

  var UIManager = _require(_dependencyMap[1], 'UIManager');

  var TextInputState = {
    _currentlyFocusedID: null,
    currentlyFocusedField: function currentlyFocusedField() {
      return this._currentlyFocusedID;
    },
    focusTextInput: function focusTextInput(textFieldID) {
      if (this._currentlyFocusedID !== textFieldID && textFieldID !== null) {
        this._currentlyFocusedID = textFieldID;

        if (Platform.OS === 'ios') {
          UIManager.focus(textFieldID);
        } else if (Platform.OS === 'android') {
          UIManager.dispatchViewManagerCommand(textFieldID, UIManager.AndroidTextInput.Commands.focusTextInput, null);
        }
      }
    },
    blurTextInput: function blurTextInput(textFieldID) {
      if (this._currentlyFocusedID === textFieldID && textFieldID !== null) {
        this._currentlyFocusedID = null;

        if (Platform.OS === 'ios') {
          UIManager.blur(textFieldID);
        } else if (Platform.OS === 'android') {
          UIManager.dispatchViewManagerCommand(textFieldID, UIManager.AndroidTextInput.Commands.blurTextInput, null);
        }
      }
    }
  };
  module.exports = TextInputState;
},111,[52,109],"TextInputState");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var deepDiffer = function deepDiffer(one, two) {
    if (one === two) {
      return false;
    }

    if (typeof one === 'function' && typeof two === 'function') {
      return false;
    }

    if (typeof one !== 'object' || one === null) {
      return one !== two;
    }

    if (typeof two !== 'object' || two === null) {
      return true;
    }

    if (one.constructor !== two.constructor) {
      return true;
    }

    if (Array.isArray(one)) {
      var len = one.length;

      if (two.length !== len) {
        return true;
      }

      for (var ii = 0; ii < len; ii++) {
        if (deepDiffer(one[ii], two[ii])) {
          return true;
        }
      }
    } else {
      for (var key in one) {
        if (deepDiffer(one[key], two[key])) {
          return true;
        }
      }

      for (var twoKey in two) {
        if (one[twoKey] === undefined && two[twoKey] !== undefined) {
          return true;
        }
      }
    }

    return false;
  };

  module.exports = deepDiffer;
},112,[],"deepDiffer");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  if (process.env.NODE_ENV === 'production') {
    module.exports = _require(_dependencyMap[0], './cjs/react.production.min.js');
  } else {
    module.exports = _require(_dependencyMap[1], './cjs/react.development.js');
  }
},113,[114,117],"node_modules\\react\\index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  /** @license React v16.3.0-alpha.1
   * react.production.min.js
   *
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */'use strict';

  var m = _require(_dependencyMap[0], "object-assign"),
      n = _require(_dependencyMap[1], "fbjs/lib/emptyObject"),
      p = _require(_dependencyMap[2], "fbjs/lib/emptyFunction"),
      q = "function" === typeof Symbol && Symbol["for"],
      r = q ? Symbol["for"]("react.element") : 60103,
      t = q ? Symbol["for"]("react.portal") : 60106,
      u = q ? Symbol["for"]("react.fragment") : 60107,
      v = q ? Symbol["for"]("react.strict_mode") : 60108,
      w = q ? Symbol["for"]("react.provider") : 60109,
      x = q ? Symbol["for"]("react.context") : 60110,
      y = q ? Symbol["for"]("react.async_mode") : 60111,
      z = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");

  function A(a) {
    for (var b = arguments.length - 1, e = "Minified React error #" + a + "; visit http://facebook.github.io/react/docs/error-decoder.html?invariant\x3d" + a, c = 0; c < b; c++) {
      e += "\x26args[]\x3d" + encodeURIComponent(arguments[c + 1]);
    }

    b = Error(e + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.");
    b.name = "Invariant Violation";
    b.framesToPop = 1;
    throw b;
  }

  var B = {
    isMounted: function isMounted() {
      return !1;
    },
    enqueueForceUpdate: function enqueueForceUpdate() {},
    enqueueReplaceState: function enqueueReplaceState() {},
    enqueueSetState: function enqueueSetState() {}
  };

  function C(a, b, e) {
    this.props = a;
    this.context = b;
    this.refs = n;
    this.updater = e || B;
  }

  C.prototype.isReactComponent = {};

  C.prototype.setState = function (a, b) {
    "object" !== typeof a && "function" !== typeof a && null != a ? A("85") : void 0;
    this.updater.enqueueSetState(this, a, b, "setState");
  };

  C.prototype.forceUpdate = function (a) {
    this.updater.enqueueForceUpdate(this, a, "forceUpdate");
  };

  function D() {}

  D.prototype = C.prototype;

  function E(a, b, e) {
    this.props = a;
    this.context = b;
    this.refs = n;
    this.updater = e || B;
  }

  var F = E.prototype = new D();
  F.constructor = E;
  m(F, C.prototype);
  F.isPureReactComponent = !0;
  var G = {
    current: null
  },
      H = Object.prototype.hasOwnProperty,
      I = {
    key: !0,
    ref: !0,
    __self: !0,
    __source: !0
  };

  function J(a, b, e) {
    var c = void 0,
        d = {},
        g = null,
        h = null;
    if (null != b) for (c in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (g = "" + b.key), b) {
      H.call(b, c) && !I.hasOwnProperty(c) && (d[c] = b[c]);
    }
    var f = arguments.length - 2;
    if (1 === f) d.children = e;else if (1 < f) {
      for (var k = Array(f), l = 0; l < f; l++) {
        k[l] = arguments[l + 2];
      }

      d.children = k;
    }
    if (a && a.defaultProps) for (c in f = a.defaultProps, f) {
      void 0 === d[c] && (d[c] = f[c]);
    }
    return {
      $$typeof: r,
      type: a,
      key: g,
      ref: h,
      props: d,
      _owner: G.current
    };
  }

  function K(a) {
    return "object" === typeof a && null !== a && a.$$typeof === r;
  }

  function escape(a) {
    var b = {
      "\x3d": "\x3d0",
      ":": "\x3d2"
    };
    return "$" + ("" + a).replace(/[=:]/g, function (a) {
      return b[a];
    });
  }

  var L = /\/+/g,
      M = [];

  function N(a, b, e, c) {
    if (M.length) {
      var d = M.pop();
      d.result = a;
      d.keyPrefix = b;
      d.func = e;
      d.context = c;
      d.count = 0;
      return d;
    }

    return {
      result: a,
      keyPrefix: b,
      func: e,
      context: c,
      count: 0
    };
  }

  function O(a) {
    a.result = null;
    a.keyPrefix = null;
    a.func = null;
    a.context = null;
    a.count = 0;
    10 > M.length && M.push(a);
  }

  function P(a, b, e, c) {
    var d = typeof a;
    if ("undefined" === d || "boolean" === d) a = null;
    var g = !1;
    if (null === a) g = !0;else switch (d) {
      case "string":
      case "number":
        g = !0;
        break;

      case "object":
        switch (a.$$typeof) {
          case r:
          case t:
            g = !0;
        }

    }
    if (g) return e(c, a, "" === b ? "." + Q(a, 0) : b), 1;
    g = 0;
    b = "" === b ? "." : b + ":";
    if (Array.isArray(a)) for (var h = 0; h < a.length; h++) {
      d = a[h];
      var f = b + Q(d, h);
      g += P(d, f, e, c);
    } else if (null === a || "undefined" === typeof a ? f = null : (f = z && a[z] || a["@@iterator"], f = "function" === typeof f ? f : null), "function" === typeof f) for (a = f.call(a), h = 0; !(d = a.next()).done;) {
      d = d.value, f = b + Q(d, h++), g += P(d, f, e, c);
    } else "object" === d && (e = "" + a, A("31", "[object Object]" === e ? "object with keys {" + Object.keys(a).join(", ") + "}" : e, ""));
    return g;
  }

  function Q(a, b) {
    return "object" === typeof a && null !== a && null != a.key ? escape(a.key) : b.toString(36);
  }

  function R(a, b) {
    a.func.call(a.context, b, a.count++);
  }

  function S(a, b, e) {
    var c = a.result,
        d = a.keyPrefix;
    a = a.func.call(a.context, b, a.count++);
    Array.isArray(a) ? T(a, c, e, p.thatReturnsArgument) : null != a && (K(a) && (b = d + (!a.key || b && b.key === a.key ? "" : ("" + a.key).replace(L, "$\x26/") + "/") + e, a = {
      $$typeof: r,
      type: a.type,
      key: b,
      ref: a.ref,
      props: a.props,
      _owner: a._owner
    }), c.push(a));
  }

  function T(a, b, e, c, d) {
    var g = "";
    null != e && (g = ("" + e).replace(L, "$\x26/") + "/");
    b = N(b, g, c, d);
    null == a || P(a, "", S, b);
    O(b);
  }

  var U = {
    Children: {
      map: function map(a, b, e) {
        if (null == a) return a;
        var c = [];
        T(a, c, null, b, e);
        return c;
      },
      forEach: function forEach(a, b, e) {
        if (null == a) return a;
        b = N(null, null, b, e);
        null == a || P(a, "", R, b);
        O(b);
      },
      count: function count(a) {
        return null == a ? 0 : P(a, "", p.thatReturnsNull, null);
      },
      toArray: function toArray(a) {
        var b = [];
        T(a, b, null, p.thatReturnsArgument);
        return b;
      },
      only: function only(a) {
        K(a) ? void 0 : A("143");
        return a;
      }
    },
    createRef: function createRef() {
      return {
        value: null
      };
    },
    Component: C,
    PureComponent: E,
    createContext: function createContext(a, b) {
      void 0 === b && (b = null);
      a = {
        $$typeof: x,
        calculateChangedBits: b,
        defaultValue: a,
        currentValue: a,
        changedBits: 0,
        Provider: null,
        Consumer: null
      };
      a.Provider = {
        $$typeof: w,
        context: a
      };
      return a.Consumer = a;
    },
    Fragment: u,
    StrictMode: v,
    unstable_AsyncMode: y,
    createElement: J,
    cloneElement: function cloneElement(a, b, e) {
      var c = void 0,
          d = m({}, a.props),
          g = a.key,
          h = a.ref,
          f = a._owner;

      if (null != b) {
        void 0 !== b.ref && (h = b.ref, f = G.current);
        void 0 !== b.key && (g = "" + b.key);
        var k = void 0;
        a.type && a.type.defaultProps && (k = a.type.defaultProps);

        for (c in b) {
          H.call(b, c) && !I.hasOwnProperty(c) && (d[c] = void 0 === b[c] && void 0 !== k ? k[c] : b[c]);
        }
      }

      c = arguments.length - 2;
      if (1 === c) d.children = e;else if (1 < c) {
        k = Array(c);

        for (var l = 0; l < c; l++) {
          k[l] = arguments[l + 2];
        }

        d.children = k;
      }
      return {
        $$typeof: r,
        type: a.type,
        key: g,
        ref: h,
        props: d,
        _owner: f
      };
    },
    createFactory: function createFactory(a) {
      var b = J.bind(null, a);
      b.type = a;
      return b;
    },
    isValidElement: K,
    version: "16.3.0-alpha.1",
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
      ReactCurrentOwner: G,
      assign: m
    }
  },
      V = Object.freeze({
    default: U
  }),
      W = V && U || V;
  module.exports = W["default"] ? W["default"] : W;
},114,[115,116,57],"node_modules\\react\\cjs\\react.production.min.js");
__d(function (global, _require, module, exports, _dependencyMap) {
	/*
 object-assign
 (c) Sindre Sorhus
 @license MIT
 */'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			var test1 = new String('abc');
			test1[5] = 'de';

			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			var test2 = {};

			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}

			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});

			if (order2.join('') !== '0123456789') {
				return false;
			}

			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});

			if (Object.keys(_extends({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);

				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};
},115,[],"node_modules\\object-assign\\index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var emptyObject = {};

  if (process.env.NODE_ENV !== 'production') {
    Object.freeze(emptyObject);
  }

  module.exports = emptyObject;
},116,[],"node_modules\\fbjs\\lib\\emptyObject.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  /** @license React v16.3.0-alpha.1
   * react.development.js
   *
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */'use strict';

  if (process.env.NODE_ENV !== "production") {
    (function () {
      'use strict';

      var _assign = _require(_dependencyMap[0], 'object-assign');

      var emptyObject = _require(_dependencyMap[1], 'fbjs/lib/emptyObject');

      var invariant = _require(_dependencyMap[2], 'fbjs/lib/invariant');

      var warning = _require(_dependencyMap[3], 'fbjs/lib/warning');

      var emptyFunction = _require(_dependencyMap[4], 'fbjs/lib/emptyFunction');

      var checkPropTypes = _require(_dependencyMap[5], 'prop-types/checkPropTypes');

      var ReactVersion = '16.3.0-alpha.1';
      var hasSymbol = typeof Symbol === 'function' && Symbol['for'];
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol['for']('react.element') : 0xeac7;
      var REACT_CALL_TYPE = hasSymbol ? Symbol['for']('react.call') : 0xeac8;
      var REACT_RETURN_TYPE = hasSymbol ? Symbol['for']('react.return') : 0xeac9;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol['for']('react.portal') : 0xeaca;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol['for']('react.fragment') : 0xeacb;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol['for']('react.strict_mode') : 0xeacc;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol['for']('react.provider') : 0xeacd;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol['for']('react.context') : 0xeace;
      var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol['for']('react.async_mode') : 0xeacf;
      var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");
      var FAUX_ITERATOR_SYMBOL = '@@iterator';

      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable === 'undefined') {
          return null;
        }

        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

        if (typeof maybeIterator === 'function') {
          return maybeIterator;
        }

        return null;
      }

      var lowPriorityWarning = function lowPriorityWarning() {};

      {
        var printWarning = function printWarning(format) {
          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          var argIndex = 0;
          var message = 'Warning: ' + format.replace(/%s/g, function () {
            return args[argIndex++];
          });

          if (typeof console !== 'undefined') {
            console.warn(message);
          }

          try {
            throw new Error(message);
          } catch (x) {}
        };

        lowPriorityWarning = function lowPriorityWarning(condition, format) {
          if (format === undefined) {
            throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
          }

          if (!condition) {
            for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
              args[_key2 - 2] = arguments[_key2];
            }

            printWarning.apply(undefined, [format].concat(args));
          }
        };
      }
      var lowPriorityWarning$1 = lowPriorityWarning;
      var didWarnStateUpdateForUnmountedComponent = {};

      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor;
          var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
          var warningKey = componentName + '.' + callerName;

          if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
            return;
          }

          warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op.\n\nPlease check the code for the %s component.', callerName, callerName, componentName);
          didWarnStateUpdateForUnmountedComponent[warningKey] = true;
        }
      }

      var ReactNoopUpdateQueue = {
        isMounted: function isMounted(publicInstance) {
          return false;
        },
        enqueueForceUpdate: function enqueueForceUpdate(publicInstance, callback, callerName) {
          warnNoop(publicInstance, 'forceUpdate');
        },
        enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState, callback, callerName) {
          warnNoop(publicInstance, 'replaceState');
        },
        enqueueSetState: function enqueueSetState(publicInstance, partialState, callback, callerName) {
          warnNoop(publicInstance, 'setState');
        }
      };

      function Component(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }

      Component.prototype.isReactComponent = {};

      Component.prototype.setState = function (partialState, callback) {
        !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
        this.updater.enqueueSetState(this, partialState, callback, 'setState');
      };

      Component.prototype.forceUpdate = function (callback) {
        this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
      };

      {
        var deprecatedAPIs = {
          isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
          replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
        };

        var defineDeprecationWarning = function defineDeprecationWarning(methodName, info) {
          Object.defineProperty(Component.prototype, methodName, {
            get: function get() {
              lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
              return undefined;
            }
          });
        };

        for (var fnName in deprecatedAPIs) {
          if (deprecatedAPIs.hasOwnProperty(fnName)) {
            defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
          }
        }
      }

      function ComponentDummy() {}

      ComponentDummy.prototype = Component.prototype;

      function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }

      var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
      pureComponentPrototype.constructor = PureComponent;

      _assign(pureComponentPrototype, Component.prototype);

      pureComponentPrototype.isPureReactComponent = true;

      function createRef() {
        var refObject = {
          value: null
        };
        {
          Object.seal(refObject);
        }
        return refObject;
      }

      var ReactCurrentOwner = {
        current: null
      };
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown = void 0;
      var specialPropRefWarningShown = void 0;

      function hasValidRef(config) {
        {
          if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.ref !== undefined;
      }

      function hasValidKey(config) {
        {
          if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.key !== undefined;
      }

      function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function warnAboutAccessingKey() {
          if (!specialPropKeyWarningShown) {
            specialPropKeyWarningShown = true;
            warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
          }
        };

        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }

      function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function warnAboutAccessingRef() {
          if (!specialPropRefWarningShown) {
            specialPropRefWarningShown = true;
            warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
          }
        };

        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
          get: warnAboutAccessingRef,
          configurable: true
        });
      }

      var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type: type,
          key: key,
          ref: ref,
          props: props,
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
          });
          Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });

          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      };

      function createElement(type, config, children) {
        var propName = void 0;
        var props = {};
        var key = null;
        var ref = null;
        var self = null;
        var source = null;

        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
          }

          if (hasValidKey(config)) {
            key = '' + config.key;
          }

          self = config.__self === undefined ? null : config.__self;
          source = config.__source === undefined ? null : config.__source;

          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
        }

        var childrenLength = arguments.length - 2;

        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);

          for (var i = 0; i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }

          {
            if (Object.freeze) {
              Object.freeze(childArray);
            }
          }
          props.children = childArray;
        }

        if (type && type.defaultProps) {
          var defaultProps = type.defaultProps;

          for (propName in defaultProps) {
            if (props[propName] === undefined) {
              props[propName] = defaultProps[propName];
            }
          }
        }

        {
          if (key || ref) {
            if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
              var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }

              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
      }

      function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
      }

      function cloneElement(element, config, children) {
        var propName = void 0;

        var props = _assign({}, element.props);

        var key = element.key;
        var ref = element.ref;
        var self = element._self;
        var source = element._source;
        var owner = element._owner;

        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            owner = ReactCurrentOwner.current;
          }

          if (hasValidKey(config)) {
            key = '' + config.key;
          }

          var defaultProps = void 0;

          if (element.type && element.type.defaultProps) {
            defaultProps = element.type.defaultProps;
          }

          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              if (config[propName] === undefined && defaultProps !== undefined) {
                props[propName] = defaultProps[propName];
              } else {
                props[propName] = config[propName];
              }
            }
          }
        }

        var childrenLength = arguments.length - 2;

        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);

          for (var i = 0; i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }

          props.children = childArray;
        }

        return ReactElement(element.type, key, ref, self, source, owner, props);
      }

      function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }

      var ReactDebugCurrentFrame = {};
      {
        ReactDebugCurrentFrame.getCurrentStack = null;

        ReactDebugCurrentFrame.getStackAddendum = function () {
          var impl = ReactDebugCurrentFrame.getCurrentStack;

          if (impl) {
            return impl();
          }

          return null;
        };
      }
      var SEPARATOR = '.';
      var SUBSEPARATOR = ':';

      function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
          '=': '=0',
          ':': '=2'
        };
        var escapedString = ('' + key).replace(escapeRegex, function (match) {
          return escaperLookup[match];
        });
        return '$' + escapedString;
      }

      var didWarnAboutMaps = false;
      var userProvidedKeyEscapeRegex = /\/+/g;

      function escapeUserProvidedKey(text) {
        return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
      }

      var POOL_SIZE = 10;
      var traverseContextPool = [];

      function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
        if (traverseContextPool.length) {
          var traverseContext = traverseContextPool.pop();
          traverseContext.result = mapResult;
          traverseContext.keyPrefix = keyPrefix;
          traverseContext.func = mapFunction;
          traverseContext.context = mapContext;
          traverseContext.count = 0;
          return traverseContext;
        } else {
          return {
            result: mapResult,
            keyPrefix: keyPrefix,
            func: mapFunction,
            context: mapContext,
            count: 0
          };
        }
      }

      function releaseTraverseContext(traverseContext) {
        traverseContext.result = null;
        traverseContext.keyPrefix = null;
        traverseContext.func = null;
        traverseContext.context = null;
        traverseContext.count = 0;

        if (traverseContextPool.length < POOL_SIZE) {
          traverseContextPool.push(traverseContext);
        }
      }

      function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
        var type = typeof children;

        if (type === 'undefined' || type === 'boolean') {
          children = null;
        }

        var invokeCallback = false;

        if (children === null) {
          invokeCallback = true;
        } else {
          switch (type) {
            case 'string':
            case 'number':
              invokeCallback = true;
              break;

            case 'object':
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  invokeCallback = true;
              }

          }
        }

        if (invokeCallback) {
          callback(traverseContext, children, nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
          return 1;
        }

        var child = void 0;
        var nextName = void 0;
        var subtreeCount = 0;
        var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

        if (Array.isArray(children)) {
          for (var i = 0; i < children.length; i++) {
            child = children[i];
            nextName = nextNamePrefix + getComponentKey(child, i);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        } else {
          var iteratorFn = getIteratorFn(children);

          if (typeof iteratorFn === 'function') {
            {
              if (iteratorFn === children.entries) {
                warning(didWarnAboutMaps, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', ReactDebugCurrentFrame.getStackAddendum());
                didWarnAboutMaps = true;
              }
            }
            var iterator = iteratorFn.call(children);
            var step = void 0;
            var ii = 0;

            while (!(step = iterator.next()).done) {
              child = step.value;
              nextName = nextNamePrefix + getComponentKey(child, ii++);
              subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
            }
          } else if (type === 'object') {
            var addendum = '';
            {
              addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
            }
            var childrenString = '' + children;
            invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
          }
        }

        return subtreeCount;
      }

      function traverseAllChildren(children, callback, traverseContext) {
        if (children == null) {
          return 0;
        }

        return traverseAllChildrenImpl(children, '', callback, traverseContext);
      }

      function getComponentKey(component, index) {
        if (typeof component === 'object' && component !== null && component.key != null) {
          return escape(component.key);
        }

        return index.toString(36);
      }

      function forEachSingleChild(bookKeeping, child, name) {
        var func = bookKeeping.func,
            context = bookKeeping.context;
        func.call(context, child, bookKeeping.count++);
      }

      function forEachChildren(children, forEachFunc, forEachContext) {
        if (children == null) {
          return children;
        }

        var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
        traverseAllChildren(children, forEachSingleChild, traverseContext);
        releaseTraverseContext(traverseContext);
      }

      function mapSingleChildIntoContext(bookKeeping, child, childKey) {
        var result = bookKeeping.result,
            keyPrefix = bookKeeping.keyPrefix,
            func = bookKeeping.func,
            context = bookKeeping.context;
        var mappedChild = func.call(context, child, bookKeeping.count++);

        if (Array.isArray(mappedChild)) {
          mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
        } else if (mappedChild != null) {
          if (isValidElement(mappedChild)) {
            mappedChild = cloneAndReplaceKey(mappedChild, keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
          }

          result.push(mappedChild);
        }
      }

      function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
        var escapedPrefix = '';

        if (prefix != null) {
          escapedPrefix = escapeUserProvidedKey(prefix) + '/';
        }

        var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
        traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
        releaseTraverseContext(traverseContext);
      }

      function mapChildren(children, func, context) {
        if (children == null) {
          return children;
        }

        var result = [];
        mapIntoWithKeyPrefixInternal(children, result, null, func, context);
        return result;
      }

      function countChildren(children, context) {
        return traverseAllChildren(children, emptyFunction.thatReturnsNull, null);
      }

      function toArray(children) {
        var result = [];
        mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
        return result;
      }

      function onlyChild(children) {
        !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;
        return children;
      }

      function createContext(defaultValue, calculateChangedBits) {
        if (calculateChangedBits === undefined) {
          calculateChangedBits = null;
        } else {
          {
            warning(calculateChangedBits === null || typeof calculateChangedBits === 'function', 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);
          }
        }

        var context = {
          $$typeof: REACT_CONTEXT_TYPE,
          calculateChangedBits: calculateChangedBits,
          defaultValue: defaultValue,
          currentValue: defaultValue,
          changedBits: 0,
          Provider: null,
          Consumer: null
        };
        context.Provider = {
          $$typeof: REACT_PROVIDER_TYPE,
          context: context
        };
        context.Consumer = context;
        {
          context._currentRenderer = null;
        }
        return context;
      }

      var describeComponentFrame = function describeComponentFrame(name, source, ownerName) {
        return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
      };

      function getComponentName(fiber) {
        var type = fiber.type;

        if (typeof type === 'function') {
          return type.displayName || type.name;
        }

        if (typeof type === 'string') {
          return type;
        }

        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return 'ReactFragment';

          case REACT_PORTAL_TYPE:
            return 'ReactPortal';

          case REACT_CALL_TYPE:
            return 'ReactCall';

          case REACT_RETURN_TYPE:
            return 'ReactReturn';
        }

        return null;
      }

      var currentlyValidatingElement = void 0;
      var propTypesMisspellWarningShown = void 0;

      var getDisplayName = function getDisplayName() {};

      var getStackAddendum = function getStackAddendum() {};

      var VALID_FRAGMENT_PROPS = void 0;
      {
        currentlyValidatingElement = null;
        propTypesMisspellWarningShown = false;

        getDisplayName = function getDisplayName(element) {
          if (element == null) {
            return '#empty';
          } else if (typeof element === 'string' || typeof element === 'number') {
            return '#text';
          } else if (typeof element.type === 'string') {
            return element.type;
          } else if (element.type === REACT_FRAGMENT_TYPE) {
            return 'React.Fragment';
          } else {
            return element.type.displayName || element.type.name || 'Unknown';
          }
        };

        getStackAddendum = function getStackAddendum() {
          var stack = '';

          if (currentlyValidatingElement) {
            var name = getDisplayName(currentlyValidatingElement);
            var owner = currentlyValidatingElement._owner;
            stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner));
          }

          stack += ReactDebugCurrentFrame.getStackAddendum() || '';
          return stack;
        };

        VALID_FRAGMENT_PROPS = new Map([['children', true], ['key', true]]);
      }

      function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
          var name = getComponentName(ReactCurrentOwner.current);

          if (name) {
            return '\n\nCheck the render method of `' + name + '`.';
          }
        }

        return '';
      }

      function getSourceInfoErrorAddendum(elementProps) {
        if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
          var source = elementProps.__source;
          var fileName = source.fileName.replace(/^.*[\\\/]/, '');
          var lineNumber = source.lineNumber;
          return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }

        return '';
      }

      var ownerHasKeyUseWarning = {};

      function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();

        if (!info) {
          var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

          if (parentName) {
            info = '\n\nCheck the top-level render call using <' + parentName + '>.';
          }
        }

        return info;
      }

      function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) {
          return;
        }

        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }

        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        var childOwner = '';

        if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
          childOwner = ' It was passed a child from ' + getComponentName(element._owner) + '.';
        }

        currentlyValidatingElement = element;
        {
          warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, getStackAddendum());
        }
        currentlyValidatingElement = null;
      }

      function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') {
          return;
        }

        if (Array.isArray(node)) {
          for (var i = 0; i < node.length; i++) {
            var child = node[i];

            if (isValidElement(child)) {
              validateExplicitKey(child, parentType);
            }
          }
        } else if (isValidElement(node)) {
          if (node._store) {
            node._store.validated = true;
          }
        } else if (node) {
          var iteratorFn = getIteratorFn(node);

          if (typeof iteratorFn === 'function') {
            if (iteratorFn !== node.entries) {
              var iterator = iteratorFn.call(node);
              var step = void 0;

              while (!(step = iterator.next()).done) {
                if (isValidElement(step.value)) {
                  validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
        }
      }

      function validatePropTypes(element) {
        var componentClass = element.type;

        if (typeof componentClass !== 'function') {
          return;
        }

        var name = componentClass.displayName || componentClass.name;
        var propTypes = componentClass.propTypes;

        if (propTypes) {
          currentlyValidatingElement = element;
          checkPropTypes(propTypes, element.props, 'prop', name, getStackAddendum);
          currentlyValidatingElement = null;
        } else if (componentClass.PropTypes !== undefined && !propTypesMisspellWarningShown) {
          propTypesMisspellWarningShown = true;
          warning(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
        }

        if (typeof componentClass.getDefaultProps === 'function') {
          warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
        }
      }

      function validateFragmentProps(fragment) {
        currentlyValidatingElement = fragment;
        var keys = Object.keys(fragment.props);

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];

          if (!VALID_FRAGMENT_PROPS.has(key)) {
            warning(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.%s', key, getStackAddendum());
            break;
          }
        }

        if (fragment.ref !== null) {
          warning(false, 'Invalid attribute `ref` supplied to `React.Fragment`.%s', getStackAddendum());
        }

        currentlyValidatingElement = null;
      }

      function createElementWithValidation(type, props, children) {
        var validType = typeof type === 'string' || typeof type === 'function' || type === REACT_FRAGMENT_TYPE || type === REACT_ASYNC_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE);

        if (!validType) {
          var info = '';

          if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
            info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
          }

          var sourceInfo = getSourceInfoErrorAddendum(props);

          if (sourceInfo) {
            info += sourceInfo;
          } else {
            info += getDeclarationErrorAddendum();
          }

          info += getStackAddendum() || '';
          var typeString = void 0;

          if (type === null) {
            typeString = 'null';
          } else if (Array.isArray(type)) {
            typeString = 'array';
          } else {
            typeString = typeof type;
          }

          warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
        }

        var element = createElement.apply(this, arguments);

        if (element == null) {
          return element;
        }

        if (validType) {
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], type);
          }
        }

        if (type === REACT_FRAGMENT_TYPE) {
          validateFragmentProps(element);
        } else {
          validatePropTypes(element);
        }

        return element;
      }

      function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        {
          Object.defineProperty(validatedFactory, 'type', {
            enumerable: false,
            get: function get() {
              lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
              Object.defineProperty(this, 'type', {
                value: type
              });
              return type;
            }
          });
        }
        return validatedFactory;
      }

      function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);

        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], newElement.type);
        }

        validatePropTypes(newElement);
        return newElement;
      }

      var React = {
        Children: {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray: toArray,
          only: onlyChild
        },
        createRef: createRef,
        Component: Component,
        PureComponent: PureComponent,
        createContext: createContext,
        Fragment: REACT_FRAGMENT_TYPE,
        StrictMode: REACT_STRICT_MODE_TYPE,
        unstable_AsyncMode: REACT_ASYNC_MODE_TYPE,
        createElement: createElementWithValidation,
        cloneElement: cloneElementWithValidation,
        createFactory: createFactoryWithValidation,
        isValidElement: isValidElement,
        version: ReactVersion,
        __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
          ReactCurrentOwner: ReactCurrentOwner,
          assign: _assign
        }
      };
      {
        _assign(React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {
          ReactDebugCurrentFrame: ReactDebugCurrentFrame,
          ReactComponentTreeHook: {}
        });
      }
      var React$2 = Object.freeze({
        default: React
      });
      var React$3 = React$2 && React || React$2;
      var react = React$3['default'] ? React$3['default'] : React$3;
      module.exports = react;
    })();
  }
},117,[115,116,13,56,57,118],"node_modules\\react\\cjs\\react.development.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  if (process.env.NODE_ENV !== 'production') {
    var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

    var warning = _require(_dependencyMap[1], 'fbjs/lib/warning');

    var ReactPropTypesSecret = _require(_dependencyMap[2], './lib/ReactPropTypesSecret');

    var loggedTypeFailures = {};
  }

  function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    if (process.env.NODE_ENV !== 'production') {
      for (var typeSpecName in typeSpecs) {
        if (typeSpecs.hasOwnProperty(typeSpecName)) {
          var error;

          try {
            invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);
            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
          } catch (ex) {
            error = ex;
          }

          warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);

          if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            loggedTypeFailures[error.message] = true;
            var stack = getStack ? getStack() : '';
            warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
          }
        }
      }
    }
  }

  module.exports = checkPropTypes;
},118,[13,56,119],"node_modules\\prop-types\\checkPropTypes.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
  module.exports = ReactPropTypesSecret;
},119,[],"node_modules\\prop-types\\lib\\ReactPropTypesSecret.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  function is(x, y) {
    if (x === y) {
      return x !== 0 || y !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }

  function shallowEqual(objA, objB) {
    if (is(objA, objB)) {
      return true;
    }

    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
      return false;
    }

    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);

    if (keysA.length !== keysB.length) {
      return false;
    }

    for (var i = 0; i < keysA.length; i++) {
      if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
        return false;
      }
    }

    return true;
  }

  module.exports = shallowEqual;
},120,[],"node_modules\\fbjs\\lib\\shallowEqual.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function deepFreezeAndThrowOnMutationInDev(object) {
    if (__DEV__) {
      if (typeof object !== 'object' || object === null || Object.isFrozen(object) || Object.isSealed(object)) {
        return;
      }

      var keys = Object.keys(object);

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];

        if (object.hasOwnProperty(key)) {
          object.__defineGetter__(key, identity.bind(null, object[key]));

          object.__defineSetter__(key, throwOnImmutableMutation.bind(null, key));
        }
      }

      Object.freeze(object);
      Object.seal(object);

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];

        if (object.hasOwnProperty(key)) {
          deepFreezeAndThrowOnMutationInDev(object[key]);
        }
      }
    }
  }

  function throwOnImmutableMutation(key, value) {
    throw Error('You attempted to set the key `' + key + '` with the value `' + JSON.stringify(value) + '` on an object that is meant to be immutable ' + 'and has been frozen.');
  }

  function identity(value) {
    return value;
  }

  module.exports = deepFreezeAndThrowOnMutationInDev;
},121,[],"deepFreezeAndThrowOnMutationInDev");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ReactFeatureFlags = {
    debugRenderPhaseSideEffects: false,
    debugRenderPhaseSideEffectsForStrictMode: false,
    warnAboutDeprecatedLifecycles: false
  };
  module.exports = ReactFeatureFlags;
},122,[],"ReactFeatureFlags");
__d(function (global, _require2, module, exports, _dependencyMap) {
  "use strict";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  _require2(_dependencyMap[0], "InitializeCore");

  var invariant = _require2(_dependencyMap[1], "fbjs/lib/invariant"),
      emptyFunction = _require2(_dependencyMap[2], "fbjs/lib/emptyFunction"),
      UIManager = _require2(_dependencyMap[3], "UIManager"),
      RCTEventEmitter = _require2(_dependencyMap[4], "RCTEventEmitter"),
      TextInputState = _require2(_dependencyMap[5], "TextInputState"),
      deepDiffer = _require2(_dependencyMap[6], "deepDiffer"),
      flattenStyle = _require2(_dependencyMap[7], "flattenStyle"),
      React = _require2(_dependencyMap[8], "react"),
      emptyObject = _require2(_dependencyMap[9], "fbjs/lib/emptyObject"),
      shallowEqual = _require2(_dependencyMap[10], "fbjs/lib/shallowEqual"),
      ExceptionsManager = _require2(_dependencyMap[11], "ExceptionsManager");

  function _invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    this._hasCaughtError = !1;
    this._caughtError = null;
    var funcArgs = Array.prototype.slice.call(arguments, 3);

    try {
      func.apply(context, funcArgs);
    } catch (error) {
      this._caughtError = error, this._hasCaughtError = !0;
    }
  }

  var ReactErrorUtils = {
    _caughtError: null,
    _hasCaughtError: !1,
    _rethrowError: null,
    _hasRethrowError: !1,
    invokeGuardedCallback: function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
      _invokeGuardedCallback.apply(ReactErrorUtils, arguments);
    },
    invokeGuardedCallbackAndCatchFirstError: function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
      ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);

      if (ReactErrorUtils.hasCaughtError()) {
        var error = ReactErrorUtils.clearCaughtError();
        ReactErrorUtils._hasRethrowError || (ReactErrorUtils._hasRethrowError = !0, ReactErrorUtils._rethrowError = error);
      }
    },
    rethrowCaughtError: function rethrowCaughtError() {
      return _rethrowCaughtError.apply(ReactErrorUtils, arguments);
    },
    hasCaughtError: function hasCaughtError() {
      return ReactErrorUtils._hasCaughtError;
    },
    clearCaughtError: function clearCaughtError() {
      if (ReactErrorUtils._hasCaughtError) {
        var error = ReactErrorUtils._caughtError;
        ReactErrorUtils._caughtError = null;
        ReactErrorUtils._hasCaughtError = !1;
        return error;
      }

      invariant(!1, "clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
  };

  function _rethrowCaughtError() {
    if (ReactErrorUtils._hasRethrowError) {
      var error = ReactErrorUtils._rethrowError;
      ReactErrorUtils._rethrowError = null;
      ReactErrorUtils._hasRethrowError = !1;
      throw error;
    }
  }

  var eventPluginOrder = null,
      namesToPlugins = {};

  function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
      var pluginModule = namesToPlugins[pluginName],
          pluginIndex = eventPluginOrder.indexOf(pluginName);
      invariant(-1 < pluginIndex, "EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.", pluginName);

      if (!plugins[pluginIndex]) {
        invariant(pluginModule.extractEvents, "EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.", pluginName);
        plugins[pluginIndex] = pluginModule;
        pluginIndex = pluginModule.eventTypes;

        for (var eventName in pluginIndex) {
          var JSCompiler_inline_result = void 0;
          var dispatchConfig = pluginIndex[eventName],
              pluginModule$jscomp$0 = pluginModule,
              eventName$jscomp$0 = eventName;
          invariant(!eventNameDispatchConfigs.hasOwnProperty(eventName$jscomp$0), "EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.", eventName$jscomp$0);
          eventNameDispatchConfigs[eventName$jscomp$0] = dispatchConfig;
          var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

          if (phasedRegistrationNames) {
            for (JSCompiler_inline_result in phasedRegistrationNames) {
              phasedRegistrationNames.hasOwnProperty(JSCompiler_inline_result) && publishRegistrationName(phasedRegistrationNames[JSCompiler_inline_result], pluginModule$jscomp$0, eventName$jscomp$0);
            }

            JSCompiler_inline_result = !0;
          } else dispatchConfig.registrationName ? (publishRegistrationName(dispatchConfig.registrationName, pluginModule$jscomp$0, eventName$jscomp$0), JSCompiler_inline_result = !0) : JSCompiler_inline_result = !1;

          invariant(JSCompiler_inline_result, "EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.", eventName, pluginName);
        }
      }
    }
  }

  function publishRegistrationName(registrationName, pluginModule) {
    invariant(!registrationNameModules[registrationName], "EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
    registrationNameModules[registrationName] = pluginModule;
  }

  var plugins = [],
      eventNameDispatchConfigs = {},
      registrationNameModules = {},
      getFiberCurrentPropsFromNode = null,
      getInstanceFromNode = null,
      getNodeFromInstance = null;

  function isEndish(topLevelType) {
    return "topMouseUp" === topLevelType || "topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType;
  }

  function isMoveish(topLevelType) {
    return "topMouseMove" === topLevelType || "topTouchMove" === topLevelType;
  }

  function isStartish(topLevelType) {
    return "topMouseDown" === topLevelType || "topTouchStart" === topLevelType;
  }

  function executeDispatch(event, simulated, listener, inst) {
    simulated = event.type || "unknown-event";
    event.currentTarget = getNodeFromInstance(inst);
    ReactErrorUtils.invokeGuardedCallbackAndCatchFirstError(simulated, listener, void 0, event);
    event.currentTarget = null;
  }

  function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners,
        dispatchInstance = event._dispatchInstances;
    invariant(!Array.isArray(dispatchListener), "executeDirectDispatch(...): Invalid `event`.");
    event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
    dispatchListener = dispatchListener ? dispatchListener(event) : null;
    event.currentTarget = null;
    event._dispatchListeners = null;
    event._dispatchInstances = null;
    return dispatchListener;
  }

  function accumulateInto(current, next) {
    invariant(null != next, "accumulateInto(...): Accumulated items must not be null or undefined.");
    if (null == current) return next;

    if (Array.isArray(current)) {
      if (Array.isArray(next)) return current.push.apply(current, next), current;
      current.push(next);
      return current;
    }

    return Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
  }

  var eventQueue = null;

  function executeDispatchesAndReleaseTopLevel(e) {
    if (e) {
      var dispatchListeners = e._dispatchListeners,
          dispatchInstances = e._dispatchInstances;
      if (Array.isArray(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !e.isPropagationStopped(); i++) {
        executeDispatch(e, !1, dispatchListeners[i], dispatchInstances[i]);
      } else dispatchListeners && executeDispatch(e, !1, dispatchListeners, dispatchInstances);
      e._dispatchListeners = null;
      e._dispatchInstances = null;
      e.isPersistent() || e.constructor.release(e);
    }
  }

  var injection = {
    injectEventPluginOrder: function injectEventPluginOrder(injectedEventPluginOrder) {
      invariant(!eventPluginOrder, "EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
      eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
      recomputePluginOrdering();
    },
    injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
      var isOrderingDirty = !1,
          pluginName;

      for (pluginName in injectedNamesToPlugins) {
        if (injectedNamesToPlugins.hasOwnProperty(pluginName)) {
          var pluginModule = injectedNamesToPlugins[pluginName];
          namesToPlugins.hasOwnProperty(pluginName) && namesToPlugins[pluginName] === pluginModule || (invariant(!namesToPlugins[pluginName], "EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.", pluginName), namesToPlugins[pluginName] = pluginModule, isOrderingDirty = !0);
        }
      }

      isOrderingDirty && recomputePluginOrdering();
    }
  };

  function getListener(inst, registrationName) {
    var listener = inst.stateNode;
    if (!listener) return null;
    var props = getFiberCurrentPropsFromNode(listener);
    if (!props) return null;
    listener = props[registrationName];

    a: switch (registrationName) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
        (props = !props.disabled) || (inst = inst.type, props = !("button" === inst || "input" === inst || "select" === inst || "textarea" === inst));
        inst = !props;
        break a;

      default:
        inst = !1;
    }

    if (inst) return null;
    invariant(!listener || "function" === typeof listener, "Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
    return listener;
  }

  function getParent(inst) {
    do {
      inst = inst["return"];
    } while (inst && 5 !== inst.tag);

    return inst ? inst : null;
  }

  function traverseTwoPhase(inst, fn, arg) {
    for (var path = []; inst;) {
      path.push(inst), inst = getParent(inst);
    }

    for (inst = path.length; 0 < inst--;) {
      fn(path[inst], "captured", arg);
    }

    for (inst = 0; inst < path.length; inst++) {
      fn(path[inst], "bubbled", arg);
    }
  }

  function accumulateDirectionalDispatches(inst, phase, event) {
    if (phase = getListener(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }

  function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }

  function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      var targetInst = event._targetInst;
      targetInst = targetInst ? getParent(targetInst) : null;
      traverseTwoPhase(targetInst, accumulateDirectionalDispatches, event);
    }
  }

  function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
      var inst = event._targetInst;

      if (inst && event && event.dispatchConfig.registrationName) {
        var listener = getListener(inst, event.dispatchConfig.registrationName);
        listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
      }
    }
  }

  var shouldBeReleasedProperties = "dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),
      EventInterface = {
    type: null,
    target: null,
    currentTarget: emptyFunction.thatReturnsNull,
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function timeStamp(event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };

  function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;
    dispatchConfig = this.constructor.Interface;

    for (var propName in dispatchConfig) {
      dispatchConfig.hasOwnProperty(propName) && ((targetInst = dispatchConfig[propName]) ? this[propName] = targetInst(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName]);
    }

    this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : !1 === nativeEvent.returnValue) ? emptyFunction.thatReturnsTrue : emptyFunction.thatReturnsFalse;
    this.isPropagationStopped = emptyFunction.thatReturnsFalse;
    return this;
  }

  _extends(SyntheticEvent.prototype, {
    preventDefault: function preventDefault() {
      this.defaultPrevented = !0;
      var event = this.nativeEvent;
      event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = !1), this.isDefaultPrevented = emptyFunction.thatReturnsTrue);
    },
    stopPropagation: function stopPropagation() {
      var event = this.nativeEvent;
      event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = !0), this.isPropagationStopped = emptyFunction.thatReturnsTrue);
    },
    persist: function persist() {
      this.isPersistent = emptyFunction.thatReturnsTrue;
    },
    isPersistent: emptyFunction.thatReturnsFalse,
    destructor: function destructor() {
      var Interface = this.constructor.Interface,
          propName;

      for (propName in Interface) {
        this[propName] = null;
      }

      for (Interface = 0; Interface < shouldBeReleasedProperties.length; Interface++) {
        this[shouldBeReleasedProperties[Interface]] = null;
      }
    }
  });

  SyntheticEvent.Interface = EventInterface;

  SyntheticEvent.extend = function (Interface) {
    function E() {}

    function Class() {
      return Super.apply(this, arguments);
    }

    var Super = this;
    E.prototype = Super.prototype;
    var prototype = new E();

    _extends(prototype, Class.prototype);

    Class.prototype = prototype;
    Class.prototype.constructor = Class;
    Class.Interface = _extends({}, Super.Interface, Interface);
    Class.extend = Super.extend;
    addEventPoolingTo(Class);
    return Class;
  };

  addEventPoolingTo(SyntheticEvent);

  function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
    if (this.eventPool.length) {
      var instance = this.eventPool.pop();
      this.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
      return instance;
    }

    return new this(dispatchConfig, targetInst, nativeEvent, nativeInst);
  }

  function releasePooledEvent(event) {
    invariant(event instanceof this, "Trying to release an event instance  into a pool of a different type.");
    event.destructor();
    10 > this.eventPool.length && this.eventPool.push(event);
  }

  function addEventPoolingTo(EventConstructor) {
    EventConstructor.eventPool = [];
    EventConstructor.getPooled = getPooledEvent;
    EventConstructor.release = releasePooledEvent;
  }

  var ResponderSyntheticEvent = SyntheticEvent.extend({
    touchHistory: function touchHistory() {
      return null;
    }
  }),
      touchBank = [],
      touchHistory = {
    touchBank: touchBank,
    numberActiveTouches: 0,
    indexOfSingleActiveTouch: -1,
    mostRecentTimeStamp: 0
  };

  function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
  }

  function getTouchIdentifier(_ref) {
    _ref = _ref.identifier;
    invariant(null != _ref, "Touch object is missing identifier.");
    return _ref;
  }

  function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
        touchRecord = touchBank[identifier];
    touchRecord ? (touchRecord.touchActive = !0, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch)) : (touchRecord = {
      touchActive: !0,
      startPageX: touch.pageX,
      startPageY: touch.pageY,
      startTimeStamp: timestampForTouch(touch),
      currentPageX: touch.pageX,
      currentPageY: touch.pageY,
      currentTimeStamp: timestampForTouch(touch),
      previousPageX: touch.pageX,
      previousPageY: touch.pageY,
      previousTimeStamp: timestampForTouch(touch)
    }, touchBank[identifier] = touchRecord);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
  }

  function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = !0, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch move without a touch start.\nTouch Move: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = !1, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch end without a touch start.\nTouch End: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function printTouch(touch) {
    return JSON.stringify({
      identifier: touch.identifier,
      pageX: touch.pageX,
      pageY: touch.pageY,
      timestamp: timestampForTouch(touch)
    });
  }

  function printTouchBank() {
    var printed = JSON.stringify(touchBank.slice(0, 20));
    20 < touchBank.length && (printed += " (original size: " + touchBank.length + ")");
    return printed;
  }

  var ResponderTouchHistoryStore = {
    recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
      if (isMoveish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if (isEndish(topLevelType) && (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches)) for (topLevelType = 0; topLevelType < touchBank.length; topLevelType++) {
        if (nativeEvent = touchBank[topLevelType], null != nativeEvent && nativeEvent.touchActive) {
          touchHistory.indexOfSingleActiveTouch = topLevelType;
          break;
        }
      }
    },
    touchHistory: touchHistory
  };

  function accumulate(current, next) {
    invariant(null != next, "accumulate(...): Accumulated items must be not be null or undefined.");
    return null == current ? next : Array.isArray(current) ? current.concat(next) : Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  var responderInst = null,
      trackedTouchCount = 0,
      previousActiveTouches = 0;

  function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst;
    if (null !== ResponderEventPlugin.GlobalResponderHandler) ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
  }

  var eventTypes = {
    startShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onStartShouldSetResponder",
        captured: "onStartShouldSetResponderCapture"
      }
    },
    scrollShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onScrollShouldSetResponder",
        captured: "onScrollShouldSetResponderCapture"
      }
    },
    selectionChangeShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onSelectionChangeShouldSetResponder",
        captured: "onSelectionChangeShouldSetResponderCapture"
      }
    },
    moveShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onMoveShouldSetResponder",
        captured: "onMoveShouldSetResponderCapture"
      }
    },
    responderStart: {
      registrationName: "onResponderStart"
    },
    responderMove: {
      registrationName: "onResponderMove"
    },
    responderEnd: {
      registrationName: "onResponderEnd"
    },
    responderRelease: {
      registrationName: "onResponderRelease"
    },
    responderTerminationRequest: {
      registrationName: "onResponderTerminationRequest"
    },
    responderGrant: {
      registrationName: "onResponderGrant"
    },
    responderReject: {
      registrationName: "onResponderReject"
    },
    responderTerminate: {
      registrationName: "onResponderTerminate"
    }
  },
      ResponderEventPlugin = {
    _getResponder: function _getResponder() {
      return responderInst;
    },
    eventTypes: eventTypes,
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      if (isStartish(topLevelType)) trackedTouchCount += 1;else if (isEndish(topLevelType)) if (0 <= trackedTouchCount) --trackedTouchCount;else return console.error("Ended a touch event which was not counted in `trackedTouchCount`."), null;
      ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);

      if (targetInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || 0 < trackedTouchCount && "topSelectionChange" === topLevelType || isStartish(topLevelType) || isMoveish(topLevelType))) {
        var JSCompiler_temp = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
        if (responderInst) b: {
          var JSCompiler_temp$jscomp$0 = responderInst;

          for (var depthA = 0, tempA = JSCompiler_temp$jscomp$0; tempA; tempA = getParent(tempA)) {
            depthA++;
          }

          tempA = 0;

          for (var tempB = targetInst; tempB; tempB = getParent(tempB)) {
            tempA++;
          }

          for (; 0 < depthA - tempA;) {
            JSCompiler_temp$jscomp$0 = getParent(JSCompiler_temp$jscomp$0), depthA--;
          }

          for (; 0 < tempA - depthA;) {
            targetInst = getParent(targetInst), tempA--;
          }

          for (; depthA--;) {
            if (JSCompiler_temp$jscomp$0 === targetInst || JSCompiler_temp$jscomp$0 === targetInst.alternate) break b;
            JSCompiler_temp$jscomp$0 = getParent(JSCompiler_temp$jscomp$0);
            targetInst = getParent(targetInst);
          }

          JSCompiler_temp$jscomp$0 = null;
        } else JSCompiler_temp$jscomp$0 = targetInst;
        targetInst = JSCompiler_temp$jscomp$0 === responderInst;
        JSCompiler_temp$jscomp$0 = ResponderSyntheticEvent.getPooled(JSCompiler_temp, JSCompiler_temp$jscomp$0, nativeEvent, nativeEventTarget);
        JSCompiler_temp$jscomp$0.touchHistory = ResponderTouchHistoryStore.touchHistory;
        targetInst ? forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateTwoPhaseDispatchesSingleSkipTarget) : forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateTwoPhaseDispatchesSingle);

        b: {
          JSCompiler_temp = JSCompiler_temp$jscomp$0._dispatchListeners;
          targetInst = JSCompiler_temp$jscomp$0._dispatchInstances;
          if (Array.isArray(JSCompiler_temp)) for (depthA = 0; depthA < JSCompiler_temp.length && !JSCompiler_temp$jscomp$0.isPropagationStopped(); depthA++) {
            if (JSCompiler_temp[depthA](JSCompiler_temp$jscomp$0, targetInst[depthA])) {
              JSCompiler_temp = targetInst[depthA];
              break b;
            }
          } else if (JSCompiler_temp && JSCompiler_temp(JSCompiler_temp$jscomp$0, targetInst)) {
            JSCompiler_temp = targetInst;
            break b;
          }
          JSCompiler_temp = null;
        }

        JSCompiler_temp$jscomp$0._dispatchInstances = null;
        JSCompiler_temp$jscomp$0._dispatchListeners = null;
        JSCompiler_temp$jscomp$0.isPersistent() || JSCompiler_temp$jscomp$0.constructor.release(JSCompiler_temp$jscomp$0);
        JSCompiler_temp && JSCompiler_temp !== responderInst ? (JSCompiler_temp$jscomp$0 = void 0, targetInst = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, JSCompiler_temp, nativeEvent, nativeEventTarget), targetInst.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(targetInst, accumulateDirectDispatchesSingle), depthA = !0 === executeDirectDispatch(targetInst), responderInst ? (tempA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget), tempA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(tempA, accumulateDirectDispatchesSingle), tempB = !tempA._dispatchListeners || executeDirectDispatch(tempA), tempA.isPersistent() || tempA.constructor.release(tempA), tempB ? (tempA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget), tempA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(tempA, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, [targetInst, tempA]), changeResponder(JSCompiler_temp, depthA)) : (JSCompiler_temp = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, JSCompiler_temp, nativeEvent, nativeEventTarget), JSCompiler_temp.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, JSCompiler_temp))) : (JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, targetInst), changeResponder(JSCompiler_temp, depthA)), JSCompiler_temp = JSCompiler_temp$jscomp$0) : JSCompiler_temp = null;
      } else JSCompiler_temp = null;

      JSCompiler_temp$jscomp$0 = responderInst && isStartish(topLevelType);
      targetInst = responderInst && isMoveish(topLevelType);
      depthA = responderInst && isEndish(topLevelType);
      if (JSCompiler_temp$jscomp$0 = JSCompiler_temp$jscomp$0 ? eventTypes.responderStart : targetInst ? eventTypes.responderMove : depthA ? eventTypes.responderEnd : null) JSCompiler_temp$jscomp$0 = ResponderSyntheticEvent.getPooled(JSCompiler_temp$jscomp$0, responderInst, nativeEvent, nativeEventTarget), JSCompiler_temp$jscomp$0.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateDirectDispatchesSingle), JSCompiler_temp = accumulate(JSCompiler_temp, JSCompiler_temp$jscomp$0);
      JSCompiler_temp$jscomp$0 = responderInst && "topTouchCancel" === topLevelType;
      if (topLevelType = responderInst && !JSCompiler_temp$jscomp$0 && isEndish(topLevelType)) a: {
        if ((topLevelType = nativeEvent.touches) && 0 !== topLevelType.length) for (targetInst = 0; targetInst < topLevelType.length; targetInst++) {
          if (depthA = topLevelType[targetInst].target, null !== depthA && void 0 !== depthA && 0 !== depthA) {
            tempA = getInstanceFromNode(depthA);

            b: {
              for (depthA = responderInst; tempA;) {
                if (depthA === tempA || depthA === tempA.alternate) {
                  depthA = !0;
                  break b;
                }

                tempA = getParent(tempA);
              }

              depthA = !1;
            }

            if (depthA) {
              topLevelType = !1;
              break a;
            }
          }
        }
        topLevelType = !0;
      }
      if (topLevelType = JSCompiler_temp$jscomp$0 ? eventTypes.responderTerminate : topLevelType ? eventTypes.responderRelease : null) nativeEvent = ResponderSyntheticEvent.getPooled(topLevelType, responderInst, nativeEvent, nativeEventTarget), nativeEvent.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(nativeEvent, accumulateDirectDispatchesSingle), JSCompiler_temp = accumulate(JSCompiler_temp, nativeEvent), changeResponder(null);
      nativeEvent = ResponderTouchHistoryStore.touchHistory.numberActiveTouches;
      if (ResponderEventPlugin.GlobalInteractionHandler && nativeEvent !== previousActiveTouches) ResponderEventPlugin.GlobalInteractionHandler.onChange(nativeEvent);
      previousActiveTouches = nativeEvent;
      return JSCompiler_temp;
    },
    GlobalResponderHandler: null,
    GlobalInteractionHandler: null,
    injection: {
      injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
        ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
      },
      injectGlobalInteractionHandler: function injectGlobalInteractionHandler(GlobalInteractionHandler) {
        ResponderEventPlugin.GlobalInteractionHandler = GlobalInteractionHandler;
      }
    }
  },
      customBubblingEventTypes = {},
      customDirectEventTypes = {},
      ReactNativeBridgeEventPlugin = {
    eventTypes: {},
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      if (null == targetInst) return null;
      var bubbleDispatchConfig = customBubblingEventTypes[topLevelType],
          directDispatchConfig = customDirectEventTypes[topLevelType];
      invariant(bubbleDispatchConfig || directDispatchConfig, 'Unsupported top level event type "%s" dispatched', topLevelType);
      topLevelType = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
      if (bubbleDispatchConfig) forEachAccumulated(topLevelType, accumulateTwoPhaseDispatchesSingle);else if (directDispatchConfig) forEachAccumulated(topLevelType, accumulateDirectDispatchesSingle);else return null;
      return topLevelType;
    },
    processEventTypes: function processEventTypes(viewConfig) {
      var bubblingEventTypes = viewConfig.bubblingEventTypes;
      viewConfig = viewConfig.directEventTypes;
      if (null != bubblingEventTypes) for (var _topLevelType in bubblingEventTypes) {
        null == customBubblingEventTypes[_topLevelType] && (ReactNativeBridgeEventPlugin.eventTypes[_topLevelType] = customBubblingEventTypes[_topLevelType] = bubblingEventTypes[_topLevelType]);
      }
      if (null != viewConfig) for (var _topLevelType2 in viewConfig) {
        null == customDirectEventTypes[_topLevelType2] && (ReactNativeBridgeEventPlugin.eventTypes[_topLevelType2] = customDirectEventTypes[_topLevelType2] = viewConfig[_topLevelType2]);
      }
    }
  },
      instanceCache = {},
      instanceProps = {};

  function uncacheFiberNode(tag) {
    delete instanceCache[tag];
    delete instanceProps[tag];
  }

  function getInstanceFromTag(tag) {
    return "number" === typeof tag ? instanceCache[tag] || null : tag;
  }

  var ReactNativeComponentTree = Object.freeze({
    precacheFiberNode: function precacheFiberNode(hostInst, tag) {
      instanceCache[tag] = hostInst;
    },
    uncacheFiberNode: uncacheFiberNode,
    getClosestInstanceFromNode: getInstanceFromTag,
    getInstanceFromNode: getInstanceFromTag,
    getNodeFromInstance: function getNodeFromInstance(inst) {
      var tag = inst.stateNode._nativeTag;
      void 0 === tag && (tag = inst.stateNode.canonical._nativeTag);
      invariant(tag, "All native instances should have a tag.");
      return tag;
    },
    getFiberCurrentPropsFromNode: function getFiberCurrentPropsFromNode(stateNode) {
      return instanceProps[stateNode._nativeTag] || null;
    },
    updateFiberProps: function updateFiberProps(tag, props) {
      instanceProps[tag] = props;
    }
  });
  injection.injectEventPluginOrder(["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"]);
  getFiberCurrentPropsFromNode = ReactNativeComponentTree.getFiberCurrentPropsFromNode;
  getInstanceFromNode = ReactNativeComponentTree.getInstanceFromNode;
  getNodeFromInstance = ReactNativeComponentTree.getNodeFromInstance;
  ResponderEventPlugin.injection.injectGlobalResponderHandler({
    onChange: function onChange(from, to, blockNativeResponder) {
      null !== to ? UIManager.setJSResponder(to.stateNode._nativeTag, blockNativeResponder) : UIManager.clearJSResponder();
    }
  });
  injection.injectEventPluginsByName({
    ResponderEventPlugin: ResponderEventPlugin,
    ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin
  });
  var restoreTarget = null,
      restoreQueue = null;

  function restoreStateOfTarget(target) {
    if (target = getInstanceFromNode(target)) {
      invariant(null, "Fiber needs to be injected to handle a fiber target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
      var props = getFiberCurrentPropsFromNode(target.stateNode);
      null.restoreControlledState(target.stateNode, target.type, props);
    }
  }

  function _batchedUpdates(fn, bookkeeping) {
    return fn(bookkeeping);
  }

  function _flushInteractiveUpdates() {}

  var isBatching = !1;

  function batchedUpdates(fn, bookkeeping) {
    if (isBatching) return fn(bookkeeping);
    isBatching = !0;

    try {
      return _batchedUpdates(fn, bookkeeping);
    } finally {
      if (isBatching = !1, null !== restoreTarget || null !== restoreQueue) if (_flushInteractiveUpdates(), restoreTarget && (bookkeeping = restoreTarget, fn = restoreQueue, restoreQueue = restoreTarget = null, restoreStateOfTarget(bookkeeping), fn)) for (bookkeeping = 0; bookkeeping < fn.length; bookkeeping++) {
        restoreStateOfTarget(fn[bookkeeping]);
      }
    }
  }

  var ReactNativeTagHandles = {
    tagsStartAt: 1,
    tagCount: 1,
    allocateTag: function allocateTag() {
      for (; this.reactTagIsNativeTopRootID(ReactNativeTagHandles.tagCount);) {
        ReactNativeTagHandles.tagCount++;
      }

      var tag = ReactNativeTagHandles.tagCount;
      ReactNativeTagHandles.tagCount++;
      return tag;
    },
    assertRootTag: function assertRootTag(tag) {
      invariant(this.reactTagIsNativeTopRootID(tag), "Expect a native root tag, instead got %s", tag);
    },
    reactTagIsNativeTopRootID: function reactTagIsNativeTopRootID(reactTag) {
      return 1 === reactTag % 10;
    }
  },
      EMPTY_NATIVE_EVENT = {};

  function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
    var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT,
        inst = getInstanceFromTag(rootNodeID);
    batchedUpdates(function () {
      var events = nativeEvent.target;

      for (var events$jscomp$0 = null, i = 0; i < plugins.length; i++) {
        var possiblePlugin = plugins[i];
        possiblePlugin && (possiblePlugin = possiblePlugin.extractEvents(topLevelType, inst, nativeEvent, events)) && (events$jscomp$0 = accumulateInto(events$jscomp$0, possiblePlugin));
      }

      events = events$jscomp$0;
      null !== events && (eventQueue = accumulateInto(eventQueue, events));
      events = eventQueue;
      eventQueue = null;
      events && (forEachAccumulated(events, executeDispatchesAndReleaseTopLevel), invariant(!eventQueue, "processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented."), ReactErrorUtils.rethrowCaughtError());
    });
  }

  var ReactNativeEventEmitter = Object.freeze({
    getListener: getListener,
    registrationNames: registrationNameModules,
    _receiveRootNodeIDEvent: _receiveRootNodeIDEvent,
    receiveEvent: function receiveEvent(rootNodeID, topLevelType, nativeEventParam) {
      _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
    },
    receiveTouches: function receiveTouches(eventTopLevelType, touches, changedIndices) {
      if ("topTouchEnd" === eventTopLevelType || "topTouchCancel" === eventTopLevelType) {
        var JSCompiler_temp = [];

        for (var i = 0; i < changedIndices.length; i++) {
          var index = changedIndices[i];
          JSCompiler_temp.push(touches[index]);
          touches[index] = null;
        }

        for (i = changedIndices = 0; i < touches.length; i++) {
          index = touches[i], null !== index && (touches[changedIndices++] = index);
        }

        touches.length = changedIndices;
      } else for (JSCompiler_temp = [], i = 0; i < changedIndices.length; i++) {
        JSCompiler_temp.push(touches[changedIndices[i]]);
      }

      for (changedIndices = 0; changedIndices < JSCompiler_temp.length; changedIndices++) {
        i = JSCompiler_temp[changedIndices];
        i.changedTouches = JSCompiler_temp;
        i.touches = touches;
        index = null;
        var target = i.target;
        null === target || void 0 === target || target < ReactNativeTagHandles.tagsStartAt || (index = target);

        _receiveRootNodeIDEvent(index, eventTopLevelType, i);
      }
    }
  });
  RCTEventEmitter.register(ReactNativeEventEmitter);
  var hasSymbol = "function" === typeof Symbol && Symbol["for"],
      REACT_ELEMENT_TYPE = hasSymbol ? Symbol["for"]("react.element") : 60103,
      REACT_CALL_TYPE = hasSymbol ? Symbol["for"]("react.call") : 60104,
      REACT_RETURN_TYPE = hasSymbol ? Symbol["for"]("react.return") : 60105,
      REACT_PORTAL_TYPE = hasSymbol ? Symbol["for"]("react.portal") : 60106,
      REACT_FRAGMENT_TYPE = hasSymbol ? Symbol["for"]("react.fragment") : 60107,
      REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol["for"]("react.strict_mode") : 60108,
      REACT_PROVIDER_TYPE = hasSymbol ? Symbol["for"]("react.provider") : 60109,
      REACT_CONTEXT_TYPE = hasSymbol ? Symbol["for"]("react.context") : 60110,
      REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol["for"]("react.async_mode") : 60111,
      MAYBE_ITERATOR_SYMBOL = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");

  function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "undefined" === typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
  }

  function _createPortal(children, containerInfo, implementation) {
    var key = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
    return {
      $$typeof: REACT_PORTAL_TYPE,
      key: null == key ? null : "" + key,
      children: children,
      containerInfo: containerInfo,
      implementation: implementation
    };
  }

  var TouchHistoryMath = {
    centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
      var touchBank = touchHistory.touchBank,
          total = 0,
          count = 0;
      touchHistory = 1 === touchHistory.numberActiveTouches ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;
      if (null !== touchHistory) touchHistory.touchActive && touchHistory.currentTimeStamp > touchesChangedAfter && (total += ofCurrent && isXAxis ? touchHistory.currentPageX : ofCurrent && !isXAxis ? touchHistory.currentPageY : !ofCurrent && isXAxis ? touchHistory.previousPageX : touchHistory.previousPageY, count = 1);else for (touchHistory = 0; touchHistory < touchBank.length; touchHistory++) {
        var touchTrack = touchBank[touchHistory];
        null !== touchTrack && void 0 !== touchTrack && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter && (total += ofCurrent && isXAxis ? touchTrack.currentPageX : ofCurrent && !isXAxis ? touchTrack.currentPageY : !ofCurrent && isXAxis ? touchTrack.previousPageX : touchTrack.previousPageY, count++);
      }
      return 0 < count ? total / count : TouchHistoryMath.noCentroid;
    },
    currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !0, !0);
    },
    currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !1, !0);
    },
    previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !0, !1);
    },
    previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !1, !1);
    },
    currentCentroidX: function currentCentroidX(touchHistory) {
      return TouchHistoryMath.centroidDimension(touchHistory, 0, !0, !0);
    },
    currentCentroidY: function currentCentroidY(touchHistory) {
      return TouchHistoryMath.centroidDimension(touchHistory, 0, !1, !0);
    },
    noCentroid: -1
  },
      objects = {},
      uniqueID = 1,
      emptyObject$2 = {},
      ReactNativePropRegistry = function () {
    function ReactNativePropRegistry() {
      if (!(this instanceof ReactNativePropRegistry)) throw new TypeError("Cannot call a class as a function");
    }

    ReactNativePropRegistry.register = function (object) {
      var id = ++uniqueID;
      objects[id] = object;
      return id;
    };

    ReactNativePropRegistry.getByID = function (id) {
      if (!id) return emptyObject$2;
      var object = objects[id];
      return object ? object : (console.warn("Invalid style with id `" + id + "`. Skipping ..."), emptyObject$2);
    };

    return ReactNativePropRegistry;
  }(),
      emptyObject$1 = {},
      removedKeys = null,
      removedKeyCount = 0;

  function resolveObject(idOrObject) {
    return "number" === typeof idOrObject ? ReactNativePropRegistry.getByID(idOrObject) : idOrObject;
  }

  function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (Array.isArray(node)) for (var i = node.length; i-- && 0 < removedKeyCount;) {
      restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    } else if (node && 0 < removedKeyCount) for (i in node = resolveObject(node), removedKeys) {
      if (removedKeys[i]) {
        var _nextProp = node[i];

        if (void 0 !== _nextProp) {
          var attributeConfig = validAttributes[i];

          if (attributeConfig) {
            "function" === typeof _nextProp && (_nextProp = !0);
            "undefined" === typeof _nextProp && (_nextProp = null);
            if ("object" !== typeof attributeConfig) updatePayload[i] = _nextProp;else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) _nextProp = "function" === typeof attributeConfig.process ? attributeConfig.process(_nextProp) : _nextProp, updatePayload[i] = _nextProp;
            removedKeys[i] = !1;
            removedKeyCount--;
          }
        }
      }
    }
  }

  function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) return updatePayload;
    if (!prevProp || !nextProp) return nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload;
    if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) return diffProperties(updatePayload, resolveObject(prevProp), resolveObject(nextProp), validAttributes);

    if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
      var minLength = prevProp.length < nextProp.length ? prevProp.length : nextProp.length,
          i;

      for (i = 0; i < minLength; i++) {
        updatePayload = diffNestedProperty(updatePayload, prevProp[i], nextProp[i], validAttributes);
      }

      for (; i < prevProp.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
      }

      for (; i < nextProp.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
      }

      return updatePayload;
    }

    return Array.isArray(prevProp) ? diffProperties(updatePayload, flattenStyle(prevProp), resolveObject(nextProp), validAttributes) : diffProperties(updatePayload, resolveObject(prevProp), flattenStyle(nextProp), validAttributes);
  }

  function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!Array.isArray(nextProp)) return nextProp = resolveObject(nextProp), diffProperties(updatePayload, emptyObject$1, nextProp, validAttributes);

    for (var i = 0; i < nextProp.length; i++) {
      updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    }

    return updatePayload;
  }

  function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!Array.isArray(prevProp)) return prevProp = resolveObject(prevProp), diffProperties(updatePayload, prevProp, emptyObject$1, validAttributes);

    for (var i = 0; i < prevProp.length; i++) {
      updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    }

    return updatePayload;
  }

  function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, propKey;

    for (propKey in nextProps) {
      if (attributeConfig = validAttributes[propKey]) {
        var prevProp = prevProps[propKey];
        var nextProp = nextProps[propKey];
        "function" === typeof nextProp && (nextProp = !0, "function" === typeof prevProp && (prevProp = !0));
        "undefined" === typeof nextProp && (nextProp = null, "undefined" === typeof prevProp && (prevProp = null));
        removedKeys && (removedKeys[propKey] = !1);
        if (updatePayload && void 0 !== updatePayload[propKey]) {
          if ("object" !== typeof attributeConfig) updatePayload[propKey] = nextProp;else {
            if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[propKey] = attributeConfig;
          }
        } else if (prevProp !== nextProp) if ("object" !== typeof attributeConfig) ("object" !== typeof nextProp || null === nextProp || deepDiffer(prevProp, nextProp)) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) {
          if (void 0 === prevProp || ("function" === typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : "object" !== typeof nextProp || null === nextProp || deepDiffer(prevProp, nextProp))) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = attributeConfig;
        } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), 0 < removedKeyCount && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
      }
    }

    for (var _propKey in prevProps) {
      void 0 === nextProps[_propKey] && (!(attributeConfig = validAttributes[_propKey]) || updatePayload && void 0 !== updatePayload[_propKey] || (prevProp = prevProps[_propKey], void 0 !== prevProp && ("object" !== typeof attributeConfig || "function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[_propKey] = null, removedKeys || (removedKeys = {}), removedKeys[_propKey] || (removedKeys[_propKey] = !0, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig))));
    }

    return updatePayload;
  }

  function mountSafeCallback(context, callback) {
    return function () {
      if (callback) {
        if ("boolean" === typeof context.__isMounted) {
          if (!context.__isMounted) return;
        } else if ("function" === typeof context.isMounted && !context.isMounted()) return;

        return callback.apply(context, arguments);
      }
    };
  }

  var ReactCurrentOwner = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner;

  function getComponentName(fiber) {
    fiber = fiber.type;
    if ("function" === typeof fiber) return fiber.displayName || fiber.name;
    if ("string" === typeof fiber) return fiber;

    switch (fiber) {
      case REACT_FRAGMENT_TYPE:
        return "ReactFragment";

      case REACT_PORTAL_TYPE:
        return "ReactPortal";

      case REACT_CALL_TYPE:
        return "ReactCall";

      case REACT_RETURN_TYPE:
        return "ReactReturn";
    }

    return null;
  }

  function findHostInstance() {
    return null;
  }

  function findNodeHandle(componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" === typeof componentOrHandle) return componentOrHandle;
    var internalInstance = componentOrHandle._reactInternalFiber;
    if (internalInstance) return findHostInstance(internalInstance) || null;
    if (componentOrHandle) return componentOrHandle;
    invariant("object" === typeof componentOrHandle && "_nativeTag" in componentOrHandle || null != componentOrHandle.render && "function" === typeof componentOrHandle.render, "findNodeHandle(...): Argument is not a component (type: %s, keys: %s)", typeof componentOrHandle, Object.keys(componentOrHandle));
    invariant(!1, "findNodeHandle(...): Unable to find node handle for unmounted component.");
  }

  function findNumericNodeHandleFiber(componentOrHandle) {
    componentOrHandle = findNodeHandle(componentOrHandle);
    return null == componentOrHandle || "number" === typeof componentOrHandle ? componentOrHandle : componentOrHandle._nativeTag;
  }

  function _inherits(subClass, superClass) {
    if ("function" !== typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    });
    superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
  }

  var ReactNativeComponent = function (_React$Component) {
    function ReactNativeComponent() {
      if (!(this instanceof ReactNativeComponent)) throw new TypeError("Cannot call a class as a function");

      var call = _React$Component.apply(this, arguments);

      if (!this) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return !call || "object" !== typeof call && "function" !== typeof call ? this : call;
    }

    _inherits(ReactNativeComponent, _React$Component);

    ReactNativeComponent.prototype.blur = function () {
      TextInputState.blurTextInput(findNumericNodeHandleFiber(this));
    };

    ReactNativeComponent.prototype.focus = function () {
      TextInputState.focusTextInput(findNumericNodeHandleFiber(this));
    };

    ReactNativeComponent.prototype.measure = function (callback) {
      UIManager.measure(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
    };

    ReactNativeComponent.prototype.measureInWindow = function (callback) {
      UIManager.measureInWindow(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
    };

    ReactNativeComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
      UIManager.measureLayout(findNumericNodeHandleFiber(this), relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
    };

    ReactNativeComponent.prototype.setNativeProps = function (nativeProps) {
      var maybeInstance = void 0;

      try {
        maybeInstance = findNodeHandle(this);
      } catch (error) {}

      if (null != maybeInstance) {
        var viewConfig = maybeInstance.viewConfig || maybeInstance.canonical.viewConfig;
        nativeProps = diffProperties(null, emptyObject$1, nativeProps, viewConfig.validAttributes);
        null != nativeProps && UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, nativeProps);
      }
    };

    return ReactNativeComponent;
  }(React.Component);

  function isFiberMountedImpl(fiber) {
    var node = fiber;
    if (fiber.alternate) for (; node["return"];) {
      node = node["return"];
    } else {
      if (0 !== (node.effectTag & 2)) return 1;

      for (; node["return"];) {
        if (node = node["return"], 0 !== (node.effectTag & 2)) return 1;
      }
    }
    return 3 === node.tag ? 2 : 3;
  }

  function isMounted(component) {
    return (component = component._reactInternalFiber) ? 2 === isFiberMountedImpl(component) : !1;
  }

  function assertIsMounted(fiber) {
    invariant(2 === isFiberMountedImpl(fiber), "Unable to find node on an unmounted component.");
  }

  function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;
    if (!alternate) return alternate = isFiberMountedImpl(fiber), invariant(3 !== alternate, "Unable to find node on an unmounted component."), 1 === alternate ? null : fiber;

    for (var a = fiber, b = alternate;;) {
      var parentA = a["return"],
          parentB = parentA ? parentA.alternate : null;
      if (!parentA || !parentB) break;

      if (parentA.child === parentB.child) {
        for (var child = parentA.child; child;) {
          if (child === a) return assertIsMounted(parentA), fiber;
          if (child === b) return assertIsMounted(parentA), alternate;
          child = child.sibling;
        }

        invariant(!1, "Unable to find node on an unmounted component.");
      }

      if (a["return"] !== b["return"]) a = parentA, b = parentB;else {
        child = !1;

        for (var _child = parentA.child; _child;) {
          if (_child === a) {
            child = !0;
            a = parentA;
            b = parentB;
            break;
          }

          if (_child === b) {
            child = !0;
            b = parentA;
            a = parentB;
            break;
          }

          _child = _child.sibling;
        }

        if (!child) {
          for (_child = parentB.child; _child;) {
            if (_child === a) {
              child = !0;
              a = parentB;
              b = parentA;
              break;
            }

            if (_child === b) {
              child = !0;
              b = parentB;
              a = parentA;
              break;
            }

            _child = _child.sibling;
          }

          invariant(child, "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
        }
      }
      invariant(a.alternate === b, "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
    }

    invariant(3 === a.tag, "Unable to find node on an unmounted component.");
    return a.stateNode.current === a ? fiber : alternate;
  }

  function findCurrentHostFiber(parent) {
    parent = findCurrentFiberUsingSlowPath(parent);
    if (!parent) return null;

    for (var node = parent;;) {
      if (5 === node.tag || 6 === node.tag) return node;
      if (node.child) node.child["return"] = node, node = node.child;else {
        if (node === parent) break;

        for (; !node.sibling;) {
          if (!node["return"] || node["return"] === parent) return null;
          node = node["return"];
        }

        node.sibling["return"] = node["return"];
        node = node.sibling;
      }
    }

    return null;
  }

  function findCurrentHostFiberWithNoPortals(parent) {
    parent = findCurrentFiberUsingSlowPath(parent);
    if (!parent) return null;

    for (var node = parent;;) {
      if (5 === node.tag || 6 === node.tag) return node;
      if (node.child && 4 !== node.tag) node.child["return"] = node, node = node.child;else {
        if (node === parent) break;

        for (; !node.sibling;) {
          if (!node["return"] || node["return"] === parent) return null;
          node = node["return"];
        }

        node.sibling["return"] = node["return"];
        node = node.sibling;
      }
    }

    return null;
  }

  var valueStack = [],
      index = -1;

  function pop(cursor) {
    0 > index || (cursor.current = valueStack[index], valueStack[index] = null, index--);
  }

  function push(cursor, value) {
    index++;
    valueStack[index] = cursor.current;
    cursor.current = value;
  }

  function getStackAddendumByWorkInProgressFiber(workInProgress) {
    var info = "";

    do {
      a: switch (workInProgress.tag) {
        case 0:
        case 1:
        case 2:
        case 5:
          var owner = workInProgress._debugOwner,
              source = workInProgress._debugSource;
          var JSCompiler_inline_result = getComponentName(workInProgress);
          var ownerName = null;
          owner && (ownerName = getComponentName(owner));
          owner = source;
          JSCompiler_inline_result = "\n    in " + (JSCompiler_inline_result || "Unknown") + (owner ? " (at " + owner.fileName.replace(/^.*[\\\/]/, "") + ":" + owner.lineNumber + ")" : ownerName ? " (created by " + ownerName + ")" : "");
          break a;

        default:
          JSCompiler_inline_result = "";
      }

      info += JSCompiler_inline_result;
      workInProgress = workInProgress["return"];
    } while (workInProgress);

    return info;
  }

  var _require = _require2(_dependencyMap[12], "ReactFeatureFlags"),
      enableGetDerivedStateFromCatch = _require.enableGetDerivedStateFromCatch,
      debugRenderPhaseSideEffects = _require.debugRenderPhaseSideEffects,
      debugRenderPhaseSideEffectsForStrictMode = _require.debugRenderPhaseSideEffectsForStrictMode;

  new Set();
  var contextStackCursor = {
    current: emptyObject
  },
      didPerformWorkStackCursor = {
    current: !1
  },
      previousContext = emptyObject;

  function getUnmaskedContext(workInProgress) {
    return isContextProvider(workInProgress) ? previousContext : contextStackCursor.current;
  }

  function getMaskedContext(workInProgress, unmaskedContext) {
    var contextTypes = workInProgress.type.contextTypes;
    if (!contextTypes) return emptyObject;
    var instance = workInProgress.stateNode;
    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
    var context = {},
        key;

    for (key in contextTypes) {
      context[key] = unmaskedContext[key];
    }

    instance && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return context;
  }

  function isContextProvider(fiber) {
    return 2 === fiber.tag && null != fiber.type.childContextTypes;
  }

  function popContextProvider(fiber) {
    isContextProvider(fiber) && (pop(didPerformWorkStackCursor, fiber), pop(contextStackCursor, fiber));
  }

  function pushTopLevelContextObject(fiber, context, didChange) {
    invariant(null == contextStackCursor.cursor, "Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
    push(contextStackCursor, context, fiber);
    push(didPerformWorkStackCursor, didChange, fiber);
  }

  function processChildContext(fiber, parentContext) {
    var instance = fiber.stateNode,
        childContextTypes = fiber.type.childContextTypes;
    if ("function" !== typeof instance.getChildContext) return parentContext;
    instance = instance.getChildContext();

    for (var contextKey in instance) {
      invariant(contextKey in childContextTypes, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(fiber) || "Unknown", contextKey);
    }

    return _extends({}, parentContext, instance);
  }

  function pushContextProvider(workInProgress) {
    if (!isContextProvider(workInProgress)) return !1;
    var instance = workInProgress.stateNode;
    instance = instance && instance.__reactInternalMemoizedMergedChildContext || emptyObject;
    previousContext = contextStackCursor.current;
    push(contextStackCursor, instance, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
    return !0;
  }

  function invalidateContextProvider(workInProgress, didChange) {
    var instance = workInProgress.stateNode;
    invariant(instance, "Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");

    if (didChange) {
      var mergedContext = processChildContext(workInProgress, previousContext);
      instance.__reactInternalMemoizedMergedChildContext = mergedContext;
      pop(didPerformWorkStackCursor, workInProgress);
      pop(contextStackCursor, workInProgress);
      push(contextStackCursor, mergedContext, workInProgress);
    } else pop(didPerformWorkStackCursor, workInProgress);

    push(didPerformWorkStackCursor, didChange, workInProgress);
  }

  function FiberNode(tag, pendingProps, key, mode) {
    this.tag = tag;
    this.key = key;
    this.stateNode = this.type = null;
    this.sibling = this.child = this["return"] = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = pendingProps;
    this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = mode;
    this.effectTag = 0;
    this.lastEffect = this.firstEffect = this.nextEffect = null;
    this.expirationTime = 0;
    this.alternate = null;
  }

  function createWorkInProgress(current, pendingProps, expirationTime) {
    var workInProgress = current.alternate;
    null === workInProgress ? (workInProgress = new FiberNode(current.tag, pendingProps, current.key, current.mode), workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.pendingProps = pendingProps, workInProgress.effectTag = 0, workInProgress.nextEffect = null, workInProgress.firstEffect = null, workInProgress.lastEffect = null);
    workInProgress.expirationTime = expirationTime;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue;
    workInProgress.sibling = current.sibling;
    workInProgress.index = current.index;
    workInProgress.ref = current.ref;
    return workInProgress;
  }

  function createFiberFromElement(element, mode, expirationTime) {
    var type = element.type,
        key = element.key;
    element = element.props;
    var fiberTag = void 0;
    if ("function" === typeof type) fiberTag = type.prototype && type.prototype.isReactComponent ? 2 : 0;else if ("string" === typeof type) fiberTag = 5;else switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(element.children, mode, expirationTime, key);

      case REACT_ASYNC_MODE_TYPE:
        fiberTag = 11;
        mode |= 3;
        break;

      case REACT_STRICT_MODE_TYPE:
        fiberTag = 11;
        mode |= 2;
        break;

      case REACT_CALL_TYPE:
        fiberTag = 7;
        break;

      case REACT_RETURN_TYPE:
        fiberTag = 9;
        break;

      default:
        if ("object" === typeof type && null !== type) switch (type.$$typeof) {
          case REACT_PROVIDER_TYPE:
            fiberTag = 13;
            break;

          case REACT_CONTEXT_TYPE:
            fiberTag = 12;
            break;

          default:
            if ("number" === typeof type.tag) return mode = type, mode.pendingProps = element, mode.expirationTime = expirationTime, mode;
            throwOnInvalidElementType(type, null);
        } else throwOnInvalidElementType(type, null);
    }
    mode = new FiberNode(fiberTag, element, key, mode);
    mode.type = type;
    mode.expirationTime = expirationTime;
    return mode;
  }

  function throwOnInvalidElementType(type) {
    invariant(!1, "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", null == type ? type : typeof type, "");
  }

  function createFiberFromFragment(elements, mode, expirationTime, key) {
    elements = new FiberNode(10, elements, key, mode);
    elements.expirationTime = expirationTime;
    return elements;
  }

  function createFiberFromText(content, mode, expirationTime) {
    content = new FiberNode(6, content, null, mode);
    content.expirationTime = expirationTime;
    return content;
  }

  function createFiberFromPortal(portal, mode, expirationTime) {
    mode = new FiberNode(4, null !== portal.children ? portal.children : [], portal.key, mode);
    mode.expirationTime = expirationTime;
    mode.stateNode = {
      containerInfo: portal.containerInfo,
      pendingChildren: null,
      implementation: portal.implementation
    };
    return mode;
  }

  var onCommitFiberRoot = null,
      onCommitFiberUnmount = null;

  function catchErrors(fn) {
    return function (arg) {
      try {
        return fn(arg);
      } catch (err) {}
    };
  }

  function injectInternals(internals) {
    if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return !1;
    var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (hook.isDisabled || !hook.supportsFiber) return !0;

    try {
      var rendererID = hook.inject(internals);
      onCommitFiberRoot = catchErrors(function (root) {
        return hook.onCommitFiberRoot(rendererID, root);
      });
      onCommitFiberUnmount = catchErrors(function (fiber) {
        return hook.onCommitFiberUnmount(rendererID, fiber);
      });
    } catch (err) {}

    return !0;
  }

  function onCommitRoot(root) {
    "function" === typeof onCommitFiberRoot && onCommitFiberRoot(root);
  }

  function onCommitUnmount(fiber) {
    "function" === typeof onCommitFiberUnmount && onCommitFiberUnmount(fiber);
  }

  function createUpdateQueue(baseState) {
    return {
      baseState: baseState,
      expirationTime: 0,
      first: null,
      last: null,
      callbackList: null,
      hasForceUpdate: !1,
      isInitialized: !1,
      capturedValues: null
    };
  }

  function insertUpdateIntoQueue(queue, update) {
    null === queue.last ? queue.first = queue.last = update : (queue.last.next = update, queue.last = update);
    if (0 === queue.expirationTime || queue.expirationTime > update.expirationTime) queue.expirationTime = update.expirationTime;
  }

  var q1 = void 0,
      q2 = void 0;

  function ensureUpdateQueues(fiber) {
    q1 = q2 = null;
    var alternateFiber = fiber.alternate,
        queue1 = fiber.updateQueue;
    null === queue1 && (queue1 = fiber.updateQueue = createUpdateQueue(null));
    null !== alternateFiber ? (fiber = alternateFiber.updateQueue, null === fiber && (fiber = alternateFiber.updateQueue = createUpdateQueue(null))) : fiber = null;
    q1 = queue1;
    q2 = fiber !== queue1 ? fiber : null;
  }

  function insertUpdateIntoFiber(fiber, update) {
    ensureUpdateQueues(fiber);
    fiber = q1;
    var queue2 = q2;
    null === queue2 ? insertUpdateIntoQueue(fiber, update) : null === fiber.last || null === queue2.last ? (insertUpdateIntoQueue(fiber, update), insertUpdateIntoQueue(queue2, update)) : (insertUpdateIntoQueue(fiber, update), queue2.last = update);
  }

  function getStateFromUpdate(update, instance, prevState, props) {
    update = update.partialState;
    return "function" === typeof update ? update.call(instance, prevState, props) : update;
  }

  function processUpdateQueue(current, workInProgress, queue, instance, props, renderExpirationTime) {
    null !== current && current.updateQueue === queue && (queue = workInProgress.updateQueue = {
      baseState: queue.baseState,
      expirationTime: queue.expirationTime,
      first: queue.first,
      last: queue.last,
      isInitialized: queue.isInitialized,
      capturedValues: queue.capturedValues,
      callbackList: null,
      hasForceUpdate: !1
    });
    queue.expirationTime = 0;
    queue.isInitialized ? current = queue.baseState : (current = queue.baseState = workInProgress.memoizedState, queue.isInitialized = !0);

    for (var dontMutatePrevState = !0, update = queue.first, didSkip = !1; null !== update;) {
      var updateExpirationTime = update.expirationTime;

      if (updateExpirationTime > renderExpirationTime) {
        var remainingExpirationTime = queue.expirationTime;
        if (0 === remainingExpirationTime || remainingExpirationTime > updateExpirationTime) queue.expirationTime = updateExpirationTime;
        didSkip || (didSkip = !0, queue.baseState = current);
      } else {
        didSkip || (queue.first = update.next, null === queue.first && (queue.last = null));
        (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & 2) && getStateFromUpdate(update, instance, current, props);
        if (update.isReplace) current = getStateFromUpdate(update, instance, current, props), dontMutatePrevState = !0;else if (updateExpirationTime = getStateFromUpdate(update, instance, current, props)) current = dontMutatePrevState ? _extends({}, current, updateExpirationTime) : _extends(current, updateExpirationTime), dontMutatePrevState = !1;
        update.isForced && (queue.hasForceUpdate = !0);
        null !== update.callback && (updateExpirationTime = queue.callbackList, null === updateExpirationTime && (updateExpirationTime = queue.callbackList = []), updateExpirationTime.push(update));
        null !== update.capturedValue && (updateExpirationTime = queue.capturedValues, null === updateExpirationTime ? queue.capturedValues = [update.capturedValue] : updateExpirationTime.push(update.capturedValue));
      }

      update = update.next;
    }

    null !== queue.callbackList ? workInProgress.effectTag |= 32 : null !== queue.first || queue.hasForceUpdate || null !== queue.capturedValues || (workInProgress.updateQueue = null);
    didSkip || (queue.baseState = current);
    return current;
  }

  function commitCallbacks(queue, context) {
    var callbackList = queue.callbackList;
    if (null !== callbackList) for (queue.callbackList = null, queue = 0; queue < callbackList.length; queue++) {
      var update = callbackList[queue],
          _callback = update.callback;
      update.callback = null;
      invariant("function" === typeof _callback, "Invalid argument passed as callback. Expected a function. Instead received: %s", _callback);

      _callback.call(context);
    }
  }

  function callGetDerivedStateFromCatch(ctor, capturedValues) {
    for (var resultState = {}, i = 0; i < capturedValues.length; i++) {
      var partialState = ctor.getDerivedStateFromCatch.call(null, capturedValues[i].value);
      null !== partialState && void 0 !== partialState && _extends(resultState, partialState);
    }

    return resultState;
  }

  function ReactFiberClassComponent(scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState) {
    function checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext) {
      if (null === oldProps || null !== workInProgress.updateQueue && workInProgress.updateQueue.hasForceUpdate) return !0;
      var instance = workInProgress.stateNode;
      workInProgress = workInProgress.type;
      return "function" === typeof instance.shouldComponentUpdate ? instance.shouldComponentUpdate(newProps, newState, newContext) : workInProgress.prototype && workInProgress.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : !0;
    }

    function adoptClassInstance(workInProgress, instance) {
      instance.updater = updater;
      workInProgress.stateNode = instance;
      instance._reactInternalFiber = workInProgress;
    }

    function callComponentWillReceiveProps(workInProgress, instance, newProps, newContext) {
      workInProgress = instance.state;
      "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, newContext);
      "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, newContext);
      instance.state !== workInProgress && updater.enqueueReplaceState(instance, instance.state, null);
    }

    function callGetDerivedStateFromProps(workInProgress, instance, props) {
      instance = workInProgress.type;
      if ("function" === typeof instance.getDerivedStateFromProps) return (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & 2) && instance.getDerivedStateFromProps.call(null, props, workInProgress.memoizedState), instance.getDerivedStateFromProps.call(null, props, workInProgress.memoizedState);
    }

    var updater = {
      isMounted: isMounted,
      enqueueSetState: function enqueueSetState(instance, partialState, callback) {
        instance = instance._reactInternalFiber;
        callback = void 0 === callback ? null : callback;
        var expirationTime = computeExpirationForFiber(instance);
        insertUpdateIntoFiber(instance, {
          expirationTime: expirationTime,
          partialState: partialState,
          callback: callback,
          isReplace: !1,
          isForced: !1,
          capturedValue: null,
          next: null
        });
        scheduleWork(instance, expirationTime);
      },
      enqueueReplaceState: function enqueueReplaceState(instance, state, callback) {
        instance = instance._reactInternalFiber;
        callback = void 0 === callback ? null : callback;
        var expirationTime = computeExpirationForFiber(instance);
        insertUpdateIntoFiber(instance, {
          expirationTime: expirationTime,
          partialState: state,
          callback: callback,
          isReplace: !0,
          isForced: !1,
          capturedValue: null,
          next: null
        });
        scheduleWork(instance, expirationTime);
      },
      enqueueForceUpdate: function enqueueForceUpdate(instance, callback) {
        instance = instance._reactInternalFiber;
        callback = void 0 === callback ? null : callback;
        var expirationTime = computeExpirationForFiber(instance);
        insertUpdateIntoFiber(instance, {
          expirationTime: expirationTime,
          partialState: null,
          callback: callback,
          isReplace: !1,
          isForced: !0,
          capturedValue: null,
          next: null
        });
        scheduleWork(instance, expirationTime);
      }
    };
    return {
      adoptClassInstance: adoptClassInstance,
      callGetDerivedStateFromProps: callGetDerivedStateFromProps,
      constructClassInstance: function constructClassInstance(workInProgress, props) {
        var ctor = workInProgress.type,
            unmaskedContext = getUnmaskedContext(workInProgress),
            needsContext = 2 === workInProgress.tag && null != workInProgress.type.contextTypes,
            context = needsContext ? getMaskedContext(workInProgress, unmaskedContext) : emptyObject;
        (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & 2) && new ctor(props, context);
        ctor = new ctor(props, context);
        var state = null !== ctor.state && void 0 !== ctor.state ? ctor.state : null;
        adoptClassInstance(workInProgress, ctor);
        workInProgress.memoizedState = state;
        props = callGetDerivedStateFromProps(workInProgress, ctor, props);
        null !== props && void 0 !== props && (workInProgress.memoizedState = _extends({}, workInProgress.memoizedState, props));
        needsContext && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
        return ctor;
      },
      mountClassInstance: function mountClassInstance(workInProgress, renderExpirationTime) {
        var ctor = workInProgress.type,
            current = workInProgress.alternate,
            instance = workInProgress.stateNode,
            props = workInProgress.pendingProps,
            unmaskedContext = getUnmaskedContext(workInProgress);
        instance.props = props;
        instance.state = workInProgress.memoizedState;
        instance.refs = emptyObject;
        instance.context = getMaskedContext(workInProgress, unmaskedContext);
        "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || "function" === typeof ctor.getDerivedStateFromProps || (ctor = instance.state, "function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount(), ctor !== instance.state && updater.enqueueReplaceState(instance, instance.state, null), ctor = workInProgress.updateQueue, null !== ctor && (instance.state = processUpdateQueue(current, workInProgress, ctor, instance, props, renderExpirationTime)));
        "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4);
      },
      resumeMountClassInstance: function resumeMountClassInstance(workInProgress, renderExpirationTime) {
        var ctor = workInProgress.type,
            instance = workInProgress.stateNode;
        instance.props = workInProgress.memoizedProps;
        instance.state = workInProgress.memoizedState;
        var oldProps = workInProgress.memoizedProps,
            newProps = workInProgress.pendingProps,
            oldContext = instance.context,
            newUnmaskedContext = getUnmaskedContext(workInProgress);
        newUnmaskedContext = getMaskedContext(workInProgress, newUnmaskedContext);
        "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || "function" === typeof ctor.getDerivedStateFromProps || (oldProps !== newProps || oldContext !== newUnmaskedContext) && callComponentWillReceiveProps(workInProgress, instance, newProps, newUnmaskedContext);
        oldContext = void 0;
        oldProps !== newProps && (oldContext = callGetDerivedStateFromProps(workInProgress, instance, newProps));
        var oldState = workInProgress.memoizedState,
            derivedStateFromCatch = void 0;

        if (null !== workInProgress.updateQueue) {
          renderExpirationTime = processUpdateQueue(null, workInProgress, workInProgress.updateQueue, instance, newProps, renderExpirationTime);
          var updateQueue = workInProgress.updateQueue;
          null !== updateQueue && null !== updateQueue.capturedValues && enableGetDerivedStateFromCatch && "function" === typeof ctor.getDerivedStateFromCatch && (derivedStateFromCatch = callGetDerivedStateFromCatch(ctor, updateQueue.capturedValues));
        } else renderExpirationTime = oldState;

        null !== oldContext && void 0 !== oldContext && (renderExpirationTime = null === renderExpirationTime || void 0 === renderExpirationTime ? oldContext : _extends({}, renderExpirationTime, oldContext));
        null !== derivedStateFromCatch && void 0 !== derivedStateFromCatch && (renderExpirationTime = null === renderExpirationTime || void 0 === renderExpirationTime ? derivedStateFromCatch : _extends({}, renderExpirationTime, derivedStateFromCatch));
        if (!(oldProps !== newProps || oldState !== renderExpirationTime || didPerformWorkStackCursor.current || null !== workInProgress.updateQueue && workInProgress.updateQueue.hasForceUpdate)) return "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4), !1;
        (oldProps = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, renderExpirationTime, newUnmaskedContext)) ? ("function" !== typeof instance.UNSAFE_componentWillUpdate && "function" !== typeof instance.componentWillUpdate || "function" === typeof ctor.getDerivedStateFromProps || ("function" === typeof instance.componentWillUpdate && instance.componentWillUpdate(newProps, renderExpirationTime, newUnmaskedContext), "function" === typeof instance.UNSAFE_componentWillUpdate && instance.UNSAFE_componentWillUpdate(newProps, renderExpirationTime, newUnmaskedContext)), "function" === typeof instance.componentDidUpdate && (workInProgress.effectTag |= 4)) : ("function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4), memoizeProps(workInProgress, newProps), memoizeState(workInProgress, renderExpirationTime));
        instance.props = newProps;
        instance.state = renderExpirationTime;
        instance.context = newUnmaskedContext;
        return oldProps;
      },
      updateClassInstance: function updateClassInstance(current, workInProgress, renderExpirationTime) {
        var ctor = workInProgress.type,
            instance = workInProgress.stateNode;
        instance.props = workInProgress.memoizedProps;
        instance.state = workInProgress.memoizedState;
        var oldProps = workInProgress.memoizedProps,
            newProps = workInProgress.pendingProps,
            oldContext = instance.context,
            newUnmaskedContext = getUnmaskedContext(workInProgress);
        newUnmaskedContext = getMaskedContext(workInProgress, newUnmaskedContext);
        "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || "function" === typeof ctor.getDerivedStateFromProps || (oldProps !== newProps || oldContext !== newUnmaskedContext) && callComponentWillReceiveProps(workInProgress, instance, newProps, newUnmaskedContext);
        var derivedStateFromProps = void 0;
        oldProps !== newProps && (derivedStateFromProps = callGetDerivedStateFromProps(workInProgress, instance, newProps));
        oldContext = workInProgress.memoizedState;
        var derivedStateFromCatch = void 0;

        if (null !== workInProgress.updateQueue) {
          renderExpirationTime = processUpdateQueue(current, workInProgress, workInProgress.updateQueue, instance, newProps, renderExpirationTime);
          var updateQueue = workInProgress.updateQueue;
          null !== updateQueue && null !== updateQueue.capturedValues && enableGetDerivedStateFromCatch && "function" === typeof ctor.getDerivedStateFromCatch && (derivedStateFromCatch = callGetDerivedStateFromCatch(ctor, updateQueue.capturedValues));
        } else renderExpirationTime = oldContext;

        null !== derivedStateFromProps && void 0 !== derivedStateFromProps && (renderExpirationTime = null === renderExpirationTime || void 0 === renderExpirationTime ? derivedStateFromProps : _extends({}, renderExpirationTime, derivedStateFromProps));
        null !== derivedStateFromCatch && void 0 !== derivedStateFromCatch && (renderExpirationTime = null === renderExpirationTime || void 0 === renderExpirationTime ? derivedStateFromCatch : _extends({}, renderExpirationTime, derivedStateFromCatch));
        if (!(oldProps !== newProps || oldContext !== renderExpirationTime || didPerformWorkStackCursor.current || null !== workInProgress.updateQueue && workInProgress.updateQueue.hasForceUpdate)) return "function" !== typeof instance.componentDidUpdate || oldProps === current.memoizedProps && oldContext === current.memoizedState || (workInProgress.effectTag |= 4), !1;
        (derivedStateFromProps = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldContext, renderExpirationTime, newUnmaskedContext)) ? ("function" !== typeof instance.UNSAFE_componentWillUpdate && "function" !== typeof instance.componentWillUpdate || "function" === typeof ctor.getDerivedStateFromProps || ("function" === typeof instance.componentWillUpdate && instance.componentWillUpdate(newProps, renderExpirationTime, newUnmaskedContext), "function" === typeof instance.UNSAFE_componentWillUpdate && instance.UNSAFE_componentWillUpdate(newProps, renderExpirationTime, newUnmaskedContext)), "function" === typeof instance.componentDidUpdate && (workInProgress.effectTag |= 4)) : ("function" !== typeof instance.componentDidUpdate || oldProps === current.memoizedProps && oldContext === current.memoizedState || (workInProgress.effectTag |= 4), memoizeProps(workInProgress, newProps), memoizeState(workInProgress, renderExpirationTime));
        instance.props = newProps;
        instance.state = renderExpirationTime;
        instance.context = newUnmaskedContext;
        return derivedStateFromProps;
      }
    };
  }

  var isArray$1 = Array.isArray;

  function coerceRef(returnFiber, current, element) {
    returnFiber = element.ref;

    if (null !== returnFiber && "function" !== typeof returnFiber && "object" !== typeof returnFiber) {
      if (element._owner) {
        element = element._owner;
        var inst = void 0;
        element && (invariant(2 === element.tag, "Stateless function components cannot have refs."), inst = element.stateNode);
        invariant(inst, "Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.", returnFiber);
        var stringRef = "" + returnFiber;
        if (null !== current && null !== current.ref && current.ref._stringRef === stringRef) return current.ref;

        current = function current(value) {
          var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
          null === value ? delete refs[stringRef] : refs[stringRef] = value;
        };

        current._stringRef = stringRef;
        return current;
      }

      invariant("string" === typeof returnFiber, "Expected ref to be a function or a string.");
      invariant(element._owner, "Element ref was specified as a string (%s) but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a functional component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.", returnFiber);
    }

    return returnFiber;
  }

  function throwOnInvalidObjectType(returnFiber, newChild) {
    "textarea" !== returnFiber.type && invariant(!1, "Objects are not valid as a React child (found: %s).%s", "[object Object]" === Object.prototype.toString.call(newChild) ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild, "");
  }

  function ChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
      if (shouldTrackSideEffects) {
        var last = returnFiber.lastEffect;
        null !== last ? (last.nextEffect = childToDelete, returnFiber.lastEffect = childToDelete) : returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        childToDelete.nextEffect = null;
        childToDelete.effectTag = 8;
      }
    }

    function deleteRemainingChildren(returnFiber, currentFirstChild) {
      if (!shouldTrackSideEffects) return null;

      for (; null !== currentFirstChild;) {
        deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return null;
    }

    function mapRemainingChildren(returnFiber, currentFirstChild) {
      for (returnFiber = new Map(); null !== currentFirstChild;) {
        null !== currentFirstChild.key ? returnFiber.set(currentFirstChild.key, currentFirstChild) : returnFiber.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return returnFiber;
    }

    function useFiber(fiber, pendingProps, expirationTime) {
      fiber = createWorkInProgress(fiber, pendingProps, expirationTime);
      fiber.index = 0;
      fiber.sibling = null;
      return fiber;
    }

    function placeChild(newFiber, lastPlacedIndex, newIndex) {
      newFiber.index = newIndex;
      if (!shouldTrackSideEffects) return lastPlacedIndex;
      newIndex = newFiber.alternate;
      if (null !== newIndex) return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.effectTag = 2, lastPlacedIndex) : newIndex;
      newFiber.effectTag = 2;
      return lastPlacedIndex;
    }

    function placeSingleChild(newFiber) {
      shouldTrackSideEffects && null === newFiber.alternate && (newFiber.effectTag = 2);
      return newFiber;
    }

    function updateTextNode(returnFiber, current, textContent, expirationTime) {
      if (null === current || 6 !== current.tag) return current = createFiberFromText(textContent, returnFiber.mode, expirationTime), current["return"] = returnFiber, current;
      current = useFiber(current, textContent, expirationTime);
      current["return"] = returnFiber;
      return current;
    }

    function updateElement(returnFiber, current, element, expirationTime) {
      if (null !== current && current.type === element.type) return expirationTime = useFiber(current, element.props, expirationTime), expirationTime.ref = coerceRef(returnFiber, current, element), expirationTime["return"] = returnFiber, expirationTime;
      expirationTime = createFiberFromElement(element, returnFiber.mode, expirationTime);
      expirationTime.ref = coerceRef(returnFiber, current, element);
      expirationTime["return"] = returnFiber;
      return expirationTime;
    }

    function updatePortal(returnFiber, current, portal, expirationTime) {
      if (null === current || 4 !== current.tag || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) return current = createFiberFromPortal(portal, returnFiber.mode, expirationTime), current["return"] = returnFiber, current;
      current = useFiber(current, portal.children || [], expirationTime);
      current["return"] = returnFiber;
      return current;
    }

    function updateFragment(returnFiber, current, fragment, expirationTime, key) {
      if (null === current || 10 !== current.tag) return current = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key), current["return"] = returnFiber, current;
      current = useFiber(current, fragment, expirationTime);
      current["return"] = returnFiber;
      return current;
    }

    function createChild(returnFiber, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = createFiberFromText("" + newChild, returnFiber.mode, expirationTime), newChild["return"] = returnFiber, newChild;

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return expirationTime = createFiberFromElement(newChild, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, null, newChild), expirationTime["return"] = returnFiber, expirationTime;

          case REACT_PORTAL_TYPE:
            return newChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime), newChild["return"] = returnFiber, newChild;
        }

        if (isArray$1(newChild) || getIteratorFn(newChild)) return newChild = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null), newChild["return"] = returnFiber, newChild;
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
      var key = null !== oldFiber ? oldFiber.key : null;
      if ("string" === typeof newChild || "number" === typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return newChild.key === key ? newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key) : updateElement(returnFiber, oldFiber, newChild, expirationTime) : null;

          case REACT_PORTAL_TYPE:
            return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, expirationTime) : null;
        }

        if (isArray$1(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, existingChildren, newChild.props.children, expirationTime, newChild.key) : updateElement(returnFiber, existingChildren, newChild, expirationTime);

          case REACT_PORTAL_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, expirationTime);
        }

        if (isArray$1(newChild) || getIteratorFn(newChild)) return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
      for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;

      if (null === oldFiber) {
        for (; newIdx < newChildren.length; newIdx++) {
          if (oldFiber = createChild(returnFiber, newChildren[newIdx], expirationTime)) currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber;
        }

        return resultingFirstChild;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) {
        if (nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], expirationTime)) {
          if (shouldTrackSideEffects && null !== nextOldFiber.alternate) oldFiber["delete"](null === nextOldFiber.key ? newIdx : nextOldFiber.key);
          currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx);
          null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber;
          previousNewFiber = nextOldFiber;
        }
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return resultingFirstChild;
    }

    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
      var iteratorFn = getIteratorFn(newChildrenIterable);
      invariant("function" === typeof iteratorFn, "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
      newChildrenIterable = iteratorFn.call(newChildrenIterable);
      invariant(null != newChildrenIterable, "An iterable object provided no iterator.");

      for (var previousNewFiber = iteratorFn = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildrenIterable.next(); null !== oldFiber && !step.done; newIdx++, step = newChildrenIterable.next()) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

        if (null === newFiber) {
          oldFiber || (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? iteratorFn = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), iteratorFn;

      if (null === oldFiber) {
        for (; !step.done; newIdx++, step = newChildrenIterable.next()) {
          step = createChild(returnFiber, step.value, expirationTime), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
        }

        return iteratorFn;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); !step.done; newIdx++, step = newChildrenIterable.next()) {
        if (step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, expirationTime), null !== step) {
          if (shouldTrackSideEffects && null !== step.alternate) oldFiber["delete"](null === step.key ? newIdx : step.key);
          currentFirstChild = placeChild(step, currentFirstChild, newIdx);
          null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step;
          previousNewFiber = step;
        }
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return iteratorFn;
    }

    return function (returnFiber, currentFirstChild, newChild, expirationTime) {
      "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key && (newChild = newChild.props.children);
      var isObject = "object" === typeof newChild && null !== newChild;
      if (isObject) switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          a: {
            var key = newChild.key;

            for (isObject = currentFirstChild; null !== isObject;) {
              if (isObject.key === key) {
                if (10 === isObject.tag ? newChild.type === REACT_FRAGMENT_TYPE : isObject.type === newChild.type) {
                  deleteRemainingChildren(returnFiber, isObject.sibling);
                  currentFirstChild = useFiber(isObject, newChild.type === REACT_FRAGMENT_TYPE ? newChild.props.children : newChild.props, expirationTime);
                  currentFirstChild.ref = coerceRef(returnFiber, isObject, newChild);
                  currentFirstChild["return"] = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                } else {
                  deleteRemainingChildren(returnFiber, isObject);
                  break;
                }
              } else deleteChild(returnFiber, isObject);
              isObject = isObject.sibling;
            }

            newChild.type === REACT_FRAGMENT_TYPE ? (currentFirstChild = createFiberFromFragment(newChild.props.children, returnFiber.mode, expirationTime, newChild.key), currentFirstChild["return"] = returnFiber, returnFiber = currentFirstChild) : (expirationTime = createFiberFromElement(newChild, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, currentFirstChild, newChild), expirationTime["return"] = returnFiber, returnFiber = expirationTime);
          }

          return placeSingleChild(returnFiber);

        case REACT_PORTAL_TYPE:
          a: {
            for (isObject = newChild.key; null !== currentFirstChild;) {
              if (currentFirstChild.key === isObject) {
                if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                  deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                  currentFirstChild = useFiber(currentFirstChild, newChild.children || [], expirationTime);
                  currentFirstChild["return"] = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                } else {
                  deleteRemainingChildren(returnFiber, currentFirstChild);
                  break;
                }
              } else deleteChild(returnFiber, currentFirstChild);
              currentFirstChild = currentFirstChild.sibling;
            }

            currentFirstChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
            currentFirstChild["return"] = returnFiber;
            returnFiber = currentFirstChild;
          }

          return placeSingleChild(returnFiber);
      }
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), currentFirstChild = useFiber(currentFirstChild, newChild, expirationTime)) : (deleteRemainingChildren(returnFiber, currentFirstChild), currentFirstChild = createFiberFromText(newChild, returnFiber.mode, expirationTime)), currentFirstChild["return"] = returnFiber, returnFiber = currentFirstChild, placeSingleChild(returnFiber);
      if (isArray$1(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
      if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
      isObject && throwOnInvalidObjectType(returnFiber, newChild);
      if ("undefined" === typeof newChild) switch (returnFiber.tag) {
        case 2:
        case 1:
          expirationTime = returnFiber.type, invariant(!1, "%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.", expirationTime.displayName || expirationTime.name || "Component");
      }
      return deleteRemainingChildren(returnFiber, currentFirstChild);
    };
  }

  var reconcileChildFibers = ChildReconciler(!0),
      mountChildFibers = ChildReconciler(!1),
      changedBitsStack = [],
      currentValueStack = [],
      stack = [],
      index$1 = -1;

  function pushProvider(providerFiber) {
    var context = providerFiber.type.context;
    index$1 += 1;
    changedBitsStack[index$1] = context._changedBits;
    currentValueStack[index$1] = context._currentValue;
    stack[index$1] = providerFiber;
    context._currentValue = providerFiber.pendingProps.value;
    context._changedBits = providerFiber.stateNode;
  }

  function popProvider(providerFiber) {
    var changedBits = changedBitsStack[index$1],
        currentValue = currentValueStack[index$1];
    changedBitsStack[index$1] = null;
    currentValueStack[index$1] = null;
    stack[index$1] = null;
    --index$1;
    providerFiber = providerFiber.type.context;
    providerFiber._currentValue = currentValue;
    providerFiber._changedBits = changedBits;
  }

  function ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleWork, computeExpirationForFiber) {
    function reconcileChildren(current, workInProgress, nextChildren) {
      reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, workInProgress.expirationTime);
    }

    function reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime) {
      workInProgress.child = null === current ? mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime) : reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
    }

    function markRef(current, workInProgress) {
      var ref = workInProgress.ref;
      if (null === current && null !== ref || null !== current && current.ref !== ref) workInProgress.effectTag |= 128;
    }

    function finishClassComponent(current, workInProgress, shouldUpdate, hasContext, didCaptureError, renderExpirationTime) {
      markRef(current, workInProgress);
      if (!shouldUpdate && !didCaptureError) return hasContext && invalidateContextProvider(workInProgress, !1), bailoutOnAlreadyFinishedWork(current, workInProgress);
      var ctor = workInProgress.type;
      shouldUpdate = workInProgress.stateNode;
      ReactCurrentOwner.current = workInProgress;
      !didCaptureError || enableGetDerivedStateFromCatch && "function" === typeof ctor.getDerivedStateFromCatch ? ((debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & 2) && shouldUpdate.render(), ctor = shouldUpdate.render()) : ctor = null;
      workInProgress.effectTag |= 1;
      didCaptureError && (reconcileChildrenAtExpirationTime(current, workInProgress, null, renderExpirationTime), workInProgress.child = null);
      reconcileChildrenAtExpirationTime(current, workInProgress, ctor, renderExpirationTime);
      workInProgress.memoizedState = shouldUpdate.state;
      workInProgress.memoizedProps = shouldUpdate.props;
      hasContext && invalidateContextProvider(workInProgress, !0);
      return workInProgress.child;
    }

    function pushHostRootContext(workInProgress) {
      var root = workInProgress.stateNode;
      root.pendingContext ? pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context) : root.context && pushTopLevelContextObject(workInProgress, root.context, !1);
      pushHostContainer(workInProgress, root.containerInfo);
    }

    function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
      for (var fiber = workInProgress.child; null !== fiber;) {
        switch (fiber.tag) {
          case 12:
            var nextFiber = fiber.stateNode | 0;

            if (fiber.type === context && 0 !== (nextFiber & changedBits)) {
              for (nextFiber = fiber; null !== nextFiber;) {
                var alternate = nextFiber.alternate;
                if (0 === nextFiber.expirationTime || nextFiber.expirationTime > renderExpirationTime) nextFiber.expirationTime = renderExpirationTime, null !== alternate && (0 === alternate.expirationTime || alternate.expirationTime > renderExpirationTime) && (alternate.expirationTime = renderExpirationTime);else if (null !== alternate && (0 === alternate.expirationTime || alternate.expirationTime > renderExpirationTime)) alternate.expirationTime = renderExpirationTime;else break;
                nextFiber = nextFiber["return"];
              }

              nextFiber = null;
            } else nextFiber = fiber.child;

            break;

          case 13:
            nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
            break;

          default:
            nextFiber = fiber.child;
        }

        if (null !== nextFiber) nextFiber["return"] = fiber;else for (nextFiber = fiber; null !== nextFiber;) {
          if (nextFiber === workInProgress) {
            nextFiber = null;
            break;
          }

          fiber = nextFiber.sibling;

          if (null !== fiber) {
            nextFiber = fiber;
            break;
          }

          nextFiber = nextFiber["return"];
        }
        fiber = nextFiber;
      }
    }

    function updateContextProvider(current, workInProgress, renderExpirationTime) {
      var context = workInProgress.type.context,
          newProps = workInProgress.pendingProps,
          oldProps = workInProgress.memoizedProps;
      if (!didPerformWorkStackCursor.current && oldProps === newProps) return workInProgress.stateNode = 0, pushProvider(workInProgress), bailoutOnAlreadyFinishedWork(current, workInProgress);
      var newValue = newProps.value;
      workInProgress.memoizedProps = newProps;
      if (null === oldProps) newValue = 1073741823;else if (oldProps.value === newProps.value) {
        if (oldProps.children === newProps.children) return workInProgress.stateNode = 0, pushProvider(workInProgress), bailoutOnAlreadyFinishedWork(current, workInProgress);
        newValue = 0;
      } else {
        var oldValue = oldProps.value;

        if (oldValue === newValue && (0 !== oldValue || 1 / oldValue === 1 / newValue) || oldValue !== oldValue && newValue !== newValue) {
          if (oldProps.children === newProps.children) return workInProgress.stateNode = 0, pushProvider(workInProgress), bailoutOnAlreadyFinishedWork(current, workInProgress);
          newValue = 0;
        } else if (newValue = "function" === typeof context._calculateChangedBits ? context._calculateChangedBits(oldValue, newValue) : 1073741823, newValue |= 0, 0 === newValue) {
          if (oldProps.children === newProps.children) return workInProgress.stateNode = 0, pushProvider(workInProgress), bailoutOnAlreadyFinishedWork(current, workInProgress);
        } else propagateContextChange(workInProgress, context, newValue, renderExpirationTime);
      }
      workInProgress.stateNode = newValue;
      pushProvider(workInProgress);
      reconcileChildren(current, workInProgress, newProps.children);
      return workInProgress.child;
    }

    function bailoutOnAlreadyFinishedWork(current, workInProgress) {
      invariant(null === current || workInProgress.child === current.child, "Resuming work not yet implemented.");

      if (null !== workInProgress.child) {
        current = workInProgress.child;
        var newChild = createWorkInProgress(current, current.pendingProps, current.expirationTime);
        workInProgress.child = newChild;

        for (newChild["return"] = workInProgress; null !== current.sibling;) {
          current = current.sibling, newChild = newChild.sibling = createWorkInProgress(current, current.pendingProps, current.expirationTime), newChild["return"] = workInProgress;
        }

        newChild.sibling = null;
      }

      return workInProgress.child;
    }

    var shouldSetTextContent = config.shouldSetTextContent,
        shouldDeprioritizeSubtree = config.shouldDeprioritizeSubtree,
        pushHostContext = hostContext.pushHostContext,
        pushHostContainer = hostContext.pushHostContainer,
        enterHydrationState = hydrationContext.enterHydrationState,
        resetHydrationState = hydrationContext.resetHydrationState,
        tryToClaimNextHydratableInstance = hydrationContext.tryToClaimNextHydratableInstance;
    config = ReactFiberClassComponent(scheduleWork, computeExpirationForFiber, function (workInProgress, nextProps) {
      workInProgress.memoizedProps = nextProps;
    }, function (workInProgress, nextState) {
      workInProgress.memoizedState = nextState;
    });
    var adoptClassInstance = config.adoptClassInstance,
        callGetDerivedStateFromProps = config.callGetDerivedStateFromProps,
        constructClassInstance = config.constructClassInstance,
        mountClassInstance = config.mountClassInstance,
        resumeMountClassInstance = config.resumeMountClassInstance,
        updateClassInstance = config.updateClassInstance;
    return {
      beginWork: function beginWork(current, workInProgress, renderExpirationTime) {
        if (0 === workInProgress.expirationTime || workInProgress.expirationTime > renderExpirationTime) {
          switch (workInProgress.tag) {
            case 3:
              pushHostRootContext(workInProgress);
              break;

            case 2:
              pushContextProvider(workInProgress);
              break;

            case 4:
              pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
              break;

            case 13:
              pushProvider(workInProgress);
          }

          return null;
        }

        switch (workInProgress.tag) {
          case 0:
            invariant(null === current, "An indeterminate component should never have mounted. This error is likely caused by a bug in React. Please file an issue.");
            var fn = workInProgress.type,
                props = workInProgress.pendingProps,
                unmaskedContext = getUnmaskedContext(workInProgress);
            unmaskedContext = getMaskedContext(workInProgress, unmaskedContext);
            fn = fn(props, unmaskedContext);
            workInProgress.effectTag |= 1;
            "object" === typeof fn && null !== fn && "function" === typeof fn.render && void 0 === fn.$$typeof ? (unmaskedContext = workInProgress.type, workInProgress.tag = 2, workInProgress.memoizedState = null !== fn.state && void 0 !== fn.state ? fn.state : null, "function" === typeof unmaskedContext.getDerivedStateFromProps && (props = callGetDerivedStateFromProps(workInProgress, fn, props), null !== props && void 0 !== props && (workInProgress.memoizedState = _extends({}, workInProgress.memoizedState, props))), props = pushContextProvider(workInProgress), adoptClassInstance(workInProgress, fn), mountClassInstance(workInProgress, renderExpirationTime), current = finishClassComponent(current, workInProgress, !0, props, !1, renderExpirationTime)) : (workInProgress.tag = 1, reconcileChildren(current, workInProgress, fn), workInProgress.memoizedProps = props, current = workInProgress.child);
            return current;

          case 1:
            return props = workInProgress.type, renderExpirationTime = workInProgress.pendingProps, didPerformWorkStackCursor.current || workInProgress.memoizedProps !== renderExpirationTime ? (fn = getUnmaskedContext(workInProgress), fn = getMaskedContext(workInProgress, fn), props = props(renderExpirationTime, fn), workInProgress.effectTag |= 1, reconcileChildren(current, workInProgress, props), workInProgress.memoizedProps = renderExpirationTime, current = workInProgress.child) : current = bailoutOnAlreadyFinishedWork(current, workInProgress), current;

          case 2:
            props = pushContextProvider(workInProgress);
            null === current ? null === workInProgress.stateNode ? (constructClassInstance(workInProgress, workInProgress.pendingProps), mountClassInstance(workInProgress, renderExpirationTime), fn = !0) : fn = resumeMountClassInstance(workInProgress, renderExpirationTime) : fn = updateClassInstance(current, workInProgress, renderExpirationTime);
            unmaskedContext = !1;
            var updateQueue = workInProgress.updateQueue;
            null !== updateQueue && null !== updateQueue.capturedValues && (unmaskedContext = fn = !0);
            return finishClassComponent(current, workInProgress, fn, props, unmaskedContext, renderExpirationTime);

          case 3:
            a: if (pushHostRootContext(workInProgress), fn = workInProgress.updateQueue, null !== fn) {
              unmaskedContext = workInProgress.memoizedState;
              props = processUpdateQueue(current, workInProgress, fn, null, null, renderExpirationTime);
              workInProgress.memoizedState = props;
              fn = workInProgress.updateQueue;
              if (null !== fn && null !== fn.capturedValues) fn = null;else if (unmaskedContext === props) {
                resetHydrationState();
                current = bailoutOnAlreadyFinishedWork(current, workInProgress);
                break a;
              } else fn = props.element;
              unmaskedContext = workInProgress.stateNode;
              (null === current || null === current.child) && unmaskedContext.hydrate && enterHydrationState(workInProgress) ? (workInProgress.effectTag |= 2, workInProgress.child = mountChildFibers(workInProgress, null, fn, renderExpirationTime)) : (resetHydrationState(), reconcileChildren(current, workInProgress, fn));
              workInProgress.memoizedState = props;
              current = workInProgress.child;
            } else resetHydrationState(), current = bailoutOnAlreadyFinishedWork(current, workInProgress);

            return current;

          case 5:
            a: {
              pushHostContext(workInProgress);
              null === current && tryToClaimNextHydratableInstance(workInProgress);
              props = workInProgress.type;
              updateQueue = workInProgress.memoizedProps;
              fn = workInProgress.pendingProps;
              unmaskedContext = null !== current ? current.memoizedProps : null;

              if (!didPerformWorkStackCursor.current && updateQueue === fn) {
                if (updateQueue = workInProgress.mode & 1 && shouldDeprioritizeSubtree(props, fn)) workInProgress.expirationTime = 1073741823;

                if (!updateQueue || 1073741823 !== renderExpirationTime) {
                  current = bailoutOnAlreadyFinishedWork(current, workInProgress);
                  break a;
                }
              }

              updateQueue = fn.children;
              shouldSetTextContent(props, fn) ? updateQueue = null : unmaskedContext && shouldSetTextContent(props, unmaskedContext) && (workInProgress.effectTag |= 16);
              markRef(current, workInProgress);
              1073741823 !== renderExpirationTime && workInProgress.mode & 1 && shouldDeprioritizeSubtree(props, fn) ? (workInProgress.expirationTime = 1073741823, workInProgress.memoizedProps = fn, current = null) : (reconcileChildren(current, workInProgress, updateQueue), workInProgress.memoizedProps = fn, current = workInProgress.child);
            }

            return current;

          case 6:
            return null === current && tryToClaimNextHydratableInstance(workInProgress), workInProgress.memoizedProps = workInProgress.pendingProps, null;

          case 8:
            workInProgress.tag = 7;

          case 7:
            return props = workInProgress.pendingProps, didPerformWorkStackCursor.current || workInProgress.memoizedProps !== props || (props = workInProgress.memoizedProps), fn = props.children, workInProgress.stateNode = null === current ? mountChildFibers(workInProgress, workInProgress.stateNode, fn, renderExpirationTime) : reconcileChildFibers(workInProgress, current.stateNode, fn, renderExpirationTime), workInProgress.memoizedProps = props, workInProgress.stateNode;

          case 9:
            return null;

          case 4:
            return pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo), props = workInProgress.pendingProps, didPerformWorkStackCursor.current || workInProgress.memoizedProps !== props ? (null === current ? workInProgress.child = reconcileChildFibers(workInProgress, null, props, renderExpirationTime) : reconcileChildren(current, workInProgress, props), workInProgress.memoizedProps = props, current = workInProgress.child) : current = bailoutOnAlreadyFinishedWork(current, workInProgress), current;

          case 10:
            return renderExpirationTime = workInProgress.pendingProps, didPerformWorkStackCursor.current || workInProgress.memoizedProps !== renderExpirationTime ? (reconcileChildren(current, workInProgress, renderExpirationTime), workInProgress.memoizedProps = renderExpirationTime, current = workInProgress.child) : current = bailoutOnAlreadyFinishedWork(current, workInProgress), current;

          case 11:
            return renderExpirationTime = workInProgress.pendingProps.children, didPerformWorkStackCursor.current || null !== renderExpirationTime && workInProgress.memoizedProps !== renderExpirationTime ? (reconcileChildren(current, workInProgress, renderExpirationTime), workInProgress.memoizedProps = renderExpirationTime, current = workInProgress.child) : current = bailoutOnAlreadyFinishedWork(current, workInProgress), current;

          case 13:
            return updateContextProvider(current, workInProgress, renderExpirationTime);

          case 12:
            a: {
              fn = workInProgress.type;
              unmaskedContext = workInProgress.pendingProps;
              updateQueue = workInProgress.memoizedProps;
              props = fn._currentValue;
              var changedBits = fn._changedBits;

              if (didPerformWorkStackCursor.current || 0 !== changedBits || updateQueue !== unmaskedContext) {
                workInProgress.memoizedProps = unmaskedContext;
                var observedBits = unmaskedContext.unstable_observedBits;
                if (void 0 === observedBits || null === observedBits) observedBits = 1073741823;
                workInProgress.stateNode = observedBits;
                if (0 !== (changedBits & observedBits)) propagateContextChange(workInProgress, fn, changedBits, renderExpirationTime);else if (null !== updateQueue && updateQueue.children === unmaskedContext.children) {
                  current = bailoutOnAlreadyFinishedWork(current, workInProgress);
                  break a;
                }
                renderExpirationTime = unmaskedContext.children;
                renderExpirationTime = renderExpirationTime(props);
                reconcileChildren(current, workInProgress, renderExpirationTime);
                current = workInProgress.child;
              } else current = bailoutOnAlreadyFinishedWork(current, workInProgress);
            }

            return current;

          default:
            invariant(!1, "Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    };
  }

  function ReactFiberCompleteWork(config, hostContext, hydrationContext) {
    function markUpdate(workInProgress) {
      workInProgress.effectTag |= 4;
    }

    var createInstance = config.createInstance,
        createTextInstance = config.createTextInstance,
        appendInitialChild = config.appendInitialChild,
        finalizeInitialChildren = config.finalizeInitialChildren,
        prepareUpdate = config.prepareUpdate,
        persistence = config.persistence,
        getRootHostContainer = hostContext.getRootHostContainer,
        popHostContext = hostContext.popHostContext,
        getHostContext = hostContext.getHostContext,
        popHostContainer = hostContext.popHostContainer,
        prepareToHydrateHostInstance = hydrationContext.prepareToHydrateHostInstance,
        prepareToHydrateHostTextInstance = hydrationContext.prepareToHydrateHostTextInstance,
        popHydrationState = hydrationContext.popHydrationState,
        updateHostContainer = void 0,
        updateHostComponent = void 0,
        updateHostText = void 0;
    config.mutation ? (updateHostContainer = function updateHostContainer() {}, updateHostComponent = function updateHostComponent(current, workInProgress, updatePayload) {
      (workInProgress.updateQueue = updatePayload) && markUpdate(workInProgress);
    }, updateHostText = function updateHostText(current, workInProgress, oldText, newText) {
      oldText !== newText && markUpdate(workInProgress);
    }) : persistence ? invariant(!1, "Persistent reconciler is disabled.") : invariant(!1, "Noop reconciler is disabled.");
    return {
      completeWork: function completeWork(current, workInProgress, renderExpirationTime) {
        var newProps = workInProgress.pendingProps;

        switch (workInProgress.tag) {
          case 1:
            return null;

          case 2:
            return popContextProvider(workInProgress), current = workInProgress.stateNode, newProps = workInProgress.updateQueue, null !== newProps && null !== newProps.capturedValues && (workInProgress.effectTag &= -65, "function" === typeof current.componentDidCatch ? workInProgress.effectTag |= 256 : newProps.capturedValues = null), null;

          case 3:
            popHostContainer(workInProgress);
            pop(didPerformWorkStackCursor, workInProgress);
            pop(contextStackCursor, workInProgress);
            newProps = workInProgress.stateNode;
            newProps.pendingContext && (newProps.context = newProps.pendingContext, newProps.pendingContext = null);
            if (null === current || null === current.child) popHydrationState(workInProgress), workInProgress.effectTag &= -3;
            updateHostContainer(workInProgress);
            current = workInProgress.updateQueue;
            null !== current && null !== current.capturedValues && (workInProgress.effectTag |= 256);
            return null;

          case 5:
            popHostContext(workInProgress);
            renderExpirationTime = getRootHostContainer();
            var type = workInProgress.type;

            if (null !== current && null != workInProgress.stateNode) {
              var oldProps = current.memoizedProps,
                  _instance = workInProgress.stateNode,
                  currentHostContext = getHostContext();
              _instance = prepareUpdate(_instance, type, oldProps, newProps, renderExpirationTime, currentHostContext);
              updateHostComponent(current, workInProgress, _instance, type, oldProps, newProps, renderExpirationTime, currentHostContext);
              current.ref !== workInProgress.ref && (workInProgress.effectTag |= 128);
            } else {
              if (!newProps) return invariant(null !== workInProgress.stateNode, "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."), null;
              current = getHostContext();
              if (popHydrationState(workInProgress)) prepareToHydrateHostInstance(workInProgress, renderExpirationTime, current) && markUpdate(workInProgress);else {
                oldProps = createInstance(type, newProps, renderExpirationTime, current, workInProgress);

                a: for (currentHostContext = workInProgress.child; null !== currentHostContext;) {
                  if (5 === currentHostContext.tag || 6 === currentHostContext.tag) appendInitialChild(oldProps, currentHostContext.stateNode);else if (4 !== currentHostContext.tag && null !== currentHostContext.child) {
                    currentHostContext.child["return"] = currentHostContext;
                    currentHostContext = currentHostContext.child;
                    continue;
                  }
                  if (currentHostContext === workInProgress) break;

                  for (; null === currentHostContext.sibling;) {
                    if (null === currentHostContext["return"] || currentHostContext["return"] === workInProgress) break a;
                    currentHostContext = currentHostContext["return"];
                  }

                  currentHostContext.sibling["return"] = currentHostContext["return"];
                  currentHostContext = currentHostContext.sibling;
                }

                finalizeInitialChildren(oldProps, type, newProps, renderExpirationTime, current) && markUpdate(workInProgress);
                workInProgress.stateNode = oldProps;
              }
              null !== workInProgress.ref && (workInProgress.effectTag |= 128);
            }

            return null;

          case 6:
            if (current && null != workInProgress.stateNode) updateHostText(current, workInProgress, current.memoizedProps, newProps);else {
              if ("string" !== typeof newProps) return invariant(null !== workInProgress.stateNode, "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."), null;
              current = getRootHostContainer();
              renderExpirationTime = getHostContext();
              popHydrationState(workInProgress) ? prepareToHydrateHostTextInstance(workInProgress) && markUpdate(workInProgress) : workInProgress.stateNode = createTextInstance(newProps, current, renderExpirationTime, workInProgress);
            }
            return null;

          case 7:
            newProps = workInProgress.memoizedProps;
            invariant(newProps, "Should be resolved by now. This error is likely caused by a bug in React. Please file an issue.");
            workInProgress.tag = 8;
            type = [];

            a: for ((oldProps = workInProgress.stateNode) && (oldProps["return"] = workInProgress); null !== oldProps;) {
              if (5 === oldProps.tag || 6 === oldProps.tag || 4 === oldProps.tag) invariant(!1, "A call cannot have host component children.");else if (9 === oldProps.tag) type.push(oldProps.pendingProps.value);else if (null !== oldProps.child) {
                oldProps.child["return"] = oldProps;
                oldProps = oldProps.child;
                continue;
              }

              for (; null === oldProps.sibling;) {
                if (null === oldProps["return"] || oldProps["return"] === workInProgress) break a;
                oldProps = oldProps["return"];
              }

              oldProps.sibling["return"] = oldProps["return"];
              oldProps = oldProps.sibling;
            }

            oldProps = newProps.handler;
            newProps = oldProps(newProps.props, type);
            workInProgress.child = reconcileChildFibers(workInProgress, null !== current ? current.child : null, newProps, renderExpirationTime);
            return workInProgress.child;

          case 8:
            return workInProgress.tag = 7, null;

          case 9:
            return null;

          case 10:
            return null;

          case 11:
            return null;

          case 4:
            return popHostContainer(workInProgress), updateHostContainer(workInProgress), null;

          case 13:
            return popProvider(workInProgress), null;

          case 12:
            return null;

          case 0:
            invariant(!1, "An indeterminate component should have become determinate before completing. This error is likely caused by a bug in React. Please file an issue.");

          default:
            invariant(!1, "Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    };
  }

  function ReactFiberUnwindWork(hostContext, scheduleWork, isAlreadyFailedLegacyErrorBoundary) {
    var popHostContainer = hostContext.popHostContainer,
        popHostContext = hostContext.popHostContext;
    return {
      throwException: function throwException(returnFiber, sourceFiber, rawValue) {
        sourceFiber.effectTag |= 512;
        sourceFiber.firstEffect = sourceFiber.lastEffect = null;
        sourceFiber = {
          value: rawValue,
          source: sourceFiber,
          stack: getStackAddendumByWorkInProgressFiber(sourceFiber)
        };

        do {
          switch (returnFiber.tag) {
            case 3:
              ensureUpdateQueues(returnFiber);
              returnFiber.updateQueue.capturedValues = [sourceFiber];
              returnFiber.effectTag |= 1024;
              return;

            case 2:
              rawValue = returnFiber.type;
              var _instance = returnFiber.stateNode;

              if (0 === (returnFiber.effectTag & 64) && ("function" === typeof rawValue.getDerivedStateFromCatch && enableGetDerivedStateFromCatch || null !== _instance && "function" === typeof _instance.componentDidCatch && !isAlreadyFailedLegacyErrorBoundary(_instance))) {
                ensureUpdateQueues(returnFiber);
                rawValue = returnFiber.updateQueue;
                _instance = rawValue.capturedValues;
                null === _instance ? rawValue.capturedValues = [sourceFiber] : _instance.push(sourceFiber);
                returnFiber.effectTag |= 1024;
                return;
              }

          }

          returnFiber = returnFiber["return"];
        } while (null !== returnFiber);
      },
      unwindWork: function unwindWork(workInProgress) {
        switch (workInProgress.tag) {
          case 2:
            popContextProvider(workInProgress);
            var effectTag = workInProgress.effectTag;
            return effectTag & 1024 ? (workInProgress.effectTag = effectTag & -1025 | 64, workInProgress) : null;

          case 3:
            return popHostContainer(workInProgress), pop(didPerformWorkStackCursor, workInProgress), pop(contextStackCursor, workInProgress), effectTag = workInProgress.effectTag, effectTag & 1024 ? (workInProgress.effectTag = effectTag & -1025 | 64, workInProgress) : null;

          case 5:
            return popHostContext(workInProgress), null;

          case 4:
            return popHostContainer(workInProgress), null;

          case 13:
            return popProvider(workInProgress), null;

          default:
            return null;
        }
      }
    };
  }

  function logError(boundary, errorInfo) {
    var source = errorInfo.source,
        stack = errorInfo.stack;
    null === stack && (stack = getStackAddendumByWorkInProgressFiber(source));
    null !== source && getComponentName(source);
    errorInfo = errorInfo.value;
    stack = null !== stack ? stack : "";
    null !== boundary && getComponentName(boundary);

    try {
      if (errorInfo instanceof Error) {
        var message = errorInfo.message,
            name = errorInfo.name;
        var errorToHandle = errorInfo;

        try {
          errorToHandle.message = (message ? name + ": " + message : name) + "\n\nThis error is located at:" + stack;
        } catch (e) {}
      } else errorToHandle = "string" === typeof errorInfo ? Error(errorInfo + "\n\nThis error is located at:" + stack) : Error("Unspecified error at:" + stack);

      ExceptionsManager.handleException(errorToHandle, !1);
    } catch (e) {
      e && e.suppressReactErrorLogging || console.error(e);
    }
  }

  function ReactFiberCommitWork(config, captureError, scheduleWork, computeExpirationForFiber, markLegacyErrorBoundaryAsFailed) {
    function safelyDetachRef(current) {
      var ref = current.ref;
      if (null !== ref) if ("function" === typeof ref) try {
        ref(null);
      } catch (refError) {
        captureError(current, refError);
      } else ref.value = null;
    }

    function commitUnmount(current) {
      "function" === typeof onCommitUnmount && onCommitUnmount(current);

      switch (current.tag) {
        case 2:
          safelyDetachRef(current);
          var _instance6 = current.stateNode;
          if ("function" === typeof _instance6.componentWillUnmount) try {
            _instance6.props = current.memoizedProps, _instance6.state = current.memoizedState, _instance6.componentWillUnmount();
          } catch (unmountError) {
            captureError(current, unmountError);
          }
          break;

        case 5:
          safelyDetachRef(current);
          break;

        case 7:
          commitNestedUnmounts(current.stateNode);
          break;

        case 4:
          mutation && unmountHostComponents(current);
      }
    }

    function commitNestedUnmounts(root) {
      for (var node = root;;) {
        if (commitUnmount(node), null === node.child || mutation && 4 === node.tag) {
          if (node === root) break;

          for (; null === node.sibling;) {
            if (null === node["return"] || node["return"] === root) return;
            node = node["return"];
          }

          node.sibling["return"] = node["return"];
          node = node.sibling;
        } else node.child["return"] = node, node = node.child;
      }
    }

    function isHostParent(fiber) {
      return 5 === fiber.tag || 3 === fiber.tag || 4 === fiber.tag;
    }

    function unmountHostComponents(current) {
      for (var node = current, currentParentIsValid = !1, currentParent = void 0, currentParentIsContainer = void 0;;) {
        if (!currentParentIsValid) {
          currentParentIsValid = node["return"];

          a: for (;;) {
            invariant(null !== currentParentIsValid, "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");

            switch (currentParentIsValid.tag) {
              case 5:
                currentParent = currentParentIsValid.stateNode;
                currentParentIsContainer = !1;
                break a;

              case 3:
                currentParent = currentParentIsValid.stateNode.containerInfo;
                currentParentIsContainer = !0;
                break a;

              case 4:
                currentParent = currentParentIsValid.stateNode.containerInfo;
                currentParentIsContainer = !0;
                break a;
            }

            currentParentIsValid = currentParentIsValid["return"];
          }

          currentParentIsValid = !0;
        }

        if (5 === node.tag || 6 === node.tag) commitNestedUnmounts(node), currentParentIsContainer ? removeChildFromContainer(currentParent, node.stateNode) : removeChild(currentParent, node.stateNode);else if (4 === node.tag ? currentParent = node.stateNode.containerInfo : commitUnmount(node), null !== node.child) {
          node.child["return"] = node;
          node = node.child;
          continue;
        }
        if (node === current) break;

        for (; null === node.sibling;) {
          if (null === node["return"] || node["return"] === current) return;
          node = node["return"];
          4 === node.tag && (currentParentIsValid = !1);
        }

        node.sibling["return"] = node["return"];
        node = node.sibling;
      }
    }

    var getPublicInstance = config.getPublicInstance,
        mutation = config.mutation;
    config = config.persistence;
    mutation || (config ? invariant(!1, "Persistent reconciler is disabled.") : invariant(!1, "Noop reconciler is disabled."));
    var commitMount = mutation.commitMount,
        commitUpdate = mutation.commitUpdate,
        resetTextContent = mutation.resetTextContent,
        commitTextUpdate = mutation.commitTextUpdate,
        appendChild = mutation.appendChild,
        appendChildToContainer = mutation.appendChildToContainer,
        insertBefore = mutation.insertBefore,
        insertInContainerBefore = mutation.insertInContainerBefore,
        removeChild = mutation.removeChild,
        removeChildFromContainer = mutation.removeChildFromContainer;
    return {
      commitResetTextContent: function commitResetTextContent(current) {
        resetTextContent(current.stateNode);
      },
      commitPlacement: function commitPlacement(finishedWork) {
        a: {
          for (var parent = finishedWork["return"]; null !== parent;) {
            if (isHostParent(parent)) {
              var parentFiber = parent;
              break a;
            }

            parent = parent["return"];
          }

          invariant(!1, "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          parentFiber = void 0;
        }

        var isContainer = parent = void 0;

        switch (parentFiber.tag) {
          case 5:
            parent = parentFiber.stateNode;
            isContainer = !1;
            break;

          case 3:
            parent = parentFiber.stateNode.containerInfo;
            isContainer = !0;
            break;

          case 4:
            parent = parentFiber.stateNode.containerInfo;
            isContainer = !0;
            break;

          default:
            invariant(!1, "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }

        parentFiber.effectTag & 16 && (resetTextContent(parent), parentFiber.effectTag &= -17);

        a: b: for (parentFiber = finishedWork;;) {
          for (; null === parentFiber.sibling;) {
            if (null === parentFiber["return"] || isHostParent(parentFiber["return"])) {
              parentFiber = null;
              break a;
            }

            parentFiber = parentFiber["return"];
          }

          parentFiber.sibling["return"] = parentFiber["return"];

          for (parentFiber = parentFiber.sibling; 5 !== parentFiber.tag && 6 !== parentFiber.tag;) {
            if (parentFiber.effectTag & 2) continue b;
            if (null === parentFiber.child || 4 === parentFiber.tag) continue b;else parentFiber.child["return"] = parentFiber, parentFiber = parentFiber.child;
          }

          if (!(parentFiber.effectTag & 2)) {
            parentFiber = parentFiber.stateNode;
            break a;
          }
        }

        for (var node = finishedWork;;) {
          if (5 === node.tag || 6 === node.tag) parentFiber ? isContainer ? insertInContainerBefore(parent, node.stateNode, parentFiber) : insertBefore(parent, node.stateNode, parentFiber) : isContainer ? appendChildToContainer(parent, node.stateNode) : appendChild(parent, node.stateNode);else if (4 !== node.tag && null !== node.child) {
            node.child["return"] = node;
            node = node.child;
            continue;
          }
          if (node === finishedWork) break;

          for (; null === node.sibling;) {
            if (null === node["return"] || node["return"] === finishedWork) return;
            node = node["return"];
          }

          node.sibling["return"] = node["return"];
          node = node.sibling;
        }
      },
      commitDeletion: function commitDeletion(current) {
        unmountHostComponents(current);
        current["return"] = null;
        current.child = null;
        current.alternate && (current.alternate.child = null, current.alternate["return"] = null);
      },
      commitWork: function commitWork(current, finishedWork) {
        switch (finishedWork.tag) {
          case 2:
            break;

          case 5:
            var _instance7 = finishedWork.stateNode;

            if (null != _instance7) {
              var newProps = finishedWork.memoizedProps;
              current = null !== current ? current.memoizedProps : newProps;
              var type = finishedWork.type,
                  updatePayload = finishedWork.updateQueue;
              finishedWork.updateQueue = null;
              null !== updatePayload && commitUpdate(_instance7, updatePayload, type, current, newProps, finishedWork);
            }

            break;

          case 6:
            invariant(null !== finishedWork.stateNode, "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
            _instance7 = finishedWork.memoizedProps;
            commitTextUpdate(finishedWork.stateNode, null !== current ? current.memoizedProps : _instance7, _instance7);
            break;

          case 3:
            break;

          default:
            invariant(!1, "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      },
      commitLifeCycles: function commitLifeCycles(finishedRoot, current, finishedWork) {
        switch (finishedWork.tag) {
          case 2:
            finishedRoot = finishedWork.stateNode;
            if (finishedWork.effectTag & 4) if (null === current) finishedRoot.props = finishedWork.memoizedProps, finishedRoot.state = finishedWork.memoizedState, finishedRoot.componentDidMount();else {
              var prevProps = current.memoizedProps;
              current = current.memoizedState;
              finishedRoot.props = finishedWork.memoizedProps;
              finishedRoot.state = finishedWork.memoizedState;
              finishedRoot.componentDidUpdate(prevProps, current);
            }
            finishedWork = finishedWork.updateQueue;
            null !== finishedWork && commitCallbacks(finishedWork, finishedRoot);
            break;

          case 3:
            current = finishedWork.updateQueue;

            if (null !== current) {
              finishedRoot = null;
              if (null !== finishedWork.child) switch (finishedWork.child.tag) {
                case 5:
                  finishedRoot = getPublicInstance(finishedWork.child.stateNode);
                  break;

                case 2:
                  finishedRoot = finishedWork.child.stateNode;
              }
              commitCallbacks(current, finishedRoot);
            }

            break;

          case 5:
            finishedRoot = finishedWork.stateNode;
            null === current && finishedWork.effectTag & 4 && commitMount(finishedRoot, finishedWork.type, finishedWork.memoizedProps, finishedWork);
            break;

          case 6:
            break;

          case 4:
            break;

          default:
            invariant(!1, "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      },
      commitErrorLogging: function commitErrorLogging(finishedWork, onUncaughtError) {
        switch (finishedWork.tag) {
          case 2:
            var ctor = finishedWork.type;
            onUncaughtError = finishedWork.stateNode;
            var updateQueue = finishedWork.updateQueue;
            invariant(null !== updateQueue && null !== updateQueue.capturedValues, "An error logging effect should not have been scheduled if no errors were captured. This error is likely caused by a bug in React. Please file an issue.");
            var capturedErrors = updateQueue.capturedValues;
            updateQueue.capturedValues = null;
            "function" !== typeof ctor.getDerivedStateFromCatch && markLegacyErrorBoundaryAsFailed(onUncaughtError);
            onUncaughtError.props = finishedWork.memoizedProps;
            onUncaughtError.state = finishedWork.memoizedState;

            for (ctor = 0; ctor < capturedErrors.length; ctor++) {
              updateQueue = capturedErrors[ctor];
              var _error = updateQueue.value;
              logError(finishedWork, updateQueue);
              onUncaughtError.componentDidCatch(_error);
            }

            break;

          case 3:
            ctor = finishedWork.updateQueue;
            invariant(null !== ctor && null !== ctor.capturedValues, "An error logging effect should not have been scheduled if no errors were captured. This error is likely caused by a bug in React. Please file an issue.");
            capturedErrors = ctor.capturedValues;
            ctor.capturedValues = null;

            for (ctor = 0; ctor < capturedErrors.length; ctor++) {
              updateQueue = capturedErrors[ctor], logError(finishedWork, updateQueue), onUncaughtError(updateQueue.value);
            }

            break;

          default:
            invariant(!1, "This unit of work tag cannot capture errors.  This error is likely caused by a bug in React. Please file an issue.");
        }
      },
      commitAttachRef: function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;

        if (null !== ref) {
          var _instance5 = finishedWork.stateNode;

          switch (finishedWork.tag) {
            case 5:
              finishedWork = getPublicInstance(_instance5);
              break;

            default:
              finishedWork = _instance5;
          }

          "function" === typeof ref ? ref(finishedWork) : ref.value = finishedWork;
        }
      },
      commitDetachRef: function commitDetachRef(current) {
        current = current.ref;
        null !== current && ("function" === typeof current ? current(null) : current.value = null);
      }
    };
  }

  var NO_CONTEXT = {};

  function ReactFiberHostContext(config) {
    function requiredContext(c) {
      invariant(c !== NO_CONTEXT, "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
      return c;
    }

    var getChildHostContext = config.getChildHostContext,
        getRootHostContext = config.getRootHostContext,
        contextStackCursor = {
      current: NO_CONTEXT
    },
        contextFiberStackCursor = {
      current: NO_CONTEXT
    },
        rootInstanceStackCursor = {
      current: NO_CONTEXT
    };
    return {
      getHostContext: function getHostContext() {
        return requiredContext(contextStackCursor.current);
      },
      getRootHostContainer: function getRootHostContainer() {
        return requiredContext(rootInstanceStackCursor.current);
      },
      popHostContainer: function popHostContainer(fiber) {
        pop(contextStackCursor, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
      },
      popHostContext: function popHostContext(fiber) {
        contextFiberStackCursor.current === fiber && (pop(contextStackCursor, fiber), pop(contextFiberStackCursor, fiber));
      },
      pushHostContainer: function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance, fiber);
        nextRootInstance = getRootHostContext(nextRootInstance);
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor, nextRootInstance, fiber);
      },
      pushHostContext: function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current),
            context = requiredContext(contextStackCursor.current);
        rootInstance = getChildHostContext(context, fiber.type, rootInstance);
        context !== rootInstance && (push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor, rootInstance, fiber));
      },
      resetHostContainer: function resetHostContainer() {
        contextStackCursor.current = NO_CONTEXT;
        rootInstanceStackCursor.current = NO_CONTEXT;
      }
    };
  }

  function ReactFiberHydrationContext(config) {
    function deleteHydratableInstance(returnFiber, instance) {
      var fiber = new FiberNode(5, null, null, 0);
      fiber.type = "DELETED";
      fiber.stateNode = instance;
      fiber["return"] = returnFiber;
      fiber.effectTag = 8;
      null !== returnFiber.lastEffect ? (returnFiber.lastEffect.nextEffect = fiber, returnFiber.lastEffect = fiber) : returnFiber.firstEffect = returnFiber.lastEffect = fiber;
    }

    function tryHydrate(fiber, nextInstance) {
      switch (fiber.tag) {
        case 5:
          return nextInstance = canHydrateInstance(nextInstance, fiber.type, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, !0) : !1;

        case 6:
          return nextInstance = canHydrateTextInstance(nextInstance, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, !0) : !1;

        default:
          return !1;
      }
    }

    function popToNextHostParent(fiber) {
      for (fiber = fiber["return"]; null !== fiber && 5 !== fiber.tag && 3 !== fiber.tag;) {
        fiber = fiber["return"];
      }

      hydrationParentFiber = fiber;
    }

    var shouldSetTextContent = config.shouldSetTextContent;
    config = config.hydration;
    if (!config) return {
      enterHydrationState: function enterHydrationState() {
        return !1;
      },
      resetHydrationState: function resetHydrationState() {},
      tryToClaimNextHydratableInstance: function tryToClaimNextHydratableInstance() {},
      prepareToHydrateHostInstance: function prepareToHydrateHostInstance() {
        invariant(!1, "Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      },
      prepareToHydrateHostTextInstance: function prepareToHydrateHostTextInstance() {
        invariant(!1, "Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      },
      popHydrationState: function popHydrationState() {
        return !1;
      }
    };
    var canHydrateInstance = config.canHydrateInstance,
        canHydrateTextInstance = config.canHydrateTextInstance,
        getNextHydratableSibling = config.getNextHydratableSibling,
        getFirstHydratableChild = config.getFirstHydratableChild,
        hydrateInstance = config.hydrateInstance,
        hydrateTextInstance = config.hydrateTextInstance,
        hydrationParentFiber = null,
        nextHydratableInstance = null,
        isHydrating = !1;
    return {
      enterHydrationState: function enterHydrationState(fiber) {
        nextHydratableInstance = getFirstHydratableChild(fiber.stateNode.containerInfo);
        hydrationParentFiber = fiber;
        return isHydrating = !0;
      },
      resetHydrationState: function resetHydrationState() {
        nextHydratableInstance = hydrationParentFiber = null;
        isHydrating = !1;
      },
      tryToClaimNextHydratableInstance: function tryToClaimNextHydratableInstance(fiber) {
        if (isHydrating) {
          var nextInstance = nextHydratableInstance;

          if (nextInstance) {
            if (!tryHydrate(fiber, nextInstance)) {
              nextInstance = getNextHydratableSibling(nextInstance);

              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                fiber.effectTag |= 2;
                isHydrating = !1;
                hydrationParentFiber = fiber;
                return;
              }

              deleteHydratableInstance(hydrationParentFiber, nextHydratableInstance);
            }

            hydrationParentFiber = fiber;
            nextHydratableInstance = getFirstHydratableChild(nextInstance);
          } else fiber.effectTag |= 2, isHydrating = !1, hydrationParentFiber = fiber;
        }
      },
      prepareToHydrateHostInstance: function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        rootContainerInstance = hydrateInstance(fiber.stateNode, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
        fiber.updateQueue = rootContainerInstance;
        return null !== rootContainerInstance ? !0 : !1;
      },
      prepareToHydrateHostTextInstance: function prepareToHydrateHostTextInstance(fiber) {
        return hydrateTextInstance(fiber.stateNode, fiber.memoizedProps, fiber);
      },
      popHydrationState: function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) return !1;
        if (!isHydrating) return popToNextHostParent(fiber), isHydrating = !0, !1;
        var type = fiber.type;
        if (5 !== fiber.tag || "head" !== type && "body" !== type && !shouldSetTextContent(type, fiber.memoizedProps)) for (type = nextHydratableInstance; type;) {
          deleteHydratableInstance(fiber, type), type = getNextHydratableSibling(type);
        }
        popToNextHostParent(fiber);
        nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        return !0;
      }
    };
  }

  function ReactFiberScheduler(config) {
    function resetContextStack() {
      for (; -1 < index;) {
        valueStack[index] = null, index--;
      }

      previousContext = emptyObject;
      contextStackCursor.current = emptyObject;
      didPerformWorkStackCursor.current = !1;
      resetHostContainer();

      for (var i = index$1; -1 < i; i--) {
        var context = stack[i].type.context;
        context._currentValue = context._defaultValue;
        context._changedBits = 0;
        changedBitsStack[i] = null;
        currentValueStack[i] = null;
        stack[i] = null;
      }

      index$1 = -1;
      nextRoot = null;
      nextRenderExpirationTime = 0;
      nextUnitOfWork = null;
      isRootReadyForCommit = !1;
    }

    function isAlreadyFailedLegacyErrorBoundary(instance) {
      return null !== legacyErrorBoundariesThatAlreadyFailed && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }

    function completeUnitOfWork(workInProgress$jscomp$0) {
      for (;;) {
        var current = workInProgress$jscomp$0.alternate,
            returnFiber = workInProgress$jscomp$0["return"],
            siblingFiber = workInProgress$jscomp$0.sibling;

        if (0 === (workInProgress$jscomp$0.effectTag & 512)) {
          current = completeWork(current, workInProgress$jscomp$0, nextRenderExpirationTime);
          var workInProgress = workInProgress$jscomp$0;

          if (1073741823 === nextRenderExpirationTime || 1073741823 !== workInProgress.expirationTime) {
            b: switch (workInProgress.tag) {
              case 3:
              case 2:
                var newExpirationTime = workInProgress.updateQueue;
                newExpirationTime = null === newExpirationTime ? 0 : newExpirationTime.expirationTime;
                break b;

              default:
                newExpirationTime = 0;
            }

            for (var child = workInProgress.child; null !== child;) {
              0 !== child.expirationTime && (0 === newExpirationTime || newExpirationTime > child.expirationTime) && (newExpirationTime = child.expirationTime), child = child.sibling;
            }

            workInProgress.expirationTime = newExpirationTime;
          }

          if (null !== current) return current;
          null !== returnFiber && 0 === (returnFiber.effectTag & 512) && (null === returnFiber.firstEffect && (returnFiber.firstEffect = workInProgress$jscomp$0.firstEffect), null !== workInProgress$jscomp$0.lastEffect && (null !== returnFiber.lastEffect && (returnFiber.lastEffect.nextEffect = workInProgress$jscomp$0.firstEffect), returnFiber.lastEffect = workInProgress$jscomp$0.lastEffect), 1 < workInProgress$jscomp$0.effectTag && (null !== returnFiber.lastEffect ? returnFiber.lastEffect.nextEffect = workInProgress$jscomp$0 : returnFiber.firstEffect = workInProgress$jscomp$0, returnFiber.lastEffect = workInProgress$jscomp$0));
          if (null !== siblingFiber) return siblingFiber;
          if (null !== returnFiber) workInProgress$jscomp$0 = returnFiber;else {
            isRootReadyForCommit = !0;
            break;
          }
        } else {
          workInProgress$jscomp$0 = unwindWork(workInProgress$jscomp$0);
          if (null !== workInProgress$jscomp$0) return workInProgress$jscomp$0.effectTag &= 511, workInProgress$jscomp$0;
          null !== returnFiber && (returnFiber.firstEffect = returnFiber.lastEffect = null, returnFiber.effectTag |= 512);
          if (null !== siblingFiber) return siblingFiber;
          if (null !== returnFiber) workInProgress$jscomp$0 = returnFiber;else break;
        }
      }

      return null;
    }

    function performUnitOfWork(workInProgress) {
      var next = beginWork(workInProgress.alternate, workInProgress, nextRenderExpirationTime);
      null === next && (next = completeUnitOfWork(workInProgress));
      ReactCurrentOwner.current = null;
      return next;
    }

    function renderRoot(root, expirationTime, isAsync) {
      invariant(!isWorking, "renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.");
      isWorking = !0;
      if (expirationTime !== nextRenderExpirationTime || root !== nextRoot || null === nextUnitOfWork) resetContextStack(), nextRoot = root, nextRenderExpirationTime = expirationTime, nextUnitOfWork = createWorkInProgress(nextRoot.current, null, nextRenderExpirationTime), root.pendingCommitExpirationTime = 0;
      var didFatal = !1;

      do {
        try {
          if (isAsync) for (; null !== nextUnitOfWork && !shouldYield();) {
            nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
          } else for (; null !== nextUnitOfWork;) {
            nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
          }
        } catch (thrownValue) {
          if (null === nextUnitOfWork) {
            didFatal = !0;
            onUncaughtError(thrownValue);
            break;
          }

          isAsync = nextUnitOfWork;
          var returnFiber = isAsync["return"];

          if (null === returnFiber) {
            didFatal = !0;
            onUncaughtError(thrownValue);
            break;
          }

          throwException(returnFiber, isAsync, thrownValue);
          nextUnitOfWork = completeUnitOfWork(isAsync);
        }

        break;
      } while (1);

      isWorking = !1;
      if (didFatal || null !== nextUnitOfWork) return null;
      if (isRootReadyForCommit) return root.pendingCommitExpirationTime = expirationTime, root.current.alternate;
      invariant(!1, "Expired work should have completed. This error is likely caused by a bug in React. Please file an issue.");
    }

    function scheduleCapture(sourceFiber, boundaryFiber, value, expirationTime) {
      sourceFiber = {
        value: value,
        source: sourceFiber,
        stack: getStackAddendumByWorkInProgressFiber(sourceFiber)
      };
      insertUpdateIntoFiber(boundaryFiber, {
        expirationTime: expirationTime,
        partialState: null,
        callback: null,
        isReplace: !1,
        isForced: !1,
        capturedValue: sourceFiber,
        next: null
      });
      scheduleWork(boundaryFiber, expirationTime);
    }

    function onCommitPhaseError(fiber$jscomp$0, error) {
      a: {
        invariant(!isWorking || isCommitting, "dispatch: Cannot dispatch during the render phase.");

        for (var fiber = fiber$jscomp$0["return"]; null !== fiber;) {
          switch (fiber.tag) {
            case 2:
              var instance = fiber.stateNode;

              if ("function" === typeof fiber.type.getDerivedStateFromCatch || "function" === typeof instance.componentDidCatch && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                scheduleCapture(fiber$jscomp$0, fiber, error, 1);
                fiber$jscomp$0 = void 0;
                break a;
              }

              break;

            case 3:
              scheduleCapture(fiber$jscomp$0, fiber, error, 1);
              fiber$jscomp$0 = void 0;
              break a;
          }

          fiber = fiber["return"];
        }

        3 === fiber$jscomp$0.tag && scheduleCapture(fiber$jscomp$0, fiber$jscomp$0, error, 1);
        fiber$jscomp$0 = void 0;
      }

      return fiber$jscomp$0;
    }

    function computeExpirationForFiber(fiber) {
      fiber = 0 !== expirationContext ? expirationContext : isWorking ? isCommitting ? 1 : nextRenderExpirationTime : fiber.mode & 1 ? isBatchingInteractiveUpdates ? 10 * (((recalculateCurrentTime() + 50) / 10 | 0) + 1) : 25 * (((recalculateCurrentTime() + 500) / 25 | 0) + 1) : 1;
      isBatchingInteractiveUpdates && (0 === lowestPendingInteractiveExpirationTime || fiber > lowestPendingInteractiveExpirationTime) && (lowestPendingInteractiveExpirationTime = fiber);
      return fiber;
    }

    function scheduleWork(fiber, expirationTime) {
      a: {
        for (; null !== fiber;) {
          if (0 === fiber.expirationTime || fiber.expirationTime > expirationTime) fiber.expirationTime = expirationTime;
          null !== fiber.alternate && (0 === fiber.alternate.expirationTime || fiber.alternate.expirationTime > expirationTime) && (fiber.alternate.expirationTime = expirationTime);
          if (null === fiber["return"]) if (3 === fiber.tag) {
            var root = fiber.stateNode;
            !isWorking && 0 !== nextRenderExpirationTime && expirationTime < nextRenderExpirationTime && resetContextStack();
            nextRoot === root && isWorking || requestWork(root, expirationTime);
            nestedUpdateCount > NESTED_UPDATE_LIMIT && invariant(!1, "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
          } else {
            expirationTime = void 0;
            break a;
          }
          fiber = fiber["return"];
        }

        expirationTime = void 0;
      }

      return expirationTime;
    }

    function recalculateCurrentTime() {
      mostRecentCurrentTimeMs = now() - originalStartTimeMs;
      return mostRecentCurrentTime = (mostRecentCurrentTimeMs / 10 | 0) + 2;
    }

    function syncUpdates(fn, a, b, c, d) {
      var previousExpirationContext = expirationContext;
      expirationContext = 1;

      try {
        return fn(a, b, c, d);
      } finally {
        expirationContext = previousExpirationContext;
      }
    }

    function scheduleCallbackWithExpiration(expirationTime) {
      if (0 !== callbackExpirationTime) {
        if (expirationTime > callbackExpirationTime) return;
        cancelDeferredCallback(callbackID);
      }

      var currentMs = now() - originalStartTimeMs;
      callbackExpirationTime = expirationTime;
      callbackID = scheduleDeferredCallback(performAsyncWork, {
        timeout: 10 * (expirationTime - 2) - currentMs
      });
    }

    function requestWork(root, expirationTime) {
      if (null === root.nextScheduledRoot) root.remainingExpirationTime = expirationTime, null === lastScheduledRoot ? (firstScheduledRoot = lastScheduledRoot = root, root.nextScheduledRoot = root) : (lastScheduledRoot = lastScheduledRoot.nextScheduledRoot = root, lastScheduledRoot.nextScheduledRoot = firstScheduledRoot);else {
        var remainingExpirationTime = root.remainingExpirationTime;
        if (0 === remainingExpirationTime || expirationTime < remainingExpirationTime) root.remainingExpirationTime = expirationTime;
      }
      isRendering || (isBatchingUpdates ? isUnbatchingUpdates && (nextFlushedRoot = root, nextFlushedExpirationTime = 1, performWorkOnRoot(root, 1, !1)) : 1 === expirationTime ? performWork(1, !1, null) : scheduleCallbackWithExpiration(expirationTime));
    }

    function findHighestPriorityRoot() {
      var highestPriorityWork = 0,
          highestPriorityRoot = null;
      if (null !== lastScheduledRoot) for (var previousScheduledRoot = lastScheduledRoot, root = firstScheduledRoot; null !== root;) {
        var remainingExpirationTime = root.remainingExpirationTime;

        if (0 === remainingExpirationTime) {
          invariant(null !== previousScheduledRoot && null !== lastScheduledRoot, "Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.");

          if (root === root.nextScheduledRoot) {
            firstScheduledRoot = lastScheduledRoot = root.nextScheduledRoot = null;
            break;
          } else if (root === firstScheduledRoot) firstScheduledRoot = remainingExpirationTime = root.nextScheduledRoot, lastScheduledRoot.nextScheduledRoot = remainingExpirationTime, root.nextScheduledRoot = null;else if (root === lastScheduledRoot) {
            lastScheduledRoot = previousScheduledRoot;
            lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
            root.nextScheduledRoot = null;
            break;
          } else previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot, root.nextScheduledRoot = null;

          root = previousScheduledRoot.nextScheduledRoot;
        } else {
          if (0 === highestPriorityWork || remainingExpirationTime < highestPriorityWork) highestPriorityWork = remainingExpirationTime, highestPriorityRoot = root;
          if (root === lastScheduledRoot) break;
          previousScheduledRoot = root;
          root = root.nextScheduledRoot;
        }
      }
      previousScheduledRoot = nextFlushedRoot;
      null !== previousScheduledRoot && previousScheduledRoot === highestPriorityRoot && 1 === highestPriorityWork ? nestedUpdateCount++ : nestedUpdateCount = 0;
      nextFlushedRoot = highestPriorityRoot;
      nextFlushedExpirationTime = highestPriorityWork;
    }

    function performAsyncWork(dl) {
      performWork(0, !0, dl);
    }

    function performWork(minExpirationTime, isAsync, dl) {
      deadline = dl;
      findHighestPriorityRoot();
      if (isAsync) for (; null !== nextFlushedRoot && 0 !== nextFlushedExpirationTime && (0 === minExpirationTime || minExpirationTime >= nextFlushedExpirationTime) && (!deadlineDidExpire || recalculateCurrentTime() >= nextFlushedExpirationTime);) {
        performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, !deadlineDidExpire), findHighestPriorityRoot();
      } else for (; null !== nextFlushedRoot && 0 !== nextFlushedExpirationTime && (0 === minExpirationTime || minExpirationTime >= nextFlushedExpirationTime);) {
        performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, !1), findHighestPriorityRoot();
      }
      null !== deadline && (callbackExpirationTime = 0, callbackID = -1);
      0 !== nextFlushedExpirationTime && scheduleCallbackWithExpiration(nextFlushedExpirationTime);
      deadline = null;
      deadlineDidExpire = !1;
      finishRendering();
    }

    function finishRendering() {
      nestedUpdateCount = 0;

      if (null !== completedBatches) {
        var batches = completedBatches;
        completedBatches = null;

        for (var i = 0; i < batches.length; i++) {
          var batch = batches[i];

          try {
            batch._onComplete();
          } catch (error) {
            hasUnhandledError || (hasUnhandledError = !0, unhandledError = error);
          }
        }
      }

      if (hasUnhandledError) throw batches = unhandledError, unhandledError = null, hasUnhandledError = !1, batches;
    }

    function performWorkOnRoot(root, expirationTime, isAsync) {
      invariant(!isRendering, "performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.");
      isRendering = !0;
      isAsync ? (isAsync = root.finishedWork, null !== isAsync ? completeRoot(root, isAsync, expirationTime) : (root.finishedWork = null, isAsync = renderRoot(root, expirationTime, !0), null !== isAsync && (shouldYield() ? root.finishedWork = isAsync : completeRoot(root, isAsync, expirationTime)))) : (isAsync = root.finishedWork, null !== isAsync ? completeRoot(root, isAsync, expirationTime) : (root.finishedWork = null, isAsync = renderRoot(root, expirationTime, !1), null !== isAsync && completeRoot(root, isAsync, expirationTime)));
      isRendering = !1;
    }

    function completeRoot(root, finishedWork, expirationTime) {
      var firstBatch = root.firstBatch;

      if (null !== firstBatch && firstBatch._expirationTime <= expirationTime && (null === completedBatches ? completedBatches = [firstBatch] : completedBatches.push(firstBatch), firstBatch._defer)) {
        root.finishedWork = finishedWork;
        root.remainingExpirationTime = 0;
        return;
      }

      root.finishedWork = null;
      isCommitting = isWorking = !0;
      expirationTime = finishedWork.stateNode;
      invariant(expirationTime.current !== finishedWork, "Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.");
      firstBatch = expirationTime.pendingCommitExpirationTime;
      invariant(0 !== firstBatch, "Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
      expirationTime.pendingCommitExpirationTime = 0;
      var currentTime = recalculateCurrentTime();
      ReactCurrentOwner.current = null;
      if (1 < finishedWork.effectTag) {
        if (null !== finishedWork.lastEffect) {
          finishedWork.lastEffect.nextEffect = finishedWork;
          var firstEffect = finishedWork.firstEffect;
        } else firstEffect = finishedWork;
      } else firstEffect = finishedWork.firstEffect;
      prepareForCommit(expirationTime.containerInfo);

      for (nextEffect = firstEffect; null !== nextEffect;) {
        var didError = !1,
            error = void 0;

        try {
          for (; null !== nextEffect;) {
            var effectTag = nextEffect.effectTag;
            effectTag & 16 && commitResetTextContent(nextEffect);

            if (effectTag & 128) {
              var current = nextEffect.alternate;
              null !== current && commitDetachRef(current);
            }

            switch (effectTag & 14) {
              case 2:
                commitPlacement(nextEffect);
                nextEffect.effectTag &= -3;
                break;

              case 6:
                commitPlacement(nextEffect);
                nextEffect.effectTag &= -3;
                commitWork(nextEffect.alternate, nextEffect);
                break;

              case 4:
                commitWork(nextEffect.alternate, nextEffect);
                break;

              case 8:
                commitDeletion(nextEffect);
            }

            nextEffect = nextEffect.nextEffect;
          }
        } catch (e) {
          didError = !0, error = e;
        }

        didError && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug in React. Please file an issue."), onCommitPhaseError(nextEffect, error), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
      }

      resetAfterCommit(expirationTime.containerInfo);
      expirationTime.current = finishedWork;

      for (nextEffect = firstEffect; null !== nextEffect;) {
        effectTag = !1;
        current = void 0;

        try {
          for (firstEffect = expirationTime, didError = currentTime, error = firstBatch; null !== nextEffect;) {
            var effectTag$jscomp$0 = nextEffect.effectTag;
            effectTag$jscomp$0 & 36 && commitLifeCycles(firstEffect, nextEffect.alternate, nextEffect, didError, error);
            effectTag$jscomp$0 & 256 && commitErrorLogging(nextEffect, onUncaughtError);
            effectTag$jscomp$0 & 128 && commitAttachRef(nextEffect);
            var next = nextEffect.nextEffect;
            nextEffect.nextEffect = null;
            nextEffect = next;
          }
        } catch (e) {
          effectTag = !0, current = e;
        }

        effectTag && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug in React. Please file an issue."), onCommitPhaseError(nextEffect, current), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
      }

      isWorking = isCommitting = !1;
      "function" === typeof onCommitRoot && onCommitRoot(finishedWork.stateNode);
      finishedWork = expirationTime.current.expirationTime;
      0 === finishedWork && (legacyErrorBoundariesThatAlreadyFailed = null);
      root.remainingExpirationTime = finishedWork;
    }

    function shouldYield() {
      return null === deadline || deadline.timeRemaining() > timeHeuristicForUnitOfWork ? !1 : deadlineDidExpire = !0;
    }

    function onUncaughtError(error) {
      invariant(null !== nextFlushedRoot, "Should be working on a root. This error is likely caused by a bug in React. Please file an issue.");
      nextFlushedRoot.remainingExpirationTime = 0;
      hasUnhandledError || (hasUnhandledError = !0, unhandledError = error);
    }

    var hostContext = ReactFiberHostContext(config),
        hydrationContext = ReactFiberHydrationContext(config),
        resetHostContainer = hostContext.resetHostContainer,
        beginWork = ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleWork, computeExpirationForFiber).beginWork,
        completeWork = ReactFiberCompleteWork(config, hostContext, hydrationContext).completeWork;
    hostContext = ReactFiberUnwindWork(hostContext, scheduleWork, isAlreadyFailedLegacyErrorBoundary);
    var throwException = hostContext.throwException,
        unwindWork = hostContext.unwindWork;
    hostContext = ReactFiberCommitWork(config, onCommitPhaseError, scheduleWork, computeExpirationForFiber, function (instance) {
      null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = new Set([instance]) : legacyErrorBoundariesThatAlreadyFailed.add(instance);
    }, recalculateCurrentTime);
    var commitResetTextContent = hostContext.commitResetTextContent,
        commitPlacement = hostContext.commitPlacement,
        commitDeletion = hostContext.commitDeletion,
        commitWork = hostContext.commitWork,
        commitLifeCycles = hostContext.commitLifeCycles,
        commitErrorLogging = hostContext.commitErrorLogging,
        commitAttachRef = hostContext.commitAttachRef,
        commitDetachRef = hostContext.commitDetachRef,
        now = config.now,
        scheduleDeferredCallback = config.scheduleDeferredCallback,
        cancelDeferredCallback = config.cancelDeferredCallback,
        prepareForCommit = config.prepareForCommit,
        resetAfterCommit = config.resetAfterCommit,
        originalStartTimeMs = now(),
        mostRecentCurrentTime = 2,
        mostRecentCurrentTimeMs = originalStartTimeMs,
        lastUniqueAsyncExpiration = 0,
        expirationContext = 0,
        isWorking = !1,
        nextUnitOfWork = null,
        nextRoot = null,
        nextRenderExpirationTime = 0,
        nextEffect = null,
        isCommitting = !1,
        isRootReadyForCommit = !1,
        legacyErrorBoundariesThatAlreadyFailed = null,
        firstScheduledRoot = null,
        lastScheduledRoot = null,
        callbackExpirationTime = 0,
        callbackID = -1,
        isRendering = !1,
        nextFlushedRoot = null,
        nextFlushedExpirationTime = 0,
        lowestPendingInteractiveExpirationTime = 0,
        deadlineDidExpire = !1,
        hasUnhandledError = !1,
        unhandledError = null,
        deadline = null,
        isBatchingUpdates = !1,
        isUnbatchingUpdates = !1,
        isBatchingInteractiveUpdates = !1,
        completedBatches = null,
        NESTED_UPDATE_LIMIT = 1e3,
        nestedUpdateCount = 0,
        timeHeuristicForUnitOfWork = 1;
    return {
      recalculateCurrentTime: recalculateCurrentTime,
      computeExpirationForFiber: computeExpirationForFiber,
      scheduleWork: scheduleWork,
      requestWork: requestWork,
      flushRoot: function flushRoot(root, expirationTime) {
        invariant(!isRendering, "work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.");
        performWorkOnRoot(root, expirationTime, !1);
        finishRendering();
      },
      batchedUpdates: function batchedUpdates(fn, a) {
        var previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = !0;

        try {
          return fn(a);
        } finally {
          (isBatchingUpdates = previousIsBatchingUpdates) || isRendering || performWork(1, !1, null);
        }
      },
      unbatchedUpdates: function unbatchedUpdates(fn, a) {
        if (isBatchingUpdates && !isUnbatchingUpdates) {
          isUnbatchingUpdates = !0;

          try {
            return fn(a);
          } finally {
            isUnbatchingUpdates = !1;
          }
        }

        return fn(a);
      },
      flushSync: function flushSync(fn, a) {
        invariant(!isRendering, "flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.");
        var previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = !0;

        try {
          return syncUpdates(fn, a);
        } finally {
          isBatchingUpdates = previousIsBatchingUpdates, performWork(1, !1, null);
        }
      },
      flushControlled: function flushControlled(fn) {
        var previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = !0;

        try {
          syncUpdates(fn);
        } finally {
          (isBatchingUpdates = previousIsBatchingUpdates) || isRendering || performWork(1, !1, null);
        }
      },
      deferredUpdates: function deferredUpdates(fn) {
        var previousExpirationContext = expirationContext;
        expirationContext = 25 * (((recalculateCurrentTime() + 500) / 25 | 0) + 1);

        try {
          return fn();
        } finally {
          expirationContext = previousExpirationContext;
        }
      },
      syncUpdates: syncUpdates,
      interactiveUpdates: function interactiveUpdates(fn, a, b) {
        if (isBatchingInteractiveUpdates) return fn(a, b);
        isBatchingUpdates || isRendering || 0 === lowestPendingInteractiveExpirationTime || (performWork(lowestPendingInteractiveExpirationTime, !1, null), lowestPendingInteractiveExpirationTime = 0);
        var previousIsBatchingInteractiveUpdates = isBatchingInteractiveUpdates,
            previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = isBatchingInteractiveUpdates = !0;

        try {
          return fn(a, b);
        } finally {
          isBatchingInteractiveUpdates = previousIsBatchingInteractiveUpdates, (isBatchingUpdates = previousIsBatchingUpdates) || isRendering || performWork(1, !1, null);
        }
      },
      flushInteractiveUpdates: function flushInteractiveUpdates() {
        isRendering || 0 === lowestPendingInteractiveExpirationTime || (performWork(lowestPendingInteractiveExpirationTime, !1, null), lowestPendingInteractiveExpirationTime = 0);
      },
      computeUniqueAsyncExpiration: function computeUniqueAsyncExpiration() {
        var result = 25 * (((recalculateCurrentTime() + 500) / 25 | 0) + 1);
        result <= lastUniqueAsyncExpiration && (result = lastUniqueAsyncExpiration + 1);
        return lastUniqueAsyncExpiration = result;
      }
    };
  }

  function ReactFiberReconciler$1(config) {
    function _updateContainerAtExpirationTime(element, container, parentComponent, currentTime, expirationTime, callback) {
      currentTime = container.current;

      if (parentComponent) {
        parentComponent = parentComponent._reactInternalFiber;
        var parentContext;

        b: {
          invariant(2 === isFiberMountedImpl(parentComponent) && 2 === parentComponent.tag, "Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");

          for (parentContext = parentComponent; 3 !== parentContext.tag;) {
            if (isContextProvider(parentContext)) {
              parentContext = parentContext.stateNode.__reactInternalMemoizedMergedChildContext;
              break b;
            }

            parentContext = parentContext["return"];
            invariant(parentContext, "Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
          }

          parentContext = parentContext.stateNode.context;
        }

        parentComponent = isContextProvider(parentComponent) ? processChildContext(parentComponent, parentContext) : parentContext;
      } else parentComponent = emptyObject;

      null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
      container = callback;
      insertUpdateIntoFiber(currentTime, {
        expirationTime: expirationTime,
        partialState: {
          element: element
        },
        callback: void 0 === container ? null : container,
        isReplace: !1,
        isForced: !1,
        capturedValue: null,
        next: null
      });
      scheduleWork(currentTime, expirationTime);
      return expirationTime;
    }

    function findHostInstance(fiber) {
      fiber = findCurrentHostFiber(fiber);
      return null === fiber ? null : fiber.stateNode;
    }

    var getPublicInstance = config.getPublicInstance;
    config = ReactFiberScheduler(config);
    var recalculateCurrentTime = config.recalculateCurrentTime,
        computeExpirationForFiber = config.computeExpirationForFiber,
        scheduleWork = config.scheduleWork;
    return {
      createContainer: function createContainer(containerInfo, isAsync, hydrate) {
        isAsync = new FiberNode(3, null, null, isAsync ? 3 : 0);
        containerInfo = {
          current: isAsync,
          containerInfo: containerInfo,
          pendingChildren: null,
          pendingCommitExpirationTime: 0,
          finishedWork: null,
          context: null,
          pendingContext: null,
          hydrate: hydrate,
          remainingExpirationTime: 0,
          firstBatch: null,
          nextScheduledRoot: null
        };
        return isAsync.stateNode = containerInfo;
      },
      updateContainer: function updateContainer(element, container, parentComponent, callback) {
        var current = container.current,
            currentTime = recalculateCurrentTime();
        current = computeExpirationForFiber(current);
        return _updateContainerAtExpirationTime(element, container, parentComponent, currentTime, current, callback);
      },
      updateContainerAtExpirationTime: function updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback) {
        var currentTime = recalculateCurrentTime();
        return _updateContainerAtExpirationTime(element, container, parentComponent, currentTime, expirationTime, callback);
      },
      flushRoot: config.flushRoot,
      requestWork: config.requestWork,
      computeUniqueAsyncExpiration: config.computeUniqueAsyncExpiration,
      batchedUpdates: config.batchedUpdates,
      unbatchedUpdates: config.unbatchedUpdates,
      deferredUpdates: config.deferredUpdates,
      syncUpdates: config.syncUpdates,
      interactiveUpdates: config.interactiveUpdates,
      flushInteractiveUpdates: config.flushInteractiveUpdates,
      flushControlled: config.flushControlled,
      flushSync: config.flushSync,
      getPublicRootInstance: function getPublicRootInstance(container) {
        container = container.current;
        if (!container.child) return null;

        switch (container.child.tag) {
          case 5:
            return getPublicInstance(container.child.stateNode);

          default:
            return container.child.stateNode;
        }
      },
      findHostInstance: findHostInstance,
      findHostInstanceWithNoPortals: function findHostInstanceWithNoPortals(fiber) {
        fiber = findCurrentHostFiberWithNoPortals(fiber);
        return null === fiber ? null : fiber.stateNode;
      },
      injectIntoDevTools: function injectIntoDevTools(devToolsConfig) {
        var _findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        return injectInternals(_extends({}, devToolsConfig, {
          findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {
            return findHostInstance(fiber);
          },
          findFiberByHostInstance: function findFiberByHostInstance(instance) {
            return _findFiberByHostInstance ? _findFiberByHostInstance(instance) : null;
          }
        }));
      }
    };
  }

  var ReactFiberReconciler$2 = Object.freeze({
    default: ReactFiberReconciler$1
  }),
      ReactFiberReconciler$3 = ReactFiberReconciler$2 && ReactFiberReconciler$1 || ReactFiberReconciler$2,
      reactReconciler = ReactFiberReconciler$3["default"] ? ReactFiberReconciler$3["default"] : ReactFiberReconciler$3,
      viewConfigCallbacks = new Map(),
      viewConfigs = new Map(),
      ReactNativeFiberHostComponent = function () {
    function ReactNativeFiberHostComponent(tag, viewConfig) {
      if (!(this instanceof ReactNativeFiberHostComponent)) throw new TypeError("Cannot call a class as a function");
      this._nativeTag = tag;
      this._children = [];
      this.viewConfig = viewConfig;
    }

    ReactNativeFiberHostComponent.prototype.blur = function () {
      TextInputState.blurTextInput(this._nativeTag);
    };

    ReactNativeFiberHostComponent.prototype.focus = function () {
      TextInputState.focusTextInput(this._nativeTag);
    };

    ReactNativeFiberHostComponent.prototype.measure = function (callback) {
      UIManager.measure(this._nativeTag, mountSafeCallback(this, callback));
    };

    ReactNativeFiberHostComponent.prototype.measureInWindow = function (callback) {
      UIManager.measureInWindow(this._nativeTag, mountSafeCallback(this, callback));
    };

    ReactNativeFiberHostComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
      UIManager.measureLayout(this._nativeTag, relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
    };

    ReactNativeFiberHostComponent.prototype.setNativeProps = function (nativeProps) {
      nativeProps = diffProperties(null, emptyObject$1, nativeProps, this.viewConfig.validAttributes);
      null != nativeProps && UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, nativeProps);
    };

    return ReactNativeFiberHostComponent;
  }(),
      now = "object" === typeof performance && "function" === typeof performance.now ? function () {
    return performance.now();
  } : function () {
    return Date.now();
  },
      scheduledCallback = null,
      frameDeadline = 0,
      frameDeadlineObject = {
    timeRemaining: function timeRemaining() {
      return frameDeadline - now();
    }
  };

  function setTimeoutCallback() {
    frameDeadline = now() + 5;
    var callback = scheduledCallback;
    scheduledCallback = null;
    null !== callback && callback(frameDeadlineObject);
  }

  function recursivelyUncacheFiberNode(node) {
    "number" === typeof node ? uncacheFiberNode(node) : (uncacheFiberNode(node._nativeTag), node._children.forEach(recursivelyUncacheFiberNode));
  }

  var NativeRenderer = reactReconciler({
    appendInitialChild: function appendInitialChild(parentInstance, child) {
      parentInstance._children.push(child);
    },
    createInstance: function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
      hostContext = ReactNativeTagHandles.allocateTag();
      if (viewConfigs.has(type)) var viewConfig = viewConfigs.get(type);else viewConfig = viewConfigCallbacks.get(type), invariant("function" === typeof viewConfig, "View config not found for name %s", type), viewConfigCallbacks.set(type, null), viewConfig = viewConfig(), viewConfigs.set(type, viewConfig);
      invariant(viewConfig, "View config not found for name %s", type);
      type = viewConfig;
      viewConfig = diffProperties(null, emptyObject$1, props, type.validAttributes);
      UIManager.createView(hostContext, type.uiViewClassName, rootContainerInstance, viewConfig);
      rootContainerInstance = new ReactNativeFiberHostComponent(hostContext, type);
      instanceCache[hostContext] = internalInstanceHandle;
      instanceProps[hostContext] = props;
      return rootContainerInstance;
    },
    createTextInstance: function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
      hostContext = ReactNativeTagHandles.allocateTag();
      UIManager.createView(hostContext, "RCTRawText", rootContainerInstance, {
        text: text
      });
      instanceCache[hostContext] = internalInstanceHandle;
      return hostContext;
    },
    finalizeInitialChildren: function finalizeInitialChildren(parentInstance) {
      if (0 === parentInstance._children.length) return !1;

      var nativeTags = parentInstance._children.map(function (child) {
        return "number" === typeof child ? child : child._nativeTag;
      });

      UIManager.setChildren(parentInstance._nativeTag, nativeTags);
      return !1;
    },
    getRootHostContext: function getRootHostContext() {
      return emptyObject;
    },
    getChildHostContext: function getChildHostContext() {
      return emptyObject;
    },
    getPublicInstance: function getPublicInstance(instance) {
      return instance;
    },
    now: now,
    prepareForCommit: function prepareForCommit() {},
    prepareUpdate: function prepareUpdate() {
      return emptyObject;
    },
    resetAfterCommit: function resetAfterCommit() {},
    scheduleDeferredCallback: function scheduleDeferredCallback(callback) {
      scheduledCallback = callback;
      return setTimeout(setTimeoutCallback, 1);
    },
    cancelDeferredCallback: function cancelDeferredCallback(callbackID) {
      scheduledCallback = null;
      clearTimeout(callbackID);
    },
    shouldDeprioritizeSubtree: function shouldDeprioritizeSubtree() {
      return !1;
    },
    shouldSetTextContent: function shouldSetTextContent() {
      return !1;
    },
    mutation: {
      appendChild: function appendChild(parentInstance, child) {
        var childTag = "number" === typeof child ? child : child._nativeTag,
            children = parentInstance._children,
            index = children.indexOf(child);
        0 <= index ? (children.splice(index, 1), children.push(child), UIManager.manageChildren(parentInstance._nativeTag, [index], [children.length - 1], [], [], [])) : (children.push(child), UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [children.length - 1], []));
      },
      appendChildToContainer: function appendChildToContainer(parentInstance, child) {
        UIManager.setChildren(parentInstance, ["number" === typeof child ? child : child._nativeTag]);
      },
      commitTextUpdate: function commitTextUpdate(textInstance, oldText, newText) {
        UIManager.updateView(textInstance, "RCTRawText", {
          text: newText
        });
      },
      commitMount: function commitMount() {},
      commitUpdate: function commitUpdate(instance, updatePayloadTODO, type, oldProps, newProps) {
        updatePayloadTODO = instance.viewConfig;
        instanceProps[instance._nativeTag] = newProps;
        oldProps = diffProperties(null, oldProps, newProps, updatePayloadTODO.validAttributes);
        null != oldProps && UIManager.updateView(instance._nativeTag, updatePayloadTODO.uiViewClassName, oldProps);
      },
      insertBefore: function insertBefore(parentInstance, child, beforeChild) {
        var children = parentInstance._children,
            index = children.indexOf(child);
        0 <= index ? (children.splice(index, 1), beforeChild = children.indexOf(beforeChild), children.splice(beforeChild, 0, child), UIManager.manageChildren(parentInstance._nativeTag, [index], [beforeChild], [], [], [])) : (index = children.indexOf(beforeChild), children.splice(index, 0, child), UIManager.manageChildren(parentInstance._nativeTag, [], [], ["number" === typeof child ? child : child._nativeTag], [index], []));
      },
      insertInContainerBefore: function insertInContainerBefore(parentInstance) {
        invariant("number" !== typeof parentInstance, "Container does not support insertBefore operation");
      },
      removeChild: function removeChild(parentInstance, child) {
        recursivelyUncacheFiberNode(child);
        var children = parentInstance._children;
        child = children.indexOf(child);
        children.splice(child, 1);
        UIManager.manageChildren(parentInstance._nativeTag, [], [], [], [], [child]);
      },
      removeChildFromContainer: function removeChildFromContainer(parentInstance, child) {
        recursivelyUncacheFiberNode(child);
        UIManager.manageChildren(parentInstance, [], [], [], [], [0]);
      },
      resetTextContent: function resetTextContent() {}
    }
  }),
      getInspectorDataForViewTag = void 0;

  getInspectorDataForViewTag = function getInspectorDataForViewTag() {
    invariant(!1, "getInspectorDataForViewTag() is not available in production");
  };

  findHostInstance = NativeRenderer.findHostInstance;
  _batchedUpdates = NativeRenderer.batchedUpdates;
  _flushInteractiveUpdates = NativeRenderer.flushInteractiveUpdates;
  var roots = new Map(),
      ReactNativeRenderer = {
    NativeComponent: ReactNativeComponent,
    findNodeHandle: findNumericNodeHandleFiber,
    render: function render(element, containerTag, callback) {
      var root = roots.get(containerTag);
      root || (root = NativeRenderer.createContainer(containerTag, !1, !1), roots.set(containerTag, root));
      NativeRenderer.updateContainer(element, root, null, callback);
      return NativeRenderer.getPublicRootInstance(root);
    },
    unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
      var root = roots.get(containerTag);
      root && NativeRenderer.updateContainer(null, root, null, function () {
        roots["delete"](containerTag);
      });
    },
    unmountComponentAtNodeAndRemoveContainer: function unmountComponentAtNodeAndRemoveContainer(containerTag) {
      ReactNativeRenderer.unmountComponentAtNode(containerTag);
      UIManager.removeRootView(containerTag);
    },
    createPortal: function createPortal(children, containerTag) {
      return _createPortal(children, containerTag, null, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null);
    },
    unstable_batchedUpdates: batchedUpdates,
    flushSync: NativeRenderer.flushSync,
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
      NativeMethodsMixin: {
        measure: function measure(callback) {
          UIManager.measure(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        },
        measureInWindow: function measureInWindow(callback) {
          UIManager.measureInWindow(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        },
        measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
          UIManager.measureLayout(findNumericNodeHandleFiber(this), relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
        },
        setNativeProps: function setNativeProps(nativeProps) {
          var maybeInstance = void 0;

          try {
            maybeInstance = findNodeHandle(this);
          } catch (error) {}

          if (null != maybeInstance) {
            var viewConfig = maybeInstance.viewConfig;
            nativeProps = diffProperties(null, emptyObject$1, nativeProps, viewConfig.validAttributes);
            null != nativeProps && UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, nativeProps);
          }
        },
        focus: function focus() {
          TextInputState.focusTextInput(findNumericNodeHandleFiber(this));
        },
        blur: function blur() {
          TextInputState.blurTextInput(findNumericNodeHandleFiber(this));
        }
      },
      ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin,
      ReactNativeComponentTree: ReactNativeComponentTree,
      ReactNativePropRegistry: ReactNativePropRegistry,
      TouchHistoryMath: TouchHistoryMath,
      createReactNativeComponentClass: function createReactNativeComponentClass(name, callback) {
        invariant(!viewConfigCallbacks.has(name), "Tried to register two views with the same name %s", name);
        viewConfigCallbacks.set(name, callback);
        return name;
      },
      takeSnapshot: function takeSnapshot(view, options) {
        "number" !== typeof view && "window" !== view && (view = findNumericNodeHandleFiber(view) || "window");
        return UIManager.__takeSnapshot(view, options);
      }
    }
  };
  NativeRenderer.injectIntoDevTools({
    findFiberByHostInstance: getInstanceFromTag,
    getInspectorDataForViewTag: getInspectorDataForViewTag,
    bundleType: 0,
    version: "16.3.0-alpha.1",
    rendererPackageName: "react-native-renderer"
  });
  var ReactNativeRenderer$2 = Object.freeze({
    default: ReactNativeRenderer
  }),
      ReactNativeRenderer$3 = ReactNativeRenderer$2 && ReactNativeRenderer || ReactNativeRenderer$2;
  module.exports = ReactNativeRenderer$3["default"] ? ReactNativeRenderer$3["default"] : ReactNativeRenderer$3;
},123,[23,13,57,109,110,111,112,104,113,116,120,31,122],"ReactNativeRenderer-prod");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactDebugTool;
},124,[21],"ReactDebugTool");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Components\\ActivityIndicator\\ActivityIndicator.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var NativeMethodsMixin = _require(_dependencyMap[1], 'NativeMethodsMixin');

  var Platform = _require(_dependencyMap[2], 'Platform');

  var ProgressBarAndroid = _require(_dependencyMap[3], 'ProgressBarAndroid');

  var PropTypes = _require(_dependencyMap[4], 'prop-types');

  var React = _require(_dependencyMap[5], 'React');

  var StyleSheet = _require(_dependencyMap[6], 'StyleSheet');

  var View = _require(_dependencyMap[7], 'View');

  var ViewPropTypes = _require(_dependencyMap[8], 'ViewPropTypes');

  var createReactClass = _require(_dependencyMap[9], 'create-react-class');

  var requireNativeComponent = _require(_dependencyMap[10], 'requireNativeComponent');

  var GRAY = '#999999';
  var ActivityIndicator = createReactClass({
    displayName: 'ActivityIndicator',
    mixins: [NativeMethodsMixin],
    propTypes: _extends({}, ViewPropTypes, {
      animating: PropTypes.bool,
      color: ColorPropType,
      size: PropTypes.oneOfType([PropTypes.oneOf(['small', 'large']), PropTypes.number]),
      hidesWhenStopped: PropTypes.bool
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        animating: true,
        color: Platform.OS === 'ios' ? GRAY : undefined,
        hidesWhenStopped: true,
        size: 'small'
      };
    },
    render: function render() {
      var _props = this.props,
          onLayout = _props.onLayout,
          style = _props.style,
          props = _objectWithoutProperties(_props, ["onLayout", "style"]);

      var sizeStyle = void 0;

      switch (props.size) {
        case 'small':
          sizeStyle = styles.sizeSmall;
          break;

        case 'large':
          sizeStyle = styles.sizeLarge;
          break;

        default:
          sizeStyle = {
            height: props.size,
            width: props.size
          };
          break;
      }

      var nativeProps = _extends({}, props, {
        style: sizeStyle,
        styleAttr: 'Normal',
        indeterminate: true
      });

      return React.createElement(
        View,
        {
          onLayout: onLayout,
          style: [styles.container, style],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 114
          }
        },
        Platform.OS === 'ios' ? React.createElement(RCTActivityIndicator, _extends({}, nativeProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 116
          }
        })) : React.createElement(ProgressBarAndroid, _extends({}, nativeProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 118
          }
        }))
      );
    }
  });
  var styles = StyleSheet.create({
    container: {
      alignItems: 'center',
      justifyContent: 'center'
    },
    sizeSmall: {
      width: 20,
      height: 20
    },
    sizeLarge: {
      width: 36,
      height: 36
    }
  });

  if (Platform.OS === 'ios') {
    var RCTActivityIndicator = requireNativeComponent('RCTActivityIndicatorView', ActivityIndicator, {
      nativeOnly: {
        activityIndicatorViewStyle: true
      }
    });
  }

  module.exports = ActivityIndicator;
},125,[126,128,52,129,130,133,171,173,134,176,148],"ActivityIndicator");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var normalizeColor = _require(_dependencyMap[0], 'normalizeColor');

  var colorPropType = function colorPropType(isRequired, props, propName, componentName, location, propFullName) {
    var color = props[propName];

    if (color === undefined || color === null) {
      if (isRequired) {
        return new Error('Required ' + location + ' `' + (propFullName || propName) + '` was not specified in `' + componentName + '`.');
      }

      return;
    }

    if (typeof color === 'number') {
      return;
    }

    if (normalizeColor(color) === null) {
      return new Error('Invalid ' + location + ' `' + (propFullName || propName) + '` supplied to `' + componentName + '`: ' + color + '\n' + "Valid color formats are\n  - '#f0f' (#rgb)\n  - '#f0fc' (#rgba)\n  - '#ff00ff' (#rrggbb)\n  - '#ff00ff00' (#rrggbbaa)\n  - 'rgb(255, 255, 255)'\n  - 'rgba(255, 255, 255, 1.0)'\n  - 'hsl(360, 100%, 100%)'\n  - 'hsla(360, 100%, 100%, 1.0)'\n  - 'transparent'\n  - 'red'\n  - 0xff00ff00 (0xrrggbbaa)\n");
    }
  };

  var ColorPropType = colorPropType.bind(null, false);
  ColorPropType.isRequired = colorPropType.bind(null, true);
  module.exports = ColorPropType;
},126,[127],"ColorPropType");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function normalizeColor(color) {
    var match;

    if (typeof color === 'number') {
      if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {
        return color;
      }

      return null;
    }

    if (match = matchers.hex6.exec(color)) {
      return parseInt(match[1] + 'ff', 16) >>> 0;
    }

    if (names.hasOwnProperty(color)) {
      return names[color];
    }

    if (match = matchers.rgb.exec(color)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 0x000000ff) >>> 0;
    }

    if (match = matchers.rgba.exec(color)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;
    }

    if (match = matchers.hex3.exec(color)) {
      return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + 'ff', 16) >>> 0;
    }

    if (match = matchers.hex8.exec(color)) {
      return parseInt(match[1], 16) >>> 0;
    }

    if (match = matchers.hex4.exec(color)) {
      return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;
    }

    if (match = matchers.hsl.exec(color)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 0x000000ff) >>> 0;
    }

    if (match = matchers.hsla.exec(color)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;
    }

    return null;
  }

  function hue2rgb(p, q, t) {
    if (t < 0) {
      t += 1;
    }

    if (t > 1) {
      t -= 1;
    }

    if (t < 1 / 6) {
      return p + (q - p) * 6 * t;
    }

    if (t < 1 / 2) {
      return q;
    }

    if (t < 2 / 3) {
      return p + (q - p) * (2 / 3 - t) * 6;
    }

    return p;
  }

  function hslToRgb(h, s, l) {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    var r = hue2rgb(p, q, h + 1 / 3);
    var g = hue2rgb(p, q, h);
    var b = hue2rgb(p, q, h - 1 / 3);
    return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
  }

  var NUMBER = '[-+]?\\d*\\.?\\d+';
  var PERCENTAGE = NUMBER + '%';

  function call() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return '\\(\\s*(' + args.join(')\\s*,\\s*(') + ')\\s*\\)';
  }

  var matchers = {
    rgb: new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER)),
    rgba: new RegExp('rgba' + call(NUMBER, NUMBER, NUMBER, NUMBER)),
    hsl: new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE)),
    hsla: new RegExp('hsla' + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER)),
    hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex6: /^#([0-9a-fA-F]{6})$/,
    hex8: /^#([0-9a-fA-F]{8})$/
  };

  function parse255(str) {
    var int = parseInt(str, 10);

    if (int < 0) {
      return 0;
    }

    if (int > 255) {
      return 255;
    }

    return int;
  }

  function parse360(str) {
    var int = parseFloat(str);
    return (int % 360 + 360) % 360 / 360;
  }

  function parse1(str) {
    var num = parseFloat(str);

    if (num < 0) {
      return 0;
    }

    if (num > 1) {
      return 255;
    }

    return Math.round(num * 255);
  }

  function parsePercentage(str) {
    var int = parseFloat(str);

    if (int < 0) {
      return 0;
    }

    if (int > 100) {
      return 1;
    }

    return int / 100;
  }

  var names = {
    transparent: 0x00000000,
    aliceblue: 0xf0f8ffff,
    antiquewhite: 0xfaebd7ff,
    aqua: 0x00ffffff,
    aquamarine: 0x7fffd4ff,
    azure: 0xf0ffffff,
    beige: 0xf5f5dcff,
    bisque: 0xffe4c4ff,
    black: 0x000000ff,
    blanchedalmond: 0xffebcdff,
    blue: 0x0000ffff,
    blueviolet: 0x8a2be2ff,
    brown: 0xa52a2aff,
    burlywood: 0xdeb887ff,
    burntsienna: 0xea7e5dff,
    cadetblue: 0x5f9ea0ff,
    chartreuse: 0x7fff00ff,
    chocolate: 0xd2691eff,
    coral: 0xff7f50ff,
    cornflowerblue: 0x6495edff,
    cornsilk: 0xfff8dcff,
    crimson: 0xdc143cff,
    cyan: 0x00ffffff,
    darkblue: 0x00008bff,
    darkcyan: 0x008b8bff,
    darkgoldenrod: 0xb8860bff,
    darkgray: 0xa9a9a9ff,
    darkgreen: 0x006400ff,
    darkgrey: 0xa9a9a9ff,
    darkkhaki: 0xbdb76bff,
    darkmagenta: 0x8b008bff,
    darkolivegreen: 0x556b2fff,
    darkorange: 0xff8c00ff,
    darkorchid: 0x9932ccff,
    darkred: 0x8b0000ff,
    darksalmon: 0xe9967aff,
    darkseagreen: 0x8fbc8fff,
    darkslateblue: 0x483d8bff,
    darkslategray: 0x2f4f4fff,
    darkslategrey: 0x2f4f4fff,
    darkturquoise: 0x00ced1ff,
    darkviolet: 0x9400d3ff,
    deeppink: 0xff1493ff,
    deepskyblue: 0x00bfffff,
    dimgray: 0x696969ff,
    dimgrey: 0x696969ff,
    dodgerblue: 0x1e90ffff,
    firebrick: 0xb22222ff,
    floralwhite: 0xfffaf0ff,
    forestgreen: 0x228b22ff,
    fuchsia: 0xff00ffff,
    gainsboro: 0xdcdcdcff,
    ghostwhite: 0xf8f8ffff,
    gold: 0xffd700ff,
    goldenrod: 0xdaa520ff,
    gray: 0x808080ff,
    green: 0x008000ff,
    greenyellow: 0xadff2fff,
    grey: 0x808080ff,
    honeydew: 0xf0fff0ff,
    hotpink: 0xff69b4ff,
    indianred: 0xcd5c5cff,
    indigo: 0x4b0082ff,
    ivory: 0xfffff0ff,
    khaki: 0xf0e68cff,
    lavender: 0xe6e6faff,
    lavenderblush: 0xfff0f5ff,
    lawngreen: 0x7cfc00ff,
    lemonchiffon: 0xfffacdff,
    lightblue: 0xadd8e6ff,
    lightcoral: 0xf08080ff,
    lightcyan: 0xe0ffffff,
    lightgoldenrodyellow: 0xfafad2ff,
    lightgray: 0xd3d3d3ff,
    lightgreen: 0x90ee90ff,
    lightgrey: 0xd3d3d3ff,
    lightpink: 0xffb6c1ff,
    lightsalmon: 0xffa07aff,
    lightseagreen: 0x20b2aaff,
    lightskyblue: 0x87cefaff,
    lightslategray: 0x778899ff,
    lightslategrey: 0x778899ff,
    lightsteelblue: 0xb0c4deff,
    lightyellow: 0xffffe0ff,
    lime: 0x00ff00ff,
    limegreen: 0x32cd32ff,
    linen: 0xfaf0e6ff,
    magenta: 0xff00ffff,
    maroon: 0x800000ff,
    mediumaquamarine: 0x66cdaaff,
    mediumblue: 0x0000cdff,
    mediumorchid: 0xba55d3ff,
    mediumpurple: 0x9370dbff,
    mediumseagreen: 0x3cb371ff,
    mediumslateblue: 0x7b68eeff,
    mediumspringgreen: 0x00fa9aff,
    mediumturquoise: 0x48d1ccff,
    mediumvioletred: 0xc71585ff,
    midnightblue: 0x191970ff,
    mintcream: 0xf5fffaff,
    mistyrose: 0xffe4e1ff,
    moccasin: 0xffe4b5ff,
    navajowhite: 0xffdeadff,
    navy: 0x000080ff,
    oldlace: 0xfdf5e6ff,
    olive: 0x808000ff,
    olivedrab: 0x6b8e23ff,
    orange: 0xffa500ff,
    orangered: 0xff4500ff,
    orchid: 0xda70d6ff,
    palegoldenrod: 0xeee8aaff,
    palegreen: 0x98fb98ff,
    paleturquoise: 0xafeeeeff,
    palevioletred: 0xdb7093ff,
    papayawhip: 0xffefd5ff,
    peachpuff: 0xffdab9ff,
    peru: 0xcd853fff,
    pink: 0xffc0cbff,
    plum: 0xdda0ddff,
    powderblue: 0xb0e0e6ff,
    purple: 0x800080ff,
    rebeccapurple: 0x663399ff,
    red: 0xff0000ff,
    rosybrown: 0xbc8f8fff,
    royalblue: 0x4169e1ff,
    saddlebrown: 0x8b4513ff,
    salmon: 0xfa8072ff,
    sandybrown: 0xf4a460ff,
    seagreen: 0x2e8b57ff,
    seashell: 0xfff5eeff,
    sienna: 0xa0522dff,
    silver: 0xc0c0c0ff,
    skyblue: 0x87ceebff,
    slateblue: 0x6a5acdff,
    slategray: 0x708090ff,
    slategrey: 0x708090ff,
    snow: 0xfffafaff,
    springgreen: 0x00ff7fff,
    steelblue: 0x4682b4ff,
    tan: 0xd2b48cff,
    teal: 0x008080ff,
    thistle: 0xd8bfd8ff,
    tomato: 0xff6347ff,
    turquoise: 0x40e0d0ff,
    violet: 0xee82eeff,
    wheat: 0xf5deb3ff,
    white: 0xffffffff,
    whitesmoke: 0xf5f5f5ff,
    yellow: 0xffff00ff,
    yellowgreen: 0x9acd32ff
  };
  module.exports = normalizeColor;
},127,[],"normalizeColor");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  var NativeMethodsMixin = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.NativeMethodsMixin;
  module.exports = NativeMethodsMixin;
},128,[21],"NativeMethodsMixin");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Components\\ProgressBarAndroid\\ProgressBarAndroid.android.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var PropTypes = _require(_dependencyMap[1], 'prop-types');

  var React = _require(_dependencyMap[2], 'React');

  var ReactNative = _require(_dependencyMap[3], 'ReactNative');

  var ViewPropTypes = _require(_dependencyMap[4], 'ViewPropTypes');

  var requireNativeComponent = _require(_dependencyMap[5], 'requireNativeComponent');

  var STYLE_ATTRIBUTES = ['Horizontal', 'Normal', 'Small', 'Large', 'Inverse', 'SmallInverse', 'LargeInverse'];

  var indeterminateType = function indeterminateType(props, propName, componentName) {
    var checker = function checker() {
      var indeterminate = props[propName];
      var styleAttr = props.styleAttr;

      if (!indeterminate && styleAttr !== 'Horizontal') {
        return new Error('indeterminate=false is only valid for styleAttr=Horizontal');
      }
    };

    for (var _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      rest[_key - 3] = arguments[_key];
    }

    return PropTypes.bool.apply(PropTypes, [props, propName, componentName].concat(rest)) || checker();
  };

  var ProgressBarAndroid = function (_ReactNative$NativeCo) {
    _inherits(ProgressBarAndroid, _ReactNative$NativeCo);

    function ProgressBarAndroid() {
      _classCallCheck(this, ProgressBarAndroid);

      return _possibleConstructorReturn(this, (ProgressBarAndroid.__proto__ || Object.getPrototypeOf(ProgressBarAndroid)).apply(this, arguments));
    }

    _createClass(ProgressBarAndroid, [{
      key: "render",
      value: function render() {
        return React.createElement(AndroidProgressBar, _extends({}, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 112
          }
        }));
      }
    }]);

    return ProgressBarAndroid;
  }(ReactNative.NativeComponent);

  ProgressBarAndroid.propTypes = _extends({}, ViewPropTypes, {
    styleAttr: PropTypes.oneOf(STYLE_ATTRIBUTES),
    animating: PropTypes.bool,
    indeterminate: indeterminateType,
    progress: PropTypes.number,
    color: ColorPropType,
    testID: PropTypes.string
  });
  ProgressBarAndroid.defaultProps = {
    styleAttr: 'Normal',
    indeterminate: true,
    animating: true
  };
  var AndroidProgressBar = requireNativeComponent('AndroidProgressBar', ProgressBarAndroid, {
    nativeOnly: {
      animating: true
    }
  });
  module.exports = ProgressBarAndroid;
},129,[126,130,133,21,134,148],"ProgressBarAndroid");
__d(function (global, _require, module, exports, _dependencyMap) {
  if (process.env.NODE_ENV !== 'production') {
    var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && (typeof Symbol === "function" ? Symbol.for : "@@for") && (typeof Symbol === "function" ? Symbol.for : "@@for")('react.element') || 0xeac7;

    var isValidElement = function isValidElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    };

    var throwOnDirectAccess = true;
    module.exports = _require(_dependencyMap[0], './factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);
  } else {
    module.exports = _require(_dependencyMap[1], './factoryWithThrowingShims')();
  }
},130,[131,132],"node_modules\\prop-types\\index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var emptyFunction = _require(_dependencyMap[0], 'fbjs/lib/emptyFunction');

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  var warning = _require(_dependencyMap[2], 'fbjs/lib/warning');

  var assign = _require(_dependencyMap[3], 'object-assign');

  var ReactPropTypesSecret = _require(_dependencyMap[4], './lib/ReactPropTypesSecret');

  var checkPropTypes = _require(_dependencyMap[5], './checkPropTypes');

  module.exports = function (isValidElement, throwOnDirectAccess) {
    var ITERATOR_SYMBOL = typeof Symbol === 'function' && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");
    var FAUX_ITERATOR_SYMBOL = '@@iterator';

    function getIteratorFn(maybeIterable) {
      var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);

      if (typeof iteratorFn === 'function') {
        return iteratorFn;
      }
    }

    var ANONYMOUS = '<<anonymous>>';
    var ReactPropTypes = {
      array: createPrimitiveTypeChecker('array'),
      bool: createPrimitiveTypeChecker('boolean'),
      func: createPrimitiveTypeChecker('function'),
      number: createPrimitiveTypeChecker('number'),
      object: createPrimitiveTypeChecker('object'),
      string: createPrimitiveTypeChecker('string'),
      symbol: createPrimitiveTypeChecker('symbol'),
      any: createAnyTypeChecker(),
      arrayOf: createArrayOfTypeChecker,
      element: createElementTypeChecker(),
      instanceOf: createInstanceTypeChecker,
      node: createNodeChecker(),
      objectOf: createObjectOfTypeChecker,
      oneOf: createEnumTypeChecker,
      oneOfType: createUnionTypeChecker,
      shape: createShapeTypeChecker,
      exact: createStrictShapeTypeChecker
    };

    function is(x, y) {
      if (x === y) {
        return x !== 0 || 1 / x === 1 / y;
      } else {
        return x !== x && y !== y;
      }
    }

    function PropTypeError(message) {
      this.message = message;
      this.stack = '';
    }

    PropTypeError.prototype = Error.prototype;

    function createChainableTypeChecker(validate) {
      if (process.env.NODE_ENV !== 'production') {
        var manualPropTypeCallCache = {};
        var manualPropTypeWarningCount = 0;
      }

      function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
        componentName = componentName || ANONYMOUS;
        propFullName = propFullName || propName;

        if (secret !== ReactPropTypesSecret) {
          if (throwOnDirectAccess) {
            invariant(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
          } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
            var cacheKey = componentName + ':' + propName;

            if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
              warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName);
              manualPropTypeCallCache[cacheKey] = true;
              manualPropTypeWarningCount++;
            }
          }
        }

        if (props[propName] == null) {
          if (isRequired) {
            if (props[propName] === null) {
              return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
            }

            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
          }

          return null;
        } else {
          return validate(props, propName, componentName, location, propFullName);
        }
      }

      var chainedCheckType = checkType.bind(null, false);
      chainedCheckType.isRequired = checkType.bind(null, true);
      return chainedCheckType;
    }

    function createPrimitiveTypeChecker(expectedType) {
      function validate(props, propName, componentName, location, propFullName, secret) {
        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== expectedType) {
          var preciseType = getPreciseType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createAnyTypeChecker() {
      return createChainableTypeChecker(emptyFunction.thatReturnsNull);
    }

    function createArrayOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
        }

        var propValue = props[propName];

        if (!Array.isArray(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
        }

        for (var i = 0; i < propValue.length; i++) {
          var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);

          if (error instanceof Error) {
            return error;
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createElementTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];

        if (!isValidElement(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createInstanceTypeChecker(expectedClass) {
      function validate(props, propName, componentName, location, propFullName) {
        if (!(props[propName] instanceof expectedClass)) {
          var expectedClassName = expectedClass.name || ANONYMOUS;
          var actualClassName = getClassName(props[propName]);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createEnumTypeChecker(expectedValues) {
      if (!Array.isArray(expectedValues)) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
        return emptyFunction.thatReturnsNull;
      }

      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];

        for (var i = 0; i < expectedValues.length; i++) {
          if (is(propValue, expectedValues[i])) {
            return null;
          }
        }

        var valuesString = JSON.stringify(expectedValues);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
      }

      return createChainableTypeChecker(validate);
    }

    function createObjectOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
        }

        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
        }

        for (var key in propValue) {
          if (propValue.hasOwnProperty(key)) {
            var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

            if (error instanceof Error) {
              return error;
            }
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createUnionTypeChecker(arrayOfTypeCheckers) {
      if (!Array.isArray(arrayOfTypeCheckers)) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
        return emptyFunction.thatReturnsNull;
      }

      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];

        if (typeof checker !== 'function') {
          warning(false, 'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received %s at index %s.', getPostfixForTypeWarning(checker), i);
          return emptyFunction.thatReturnsNull;
        }
      }

      function validate(props, propName, componentName, location, propFullName) {
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];

          if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
            return null;
          }
        }

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
      }

      return createChainableTypeChecker(validate);
    }

    function createNodeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        if (!isNode(props[propName])) {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
        }

        for (var key in shapeTypes) {
          var checker = shapeTypes[key];

          if (!checker) {
            continue;
          }

          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

          if (error) {
            return error;
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createStrictShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
        }

        var allKeys = assign({}, props[propName], shapeTypes);

        for (var key in allKeys) {
          var checker = shapeTypes[key];

          if (!checker) {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
          }

          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

          if (error) {
            return error;
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function isNode(propValue) {
      switch (typeof propValue) {
        case 'number':
        case 'string':
        case 'undefined':
          return true;

        case 'boolean':
          return !propValue;

        case 'object':
          if (Array.isArray(propValue)) {
            return propValue.every(isNode);
          }

          if (propValue === null || isValidElement(propValue)) {
            return true;
          }

          var iteratorFn = getIteratorFn(propValue);

          if (iteratorFn) {
            var iterator = iteratorFn.call(propValue);
            var step;

            if (iteratorFn !== propValue.entries) {
              while (!(step = iterator.next()).done) {
                if (!isNode(step.value)) {
                  return false;
                }
              }
            } else {
              while (!(step = iterator.next()).done) {
                var entry = step.value;

                if (entry) {
                  if (!isNode(entry[1])) {
                    return false;
                  }
                }
              }
            }
          } else {
            return false;
          }

          return true;

        default:
          return false;
      }
    }

    function isSymbol(propType, propValue) {
      if (propType === 'symbol') {
        return true;
      }

      if (propValue['@@toStringTag'] === 'Symbol') {
        return true;
      }

      if (typeof Symbol === 'function' && propValue instanceof Symbol) {
        return true;
      }

      return false;
    }

    function getPropType(propValue) {
      var propType = typeof propValue;

      if (Array.isArray(propValue)) {
        return 'array';
      }

      if (propValue instanceof RegExp) {
        return 'object';
      }

      if (isSymbol(propType, propValue)) {
        return 'symbol';
      }

      return propType;
    }

    function getPreciseType(propValue) {
      if (typeof propValue === 'undefined' || propValue === null) {
        return '' + propValue;
      }

      var propType = getPropType(propValue);

      if (propType === 'object') {
        if (propValue instanceof Date) {
          return 'date';
        } else if (propValue instanceof RegExp) {
          return 'regexp';
        }
      }

      return propType;
    }

    function getPostfixForTypeWarning(value) {
      var type = getPreciseType(value);

      switch (type) {
        case 'array':
        case 'object':
          return 'an ' + type;

        case 'boolean':
        case 'date':
        case 'regexp':
          return 'a ' + type;

        default:
          return type;
      }
    }

    function getClassName(propValue) {
      if (!propValue.constructor || !propValue.constructor.name) {
        return ANONYMOUS;
      }

      return propValue.constructor.name;
    }

    ReactPropTypes.checkPropTypes = checkPropTypes;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
},131,[57,13,56,115,119,118],"node_modules\\prop-types\\factoryWithTypeCheckers.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var emptyFunction = _require(_dependencyMap[0], 'fbjs/lib/emptyFunction');

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  var ReactPropTypesSecret = _require(_dependencyMap[2], './lib/ReactPropTypesSecret');

  module.exports = function () {
    function shim(props, propName, componentName, location, propFullName, secret) {
      if (secret === ReactPropTypesSecret) {
        return;
      }

      invariant(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
    }

    ;
    shim.isRequired = shim;

    function getShim() {
      return shim;
    }

    ;
    var ReactPropTypes = {
      array: shim,
      bool: shim,
      func: shim,
      number: shim,
      object: shim,
      string: shim,
      symbol: shim,
      any: shim,
      arrayOf: getShim,
      element: shim,
      instanceOf: getShim,
      node: shim,
      objectOf: getShim,
      oneOf: getShim,
      oneOfType: getShim,
      shape: getShim,
      exact: getShim
    };
    ReactPropTypes.checkPropTypes = emptyFunction;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
},132,[57,13,119],"node_modules\\prop-types\\factoryWithThrowingShims.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _require(_dependencyMap[0], 'react');
},133,[113],"React");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var EdgeInsetsPropType = _require2(_dependencyMap[0], 'EdgeInsetsPropType');

  var PlatformViewPropTypes = _require2(_dependencyMap[1], 'PlatformViewPropTypes');

  var PropTypes = _require2(_dependencyMap[2], 'prop-types');

  var StyleSheetPropType = _require2(_dependencyMap[3], 'StyleSheetPropType');

  var ViewStylePropTypes = _require2(_dependencyMap[4], 'ViewStylePropTypes');

  var _require = _require2(_dependencyMap[5], 'ViewAccessibility'),
      AccessibilityComponentTypes = _require.AccessibilityComponentTypes,
      AccessibilityTraits = _require.AccessibilityTraits;

  var stylePropType = StyleSheetPropType(ViewStylePropTypes);
  module.exports = _extends({}, PlatformViewPropTypes, {
    accessible: PropTypes.bool,
    accessibilityLabel: PropTypes.node,
    accessibilityActions: PropTypes.arrayOf(PropTypes.string),
    accessibilityComponentType: PropTypes.oneOf(AccessibilityComponentTypes),
    accessibilityLiveRegion: PropTypes.oneOf(['none', 'polite', 'assertive']),
    importantForAccessibility: PropTypes.oneOf(['auto', 'yes', 'no', 'no-hide-descendants']),
    accessibilityTraits: PropTypes.oneOfType([PropTypes.oneOf(AccessibilityTraits), PropTypes.arrayOf(PropTypes.oneOf(AccessibilityTraits))]),
    accessibilityViewIsModal: PropTypes.bool,
    accessibilityElementsHidden: PropTypes.bool,
    onAccessibilityAction: PropTypes.func,
    onAccessibilityTap: PropTypes.func,
    onMagicTap: PropTypes.func,
    testID: PropTypes.string,
    nativeID: PropTypes.string,
    onResponderGrant: PropTypes.func,
    onResponderMove: PropTypes.func,
    onResponderReject: PropTypes.func,
    onResponderRelease: PropTypes.func,
    onResponderTerminate: PropTypes.func,
    onResponderTerminationRequest: PropTypes.func,
    onStartShouldSetResponder: PropTypes.func,
    onStartShouldSetResponderCapture: PropTypes.func,
    onMoveShouldSetResponder: PropTypes.func,
    onMoveShouldSetResponderCapture: PropTypes.func,
    hitSlop: EdgeInsetsPropType,
    onLayout: PropTypes.func,
    pointerEvents: PropTypes.oneOf(['box-none', 'none', 'box-only', 'auto']),
    style: stylePropType,
    removeClippedSubviews: PropTypes.bool,
    renderToHardwareTextureAndroid: PropTypes.bool,
    shouldRasterizeIOS: PropTypes.bool,
    collapsable: PropTypes.bool,
    needsOffscreenAlphaCompositing: PropTypes.bool
  });
},134,[135,140,130,141,142,147],"ViewPropTypes");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = _require(_dependencyMap[0], 'prop-types');

  var createStrictShapeTypeChecker = _require(_dependencyMap[1], 'createStrictShapeTypeChecker');

  var EdgeInsetsPropType = createStrictShapeTypeChecker({
    top: PropTypes.number,
    left: PropTypes.number,
    bottom: PropTypes.number,
    right: PropTypes.number
  });
  module.exports = EdgeInsetsPropType;
},135,[130,136],"EdgeInsetsPropType");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var merge = _require(_dependencyMap[1], 'merge');

  function createStrictShapeTypeChecker(shapeTypes) {
    function checkType(isRequired, props, propName, componentName, location) {
      if (!props[propName]) {
        if (isRequired) {
          invariant(false, "Required object `" + propName + "` was not specified in " + ("`" + componentName + "`."));
        }

        return;
      }

      var propValue = props[propName];
      var propType = typeof propValue;
      var locationName = location || '(unknown)';

      if (propType !== 'object') {
        invariant(false, "Invalid " + locationName + " `" + propName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
      }

      var allKeys = merge(props[propName], shapeTypes);

      for (var _len = arguments.length, rest = Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
        rest[_key - 5] = arguments[_key];
      }

      for (var key in allKeys) {
        var checker = shapeTypes[key];

        if (!checker) {
          invariant(false, "Invalid props." + propName + " key `" + key + "` supplied to `" + componentName + "`." + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
        }

        var error = checker.apply(undefined, [propValue, key, componentName, location].concat(rest));

        if (error) {
          invariant(false, error.message + '\nBad object: ' + JSON.stringify(props[propName], null, '  '));
        }
      }
    }

    function chainedCheckType(props, propName, componentName, location) {
      for (var _len2 = arguments.length, rest = Array(_len2 > 4 ? _len2 - 4 : 0), _key2 = 4; _key2 < _len2; _key2++) {
        rest[_key2 - 4] = arguments[_key2];
      }

      return checkType.apply(undefined, [false, props, propName, componentName, location].concat(rest));
    }

    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
  }

  module.exports = createStrictShapeTypeChecker;
},136,[13,137],"createStrictShapeTypeChecker");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var mergeInto = _require(_dependencyMap[0], 'mergeInto');

  var merge = function merge(one, two) {
    var result = {};
    mergeInto(result, one);
    mergeInto(result, two);
    return result;
  };

  module.exports = merge;
},137,[138],"merge");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var mergeHelpers = _require(_dependencyMap[0], 'mergeHelpers');

  var checkMergeObjectArg = mergeHelpers.checkMergeObjectArg;
  var checkMergeIntoObjectArg = mergeHelpers.checkMergeIntoObjectArg;

  function mergeInto(one, two) {
    checkMergeIntoObjectArg(one);

    if (two != null) {
      checkMergeObjectArg(two);

      for (var key in two) {
        if (!two.hasOwnProperty(key)) {
          continue;
        }

        one[key] = two[key];
      }
    }
  }

  module.exports = mergeInto;
},138,[139],"mergeInto");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var MAX_MERGE_DEPTH = 36;

  var isTerminal = function isTerminal(o) {
    return typeof o !== 'object' || o instanceof Date || o === null;
  };

  var mergeHelpers = {
    MAX_MERGE_DEPTH: MAX_MERGE_DEPTH,
    isTerminal: isTerminal,
    normalizeMergeArg: function normalizeMergeArg(arg) {
      return arg === undefined || arg === null ? {} : arg;
    },
    checkMergeArrayArgs: function checkMergeArrayArgs(one, two) {
      invariant(Array.isArray(one) && Array.isArray(two), 'Tried to merge arrays, instead got %s and %s.', one, two);
    },
    checkMergeObjectArgs: function checkMergeObjectArgs(one, two) {
      mergeHelpers.checkMergeObjectArg(one);
      mergeHelpers.checkMergeObjectArg(two);
    },
    checkMergeObjectArg: function checkMergeObjectArg(arg) {
      invariant(!isTerminal(arg) && !Array.isArray(arg), 'Tried to merge an object, instead got %s.', arg);
    },
    checkMergeIntoObjectArg: function checkMergeIntoObjectArg(arg) {
      invariant((!isTerminal(arg) || typeof arg === 'function') && !Array.isArray(arg), 'Tried to merge into an object, instead got %s.', arg);
    },
    checkMergeLevel: function checkMergeLevel(level) {
      invariant(level < MAX_MERGE_DEPTH, 'Maximum deep merge depth exceeded. You may be attempting to merge ' + 'circular structures in an unsupported way.');
    },
    checkArrayStrategy: function checkArrayStrategy(strategy) {
      invariant(strategy === undefined || strategy in mergeHelpers.ArrayStrategies, 'You must provide an array strategy to deep merge functions to ' + 'instruct the deep merge how to resolve merging two arrays.');
    },
    ArrayStrategies: {
      Clobber: 'Clobber',
      Concat: 'Concat',
      IndexByIndex: 'IndexByIndex'
    }
  };
  module.exports = mergeHelpers;
},139,[13],"mergeHelpers");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.export = {};
},140,[],"PlatformViewPropTypes");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var createStrictShapeTypeChecker = _require(_dependencyMap[0], 'createStrictShapeTypeChecker');

  var flattenStyle = _require(_dependencyMap[1], 'flattenStyle');

  function StyleSheetPropType(shape) {
    var shapePropType = createStrictShapeTypeChecker(shape);
    return function (props, propName, componentName, location) {
      var newProps = props;

      if (props[propName]) {
        newProps = {};
        newProps[propName] = flattenStyle(props[propName]);
      }

      for (var _len = arguments.length, rest = Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
        rest[_key - 4] = arguments[_key];
      }

      return shapePropType.apply(undefined, [newProps, propName, componentName, location].concat(rest));
    };
  }

  module.exports = StyleSheetPropType;
},141,[136,104],"StyleSheetPropType");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var LayoutPropTypes = _require(_dependencyMap[1], 'LayoutPropTypes');

  var ReactPropTypes = _require(_dependencyMap[2], 'prop-types');

  var ShadowPropTypesIOS = _require(_dependencyMap[3], 'ShadowPropTypesIOS');

  var TransformPropTypes = _require(_dependencyMap[4], 'TransformPropTypes');

  var ViewStylePropTypes = _extends({}, LayoutPropTypes, ShadowPropTypesIOS, TransformPropTypes, {
    backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
    backgroundColor: ColorPropType,
    borderColor: ColorPropType,
    borderTopColor: ColorPropType,
    borderRightColor: ColorPropType,
    borderBottomColor: ColorPropType,
    borderLeftColor: ColorPropType,
    borderStartColor: ColorPropType,
    borderEndColor: ColorPropType,
    borderRadius: ReactPropTypes.number,
    borderTopLeftRadius: ReactPropTypes.number,
    borderTopRightRadius: ReactPropTypes.number,
    borderTopStartRadius: ReactPropTypes.number,
    borderTopEndRadius: ReactPropTypes.number,
    borderBottomLeftRadius: ReactPropTypes.number,
    borderBottomRightRadius: ReactPropTypes.number,
    borderBottomStartRadius: ReactPropTypes.number,
    borderBottomEndRadius: ReactPropTypes.number,
    borderStyle: ReactPropTypes.oneOf(['solid', 'dotted', 'dashed']),
    borderWidth: ReactPropTypes.number,
    borderTopWidth: ReactPropTypes.number,
    borderRightWidth: ReactPropTypes.number,
    borderBottomWidth: ReactPropTypes.number,
    borderLeftWidth: ReactPropTypes.number,
    opacity: ReactPropTypes.number,
    elevation: ReactPropTypes.number
  });

  module.exports = ViewStylePropTypes;
},142,[126,143,130,144,145],"ViewStylePropTypes");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypes = _require(_dependencyMap[0], 'prop-types');

  var LayoutPropTypes = {
    display: ReactPropTypes.oneOf(['none', 'flex']),
    width: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    height: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    start: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    end: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    top: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    left: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    right: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    bottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    minWidth: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    maxWidth: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    minHeight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    maxHeight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    margin: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginVertical: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginHorizontal: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginTop: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginBottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginLeft: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginRight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginStart: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginEnd: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    padding: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingVertical: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingHorizontal: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingTop: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingBottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingLeft: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingRight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingStart: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingEnd: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    borderWidth: ReactPropTypes.number,
    borderTopWidth: ReactPropTypes.number,
    borderStartWidth: ReactPropTypes.number,
    borderEndWidth: ReactPropTypes.number,
    borderRightWidth: ReactPropTypes.number,
    borderBottomWidth: ReactPropTypes.number,
    borderLeftWidth: ReactPropTypes.number,
    position: ReactPropTypes.oneOf(['absolute', 'relative']),
    flexDirection: ReactPropTypes.oneOf(['row', 'row-reverse', 'column', 'column-reverse']),
    flexWrap: ReactPropTypes.oneOf(['wrap', 'nowrap']),
    justifyContent: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'space-between', 'space-around', 'space-evenly']),
    alignItems: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'stretch', 'baseline']),
    alignSelf: ReactPropTypes.oneOf(['auto', 'flex-start', 'flex-end', 'center', 'stretch', 'baseline']),
    alignContent: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'stretch', 'space-between', 'space-around']),
    overflow: ReactPropTypes.oneOf(['visible', 'hidden', 'scroll']),
    flex: ReactPropTypes.number,
    flexGrow: ReactPropTypes.number,
    flexShrink: ReactPropTypes.number,
    flexBasis: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    aspectRatio: ReactPropTypes.number,
    zIndex: ReactPropTypes.number,
    direction: ReactPropTypes.oneOf(['inherit', 'ltr', 'rtl'])
  };
  module.exports = LayoutPropTypes;
},143,[130],"LayoutPropTypes");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var ReactPropTypes = _require(_dependencyMap[1], 'prop-types');

  var ShadowPropTypesIOS = {
    shadowColor: ColorPropType,
    shadowOffset: ReactPropTypes.shape({
      width: ReactPropTypes.number,
      height: ReactPropTypes.number
    }),
    shadowOpacity: ReactPropTypes.number,
    shadowRadius: ReactPropTypes.number
  };
  module.exports = ShadowPropTypesIOS;
},144,[126,130],"ShadowPropTypesIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypes = _require(_dependencyMap[0], 'prop-types');

  var deprecatedPropType = _require(_dependencyMap[1], 'deprecatedPropType');

  var TransformMatrixPropType = function TransformMatrixPropType(props, propName, componentName) {
    if (props[propName]) {
      return new Error('The transformMatrix style property is deprecated. ' + 'Use `transform: [{ matrix: ... }]` instead.');
    }
  };

  var DecomposedMatrixPropType = function DecomposedMatrixPropType(props, propName, componentName) {
    if (props[propName]) {
      return new Error('The decomposedMatrix style property is deprecated. ' + 'Use `transform: [...]` instead.');
    }
  };

  var TransformPropTypes = {
    transform: ReactPropTypes.arrayOf(ReactPropTypes.oneOfType([ReactPropTypes.shape({
      perspective: ReactPropTypes.number
    }), ReactPropTypes.shape({
      rotate: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateX: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateY: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateZ: ReactPropTypes.string
    }), ReactPropTypes.shape({
      scale: ReactPropTypes.number
    }), ReactPropTypes.shape({
      scaleX: ReactPropTypes.number
    }), ReactPropTypes.shape({
      scaleY: ReactPropTypes.number
    }), ReactPropTypes.shape({
      translateX: ReactPropTypes.number
    }), ReactPropTypes.shape({
      translateY: ReactPropTypes.number
    }), ReactPropTypes.shape({
      skewX: ReactPropTypes.string
    }), ReactPropTypes.shape({
      skewY: ReactPropTypes.string
    })])),
    transformMatrix: TransformMatrixPropType,
    decomposedMatrix: DecomposedMatrixPropType,
    scaleX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    scaleY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    rotation: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    translateX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    translateY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.')
  };
  module.exports = TransformPropTypes;
},145,[130,146],"TransformPropTypes");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var UIManager = _require(_dependencyMap[0], 'UIManager');

  function deprecatedPropType(propType, explanation) {
    return function validate(props, propName, componentName) {
      if (!UIManager[componentName] && props[propName] !== undefined) {
        console.warn("`" + propName + "` supplied to `" + componentName + "` has been deprecated. " + explanation);
      }

      for (var _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
        rest[_key - 3] = arguments[_key];
      }

      return propType.apply(undefined, [props, propName, componentName].concat(rest));
    };
  }

  module.exports = deprecatedPropType;
},146,[109],"deprecatedPropType");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = {
    AccessibilityTraits: ['none', 'button', 'link', 'header', 'search', 'image', 'selected', 'plays', 'key', 'text', 'summary', 'disabled', 'frequentUpdates', 'startsMedia', 'adjustable', 'allowsDirectInteraction', 'pageTurn'],
    AccessibilityComponentTypes: ['none', 'button', 'radiobutton_checked', 'radiobutton_unchecked']
  };
},147,[],"ViewAccessibility");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var Platform = _require(_dependencyMap[0], 'Platform');

  var ReactNativeBridgeEventPlugin = _require(_dependencyMap[1], 'ReactNativeBridgeEventPlugin');

  var ReactNativeStyleAttributes = _require(_dependencyMap[2], 'ReactNativeStyleAttributes');

  var UIManager = _require(_dependencyMap[3], 'UIManager');

  var createReactNativeComponentClass = _require(_dependencyMap[4], 'createReactNativeComponentClass');

  var insetsDiffer = _require(_dependencyMap[5], 'insetsDiffer');

  var matricesDiffer = _require(_dependencyMap[6], 'matricesDiffer');

  var pointsDiffer = _require(_dependencyMap[7], 'pointsDiffer');

  var processColor = _require(_dependencyMap[8], 'processColor');

  var resolveAssetSource = _require(_dependencyMap[9], 'resolveAssetSource');

  var sizesDiffer = _require(_dependencyMap[10], 'sizesDiffer');

  var verifyPropTypes = _require(_dependencyMap[11], 'verifyPropTypes');

  var invariant = _require(_dependencyMap[12], 'fbjs/lib/invariant');

  var warning = _require(_dependencyMap[13], 'fbjs/lib/warning');

  var hasAttachedDefaultEventTypes = false;

  function requireNativeComponent(viewName, componentInterface, extraConfig) {
    function attachDefaultEventTypes(viewConfig) {
      if (Platform.OS === 'android') {
        if (UIManager.ViewManagerNames) {
          viewConfig = merge(viewConfig, UIManager.getDefaultEventTypes());
        } else {
          viewConfig.bubblingEventTypes = merge(viewConfig.bubblingEventTypes, UIManager.genericBubblingEventTypes);
          viewConfig.directEventTypes = merge(viewConfig.directEventTypes, UIManager.genericDirectEventTypes);
        }
      }
    }

    function merge(destination, source) {
      if (!source) {
        return destination;
      }

      if (!destination) {
        return source;
      }

      for (var key in source) {
        if (!source.hasOwnProperty(key)) {
          continue;
        }

        var sourceValue = source[key];

        if (destination.hasOwnProperty(key)) {
          var destinationValue = destination[key];

          if (typeof sourceValue === 'object' && typeof destinationValue === 'object') {
            sourceValue = merge(destinationValue, sourceValue);
          }
        }

        destination[key] = sourceValue;
      }

      return destination;
    }

    function getViewConfig() {
      var viewConfig = UIManager[viewName];
      invariant(viewConfig != null && !viewConfig.NativeProps != null, 'Native component for "%s" does not exist', viewName);
      viewConfig.uiViewClassName = viewName;
      viewConfig.validAttributes = {};

      if (componentInterface) {
        viewConfig.propTypes = typeof componentInterface.__propTypesSecretDontUseThesePlease === 'object' ? componentInterface.__propTypesSecretDontUseThesePlease : componentInterface.propTypes;
      } else {
        viewConfig.propTypes = null;
      }

      var baseModuleName = viewConfig.baseModuleName;
      var bubblingEventTypes = viewConfig.bubblingEventTypes;
      var directEventTypes = viewConfig.directEventTypes;
      var nativeProps = viewConfig.NativeProps;

      while (baseModuleName) {
        var baseModule = UIManager[baseModuleName];

        if (!baseModule) {
          warning(false, 'Base module "%s" does not exist', baseModuleName);
          baseModuleName = null;
        } else {
          bubblingEventTypes = _extends({}, baseModule.bubblingEventTypes, bubblingEventTypes);
          directEventTypes = _extends({}, baseModule.directEventTypes, directEventTypes);
          nativeProps = _extends({}, baseModule.NativeProps, nativeProps);
          baseModuleName = baseModule.baseModuleName;
        }
      }

      viewConfig.bubblingEventTypes = bubblingEventTypes;
      viewConfig.directEventTypes = directEventTypes;

      for (var key in nativeProps) {
        var useAttribute = false;
        var attribute = {};
        var differ = TypeToDifferMap[nativeProps[key]];

        if (differ) {
          attribute.diff = differ;
          useAttribute = true;
        }

        var processor = TypeToProcessorMap[nativeProps[key]];

        if (processor) {
          attribute.process = processor;
          useAttribute = true;
        }

        viewConfig.validAttributes[key] = useAttribute ? attribute : true;
      }

      viewConfig.validAttributes.style = ReactNativeStyleAttributes;

      if (__DEV__) {
        componentInterface && verifyPropTypes(componentInterface, viewConfig, extraConfig && extraConfig.nativeOnly);
      }

      if (!hasAttachedDefaultEventTypes) {
        attachDefaultEventTypes(viewConfig);
        hasAttachedDefaultEventTypes = true;
      }

      ReactNativeBridgeEventPlugin.processEventTypes(viewConfig);
      return viewConfig;
    }

    return createReactNativeComponentClass(viewName, getViewConfig);
  }

  var TypeToDifferMap = {
    CATransform3D: matricesDiffer,
    CGPoint: pointsDiffer,
    CGSize: sizesDiffer,
    UIEdgeInsets: insetsDiffer
  };

  function processColorArray(colors) {
    return colors && colors.map(processColor);
  }

  var TypeToProcessorMap = {
    CGColor: processColor,
    CGColorArray: processColorArray,
    UIColor: processColor,
    UIColorArray: processColorArray,
    CGImage: resolveAssetSource,
    UIImage: resolveAssetSource,
    RCTImageSource: resolveAssetSource,
    Color: processColor,
    ColorArray: processColorArray
  };
  module.exports = requireNativeComponent;
},148,[52,149,150,109,159,160,161,162,155,163,158,170,13,56],"requireNativeComponent");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactNativeBridgeEventPlugin;
},149,[21],"ReactNativeBridgeEventPlugin");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var ImageStylePropTypes = _require(_dependencyMap[0], 'ImageStylePropTypes');

  var TextStylePropTypes = _require(_dependencyMap[1], 'TextStylePropTypes');

  var ViewStylePropTypes = _require(_dependencyMap[2], 'ViewStylePropTypes');

  var keyMirror = _require(_dependencyMap[3], 'fbjs/lib/keyMirror');

  var processColor = _require(_dependencyMap[4], 'processColor');

  var processTransform = _require(_dependencyMap[5], 'processTransform');

  var sizesDiffer = _require(_dependencyMap[6], 'sizesDiffer');

  var ReactNativeStyleAttributes = _extends({}, keyMirror(ViewStylePropTypes), keyMirror(TextStylePropTypes), keyMirror(ImageStylePropTypes));

  ReactNativeStyleAttributes.transform = {
    process: processTransform
  };
  ReactNativeStyleAttributes.shadowOffset = {
    diff: sizesDiffer
  };
  var colorAttributes = {
    process: processColor
  };
  ReactNativeStyleAttributes.backgroundColor = colorAttributes;
  ReactNativeStyleAttributes.borderBottomColor = colorAttributes;
  ReactNativeStyleAttributes.borderColor = colorAttributes;
  ReactNativeStyleAttributes.borderLeftColor = colorAttributes;
  ReactNativeStyleAttributes.borderRightColor = colorAttributes;
  ReactNativeStyleAttributes.borderTopColor = colorAttributes;
  ReactNativeStyleAttributes.borderStartColor = colorAttributes;
  ReactNativeStyleAttributes.borderEndColor = colorAttributes;
  ReactNativeStyleAttributes.color = colorAttributes;
  ReactNativeStyleAttributes.shadowColor = colorAttributes;
  ReactNativeStyleAttributes.textDecorationColor = colorAttributes;
  ReactNativeStyleAttributes.tintColor = colorAttributes;
  ReactNativeStyleAttributes.textShadowColor = colorAttributes;
  ReactNativeStyleAttributes.overlayColor = colorAttributes;
  module.exports = ReactNativeStyleAttributes;
},150,[151,154,142,153,155,156,158],"ReactNativeStyleAttributes");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var ImageResizeMode = _require(_dependencyMap[1], 'ImageResizeMode');

  var LayoutPropTypes = _require(_dependencyMap[2], 'LayoutPropTypes');

  var ReactPropTypes = _require(_dependencyMap[3], 'prop-types');

  var ShadowPropTypesIOS = _require(_dependencyMap[4], 'ShadowPropTypesIOS');

  var TransformPropTypes = _require(_dependencyMap[5], 'TransformPropTypes');

  var ImageStylePropTypes = _extends({}, LayoutPropTypes, ShadowPropTypesIOS, TransformPropTypes, {
    resizeMode: ReactPropTypes.oneOf(Object.keys(ImageResizeMode)),
    backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
    backgroundColor: ColorPropType,
    borderColor: ColorPropType,
    borderWidth: ReactPropTypes.number,
    borderRadius: ReactPropTypes.number,
    overflow: ReactPropTypes.oneOf(['visible', 'hidden']),
    tintColor: ColorPropType,
    opacity: ReactPropTypes.number,
    overlayColor: ReactPropTypes.string,
    borderTopLeftRadius: ReactPropTypes.number,
    borderTopRightRadius: ReactPropTypes.number,
    borderBottomLeftRadius: ReactPropTypes.number,
    borderBottomRightRadius: ReactPropTypes.number
  });

  module.exports = ImageStylePropTypes;
},151,[126,152,143,130,144,145],"ImageStylePropTypes");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var keyMirror = _require(_dependencyMap[0], 'fbjs/lib/keyMirror');

  var ImageResizeMode = keyMirror({
    contain: null,
    cover: null,
    stretch: null,
    center: null,
    repeat: null
  });
  module.exports = ImageResizeMode;
},152,[153],"ImageResizeMode");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0], './invariant');

  var keyMirror = function keyMirror(obj) {
    var ret = {};
    var key;
    !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : void 0;

    for (key in obj) {
      if (!obj.hasOwnProperty(key)) {
        continue;
      }

      ret[key] = key;
    }

    return ret;
  };

  module.exports = keyMirror;
},153,[13],"node_modules\\fbjs\\lib\\keyMirror.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var ReactPropTypes = _require(_dependencyMap[1], 'prop-types');

  var ViewStylePropTypes = _require(_dependencyMap[2], 'ViewStylePropTypes');

  var TextStylePropTypes = _extends({}, ViewStylePropTypes, {
    color: ColorPropType,
    fontFamily: ReactPropTypes.string,
    fontSize: ReactPropTypes.number,
    fontStyle: ReactPropTypes.oneOf(['normal', 'italic']),
    fontWeight: ReactPropTypes.oneOf(['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900']),
    fontVariant: ReactPropTypes.arrayOf(ReactPropTypes.oneOf(['small-caps', 'oldstyle-nums', 'lining-nums', 'tabular-nums', 'proportional-nums'])),
    textShadowOffset: ReactPropTypes.shape({
      width: ReactPropTypes.number,
      height: ReactPropTypes.number
    }),
    textShadowRadius: ReactPropTypes.number,
    textShadowColor: ColorPropType,
    letterSpacing: ReactPropTypes.number,
    lineHeight: ReactPropTypes.number,
    textAlign: ReactPropTypes.oneOf(['auto', 'left', 'right', 'center', 'justify']),
    textAlignVertical: ReactPropTypes.oneOf(['auto', 'top', 'bottom', 'center']),
    includeFontPadding: ReactPropTypes.bool,
    textDecorationLine: ReactPropTypes.oneOf(['none', 'underline', 'line-through', 'underline line-through']),
    textDecorationStyle: ReactPropTypes.oneOf(['solid', 'double', 'dotted', 'dashed']),
    textDecorationColor: ColorPropType,
    writingDirection: ReactPropTypes.oneOf(['auto', 'ltr', 'rtl'])
  });

  module.exports = TextStylePropTypes;
},154,[126,130,142],"TextStylePropTypes");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _require(_dependencyMap[0], 'Platform');

  var normalizeColor = _require(_dependencyMap[1], 'normalizeColor');

  function processColor(color) {
    if (color === undefined || color === null) {
      return color;
    }

    var int32Color = normalizeColor(color);

    if (int32Color === null || int32Color === undefined) {
      return undefined;
    }

    int32Color = (int32Color << 24 | int32Color >>> 8) >>> 0;

    if (Platform.OS === 'android') {
      int32Color = int32Color | 0x0;
    }

    return int32Color;
  }

  module.exports = processColor;
},155,[52,127],"processColor");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var MatrixMath = _require(_dependencyMap[0], 'MatrixMath');

  var Platform = _require(_dependencyMap[1], 'Platform');

  var invariant = _require(_dependencyMap[2], 'fbjs/lib/invariant');

  var stringifySafe = _require(_dependencyMap[3], 'stringifySafe');

  function processTransform(transform) {
    if (__DEV__) {
      _validateTransforms(transform);
    }

    if (Platform.OS === 'android' || Platform.OS === 'ios') {
      return transform;
    }

    var result = MatrixMath.createIdentityMatrix();
    transform.forEach(function (transformation) {
      var key = Object.keys(transformation)[0];
      var value = transformation[key];

      switch (key) {
        case 'matrix':
          MatrixMath.multiplyInto(result, result, value);
          break;

        case 'perspective':
          _multiplyTransform(result, MatrixMath.reusePerspectiveCommand, [value]);

          break;

        case 'rotateX':
          _multiplyTransform(result, MatrixMath.reuseRotateXCommand, [_convertToRadians(value)]);

          break;

        case 'rotateY':
          _multiplyTransform(result, MatrixMath.reuseRotateYCommand, [_convertToRadians(value)]);

          break;

        case 'rotate':
        case 'rotateZ':
          _multiplyTransform(result, MatrixMath.reuseRotateZCommand, [_convertToRadians(value)]);

          break;

        case 'scale':
          _multiplyTransform(result, MatrixMath.reuseScaleCommand, [value]);

          break;

        case 'scaleX':
          _multiplyTransform(result, MatrixMath.reuseScaleXCommand, [value]);

          break;

        case 'scaleY':
          _multiplyTransform(result, MatrixMath.reuseScaleYCommand, [value]);

          break;

        case 'translate':
          _multiplyTransform(result, MatrixMath.reuseTranslate3dCommand, [value[0], value[1], value[2] || 0]);

          break;

        case 'translateX':
          _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [value, 0]);

          break;

        case 'translateY':
          _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [0, value]);

          break;

        case 'skewX':
          _multiplyTransform(result, MatrixMath.reuseSkewXCommand, [_convertToRadians(value)]);

          break;

        case 'skewY':
          _multiplyTransform(result, MatrixMath.reuseSkewYCommand, [_convertToRadians(value)]);

          break;

        default:
          throw new Error('Invalid transform name: ' + key);
      }
    });
    return result;
  }

  function _multiplyTransform(result, matrixMathFunction, args) {
    var matrixToApply = MatrixMath.createIdentityMatrix();
    var argsWithIdentity = [matrixToApply].concat(args);
    matrixMathFunction.apply(this, argsWithIdentity);
    MatrixMath.multiplyInto(result, result, matrixToApply);
  }

  function _convertToRadians(value) {
    var floatValue = parseFloat(value);
    return value.indexOf('rad') > -1 ? floatValue : floatValue * Math.PI / 180;
  }

  function _validateTransforms(transform) {
    transform.forEach(function (transformation) {
      var keys = Object.keys(transformation);
      invariant(keys.length === 1, 'You must specify exactly one property per transform object. Passed properties: %s', stringifySafe(transformation));
      var key = keys[0];
      var value = transformation[key];

      _validateTransform(key, value, transformation);
    });
  }

  function _validateTransform(key, value, transformation) {
    invariant(!value.getValue, 'You passed an Animated.Value to a normal component. ' + 'You need to wrap that component in an Animated. For example, ' + 'replace <View /> by <Animated.View />.');
    var multivalueTransforms = ['matrix', 'translate'];

    if (multivalueTransforms.indexOf(key) !== -1) {
      invariant(Array.isArray(value), 'Transform with key of %s must have an array as the value: %s', key, stringifySafe(transformation));
    }

    switch (key) {
      case 'matrix':
        invariant(value.length === 9 || value.length === 16, 'Matrix transform must have a length of 9 (2d) or 16 (3d). ' + 'Provided matrix has a length of %s: %s', value.length, stringifySafe(transformation));
        break;

      case 'translate':
        invariant(value.length === 2 || value.length === 3, 'Transform with key translate must be an array of length 2 or 3, found %s: %s', value.length, stringifySafe(transformation));
        break;

      case 'rotateX':
      case 'rotateY':
      case 'rotateZ':
      case 'rotate':
      case 'skewX':
      case 'skewY':
        invariant(typeof value === 'string', 'Transform with key of "%s" must be a string: %s', key, stringifySafe(transformation));
        invariant(value.indexOf('deg') > -1 || value.indexOf('rad') > -1, 'Rotate transform must be expressed in degrees (deg) or radians ' + '(rad): %s', stringifySafe(transformation));
        break;

      case 'perspective':
        invariant(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, stringifySafe(transformation));
        invariant(value !== 0, 'Transform with key of "%s" cannot be zero: %s', key, stringifySafe(transformation));
        break;

      case 'translateX':
      case 'translateY':
      case 'scale':
      case 'scaleX':
      case 'scaleY':
        invariant(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, stringifySafe(transformation));
        break;

      default:
        invariant(false, 'Invalid transform %s: %s', key, stringifySafe(transformation));
    }
  }

  module.exports = processTransform;
},156,[157,52,13,39],"processTransform");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var MatrixMath = {
    createIdentityMatrix: function createIdentityMatrix() {
      return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
    },
    createCopy: function createCopy(m) {
      return [m[0], m[1], m[2], m[3], m[4], m[5], m[6], m[7], m[8], m[9], m[10], m[11], m[12], m[13], m[14], m[15]];
    },
    createOrthographic: function createOrthographic(left, right, bottom, top, near, far) {
      var a = 2 / (right - left);
      var b = 2 / (top - bottom);
      var c = -2 / (far - near);
      var tx = -(right + left) / (right - left);
      var ty = -(top + bottom) / (top - bottom);
      var tz = -(far + near) / (far - near);
      return [a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 0, tx, ty, tz, 1];
    },
    createFrustum: function createFrustum(left, right, bottom, top, near, far) {
      var r_width = 1 / (right - left);
      var r_height = 1 / (top - bottom);
      var r_depth = 1 / (near - far);
      var x = 2 * (near * r_width);
      var y = 2 * (near * r_height);
      var A = (right + left) * r_width;
      var B = (top + bottom) * r_height;
      var C = (far + near) * r_depth;
      var D = 2 * (far * near * r_depth);
      return [x, 0, 0, 0, 0, y, 0, 0, A, B, C, -1, 0, 0, D, 0];
    },
    createPerspective: function createPerspective(fovInRadians, aspect, near, far) {
      var h = 1 / Math.tan(fovInRadians / 2);
      var r_depth = 1 / (near - far);
      var C = (far + near) * r_depth;
      var D = 2 * (far * near * r_depth);
      return [h / aspect, 0, 0, 0, 0, h, 0, 0, 0, 0, C, -1, 0, 0, D, 0];
    },
    createTranslate2d: function createTranslate2d(x, y) {
      var mat = MatrixMath.createIdentityMatrix();
      MatrixMath.reuseTranslate2dCommand(mat, x, y);
      return mat;
    },
    reuseTranslate2dCommand: function reuseTranslate2dCommand(matrixCommand, x, y) {
      matrixCommand[12] = x;
      matrixCommand[13] = y;
    },
    reuseTranslate3dCommand: function reuseTranslate3dCommand(matrixCommand, x, y, z) {
      matrixCommand[12] = x;
      matrixCommand[13] = y;
      matrixCommand[14] = z;
    },
    createScale: function createScale(factor) {
      var mat = MatrixMath.createIdentityMatrix();
      MatrixMath.reuseScaleCommand(mat, factor);
      return mat;
    },
    reuseScaleCommand: function reuseScaleCommand(matrixCommand, factor) {
      matrixCommand[0] = factor;
      matrixCommand[5] = factor;
    },
    reuseScale3dCommand: function reuseScale3dCommand(matrixCommand, x, y, z) {
      matrixCommand[0] = x;
      matrixCommand[5] = y;
      matrixCommand[10] = z;
    },
    reusePerspectiveCommand: function reusePerspectiveCommand(matrixCommand, p) {
      matrixCommand[11] = -1 / p;
    },
    reuseScaleXCommand: function reuseScaleXCommand(matrixCommand, factor) {
      matrixCommand[0] = factor;
    },
    reuseScaleYCommand: function reuseScaleYCommand(matrixCommand, factor) {
      matrixCommand[5] = factor;
    },
    reuseScaleZCommand: function reuseScaleZCommand(matrixCommand, factor) {
      matrixCommand[10] = factor;
    },
    reuseRotateXCommand: function reuseRotateXCommand(matrixCommand, radians) {
      matrixCommand[5] = Math.cos(radians);
      matrixCommand[6] = Math.sin(radians);
      matrixCommand[9] = -Math.sin(radians);
      matrixCommand[10] = Math.cos(radians);
    },
    reuseRotateYCommand: function reuseRotateYCommand(matrixCommand, amount) {
      matrixCommand[0] = Math.cos(amount);
      matrixCommand[2] = -Math.sin(amount);
      matrixCommand[8] = Math.sin(amount);
      matrixCommand[10] = Math.cos(amount);
    },
    reuseRotateZCommand: function reuseRotateZCommand(matrixCommand, radians) {
      matrixCommand[0] = Math.cos(radians);
      matrixCommand[1] = Math.sin(radians);
      matrixCommand[4] = -Math.sin(radians);
      matrixCommand[5] = Math.cos(radians);
    },
    createRotateZ: function createRotateZ(radians) {
      var mat = MatrixMath.createIdentityMatrix();
      MatrixMath.reuseRotateZCommand(mat, radians);
      return mat;
    },
    reuseSkewXCommand: function reuseSkewXCommand(matrixCommand, radians) {
      matrixCommand[4] = Math.tan(radians);
    },
    reuseSkewYCommand: function reuseSkewYCommand(matrixCommand, radians) {
      matrixCommand[1] = Math.tan(radians);
    },
    multiplyInto: function multiplyInto(out, a, b) {
      var a00 = a[0],
          a01 = a[1],
          a02 = a[2],
          a03 = a[3],
          a10 = a[4],
          a11 = a[5],
          a12 = a[6],
          a13 = a[7],
          a20 = a[8],
          a21 = a[9],
          a22 = a[10],
          a23 = a[11],
          a30 = a[12],
          a31 = a[13],
          a32 = a[14],
          a33 = a[15];
      var b0 = b[0],
          b1 = b[1],
          b2 = b[2],
          b3 = b[3];
      out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[4];
      b1 = b[5];
      b2 = b[6];
      b3 = b[7];
      out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[8];
      b1 = b[9];
      b2 = b[10];
      b3 = b[11];
      out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[12];
      b1 = b[13];
      b2 = b[14];
      b3 = b[15];
      out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    },
    determinant: function determinant(matrix) {
      var _matrix = _slicedToArray(matrix, 16),
          m00 = _matrix[0],
          m01 = _matrix[1],
          m02 = _matrix[2],
          m03 = _matrix[3],
          m10 = _matrix[4],
          m11 = _matrix[5],
          m12 = _matrix[6],
          m13 = _matrix[7],
          m20 = _matrix[8],
          m21 = _matrix[9],
          m22 = _matrix[10],
          m23 = _matrix[11],
          m30 = _matrix[12],
          m31 = _matrix[13],
          m32 = _matrix[14],
          m33 = _matrix[15];

      return m03 * m12 * m21 * m30 - m02 * m13 * m21 * m30 - m03 * m11 * m22 * m30 + m01 * m13 * m22 * m30 + m02 * m11 * m23 * m30 - m01 * m12 * m23 * m30 - m03 * m12 * m20 * m31 + m02 * m13 * m20 * m31 + m03 * m10 * m22 * m31 - m00 * m13 * m22 * m31 - m02 * m10 * m23 * m31 + m00 * m12 * m23 * m31 + m03 * m11 * m20 * m32 - m01 * m13 * m20 * m32 - m03 * m10 * m21 * m32 + m00 * m13 * m21 * m32 + m01 * m10 * m23 * m32 - m00 * m11 * m23 * m32 - m02 * m11 * m20 * m33 + m01 * m12 * m20 * m33 + m02 * m10 * m21 * m33 - m00 * m12 * m21 * m33 - m01 * m10 * m22 * m33 + m00 * m11 * m22 * m33;
    },
    inverse: function inverse(matrix) {
      var det = MatrixMath.determinant(matrix);

      if (!det) {
        return matrix;
      }

      var _matrix2 = _slicedToArray(matrix, 16),
          m00 = _matrix2[0],
          m01 = _matrix2[1],
          m02 = _matrix2[2],
          m03 = _matrix2[3],
          m10 = _matrix2[4],
          m11 = _matrix2[5],
          m12 = _matrix2[6],
          m13 = _matrix2[7],
          m20 = _matrix2[8],
          m21 = _matrix2[9],
          m22 = _matrix2[10],
          m23 = _matrix2[11],
          m30 = _matrix2[12],
          m31 = _matrix2[13],
          m32 = _matrix2[14],
          m33 = _matrix2[15];

      return [(m12 * m23 * m31 - m13 * m22 * m31 + m13 * m21 * m32 - m11 * m23 * m32 - m12 * m21 * m33 + m11 * m22 * m33) / det, (m03 * m22 * m31 - m02 * m23 * m31 - m03 * m21 * m32 + m01 * m23 * m32 + m02 * m21 * m33 - m01 * m22 * m33) / det, (m02 * m13 * m31 - m03 * m12 * m31 + m03 * m11 * m32 - m01 * m13 * m32 - m02 * m11 * m33 + m01 * m12 * m33) / det, (m03 * m12 * m21 - m02 * m13 * m21 - m03 * m11 * m22 + m01 * m13 * m22 + m02 * m11 * m23 - m01 * m12 * m23) / det, (m13 * m22 * m30 - m12 * m23 * m30 - m13 * m20 * m32 + m10 * m23 * m32 + m12 * m20 * m33 - m10 * m22 * m33) / det, (m02 * m23 * m30 - m03 * m22 * m30 + m03 * m20 * m32 - m00 * m23 * m32 - m02 * m20 * m33 + m00 * m22 * m33) / det, (m03 * m12 * m30 - m02 * m13 * m30 - m03 * m10 * m32 + m00 * m13 * m32 + m02 * m10 * m33 - m00 * m12 * m33) / det, (m02 * m13 * m20 - m03 * m12 * m20 + m03 * m10 * m22 - m00 * m13 * m22 - m02 * m10 * m23 + m00 * m12 * m23) / det, (m11 * m23 * m30 - m13 * m21 * m30 + m13 * m20 * m31 - m10 * m23 * m31 - m11 * m20 * m33 + m10 * m21 * m33) / det, (m03 * m21 * m30 - m01 * m23 * m30 - m03 * m20 * m31 + m00 * m23 * m31 + m01 * m20 * m33 - m00 * m21 * m33) / det, (m01 * m13 * m30 - m03 * m11 * m30 + m03 * m10 * m31 - m00 * m13 * m31 - m01 * m10 * m33 + m00 * m11 * m33) / det, (m03 * m11 * m20 - m01 * m13 * m20 - m03 * m10 * m21 + m00 * m13 * m21 + m01 * m10 * m23 - m00 * m11 * m23) / det, (m12 * m21 * m30 - m11 * m22 * m30 - m12 * m20 * m31 + m10 * m22 * m31 + m11 * m20 * m32 - m10 * m21 * m32) / det, (m01 * m22 * m30 - m02 * m21 * m30 + m02 * m20 * m31 - m00 * m22 * m31 - m01 * m20 * m32 + m00 * m21 * m32) / det, (m02 * m11 * m30 - m01 * m12 * m30 - m02 * m10 * m31 + m00 * m12 * m31 + m01 * m10 * m32 - m00 * m11 * m32) / det, (m01 * m12 * m20 - m02 * m11 * m20 + m02 * m10 * m21 - m00 * m12 * m21 - m01 * m10 * m22 + m00 * m11 * m22) / det];
    },
    transpose: function transpose(m) {
      return [m[0], m[4], m[8], m[12], m[1], m[5], m[9], m[13], m[2], m[6], m[10], m[14], m[3], m[7], m[11], m[15]];
    },
    multiplyVectorByMatrix: function multiplyVectorByMatrix(v, m) {
      var _v = _slicedToArray(v, 4),
          vx = _v[0],
          vy = _v[1],
          vz = _v[2],
          vw = _v[3];

      return [vx * m[0] + vy * m[4] + vz * m[8] + vw * m[12], vx * m[1] + vy * m[5] + vz * m[9] + vw * m[13], vx * m[2] + vy * m[6] + vz * m[10] + vw * m[14], vx * m[3] + vy * m[7] + vz * m[11] + vw * m[15]];
    },
    v3Length: function v3Length(a) {
      return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
    },
    v3Normalize: function v3Normalize(vector, v3Length) {
      var im = 1 / (v3Length || MatrixMath.v3Length(vector));
      return [vector[0] * im, vector[1] * im, vector[2] * im];
    },
    v3Dot: function v3Dot(a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    },
    v3Combine: function v3Combine(a, b, aScale, bScale) {
      return [aScale * a[0] + bScale * b[0], aScale * a[1] + bScale * b[1], aScale * a[2] + bScale * b[2]];
    },
    v3Cross: function v3Cross(a, b) {
      return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
    },
    quaternionToDegreesXYZ: function quaternionToDegreesXYZ(q, matrix, row) {
      var _q = _slicedToArray(q, 4),
          qx = _q[0],
          qy = _q[1],
          qz = _q[2],
          qw = _q[3];

      var qw2 = qw * qw;
      var qx2 = qx * qx;
      var qy2 = qy * qy;
      var qz2 = qz * qz;
      var test = qx * qy + qz * qw;
      var unit = qw2 + qx2 + qy2 + qz2;
      var conv = 180 / Math.PI;

      if (test > 0.49999 * unit) {
        return [0, 2 * Math.atan2(qx, qw) * conv, 90];
      }

      if (test < -0.49999 * unit) {
        return [0, -2 * Math.atan2(qx, qw) * conv, -90];
      }

      return [MatrixMath.roundTo3Places(Math.atan2(2 * qx * qw - 2 * qy * qz, 1 - 2 * qx2 - 2 * qz2) * conv), MatrixMath.roundTo3Places(Math.atan2(2 * qy * qw - 2 * qx * qz, 1 - 2 * qy2 - 2 * qz2) * conv), MatrixMath.roundTo3Places(Math.asin(2 * qx * qy + 2 * qz * qw) * conv)];
    },
    roundTo3Places: function roundTo3Places(n) {
      var arr = n.toString().split('e');
      return Math.round(arr[0] + 'e' + (arr[1] ? +arr[1] - 3 : 3)) * 0.001;
    },
    decomposeMatrix: function decomposeMatrix(transformMatrix) {
      invariant(transformMatrix.length === 16, 'Matrix decomposition needs a list of 3d matrix values, received %s', transformMatrix);
      var perspective = [];
      var quaternion = [];
      var scale = [];
      var skew = [];
      var translation = [];

      if (!transformMatrix[15]) {
        return;
      }

      var matrix = [];
      var perspectiveMatrix = [];

      for (var i = 0; i < 4; i++) {
        matrix.push([]);

        for (var j = 0; j < 4; j++) {
          var value = transformMatrix[i * 4 + j] / transformMatrix[15];
          matrix[i].push(value);
          perspectiveMatrix.push(j === 3 ? 0 : value);
        }
      }

      perspectiveMatrix[15] = 1;

      if (!MatrixMath.determinant(perspectiveMatrix)) {
        return;
      }

      if (matrix[0][3] !== 0 || matrix[1][3] !== 0 || matrix[2][3] !== 0) {
        var rightHandSide = [matrix[0][3], matrix[1][3], matrix[2][3], matrix[3][3]];
        var inversePerspectiveMatrix = MatrixMath.inverse(perspectiveMatrix);
        var transposedInversePerspectiveMatrix = MatrixMath.transpose(inversePerspectiveMatrix);
        var perspective = MatrixMath.multiplyVectorByMatrix(rightHandSide, transposedInversePerspectiveMatrix);
      } else {
        perspective[0] = perspective[1] = perspective[2] = 0;
        perspective[3] = 1;
      }

      for (var i = 0; i < 3; i++) {
        translation[i] = matrix[3][i];
      }

      var row = [];

      for (i = 0; i < 3; i++) {
        row[i] = [matrix[i][0], matrix[i][1], matrix[i][2]];
      }

      scale[0] = MatrixMath.v3Length(row[0]);
      row[0] = MatrixMath.v3Normalize(row[0], scale[0]);
      skew[0] = MatrixMath.v3Dot(row[0], row[1]);
      row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);
      skew[0] = MatrixMath.v3Dot(row[0], row[1]);
      row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);
      scale[1] = MatrixMath.v3Length(row[1]);
      row[1] = MatrixMath.v3Normalize(row[1], scale[1]);
      skew[0] /= scale[1];
      skew[1] = MatrixMath.v3Dot(row[0], row[2]);
      row[2] = MatrixMath.v3Combine(row[2], row[0], 1.0, -skew[1]);
      skew[2] = MatrixMath.v3Dot(row[1], row[2]);
      row[2] = MatrixMath.v3Combine(row[2], row[1], 1.0, -skew[2]);
      scale[2] = MatrixMath.v3Length(row[2]);
      row[2] = MatrixMath.v3Normalize(row[2], scale[2]);
      skew[1] /= scale[2];
      skew[2] /= scale[2];
      var pdum3 = MatrixMath.v3Cross(row[1], row[2]);

      if (MatrixMath.v3Dot(row[0], pdum3) < 0) {
        for (i = 0; i < 3; i++) {
          scale[i] *= -1;
          row[i][0] *= -1;
          row[i][1] *= -1;
          row[i][2] *= -1;
        }
      }

      quaternion[0] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] - row[1][1] - row[2][2], 0));
      quaternion[1] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] + row[1][1] - row[2][2], 0));
      quaternion[2] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] - row[1][1] + row[2][2], 0));
      quaternion[3] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] + row[1][1] + row[2][2], 0));

      if (row[2][1] > row[1][2]) {
        quaternion[0] = -quaternion[0];
      }

      if (row[0][2] > row[2][0]) {
        quaternion[1] = -quaternion[1];
      }

      if (row[1][0] > row[0][1]) {
        quaternion[2] = -quaternion[2];
      }

      var rotationDegrees;

      if (quaternion[0] < 0.001 && quaternion[0] >= 0 && quaternion[1] < 0.001 && quaternion[1] >= 0) {
        rotationDegrees = [0, 0, MatrixMath.roundTo3Places(Math.atan2(row[0][1], row[0][0]) * 180 / Math.PI)];
      } else {
        rotationDegrees = MatrixMath.quaternionToDegreesXYZ(quaternion, matrix, row);
      }

      return {
        rotationDegrees: rotationDegrees,
        perspective: perspective,
        quaternion: quaternion,
        scale: scale,
        skew: skew,
        translation: translation,
        rotate: rotationDegrees[2],
        rotateX: rotationDegrees[0],
        rotateY: rotationDegrees[1],
        scaleX: scale[0],
        scaleY: scale[1],
        translateX: translation[0],
        translateY: translation[1]
      };
    }
  };
  module.exports = MatrixMath;
},157,[13],"MatrixMath");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var dummySize = {
    width: undefined,
    height: undefined
  };

  var sizesDiffer = function sizesDiffer(one, two) {
    one = one || dummySize;
    two = two || dummySize;
    return one !== two && (one.width !== two.width || one.height !== two.height);
  };

  module.exports = sizesDiffer;
},158,[],"sizesDiffer");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.createReactNativeComponentClass;
},159,[21],"createReactNativeComponentClass");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var dummyInsets = {
    top: undefined,
    left: undefined,
    right: undefined,
    bottom: undefined
  };

  var insetsDiffer = function insetsDiffer(one, two) {
    one = one || dummyInsets;
    two = two || dummyInsets;
    return one !== two && (one.top !== two.top || one.left !== two.left || one.right !== two.right || one.bottom !== two.bottom);
  };

  module.exports = insetsDiffer;
},160,[],"insetsDiffer");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var matricesDiffer = function matricesDiffer(one, two) {
    if (one === two) {
      return false;
    }

    return !one || !two || one[12] !== two[12] || one[13] !== two[13] || one[14] !== two[14] || one[5] !== two[5] || one[10] !== two[10] || one[1] !== two[1] || one[2] !== two[2] || one[3] !== two[3] || one[4] !== two[4] || one[6] !== two[6] || one[7] !== two[7] || one[8] !== two[8] || one[9] !== two[9] || one[11] !== two[11] || one[15] !== two[15];
  };

  module.exports = matricesDiffer;
},161,[],"matricesDiffer");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var dummyPoint = {
    x: undefined,
    y: undefined
  };

  var pointsDiffer = function pointsDiffer(one, two) {
    one = one || dummyPoint;
    two = two || dummyPoint;
    return one !== two && (one.x !== two.x || one.y !== two.y);
  };

  module.exports = pointsDiffer;
},162,[],"pointsDiffer");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var AssetRegistry = _require(_dependencyMap[0], 'AssetRegistry');

  var AssetSourceResolver = _require(_dependencyMap[1], 'AssetSourceResolver');

  var _customSourceTransformer = void 0,
      _serverURL = void 0,
      _scriptURL = void 0;

  var _sourceCodeScriptURL = void 0;

  function getDevServerURL() {
    if (_serverURL === undefined) {
      var match = _sourceCodeScriptURL && _sourceCodeScriptURL.match(/^https?:\/\/.*?\//);

      if (match) {
        _serverURL = match[0];
      } else {
        _serverURL = null;
      }
    }

    return _serverURL;
  }

  function _coerceLocalScriptURL(scriptURL) {
    if (scriptURL) {
      if (scriptURL.startsWith('assets://')) {
        return null;
      }

      scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);

      if (!scriptURL.includes('://')) {
        scriptURL = 'file://' + scriptURL;
      }
    }

    return scriptURL;
  }

  function getScriptURL() {
    if (_scriptURL === undefined) {
      _scriptURL = _coerceLocalScriptURL(_sourceCodeScriptURL);
    }

    return _scriptURL;
  }

  function setCustomSourceTransformer(transformer) {
    _customSourceTransformer = transformer;
  }

  function resolveAssetSource(source) {
    if (typeof source === 'object') {
      return source;
    }

    var asset = AssetRegistry.getAssetByID(source);

    if (!asset) {
      return null;
    }

    var resolver = new AssetSourceResolver(getDevServerURL(), getScriptURL(), asset);

    if (_customSourceTransformer) {
      return _customSourceTransformer(resolver);
    }

    return resolver.defaultAsset();
  }

  var sourceCode = global.nativeExtensions && global.nativeExtensions.SourceCode;

  if (!sourceCode) {
    var NativeModules = _require(_dependencyMap[2], 'NativeModules');

    sourceCode = NativeModules && NativeModules.SourceCode;
  }

  _sourceCodeScriptURL = sourceCode.scriptURL;
  module.exports = resolveAssetSource;
  module.exports.pickScale = AssetSourceResolver.pickScale;
  module.exports.setCustomSourceTransformer = setCustomSourceTransformer;
},163,[164,165,15],"resolveAssetSource");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var assets = [];

  function registerAsset(asset) {
    return assets.push(asset);
  }

  function getAssetByID(assetId) {
    return assets[assetId - 1];
  }

  module.exports = {
    registerAsset: registerAsset,
    getAssetByID: getAssetByID
  };
},164,[],"AssetRegistry");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var PixelRatio = _require(_dependencyMap[0], 'PixelRatio');

  var Platform = _require(_dependencyMap[1], 'Platform');

  var assetPathUtils = _require(_dependencyMap[2], '../../local-cli/bundle/assetPathUtils');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  function getScaledAssetPath(asset) {
    var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());
    var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';
    var assetDir = assetPathUtils.getBasePath(asset);
    return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;
  }

  function getAssetPathInDrawableFolder(asset) {
    var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());
    var drawbleFolder = assetPathUtils.getAndroidResourceFolderName(asset, scale);
    var fileName = assetPathUtils.getAndroidResourceIdentifier(asset);
    return drawbleFolder + '/' + fileName + '.' + asset.type;
  }

  var AssetSourceResolver = function () {
    function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {
      _classCallCheck(this, AssetSourceResolver);

      this.serverUrl = serverUrl;
      this.jsbundleUrl = jsbundleUrl;
      this.asset = asset;
    }

    _createClass(AssetSourceResolver, [{
      key: "isLoadedFromServer",
      value: function isLoadedFromServer() {
        return !!this.serverUrl;
      }
    }, {
      key: "isLoadedFromFileSystem",
      value: function isLoadedFromFileSystem() {
        return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));
      }
    }, {
      key: "defaultAsset",
      value: function defaultAsset() {
        if (this.isLoadedFromServer()) {
          return this.assetServerURL();
        }

        if (Platform.OS === 'android') {
          return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
        } else {
          return this.scaledAssetURLNearBundle();
        }
      }
    }, {
      key: "assetServerURL",
      value: function assetServerURL() {
        invariant(!!this.serverUrl, 'need server to load from');
        return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + Platform.OS + '&hash=' + this.asset.hash);
      }
    }, {
      key: "scaledAssetPath",
      value: function scaledAssetPath() {
        return this.fromSource(getScaledAssetPath(this.asset));
      }
    }, {
      key: "scaledAssetURLNearBundle",
      value: function scaledAssetURLNearBundle() {
        var path = this.jsbundleUrl || 'file://';
        return this.fromSource(path + getScaledAssetPath(this.asset));
      }
    }, {
      key: "resourceIdentifierWithoutScale",
      value: function resourceIdentifierWithoutScale() {
        invariant(Platform.OS === 'android', 'resource identifiers work on Android');
        return this.fromSource(assetPathUtils.getAndroidResourceIdentifier(this.asset));
      }
    }, {
      key: "drawableFolderInBundle",
      value: function drawableFolderInBundle() {
        var path = this.jsbundleUrl || 'file://';
        return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));
      }
    }, {
      key: "fromSource",
      value: function fromSource(source) {
        return {
          __packager_asset: true,
          width: this.asset.width,
          height: this.asset.height,
          uri: source,
          scale: AssetSourceResolver.pickScale(this.asset.scales, PixelRatio.get())
        };
      }
    }], [{
      key: "pickScale",
      value: function pickScale(scales, deviceScale) {
        for (var i = 0; i < scales.length; i++) {
          if (scales[i] >= deviceScale) {
            return scales[i];
          }
        }

        return scales[scales.length - 1] || 1;
      }
    }]);

    return AssetSourceResolver;
  }();

  module.exports = AssetSourceResolver;
},165,[166,52,169,13],"AssetSourceResolver");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var Dimensions = _require(_dependencyMap[0], 'Dimensions');

  var PixelRatio = function () {
    function PixelRatio() {
      _classCallCheck(this, PixelRatio);
    }

    _createClass(PixelRatio, null, [{
      key: "get",
      value: function get() {
        return Dimensions.get('window').scale;
      }
    }, {
      key: "getFontScale",
      value: function getFontScale() {
        return Dimensions.get('window').fontScale || PixelRatio.get();
      }
    }, {
      key: "getPixelSizeForLayoutSize",
      value: function getPixelSizeForLayoutSize(layoutSize) {
        return Math.round(layoutSize * PixelRatio.get());
      }
    }, {
      key: "roundToNearestPixel",
      value: function roundToNearestPixel(layoutSize) {
        var ratio = PixelRatio.get();
        return Math.round(layoutSize * ratio) / ratio;
      }
    }, {
      key: "startDetecting",
      value: function startDetecting() {}
    }]);

    return PixelRatio;
  }();

  module.exports = PixelRatio;
},166,[167],"PixelRatio");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var EventEmitter = _require(_dependencyMap[0], 'EventEmitter');

  var Platform = _require(_dependencyMap[1], 'Platform');

  var RCTDeviceEventEmitter = _require(_dependencyMap[2], 'RCTDeviceEventEmitter');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var eventEmitter = new EventEmitter();
  var dimensionsInitialized = false;
  var dimensions = {};

  var Dimensions = function () {
    function Dimensions() {
      _classCallCheck(this, Dimensions);
    }

    _createClass(Dimensions, null, [{
      key: "set",
      value: function set(dims) {
        if (dims && dims.windowPhysicalPixels) {
          dims = JSON.parse(JSON.stringify(dims));
          var windowPhysicalPixels = dims.windowPhysicalPixels;
          dims.window = {
            width: windowPhysicalPixels.width / windowPhysicalPixels.scale,
            height: windowPhysicalPixels.height / windowPhysicalPixels.scale,
            scale: windowPhysicalPixels.scale,
            fontScale: windowPhysicalPixels.fontScale
          };

          if (Platform.OS === 'android') {
            var screenPhysicalPixels = dims.screenPhysicalPixels;
            dims.screen = {
              width: screenPhysicalPixels.width / screenPhysicalPixels.scale,
              height: screenPhysicalPixels.height / screenPhysicalPixels.scale,
              scale: screenPhysicalPixels.scale,
              fontScale: screenPhysicalPixels.fontScale
            };
            delete dims.screenPhysicalPixels;
          } else {
            dims.screen = dims.window;
          }

          delete dims.windowPhysicalPixels;
        }

        _extends(dimensions, dims);

        if (dimensionsInitialized) {
          eventEmitter.emit('change', {
            window: dimensions.window,
            screen: dimensions.screen
          });
        } else {
          dimensionsInitialized = true;
        }
      }
    }, {
      key: "get",
      value: function get(dim) {
        invariant(dimensions[dim], 'No dimension set for key ' + dim);
        return dimensions[dim];
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        invariant(type === 'change', 'Trying to subscribe to unknown event: "%s"', type);
        eventEmitter.addListener(type, handler);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        invariant(type === 'change', 'Trying to remove listener for unknown event: "%s"', type);
        eventEmitter.removeListener(type, handler);
      }
    }]);

    return Dimensions;
  }();

  var dims = global.nativeExtensions && global.nativeExtensions.DeviceInfo && global.nativeExtensions.DeviceInfo.Dimensions;
  var nativeExtensionsEnabled = true;

  if (!dims) {
    var DeviceInfo = _require(_dependencyMap[4], 'DeviceInfo');

    dims = DeviceInfo.Dimensions;
    nativeExtensionsEnabled = false;
  }

  invariant(dims, 'Either DeviceInfo native extension or DeviceInfo Native Module must be registered');
  Dimensions.set(dims);

  if (!nativeExtensionsEnabled) {
    RCTDeviceEventEmitter.addListener('didUpdateDimensions', function (update) {
      Dimensions.set(update);
    });
  }

  module.exports = Dimensions;
},167,[67,52,70,13,168],"Dimensions");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var DeviceInfo = _require(_dependencyMap[0], 'NativeModules').DeviceInfo;

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  invariant(DeviceInfo, 'DeviceInfo native module is not installed correctly');
  module.exports = DeviceInfo;
},168,[15,13],"DeviceInfo");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function getAndroidAssetSuffix(scale) {
    switch (scale) {
      case 0.75:
        return 'ldpi';

      case 1:
        return 'mdpi';

      case 1.5:
        return 'hdpi';

      case 2:
        return 'xhdpi';

      case 3:
        return 'xxhdpi';

      case 4:
        return 'xxxhdpi';
    }

    throw new Error('no such scale');
  }

  var drawableFileTypes = new Set(['gif', 'jpeg', 'jpg', 'png', 'svg', 'webp', 'xml']);

  function getAndroidResourceFolderName(asset, scale) {
    if (!drawableFileTypes.has(asset.type)) {
      return 'raw';
    }

    var suffix = getAndroidAssetSuffix(scale);

    if (!suffix) {
      throw new Error('Don\'t know which android drawable suffix to use for asset: ' + JSON.stringify(asset));
    }

    var androidFolder = 'drawable-' + suffix;
    return androidFolder;
  }

  function getAndroidResourceIdentifier(asset) {
    var folderPath = getBasePath(asset);
    return (folderPath + '/' + asset.name).toLowerCase().replace(/\//g, '_').replace(/([^a-z0-9_])/g, '').replace(/^assets_/, '');
  }

  function getBasePath(asset) {
    var basePath = asset.httpServerLocation;

    if (basePath[0] === '/') {
      basePath = basePath.substr(1);
    }

    return basePath;
  }

  module.exports = {
    getAndroidAssetSuffix: getAndroidAssetSuffix,
    getAndroidResourceFolderName: getAndroidResourceFolderName,
    getAndroidResourceIdentifier: getAndroidResourceIdentifier,
    getBasePath: getBasePath
  };
},169,[],"node_modules\\react-native\\local-cli\\bundle\\assetPathUtils.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ReactNativeStyleAttributes = _require(_dependencyMap[0], 'ReactNativeStyleAttributes');

  function verifyPropTypes(componentInterface, viewConfig, nativePropsToIgnore) {
    if (!viewConfig) {
      return;
    }

    var componentName = componentInterface.displayName || componentInterface.name || 'unknown';
    var propTypes = componentInterface.__propTypesSecretDontUseThesePlease || componentInterface.propTypes;

    if (!propTypes) {
      throw new Error('`' + componentName + '` has no propTypes defined`');
    }

    var nativeProps = viewConfig.NativeProps;

    for (var prop in nativeProps) {
      if (!propTypes[prop] && !ReactNativeStyleAttributes[prop] && (!nativePropsToIgnore || !nativePropsToIgnore[prop])) {
        var message;

        if (propTypes.hasOwnProperty(prop)) {
          message = '`' + componentName + '` has incorrectly defined propType for native prop `' + viewConfig.uiViewClassName + '.' + prop + '` of native type `' + nativeProps[prop];
        } else {
          message = '`' + componentName + '` has no propType for native prop `' + viewConfig.uiViewClassName + '.' + prop + '` of native type `' + nativeProps[prop] + '`';
        }

        message += "\nIf you haven't changed this prop yourself, this usually means that " + 'your versions of the native code and JavaScript code are out of sync. Updating both ' + 'should make this error go away.';
        throw new Error(message);
      }
    }
  }

  module.exports = verifyPropTypes;
},170,[150],"verifyPropTypes");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var PixelRatio = _require(_dependencyMap[0], 'PixelRatio');

  var ReactNativePropRegistry = _require(_dependencyMap[1], 'ReactNativePropRegistry');

  var ReactNativeStyleAttributes = _require(_dependencyMap[2], 'ReactNativeStyleAttributes');

  var StyleSheetValidation = _require(_dependencyMap[3], 'StyleSheetValidation');

  var flatten = _require(_dependencyMap[4], 'flattenStyle');

  var hairlineWidth = PixelRatio.roundToNearestPixel(0.4);

  if (hairlineWidth === 0) {
    hairlineWidth = 1 / PixelRatio.get();
  }

  var absoluteFillObject = {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0
  };
  var absoluteFill = ReactNativePropRegistry.register(absoluteFillObject);
  module.exports = {
    hairlineWidth: hairlineWidth,
    absoluteFill: absoluteFill,
    absoluteFillObject: absoluteFillObject,
    compose: function compose(style1, style2) {
      if (style1 && style2) {
        return [style1, style2];
      } else {
        return style1 || style2;
      }
    },
    flatten: flatten,
    setStyleAttributePreprocessor: function setStyleAttributePreprocessor(property, process) {
      var value = void 0;

      if (typeof ReactNativeStyleAttributes[property] === 'string') {
        value = {};
      } else if (typeof ReactNativeStyleAttributes[property] === 'object') {
        value = ReactNativeStyleAttributes[property];
      } else {
        console.error(property + " is not a valid style attribute");
        return;
      }

      if (__DEV__ && typeof value.process === 'function') {
        console.warn("Overwriting " + property + " style attribute preprocessor");
      }

      ReactNativeStyleAttributes[property] = _extends({}, value, {
        process: process
      });
    },
    create: function create(obj) {
      var result = {};

      for (var key in obj) {
        StyleSheetValidation.validateStyle(key, obj);
        result[key] = obj[key] && ReactNativePropRegistry.register(obj[key]);
      }

      return result;
    }
  };
},171,[166,105,150,172,104],"StyleSheet");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var ImageStylePropTypes = _require(_dependencyMap[0], 'ImageStylePropTypes');

  var TextStylePropTypes = _require(_dependencyMap[1], 'TextStylePropTypes');

  var ViewStylePropTypes = _require(_dependencyMap[2], 'ViewStylePropTypes');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

  var StyleSheetValidation = function () {
    function StyleSheetValidation() {
      _classCallCheck(this, StyleSheetValidation);
    }

    _createClass(StyleSheetValidation, null, [{
      key: "validateStyleProp",
      value: function validateStyleProp(prop, style, caller) {
        if (!__DEV__) {
          return;
        }

        if (allStylePropTypes[prop] === undefined) {
          var message1 = '"' + prop + '" is not a valid style property.';
          var message2 = '\nValid style props: ' + JSON.stringify(Object.keys(allStylePropTypes).sort(), null, '  ');
          styleError(message1, style, caller, message2);
        }

        var error = allStylePropTypes[prop](style, prop, caller, 'prop', null, ReactPropTypesSecret);

        if (error) {
          styleError(error.message, style, caller);
        }
      }
    }, {
      key: "validateStyle",
      value: function validateStyle(name, styles) {
        if (!__DEV__) {
          return;
        }

        for (var prop in styles[name]) {
          StyleSheetValidation.validateStyleProp(prop, styles[name], 'StyleSheet ' + name);
        }
      }
    }, {
      key: "addValidStylePropTypes",
      value: function addValidStylePropTypes(stylePropTypes) {
        for (var key in stylePropTypes) {
          allStylePropTypes[key] = stylePropTypes[key];
        }
      }
    }]);

    return StyleSheetValidation;
  }();

  var styleError = function styleError(message1, style, caller, message2) {
    invariant(false, message1 + '\n' + (caller || '<<unknown>>') + ': ' + JSON.stringify(style, null, '  ') + (message2 || ''));
  };

  var allStylePropTypes = {};
  StyleSheetValidation.addValidStylePropTypes(ImageStylePropTypes);
  StyleSheetValidation.addValidStylePropTypes(TextStylePropTypes);
  StyleSheetValidation.addValidStylePropTypes(ViewStylePropTypes);
  module.exports = StyleSheetValidation;
},172,[151,154,142,13],"StyleSheetValidation");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Components\\View\\View.js";

  var NativeMethodsMixin = _require2(_dependencyMap[0], 'NativeMethodsMixin');

  var Platform = _require2(_dependencyMap[1], 'Platform');

  var React = _require2(_dependencyMap[2], 'React');

  var ReactNativeStyleAttributes = _require2(_dependencyMap[3], 'ReactNativeStyleAttributes');

  var ReactNativeViewAttributes = _require2(_dependencyMap[4], 'ReactNativeViewAttributes');

  var ViewPropTypes = _require2(_dependencyMap[5], 'ViewPropTypes');

  var _require = _require2(_dependencyMap[6], 'ViewContext'),
      ViewContextTypes = _require.ViewContextTypes;

  var createReactClass = _require2(_dependencyMap[7], 'create-react-class');

  var invariant = _require2(_dependencyMap[8], 'fbjs/lib/invariant');

  var requireNativeComponent = _require2(_dependencyMap[9], 'requireNativeComponent');

  var View = createReactClass({
    displayName: 'View',
    mixins: [NativeMethodsMixin],
    propTypes: ViewPropTypes,
    viewConfig: {
      uiViewClassName: 'RCTView',
      validAttributes: ReactNativeViewAttributes.RCTView
    },
    childContextTypes: ViewContextTypes,
    getChildContext: function getChildContext() {
      return {
        isInAParentText: false
      };
    },
    render: function render() {
      invariant(!(this.context.isInAParentText && Platform.OS === 'android'), 'Nesting of <View> within <Text> is not supported on Android.');
      return React.createElement(RCTView, _extends({}, this.props, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 78
        }
      }));
    }
  });
  var RCTView = requireNativeComponent('RCTView', View, {
    nativeOnly: {
      nativeBackgroundAndroid: true,
      nativeForegroundAndroid: true
    }
  });

  if (__DEV__) {
    var UIManager = _require2(_dependencyMap[10], 'UIManager');

    var viewConfig = UIManager.viewConfigs && UIManager.viewConfigs.RCTView || {};

    for (var prop in viewConfig.nativeProps) {
      var viewAny = View;

      if (!viewAny.propTypes[prop] && !ReactNativeStyleAttributes[prop]) {
        throw new Error('View is missing propType for native prop `' + prop + '`');
      }
    }
  }

  var ViewToExport = RCTView;

  if (__DEV__) {
    ViewToExport = View;
  }

  module.exports = ViewToExport;
},173,[128,52,133,150,174,134,175,176,13,148,109],"View");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var ReactNativeStyleAttributes = _require(_dependencyMap[0], 'ReactNativeStyleAttributes');

  var ReactNativeViewAttributes = {};
  ReactNativeViewAttributes.UIView = {
    pointerEvents: true,
    accessible: true,
    accessibilityActions: true,
    accessibilityLabel: true,
    accessibilityComponentType: true,
    accessibilityLiveRegion: true,
    accessibilityTraits: true,
    importantForAccessibility: true,
    nativeID: true,
    testID: true,
    renderToHardwareTextureAndroid: true,
    shouldRasterizeIOS: true,
    onLayout: true,
    onAccessibilityAction: true,
    onAccessibilityTap: true,
    onMagicTap: true,
    collapsable: true,
    needsOffscreenAlphaCompositing: true,
    style: ReactNativeStyleAttributes
  };
  ReactNativeViewAttributes.RCTView = _extends({}, ReactNativeViewAttributes.UIView, {
    removeClippedSubviews: true
  });
  module.exports = ReactNativeViewAttributes;
},174,[150],"ReactNativeViewAttributes");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var PropTypes = _require(_dependencyMap[0], 'prop-types');

  var ViewContextTypes = exports.ViewContextTypes = {
    isInAParentText: PropTypes.bool
  };
},175,[130],"ViewContext");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var React = _require(_dependencyMap[0], 'react');

  var factory = _require(_dependencyMap[1], './factory');

  if (typeof React === 'undefined') {
    throw Error('create-react-class could not find the React object. If you are using script tags, ' + 'make sure that React is being loaded before create-react-class.');
  }

  var ReactNoopUpdateQueue = new React.Component().updater;
  module.exports = factory(React.Component, React.isValidElement, ReactNoopUpdateQueue);
},176,[113,177],"node_modules\\create-react-class\\index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _assign = _require(_dependencyMap[0], 'object-assign');

  var emptyObject = _require(_dependencyMap[1], 'fbjs/lib/emptyObject');

  var _invariant = _require(_dependencyMap[2], 'fbjs/lib/invariant');

  if (process.env.NODE_ENV !== 'production') {
    var warning = _require(_dependencyMap[3], 'fbjs/lib/warning');
  }

  var MIXINS_KEY = 'mixins';

  function identity(fn) {
    return fn;
  }

  var ReactPropTypeLocationNames;

  if (process.env.NODE_ENV !== 'production') {
    ReactPropTypeLocationNames = {
      prop: 'prop',
      context: 'context',
      childContext: 'child context'
    };
  } else {
    ReactPropTypeLocationNames = {};
  }

  function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
    var injectedMixins = [];
    var ReactClassInterface = {
      mixins: 'DEFINE_MANY',
      statics: 'DEFINE_MANY',
      propTypes: 'DEFINE_MANY',
      contextTypes: 'DEFINE_MANY',
      childContextTypes: 'DEFINE_MANY',
      getDefaultProps: 'DEFINE_MANY_MERGED',
      getInitialState: 'DEFINE_MANY_MERGED',
      getChildContext: 'DEFINE_MANY_MERGED',
      render: 'DEFINE_ONCE',
      componentWillMount: 'DEFINE_MANY',
      componentDidMount: 'DEFINE_MANY',
      componentWillReceiveProps: 'DEFINE_MANY',
      shouldComponentUpdate: 'DEFINE_ONCE',
      componentWillUpdate: 'DEFINE_MANY',
      componentDidUpdate: 'DEFINE_MANY',
      componentWillUnmount: 'DEFINE_MANY',
      UNSAFE_componentWillMount: 'DEFINE_MANY',
      UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',
      UNSAFE_componentWillUpdate: 'DEFINE_MANY',
      updateComponent: 'OVERRIDE_BASE'
    };
    var ReactClassStaticInterface = {
      getDerivedStateFromProps: 'DEFINE_MANY_MERGED'
    };
    var RESERVED_SPEC_KEYS = {
      displayName: function displayName(Constructor, _displayName) {
        Constructor.displayName = _displayName;
      },
      mixins: function mixins(Constructor, _mixins) {
        if (_mixins) {
          for (var i = 0; i < _mixins.length; i++) {
            mixSpecIntoComponent(Constructor, _mixins[i]);
          }
        }
      },
      childContextTypes: function childContextTypes(Constructor, _childContextTypes) {
        if (process.env.NODE_ENV !== 'production') {
          validateTypeDef(Constructor, _childContextTypes, 'childContext');
        }

        Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, _childContextTypes);
      },
      contextTypes: function contextTypes(Constructor, _contextTypes) {
        if (process.env.NODE_ENV !== 'production') {
          validateTypeDef(Constructor, _contextTypes, 'context');
        }

        Constructor.contextTypes = _assign({}, Constructor.contextTypes, _contextTypes);
      },
      getDefaultProps: function getDefaultProps(Constructor, _getDefaultProps) {
        if (Constructor.getDefaultProps) {
          Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, _getDefaultProps);
        } else {
          Constructor.getDefaultProps = _getDefaultProps;
        }
      },
      propTypes: function propTypes(Constructor, _propTypes) {
        if (process.env.NODE_ENV !== 'production') {
          validateTypeDef(Constructor, _propTypes, 'prop');
        }

        Constructor.propTypes = _assign({}, Constructor.propTypes, _propTypes);
      },
      statics: function statics(Constructor, _statics) {
        mixStaticSpecIntoComponent(Constructor, _statics);
      },
      autobind: function autobind() {}
    };

    function validateTypeDef(Constructor, typeDef, location) {
      for (var propName in typeDef) {
        if (typeDef.hasOwnProperty(propName)) {
          if (process.env.NODE_ENV !== 'production') {
            warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName);
          }
        }
      }
    }

    function validateMethodOverride(isAlreadyDefined, name) {
      var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

      if (ReactClassMixin.hasOwnProperty(name)) {
        _invariant(specPolicy === 'OVERRIDE_BASE', 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name);
      }

      if (isAlreadyDefined) {
        _invariant(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED', 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name);
      }
    }

    function mixSpecIntoComponent(Constructor, spec) {
      if (!spec) {
        if (process.env.NODE_ENV !== 'production') {
          var typeofSpec = typeof spec;
          var isMixinValid = typeofSpec === 'object' && spec !== null;

          if (process.env.NODE_ENV !== 'production') {
            warning(isMixinValid, "%s: You're attempting to include a mixin that is either null " + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec);
          }
        }

        return;
      }

      _invariant(typeof spec !== 'function', "ReactClass: You're attempting to " + 'use a component class or function as a mixin. Instead, just use a ' + 'regular object.');

      _invariant(!isValidElement(spec), "ReactClass: You're attempting to " + 'use a component as a mixin. Instead, just use a regular object.');

      var proto = Constructor.prototype;
      var autoBindPairs = proto.__reactAutoBindPairs;

      if (spec.hasOwnProperty(MIXINS_KEY)) {
        RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
      }

      for (var name in spec) {
        if (!spec.hasOwnProperty(name)) {
          continue;
        }

        if (name === MIXINS_KEY) {
          continue;
        }

        var property = spec[name];
        var isAlreadyDefined = proto.hasOwnProperty(name);
        validateMethodOverride(isAlreadyDefined, name);

        if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
          RESERVED_SPEC_KEYS[name](Constructor, property);
        } else {
          var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
          var isFunction = typeof property === 'function';
          var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

          if (shouldAutoBind) {
            autoBindPairs.push(name, property);
            proto[name] = property;
          } else {
            if (isAlreadyDefined) {
              var specPolicy = ReactClassInterface[name];

              _invariant(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY'), 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name);

              if (specPolicy === 'DEFINE_MANY_MERGED') {
                proto[name] = createMergedResultFunction(proto[name], property);
              } else if (specPolicy === 'DEFINE_MANY') {
                proto[name] = createChainedFunction(proto[name], property);
              }
            } else {
              proto[name] = property;

              if (process.env.NODE_ENV !== 'production') {
                if (typeof property === 'function' && spec.displayName) {
                  proto[name].displayName = spec.displayName + '_' + name;
                }
              }
            }
          }
        }
      }
    }

    function mixStaticSpecIntoComponent(Constructor, statics) {
      if (!statics) {
        return;
      }

      for (var name in statics) {
        var property = statics[name];

        if (!statics.hasOwnProperty(name)) {
          continue;
        }

        var isReserved = name in RESERVED_SPEC_KEYS;

        _invariant(!isReserved, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name);

        var isAlreadyDefined = name in Constructor;

        if (isAlreadyDefined) {
          var specPolicy = ReactClassStaticInterface.hasOwnProperty(name) ? ReactClassStaticInterface[name] : null;

          _invariant(specPolicy === 'DEFINE_MANY_MERGED', 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name);

          Constructor[name] = createMergedResultFunction(Constructor[name], property);
          return;
        }

        Constructor[name] = property;
      }
    }

    function mergeIntoWithNoDuplicateKeys(one, two) {
      _invariant(one && two && typeof one === 'object' && typeof two === 'object', 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.');

      for (var key in two) {
        if (two.hasOwnProperty(key)) {
          _invariant(one[key] === undefined, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key);

          one[key] = two[key];
        }
      }

      return one;
    }

    function createMergedResultFunction(one, two) {
      return function mergedResult() {
        var a = one.apply(this, arguments);
        var b = two.apply(this, arguments);

        if (a == null) {
          return b;
        } else if (b == null) {
          return a;
        }

        var c = {};
        mergeIntoWithNoDuplicateKeys(c, a);
        mergeIntoWithNoDuplicateKeys(c, b);
        return c;
      };
    }

    function createChainedFunction(one, two) {
      return function chainedFunction() {
        one.apply(this, arguments);
        two.apply(this, arguments);
      };
    }

    function bindAutoBindMethod(component, method) {
      var boundMethod = method.bind(component);

      if (process.env.NODE_ENV !== 'production') {
        boundMethod.__reactBoundContext = component;
        boundMethod.__reactBoundMethod = method;
        boundMethod.__reactBoundArguments = null;
        var componentName = component.constructor.displayName;
        var _bind = boundMethod.bind;

        boundMethod.bind = function (newThis) {
          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          if (newThis !== component && newThis !== null) {
            if (process.env.NODE_ENV !== 'production') {
              warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName);
            }
          } else if (!args.length) {
            if (process.env.NODE_ENV !== 'production') {
              warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName);
            }

            return boundMethod;
          }

          var reboundMethod = _bind.apply(boundMethod, arguments);

          reboundMethod.__reactBoundContext = component;
          reboundMethod.__reactBoundMethod = method;
          reboundMethod.__reactBoundArguments = args;
          return reboundMethod;
        };
      }

      return boundMethod;
    }

    function bindAutoBindMethods(component) {
      var pairs = component.__reactAutoBindPairs;

      for (var i = 0; i < pairs.length; i += 2) {
        var autoBindKey = pairs[i];
        var method = pairs[i + 1];
        component[autoBindKey] = bindAutoBindMethod(component, method);
      }
    }

    var IsMountedPreMixin = {
      componentDidMount: function componentDidMount() {
        this.__isMounted = true;
      }
    };
    var IsMountedPostMixin = {
      componentWillUnmount: function componentWillUnmount() {
        this.__isMounted = false;
      }
    };
    var ReactClassMixin = {
      replaceState: function replaceState(newState, callback) {
        this.updater.enqueueReplaceState(this, newState, callback);
      },
      isMounted: function isMounted() {
        if (process.env.NODE_ENV !== 'production') {
          warning(this.__didWarnIsMounted, '%s: isMounted is deprecated. Instead, make sure to clean up ' + 'subscriptions and pending requests in componentWillUnmount to ' + 'prevent memory leaks.', this.constructor && this.constructor.displayName || this.name || 'Component');
          this.__didWarnIsMounted = true;
        }

        return !!this.__isMounted;
      }
    };

    var ReactClassComponent = function ReactClassComponent() {};

    _assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

    function createClass(spec) {
      var Constructor = identity(function (props, context, updater) {
        if (process.env.NODE_ENV !== 'production') {
          warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory');
        }

        if (this.__reactAutoBindPairs.length) {
          bindAutoBindMethods(this);
        }

        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
        this.state = null;
        var initialState = this.getInitialState ? this.getInitialState() : null;

        if (process.env.NODE_ENV !== 'production') {
          if (initialState === undefined && this.getInitialState._isMockFunction) {
            initialState = null;
          }
        }

        _invariant(typeof initialState === 'object' && !Array.isArray(initialState), '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent');

        this.state = initialState;
      });
      Constructor.prototype = new ReactClassComponent();
      Constructor.prototype.constructor = Constructor;
      Constructor.prototype.__reactAutoBindPairs = [];
      injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
      mixSpecIntoComponent(Constructor, IsMountedPreMixin);
      mixSpecIntoComponent(Constructor, spec);
      mixSpecIntoComponent(Constructor, IsMountedPostMixin);

      if (Constructor.getDefaultProps) {
        Constructor.defaultProps = Constructor.getDefaultProps();
      }

      if (process.env.NODE_ENV !== 'production') {
        if (Constructor.getDefaultProps) {
          Constructor.getDefaultProps.isReactClassApproved = {};
        }

        if (Constructor.prototype.getInitialState) {
          Constructor.prototype.getInitialState.isReactClassApproved = {};
        }
      }

      _invariant(Constructor.prototype.render, 'createClass(...): Class specification must implement a `render` method.');

      if (process.env.NODE_ENV !== 'production') {
        warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component');
        warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component');
        warning(!Constructor.prototype.UNSAFE_componentWillRecieveProps, '%s has a method called UNSAFE_componentWillRecieveProps(). ' + 'Did you mean UNSAFE_componentWillReceiveProps()?', spec.displayName || 'A component');
      }

      for (var methodName in ReactClassInterface) {
        if (!Constructor.prototype[methodName]) {
          Constructor.prototype[methodName] = null;
        }
      }

      return Constructor;
    }

    return createClass;
  }

  module.exports = factory;
},177,[115,116,13,56],"node_modules\\create-react-class\\factory.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\ART\\ReactNativeART.js",
      _class2,
      _temp2;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    Surface: {
      displayName: "Surface"
    },
    Group: {
      displayName: "Group"
    },
    ClippingRectangle: {
      displayName: "ClippingRectangle"
    },
    Shape: {
      displayName: "Shape"
    },
    Text: {
      displayName: "Text"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/ART/ReactNativeART.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var Color = _require(_dependencyMap[2], 'art/core/color');

  var Path = _require(_dependencyMap[3], 'ARTSerializablePath');

  var Transform = _require(_dependencyMap[4], 'art/core/transform');

  var React = _require(_dependencyMap[5], 'React');

  var PropTypes = _require(_dependencyMap[6], 'prop-types');

  var ReactNativeViewAttributes = _require(_dependencyMap[7], 'ReactNativeViewAttributes');

  var createReactNativeComponentClass = _require(_dependencyMap[8], 'createReactNativeComponentClass');

  var merge = _require(_dependencyMap[9], 'merge');

  var invariant = _require(_dependencyMap[10], 'fbjs/lib/invariant');

  function arrayDiffer(a, b) {
    if (a == null || b == null) {
      return true;
    }

    if (a.length !== b.length) {
      return true;
    }

    for (var i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) {
        return true;
      }
    }

    return false;
  }

  function fontAndLinesDiffer(a, b) {
    if (a === b) {
      return false;
    }

    if (a.font !== b.font) {
      if (a.font === null) {
        return true;
      }

      if (b.font === null) {
        return true;
      }

      if (a.font.fontFamily !== b.font.fontFamily || a.font.fontSize !== b.font.fontSize || a.font.fontWeight !== b.font.fontWeight || a.font.fontStyle !== b.font.fontStyle) {
        return true;
      }
    }

    return arrayDiffer(a.lines, b.lines);
  }

  var SurfaceViewAttributes = merge(ReactNativeViewAttributes.UIView, {});
  var NodeAttributes = {
    transform: {
      diff: arrayDiffer
    },
    opacity: true
  };
  var GroupAttributes = merge(NodeAttributes, {
    clipping: {
      diff: arrayDiffer
    }
  });
  var RenderableAttributes = merge(NodeAttributes, {
    fill: {
      diff: arrayDiffer
    },
    stroke: {
      diff: arrayDiffer
    },
    strokeWidth: true,
    strokeCap: true,
    strokeJoin: true,
    strokeDash: {
      diff: arrayDiffer
    }
  });
  var ShapeAttributes = merge(RenderableAttributes, {
    d: {
      diff: arrayDiffer
    }
  });
  var TextAttributes = merge(RenderableAttributes, {
    alignment: true,
    frame: {
      diff: fontAndLinesDiffer
    },
    path: {
      diff: arrayDiffer
    }
  });
  var NativeSurfaceView = createReactNativeComponentClass('ARTSurfaceView', function () {
    return {
      validAttributes: SurfaceViewAttributes,
      uiViewClassName: 'ARTSurfaceView'
    };
  });
  var NativeGroup = createReactNativeComponentClass('ARTGroup', function () {
    return {
      validAttributes: GroupAttributes,
      uiViewClassName: 'ARTGroup'
    };
  });
  var NativeShape = createReactNativeComponentClass('ARTShape', function () {
    return {
      validAttributes: ShapeAttributes,
      uiViewClassName: 'ARTShape'
    };
  });
  var NativeText = createReactNativeComponentClass('ARTText', function () {
    return {
      validAttributes: TextAttributes,
      uiViewClassName: 'ARTText'
    };
  });

  function childrenAsString(children) {
    if (!children) {
      return '';
    }

    if (typeof children === 'string') {
      return children;
    }

    if (children.length) {
      return children.join('\n');
    }

    return '';
  }

  var Surface = _wrapComponent("Surface")((_temp = _class = function (_React$Component) {
    _inherits(Surface, _React$Component);

    function Surface() {
      _classCallCheck(this, Surface);

      return _possibleConstructorReturn(this, (Surface.__proto__ || Object.getPrototypeOf(Surface)).apply(this, arguments));
    }

    _createClass(Surface, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          isInSurface: true
        };
      }
    }, {
      key: "render",
      value: function render() {
        var props = this.props;
        var w = extractNumber(props.width, 0);
        var h = extractNumber(props.height, 0);
        return React.createElement(
          NativeSurfaceView,
          {
            style: [props.style, {
              width: w,
              height: h
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 159
            }
          },
          this.props.children
        );
      }
    }]);

    return Surface;
  }(React.Component), _class.childContextTypes = {
    isInSurface: PropTypes.bool
  }, _temp));

  function extractNumber(value, defaultValue) {
    if (value == null) {
      return defaultValue;
    }

    return +value;
  }

  var pooledTransform = new Transform();

  function extractTransform(props) {
    var scaleX = props.scaleX != null ? props.scaleX : props.scale != null ? props.scale : 1;
    var scaleY = props.scaleY != null ? props.scaleY : props.scale != null ? props.scale : 1;
    pooledTransform.transformTo(1, 0, 0, 1, 0, 0).move(props.x || 0, props.y || 0).rotate(props.rotation || 0, props.originX, props.originY).scale(scaleX, scaleY, props.originX, props.originY);

    if (props.transform != null) {
      pooledTransform.transform(props.transform);
    }

    return [pooledTransform.xx, pooledTransform.yx, pooledTransform.xy, pooledTransform.yy, pooledTransform.x, pooledTransform.y];
  }

  function extractOpacity(props) {
    if (props.visible === false) {
      return 0;
    }

    if (props.opacity == null) {
      return 1;
    }

    return +props.opacity;
  }

  var Group = _wrapComponent("Group")((_temp2 = _class2 = function (_React$Component2) {
    _inherits(Group, _React$Component2);

    function Group() {
      _classCallCheck(this, Group);

      return _possibleConstructorReturn(this, (Group.__proto__ || Object.getPrototypeOf(Group)).apply(this, arguments));
    }

    _createClass(Group, [{
      key: "render",
      value: function render() {
        var props = this.props;
        invariant(this.context.isInSurface, 'ART: <Group /> must be a child of a <Surface />');
        return React.createElement(
          NativeGroup,
          {
            opacity: extractOpacity(props),
            transform: extractTransform(props),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 231
            }
          },
          this.props.children
        );
      }
    }]);

    return Group;
  }(React.Component), _class2.contextTypes = {
    isInSurface: PropTypes.bool.isRequired
  }, _temp2));

  var ClippingRectangle = _wrapComponent("ClippingRectangle")(function (_React$Component3) {
    _inherits(ClippingRectangle, _React$Component3);

    function ClippingRectangle() {
      _classCallCheck(this, ClippingRectangle);

      return _possibleConstructorReturn(this, (ClippingRectangle.__proto__ || Object.getPrototypeOf(ClippingRectangle)).apply(this, arguments));
    }

    _createClass(ClippingRectangle, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var x = extractNumber(props.x, 0);
        var y = extractNumber(props.y, 0);
        var w = extractNumber(props.width, 0);
        var h = extractNumber(props.height, 0);
        var clipping = [x, y, w, h];
        var propsExcludingXAndY = merge(props);
        delete propsExcludingXAndY.x;
        delete propsExcludingXAndY.y;
        return React.createElement(
          NativeGroup,
          {
            clipping: clipping,
            opacity: extractOpacity(props),
            transform: extractTransform(propsExcludingXAndY),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 253
            }
          },
          this.props.children
        );
      }
    }]);

    return ClippingRectangle;
  }(React.Component));

  var SOLID_COLOR = 0;
  var LINEAR_GRADIENT = 1;
  var RADIAL_GRADIENT = 2;
  var PATTERN = 3;

  function insertColorIntoArray(color, targetArray, atIndex) {
    var c = new Color(color);
    targetArray[atIndex + 0] = c.red / 255;
    targetArray[atIndex + 1] = c.green / 255;
    targetArray[atIndex + 2] = c.blue / 255;
    targetArray[atIndex + 3] = c.alpha;
  }

  function insertColorsIntoArray(stops, targetArray, atIndex) {
    var i = 0;

    if ('length' in stops) {
      while (i < stops.length) {
        insertColorIntoArray(stops[i], targetArray, atIndex + i * 4);
        i++;
      }
    } else {
      for (var offset in stops) {
        insertColorIntoArray(stops[offset], targetArray, atIndex + i * 4);
        i++;
      }
    }

    return atIndex + i * 4;
  }

  function insertOffsetsIntoArray(stops, targetArray, atIndex, multi, reverse) {
    var offsetNumber;
    var i = 0;

    if ('length' in stops) {
      while (i < stops.length) {
        offsetNumber = i / (stops.length - 1) * multi;
        targetArray[atIndex + i] = reverse ? 1 - offsetNumber : offsetNumber;
        i++;
      }
    } else {
      for (var offsetString in stops) {
        offsetNumber = +offsetString * multi;
        targetArray[atIndex + i] = reverse ? 1 - offsetNumber : offsetNumber;
        i++;
      }
    }

    return atIndex + i;
  }

  function insertColorStopsIntoArray(stops, targetArray, atIndex) {
    var lastIndex = insertColorsIntoArray(stops, targetArray, atIndex);
    insertOffsetsIntoArray(stops, targetArray, lastIndex, 1, false);
  }

  function insertDoubleColorStopsIntoArray(stops, targetArray, atIndex) {
    var lastIndex = insertColorsIntoArray(stops, targetArray, atIndex);
    lastIndex = insertColorsIntoArray(stops, targetArray, lastIndex);
    lastIndex = insertOffsetsIntoArray(stops, targetArray, lastIndex, 0.5, false);
    insertOffsetsIntoArray(stops, targetArray, lastIndex, 0.5, true);
  }

  function applyBoundingBoxToBrushData(brushData, props) {
    var type = brushData[0];
    var width = +props.width;
    var height = +props.height;

    if (type === LINEAR_GRADIENT) {
      brushData[1] *= width;
      brushData[2] *= height;
      brushData[3] *= width;
      brushData[4] *= height;
    } else if (type === RADIAL_GRADIENT) {
      brushData[1] *= width;
      brushData[2] *= height;
      brushData[3] *= width;
      brushData[4] *= height;
      brushData[5] *= width;
      brushData[6] *= height;
    } else if (type === PATTERN) {}
  }

  function extractBrush(colorOrBrush, props) {
    if (colorOrBrush == null) {
      return null;
    }

    if (colorOrBrush._brush) {
      if (colorOrBrush._bb) {
        applyBoundingBoxToBrushData(colorOrBrush._brush, props);
        colorOrBrush._bb = false;
      }

      return colorOrBrush._brush;
    }

    var c = new Color(colorOrBrush);
    return [SOLID_COLOR, c.red / 255, c.green / 255, c.blue / 255, c.alpha];
  }

  function extractColor(color) {
    if (color == null) {
      return null;
    }

    var c = new Color(color);
    return [c.red / 255, c.green / 255, c.blue / 255, c.alpha];
  }

  function extractStrokeCap(strokeCap) {
    switch (strokeCap) {
      case 'butt':
        return 0;

      case 'square':
        return 2;

      default:
        return 1;
    }
  }

  function extractStrokeJoin(strokeJoin) {
    switch (strokeJoin) {
      case 'miter':
        return 0;

      case 'bevel':
        return 2;

      default:
        return 1;
    }
  }

  var Shape = _wrapComponent("Shape")(function (_React$Component4) {
    _inherits(Shape, _React$Component4);

    function Shape() {
      _classCallCheck(this, Shape);

      return _possibleConstructorReturn(this, (Shape.__proto__ || Object.getPrototypeOf(Shape)).apply(this, arguments));
    }

    _createClass(Shape, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var path = props.d || childrenAsString(props.children);
        var d = (path instanceof Path ? path : new Path(path)).toJSON();
        return React.createElement(NativeShape, {
          fill: extractBrush(props.fill, props),
          opacity: extractOpacity(props),
          stroke: extractColor(props.stroke),
          strokeCap: extractStrokeCap(props.strokeCap),
          strokeDash: props.strokeDash || null,
          strokeJoin: extractStrokeJoin(props.strokeJoin),
          strokeWidth: extractNumber(props.strokeWidth, 1),
          transform: extractTransform(props),
          d: d,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 401
          }
        });
      }
    }]);

    return Shape;
  }(React.Component));

  var cachedFontObjectsFromString = {};
  var fontFamilyPrefix = /^[\s"']*/;
  var fontFamilySuffix = /[\s"']*$/;

  function extractSingleFontFamily(fontFamilyString) {
    return fontFamilyString.split(',')[0].replace(fontFamilyPrefix, '').replace(fontFamilySuffix, '');
  }

  function parseFontString(font) {
    if (cachedFontObjectsFromString.hasOwnProperty(font)) {
      return cachedFontObjectsFromString[font];
    }

    var regexp = /^\s*((?:(?:normal|bold|italic)\s+)*)(?:(\d+(?:\.\d+)?)[ptexm\%]*(?:\s*\/.*?)?\s+)?\s*\"?([^\"]*)/i;
    var match = regexp.exec(font);

    if (!match) {
      return null;
    }

    var fontFamily = extractSingleFontFamily(match[3]);
    var fontSize = +match[2] || 12;
    var isBold = /bold/.exec(match[1]);
    var isItalic = /italic/.exec(match[1]);
    cachedFontObjectsFromString[font] = {
      fontFamily: fontFamily,
      fontSize: fontSize,
      fontWeight: isBold ? 'bold' : 'normal',
      fontStyle: isItalic ? 'italic' : 'normal'
    };
    return cachedFontObjectsFromString[font];
  }

  function extractFont(font) {
    if (font == null) {
      return null;
    }

    if (typeof font === 'string') {
      return parseFontString(font);
    }

    var fontFamily = extractSingleFontFamily(font.fontFamily);
    var fontSize = +font.fontSize || 12;
    var fontWeight = font.fontWeight != null ? font.fontWeight.toString() : '400';
    return {
      fontFamily: fontFamily,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: font.fontStyle
    };
  }

  var newLine = /\n/g;

  function extractFontAndLines(font, text) {
    return {
      font: extractFont(font),
      lines: text.split(newLine)
    };
  }

  function extractAlignment(alignment) {
    switch (alignment) {
      case 'right':
        return 1;

      case 'center':
        return 2;

      default:
        return 0;
    }
  }

  var Text = _wrapComponent("Text")(function (_React$Component5) {
    _inherits(Text, _React$Component5);

    function Text() {
      _classCallCheck(this, Text);

      return _possibleConstructorReturn(this, (Text.__proto__ || Object.getPrototypeOf(Text)).apply(this, arguments));
    }

    _createClass(Text, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var path = props.path;
        var textPath = path ? (path instanceof Path ? path : new Path(path)).toJSON() : null;
        var textFrame = extractFontAndLines(props.font, childrenAsString(props.children));
        return React.createElement(NativeText, {
          fill: extractBrush(props.fill, props),
          opacity: extractOpacity(props),
          stroke: extractColor(props.stroke),
          strokeCap: extractStrokeCap(props.strokeCap),
          strokeDash: props.strokeDash || null,
          strokeJoin: extractStrokeJoin(props.strokeJoin),
          strokeWidth: extractNumber(props.strokeWidth, 1),
          transform: extractTransform(props),
          alignment: extractAlignment(props.alignment),
          frame: textFrame,
          path: textPath,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 500
          }
        });
      }
    }]);

    return Text;
  }(React.Component));

  function LinearGradient(stops, x1, y1, x2, y2) {
    var type = LINEAR_GRADIENT;

    if (arguments.length < 5) {
      var angle = (x1 == null ? 270 : x1) * Math.PI / 180;
      var x = Math.cos(angle);
      var y = -Math.sin(angle);
      var l = (Math.abs(x) + Math.abs(y)) / 2;
      x *= l;
      y *= l;
      x1 = 0.5 - x;
      x2 = 0.5 + x;
      y1 = 0.5 - y;
      y2 = 0.5 + y;
      this._bb = true;
    } else {
      this._bb = false;
    }

    var brushData = [type, +x1, +y1, +x2, +y2];
    insertColorStopsIntoArray(stops, brushData, 5);
    this._brush = brushData;
  }

  function RadialGradient(stops, fx, fy, rx, ry, cx, cy) {
    if (ry == null) {
      ry = rx;
    }

    if (cx == null) {
      cx = fx;
    }

    if (cy == null) {
      cy = fy;
    }

    if (fx == null) {
      fx = fy = rx = ry = cx = cy = 0.5;
      this._bb = true;
    } else {
      this._bb = false;
    }

    var brushData = [RADIAL_GRADIENT, +fx, +fy, +rx * 2, +ry * 2, +cx, +cy];
    insertDoubleColorStopsIntoArray(stops, brushData, 7);
    this._brush = brushData;
  }

  function Pattern(url, width, height, left, top) {
    this._brush = [PATTERN, url, +left || 0, +top || 0, +width, +height];
  }

  var ReactART = {
    LinearGradient: LinearGradient,
    RadialGradient: RadialGradient,
    Pattern: Pattern,
    Transform: Transform,
    Path: Path,
    Surface: Surface,
    Group: Group,
    ClippingRectangle: ClippingRectangle,
    Shape: Shape,
    Text: Text
  };
  module.exports = ReactART;
},178,[113,179,333,334,337,133,130,174,159,137,13],"ReactNativeART");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i['return']) _i['return']();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError('Invalid attempt to destructure non-iterable instance');
      }
    };
  }();

  exports['default'] = proxyReactComponents;

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      'default': obj
    };
  }

  var _reactProxy = _require(_dependencyMap[0], 'react-proxy');

  var _globalWindow = _require(_dependencyMap[1], 'global/window');

  var _globalWindow2 = _interopRequireDefault(_globalWindow);

  var componentProxies = undefined;

  if (_globalWindow2['default'].__reactComponentProxies) {
    componentProxies = _globalWindow2['default'].__reactComponentProxies;
  } else {
    componentProxies = {};
    Object.defineProperty(_globalWindow2['default'], '__reactComponentProxies', {
      configurable: true,
      enumerable: false,
      writable: false,
      value: componentProxies
    });
  }

  function proxyReactComponents(_ref) {
    var filename = _ref.filename;
    var components = _ref.components;
    var imports = _ref.imports;
    var locals = _ref.locals;

    var _imports = _slicedToArray(imports, 1);

    var React = _imports[0];

    var _locals = _slicedToArray(locals, 1);

    var hot = _locals[0].hot;

    if (!React.Component) {
      throw new Error('imports[0] for react-transform-hmr does not look like React.');
    }

    if (!hot || typeof hot.accept !== 'function') {
      throw new Error('locals[0] does not appear to be a `module` object with Hot Module ' + 'replacement API enabled. You should disable react-transform-hmr in ' + 'production by using `env` section in Babel configuration. See the ' + 'example in README: https://github.com/gaearon/react-transform-hmr');
    }

    if (Object.keys(components).some(function (key) {
      return !components[key].isInFunction;
    })) {
      hot.accept(function (err) {
        if (err) {
          console.warn('[React Transform HMR] There was an error updating ' + filename + ':');
          console.error(err);
        }
      });
    }

    var forceUpdate = (0, _reactProxy.getForceUpdate)(React);
    return function wrapWithProxy(ReactClass, uniqueId) {
      var _components$uniqueId = components[uniqueId];
      var _components$uniqueId$isInFunction = _components$uniqueId.isInFunction;
      var isInFunction = _components$uniqueId$isInFunction === undefined ? false : _components$uniqueId$isInFunction;
      var _components$uniqueId$displayName = _components$uniqueId.displayName;
      var displayName = _components$uniqueId$displayName === undefined ? uniqueId : _components$uniqueId$displayName;

      if (isInFunction) {
        return ReactClass;
      }

      var globalUniqueId = filename + '$' + uniqueId;

      if (componentProxies[globalUniqueId]) {
        (function () {
          console.info('[React Transform HMR] Patching ' + displayName);
          var instances = componentProxies[globalUniqueId].update(ReactClass);
          setTimeout(function () {
            return instances.forEach(forceUpdate);
          });
        })();
      } else {
        componentProxies[globalUniqueId] = (0, _reactProxy.createProxy)(ReactClass);
      }

      return componentProxies[globalUniqueId].get();
    };
  }

  module.exports = exports['default'];
},179,[180,332],"node_modules\\react-transform-hmr\\lib\\index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getForceUpdate = exports.createProxy = undefined;

  var _supportsProtoAssignment = _require(_dependencyMap[0], './supportsProtoAssignment');

  var _supportsProtoAssignment2 = _interopRequireDefault(_supportsProtoAssignment);

  var _createClassProxy = _require(_dependencyMap[1], './createClassProxy');

  var _createClassProxy2 = _interopRequireDefault(_createClassProxy);

  var _reactDeepForceUpdate = _require(_dependencyMap[2], 'react-deep-force-update');

  var _reactDeepForceUpdate2 = _interopRequireDefault(_reactDeepForceUpdate);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  if (!(0, _supportsProtoAssignment2.default)()) {
    console.warn('This JavaScript environment does not support __proto__. ' + 'This means that react-proxy is unable to proxy React components. ' + 'Features that rely on react-proxy, such as react-transform-hmr, ' + 'will not function as expected.');
  }

  exports.createProxy = _createClassProxy2.default;
  exports.getForceUpdate = _reactDeepForceUpdate2.default;
},180,[181,182,331],"node_modules\\react-proxy\\modules\\index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = supportsProtoAssignment;
  var x = {};
  var y = {
    supports: true
  };

  try {
    x.__proto__ = y;
  } catch (err) {}

  function supportsProtoAssignment() {
    return x.supports || false;
  }

  ;
},181,[],"node_modules\\react-proxy\\modules\\supportsProtoAssignment.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();

  exports.default = proxyClass;
  exports.default = createClassProxy;

  var _find = _require(_dependencyMap[0], 'lodash/find');

  var _find2 = _interopRequireDefault(_find);

  var _createPrototypeProxy = _require(_dependencyMap[1], './createPrototypeProxy');

  var _createPrototypeProxy2 = _interopRequireDefault(_createPrototypeProxy);

  var _bindAutoBindMethods = _require(_dependencyMap[2], './bindAutoBindMethods');

  var _bindAutoBindMethods2 = _interopRequireDefault(_bindAutoBindMethods);

  var _deleteUnknownAutoBindMethods = _require(_dependencyMap[3], './deleteUnknownAutoBindMethods');

  var _deleteUnknownAutoBindMethods2 = _interopRequireDefault(_deleteUnknownAutoBindMethods);

  var _supportsProtoAssignment = _require(_dependencyMap[4], './supportsProtoAssignment');

  var _supportsProtoAssignment2 = _interopRequireDefault(_supportsProtoAssignment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    } else {
      return Array.from(arr);
    }
  }

  var RESERVED_STATICS = ['length', 'name', 'arguments', 'caller', 'prototype', 'toString'];

  function isEqualDescriptor(a, b) {
    if (!a && !b) {
      return true;
    }

    if (!a || !b) {
      return false;
    }

    for (var key in a) {
      if (a[key] !== b[key]) {
        return false;
      }
    }

    return true;
  }

  var allProxies = [];

  function findProxy(Component) {
    var pair = (0, _find2.default)(allProxies, function (_ref) {
      var _ref2 = _slicedToArray(_ref, 1);

      var key = _ref2[0];
      return key === Component;
    });
    return pair ? pair[1] : null;
  }

  function addProxy(Component, proxy) {
    allProxies.push([Component, proxy]);
  }

  function proxyClass(InitialComponent) {
    var existingProxy = findProxy(InitialComponent);

    if (existingProxy) {
      return existingProxy;
    }

    var prototypeProxy = (0, _createPrototypeProxy2.default)();
    var CurrentComponent = undefined;
    var ProxyComponent = undefined;
    var staticDescriptors = {};

    function wasStaticModifiedByUser(key) {
      var currentDescriptor = Object.getOwnPropertyDescriptor(ProxyComponent, key);
      return !isEqualDescriptor(staticDescriptors[key], currentDescriptor);
    }

    function instantiate(factory, context, params) {
      var component = factory();

      try {
        return component.apply(context, params);
      } catch (err) {
        (function () {
          var instance = new (Function.prototype.bind.apply(component, [null].concat(_toConsumableArray(params))))();
          Object.keys(instance).forEach(function (key) {
            if (RESERVED_STATICS.indexOf(key) > -1) {
              return;
            }

            context[key] = instance[key];
          });
        })();
      }
    }

    try {
      ProxyComponent = new Function('factory', 'instantiate', 'return function ' + (InitialComponent.name || 'ProxyComponent') + '() {\n         return instantiate(factory, this, arguments);\n      }')(function () {
        return CurrentComponent;
      }, instantiate);
    } catch (err) {
      ProxyComponent = function ProxyComponent() {
        return instantiate(function () {
          return CurrentComponent;
        }, this, arguments);
      };
    }

    ProxyComponent.prototype = prototypeProxy.get();

    ProxyComponent.toString = function toString() {
      return CurrentComponent.toString();
    };

    function update(NextComponent) {
      if (typeof NextComponent !== 'function') {
        throw new Error('Expected a constructor.');
      }

      var existingProxy = findProxy(NextComponent);

      if (existingProxy) {
        return update(existingProxy.__getCurrent());
      }

      CurrentComponent = NextComponent;
      var mountedInstances = prototypeProxy.update(NextComponent.prototype);
      ProxyComponent.prototype.constructor = ProxyComponent;
      ProxyComponent.__proto__ = NextComponent.__proto__;
      Object.getOwnPropertyNames(NextComponent).forEach(function (key) {
        if (RESERVED_STATICS.indexOf(key) > -1) {
          return;
        }

        var staticDescriptor = _extends({}, Object.getOwnPropertyDescriptor(NextComponent, key), {
          configurable: true
        });

        if (!wasStaticModifiedByUser(key)) {
          Object.defineProperty(ProxyComponent, key, staticDescriptor);
          staticDescriptors[key] = staticDescriptor;
        }
      });
      Object.getOwnPropertyNames(ProxyComponent).forEach(function (key) {
        if (RESERVED_STATICS.indexOf(key) > -1) {
          return;
        }

        if (NextComponent.hasOwnProperty(key)) {
          return;
        }

        var descriptor = Object.getOwnPropertyDescriptor(ProxyComponent, key);

        if (descriptor && !descriptor.configurable) {
          return;
        }

        if (!wasStaticModifiedByUser(key)) {
          delete ProxyComponent[key];
          delete staticDescriptors[key];
        }
      });
      ProxyComponent.displayName = NextComponent.displayName || NextComponent.name;
      mountedInstances.forEach(_bindAutoBindMethods2.default);
      mountedInstances.forEach(_deleteUnknownAutoBindMethods2.default);
      return mountedInstances;
    }

    ;

    function get() {
      return ProxyComponent;
    }

    function getCurrent() {
      return CurrentComponent;
    }

    update(InitialComponent);
    var proxy = {
      get: get,
      update: update
    };
    addProxy(ProxyComponent, proxy);
    Object.defineProperty(proxy, '__getCurrent', {
      configurable: false,
      writable: false,
      enumerable: false,
      value: getCurrent
    });
    return proxy;
  }

  function createFallback(Component) {
    var CurrentComponent = Component;
    return {
      get: function get() {
        return CurrentComponent;
      },
      update: function update(NextComponent) {
        CurrentComponent = NextComponent;
      }
    };
  }

  function createClassProxy(Component) {
    return Component.__proto__ && (0, _supportsProtoAssignment2.default)() ? proxyClass(Component) : createFallback(Component);
  }
},182,[183,304,329,330,181],"node_modules\\react-proxy\\modules\\createClassProxy.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var createFind = _require(_dependencyMap[0], './_createFind'),
      findIndex = _require(_dependencyMap[1], './findIndex');

  var find = createFind(findIndex);
  module.exports = find;
},183,[184,299],"node_modules\\lodash\\find.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseIteratee = _require(_dependencyMap[0], './_baseIteratee'),
      isArrayLike = _require(_dependencyMap[1], './isArrayLike'),
      keys = _require(_dependencyMap[2], './keys');

  function createFind(findIndexFunc) {
    return function (collection, predicate, fromIndex) {
      var iterable = Object(collection);

      if (!isArrayLike(collection)) {
        var iteratee = baseIteratee(predicate, 3);
        collection = keys(collection);

        predicate = function predicate(key) {
          return iteratee(iterable[key], key, iterable);
        };
      }

      var index = findIndexFunc(collection, predicate, fromIndex);
      return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
    };
  }

  module.exports = createFind;
},184,[185,270,252],"node_modules\\lodash\\_createFind.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseMatches = _require(_dependencyMap[0], './_baseMatches'),
      baseMatchesProperty = _require(_dependencyMap[1], './_baseMatchesProperty'),
      identity = _require(_dependencyMap[2], './identity'),
      isArray = _require(_dependencyMap[3], './isArray'),
      property = _require(_dependencyMap[4], './property');

  function baseIteratee(value) {
    if (typeof value == 'function') {
      return value;
    }

    if (value == null) {
      return identity;
    }

    if (typeof value == 'object') {
      return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
    }

    return property(value);
  }

  module.exports = baseIteratee;
},185,[186,279,295,248,296],"node_modules\\lodash\\_baseIteratee.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseIsMatch = _require(_dependencyMap[0], './_baseIsMatch'),
      getMatchData = _require(_dependencyMap[1], './_getMatchData'),
      matchesStrictComparable = _require(_dependencyMap[2], './_matchesStrictComparable');

  function baseMatches(source) {
    var matchData = getMatchData(source);

    if (matchData.length == 1 && matchData[0][2]) {
      return matchesStrictComparable(matchData[0][0], matchData[0][1]);
    }

    return function (object) {
      return object === source || baseIsMatch(object, source, matchData);
    };
  }

  module.exports = baseMatches;
},186,[187,276,278],"node_modules\\lodash\\_baseMatches.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var Stack = _require(_dependencyMap[0], './_Stack'),
      baseIsEqual = _require(_dependencyMap[1], './_baseIsEqual');

  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length,
        length = index,
        noCustomizer = !customizer;

    if (object == null) {
      return !length;
    }

    object = Object(object);

    while (index--) {
      var data = matchData[index];

      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
        return false;
      }
    }

    while (++index < length) {
      data = matchData[index];
      var key = data[0],
          objValue = object[key],
          srcValue = data[1];

      if (noCustomizer && data[2]) {
        if (objValue === undefined && !(key in object)) {
          return false;
        }
      } else {
        var stack = new Stack();

        if (customizer) {
          var result = customizer(objValue, srcValue, key, object, source, stack);
        }

        if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
          return false;
        }
      }
    }

    return true;
  }

  module.exports = baseIsMatch;
},187,[188,232],"node_modules\\lodash\\_baseIsMatch.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var ListCache = _require(_dependencyMap[0], './_ListCache'),
      stackClear = _require(_dependencyMap[1], './_stackClear'),
      stackDelete = _require(_dependencyMap[2], './_stackDelete'),
      stackGet = _require(_dependencyMap[3], './_stackGet'),
      stackHas = _require(_dependencyMap[4], './_stackHas'),
      stackSet = _require(_dependencyMap[5], './_stackSet');

  function Stack(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
  }

  Stack.prototype.clear = stackClear;
  Stack.prototype['delete'] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;
  module.exports = Stack;
},188,[189,197,198,199,200,201],"node_modules\\lodash\\_Stack.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var listCacheClear = _require(_dependencyMap[0], './_listCacheClear'),
        listCacheDelete = _require(_dependencyMap[1], './_listCacheDelete'),
        listCacheGet = _require(_dependencyMap[2], './_listCacheGet'),
        listCacheHas = _require(_dependencyMap[3], './_listCacheHas'),
        listCacheSet = _require(_dependencyMap[4], './_listCacheSet');

    function ListCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
        }
    }

    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    module.exports = ListCache;
},189,[190,191,194,195,196],"node_modules\\lodash\\_ListCache.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }

  module.exports = listCacheClear;
},190,[],"node_modules\\lodash\\_listCacheClear.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var assocIndexOf = _require(_dependencyMap[0], './_assocIndexOf');

  var arrayProto = Array.prototype;
  var splice = arrayProto.splice;

  function listCacheDelete(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }

    var lastIndex = data.length - 1;

    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }

    --this.size;
    return true;
  }

  module.exports = listCacheDelete;
},191,[192],"node_modules\\lodash\\_listCacheDelete.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var eq = _require(_dependencyMap[0], './eq');

  function assocIndexOf(array, key) {
    var length = array.length;

    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }

    return -1;
  }

  module.exports = assocIndexOf;
},192,[193],"node_modules\\lodash\\_assocIndexOf.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }

  module.exports = eq;
},193,[],"node_modules\\lodash\\eq.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var assocIndexOf = _require(_dependencyMap[0], './_assocIndexOf');

  function listCacheGet(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
  }

  module.exports = listCacheGet;
},194,[192],"node_modules\\lodash\\_listCacheGet.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var assocIndexOf = _require(_dependencyMap[0], './_assocIndexOf');

  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }

  module.exports = listCacheHas;
},195,[192],"node_modules\\lodash\\_listCacheHas.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var assocIndexOf = _require(_dependencyMap[0], './_assocIndexOf');

  function listCacheSet(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }

    return this;
  }

  module.exports = listCacheSet;
},196,[192],"node_modules\\lodash\\_listCacheSet.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var ListCache = _require(_dependencyMap[0], './_ListCache');

  function stackClear() {
    this.__data__ = new ListCache();
    this.size = 0;
  }

  module.exports = stackClear;
},197,[189],"node_modules\\lodash\\_stackClear.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function stackDelete(key) {
    var data = this.__data__,
        result = data['delete'](key);
    this.size = data.size;
    return result;
  }

  module.exports = stackDelete;
},198,[],"node_modules\\lodash\\_stackDelete.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function stackGet(key) {
    return this.__data__.get(key);
  }

  module.exports = stackGet;
},199,[],"node_modules\\lodash\\_stackGet.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function stackHas(key) {
    return this.__data__.has(key);
  }

  module.exports = stackHas;
},200,[],"node_modules\\lodash\\_stackHas.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var ListCache = _require(_dependencyMap[0], './_ListCache'),
      Map = _require(_dependencyMap[1], './_Map'),
      MapCache = _require(_dependencyMap[2], './_MapCache');

  var LARGE_ARRAY_SIZE = 200;

  function stackSet(key, value) {
    var data = this.__data__;

    if (data instanceof ListCache) {
      var pairs = data.__data__;

      if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }

      data = this.__data__ = new MapCache(pairs);
    }

    data.set(key, value);
    this.size = data.size;
    return this;
  }

  module.exports = stackSet;
},201,[189,202,217],"node_modules\\lodash\\_stackSet.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var getNative = _require(_dependencyMap[0], './_getNative'),
        root = _require(_dependencyMap[1], './_root');

    var Map = getNative(root, 'Map');
    module.exports = Map;
},202,[203,208],"node_modules\\lodash\\_Map.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseIsNative = _require(_dependencyMap[0], './_baseIsNative'),
      getValue = _require(_dependencyMap[1], './_getValue');

  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  module.exports = getNative;
},203,[204,216],"node_modules\\lodash\\_getNative.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var isFunction = _require(_dependencyMap[0], './isFunction'),
      isMasked = _require(_dependencyMap[1], './_isMasked'),
      isObject = _require(_dependencyMap[2], './isObject'),
      toSource = _require(_dependencyMap[3], './_toSource');

  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var funcProto = Function.prototype,
      objectProto = Object.prototype;
  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }

    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  module.exports = baseIsNative;
},204,[205,213,212,215],"node_modules\\lodash\\_baseIsNative.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var baseGetTag = _require(_dependencyMap[0], './_baseGetTag'),
        isObject = _require(_dependencyMap[1], './isObject');

    var asyncTag = '[object AsyncFunction]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        proxyTag = '[object Proxy]';

    function isFunction(value) {
        if (!isObject(value)) {
            return false;
        }

        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    module.exports = isFunction;
},205,[206,212],"node_modules\\lodash\\isFunction.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var Symbol = _require(_dependencyMap[0], './_Symbol'),
        getRawTag = _require(_dependencyMap[1], './_getRawTag'),
        objectToString = _require(_dependencyMap[2], './_objectToString');

    var nullTag = '[object Null]',
        undefinedTag = '[object Undefined]';
    var symToStringTag = Symbol ? typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag" : undefined;

    function baseGetTag(value) {
        if (value == null) {
            return value === undefined ? undefinedTag : nullTag;
        }

        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }

    module.exports = baseGetTag;
},206,[207,210,211],"node_modules\\lodash\\_baseGetTag.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var root = _require(_dependencyMap[0], './_root');

  var Symbol = root.Symbol;
  module.exports = Symbol;
},207,[208],"node_modules\\lodash\\_Symbol.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var freeGlobal = _require(_dependencyMap[0], './_freeGlobal');

  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function('return this')();
  module.exports = root;
},208,[209],"node_modules\\lodash\\_root.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
  module.exports = freeGlobal;
},209,[],"node_modules\\lodash\\_freeGlobal.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var Symbol = _require(_dependencyMap[0], './_Symbol');

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var nativeObjectToString = objectProto.toString;
  var symToStringTag = Symbol ? typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag" : undefined;

  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag),
        tag = value[symToStringTag];

    try {
      value[symToStringTag] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString.call(value);

    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }

    return result;
  }

  module.exports = getRawTag;
},210,[207],"node_modules\\lodash\\_getRawTag.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var objectProto = Object.prototype;
  var nativeObjectToString = objectProto.toString;

  function objectToString(value) {
    return nativeObjectToString.call(value);
  }

  module.exports = objectToString;
},211,[],"node_modules\\lodash\\_objectToString.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
  }

  module.exports = isObject;
},212,[],"node_modules\\lodash\\isObject.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var coreJsData = _require(_dependencyMap[0], './_coreJsData');

  var maskSrcKey = function () {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
  }();

  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }

  module.exports = isMasked;
},213,[214],"node_modules\\lodash\\_isMasked.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var root = _require(_dependencyMap[0], './_root');

  var coreJsData = root['__core-js_shared__'];
  module.exports = coreJsData;
},214,[208],"node_modules\\lodash\\_coreJsData.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var funcProto = Function.prototype;
  var funcToString = funcProto.toString;

  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}

      try {
        return func + '';
      } catch (e) {}
    }

    return '';
  }

  module.exports = toSource;
},215,[],"node_modules\\lodash\\_toSource.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  module.exports = getValue;
},216,[],"node_modules\\lodash\\_getValue.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var mapCacheClear = _require(_dependencyMap[0], './_mapCacheClear'),
        mapCacheDelete = _require(_dependencyMap[1], './_mapCacheDelete'),
        mapCacheGet = _require(_dependencyMap[2], './_mapCacheGet'),
        mapCacheHas = _require(_dependencyMap[3], './_mapCacheHas'),
        mapCacheSet = _require(_dependencyMap[4], './_mapCacheSet');

    function MapCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
        }
    }

    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    module.exports = MapCache;
},217,[218,226,229,230,231],"node_modules\\lodash\\_MapCache.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var Hash = _require(_dependencyMap[0], './_Hash'),
      ListCache = _require(_dependencyMap[1], './_ListCache'),
      Map = _require(_dependencyMap[2], './_Map');

  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      'hash': new Hash(),
      'map': new (Map || ListCache)(),
      'string': new Hash()
    };
  }

  module.exports = mapCacheClear;
},218,[219,189,202],"node_modules\\lodash\\_mapCacheClear.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var hashClear = _require(_dependencyMap[0], './_hashClear'),
        hashDelete = _require(_dependencyMap[1], './_hashDelete'),
        hashGet = _require(_dependencyMap[2], './_hashGet'),
        hashHas = _require(_dependencyMap[3], './_hashHas'),
        hashSet = _require(_dependencyMap[4], './_hashSet');

    function Hash(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
        }
    }

    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    module.exports = Hash;
},219,[220,222,223,224,225],"node_modules\\lodash\\_Hash.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var nativeCreate = _require(_dependencyMap[0], './_nativeCreate');

  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
  }

  module.exports = hashClear;
},220,[221],"node_modules\\lodash\\_hashClear.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var getNative = _require(_dependencyMap[0], './_getNative');

  var nativeCreate = getNative(Object, 'create');
  module.exports = nativeCreate;
},221,[203],"node_modules\\lodash\\_nativeCreate.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }

  module.exports = hashDelete;
},222,[],"node_modules\\lodash\\_hashDelete.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var nativeCreate = _require(_dependencyMap[0], './_nativeCreate');

  var HASH_UNDEFINED = '__lodash_hash_undefined__';
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function hashGet(key) {
    var data = this.__data__;

    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }

    return hasOwnProperty.call(data, key) ? data[key] : undefined;
  }

  module.exports = hashGet;
},223,[221],"node_modules\\lodash\\_hashGet.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var nativeCreate = _require(_dependencyMap[0], './_nativeCreate');

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
  }

  module.exports = hashHas;
},224,[221],"node_modules\\lodash\\_hashHas.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var nativeCreate = _require(_dependencyMap[0], './_nativeCreate');

  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    return this;
  }

  module.exports = hashSet;
},225,[221],"node_modules\\lodash\\_hashSet.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var getMapData = _require(_dependencyMap[0], './_getMapData');

  function mapCacheDelete(key) {
    var result = getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }

  module.exports = mapCacheDelete;
},226,[227],"node_modules\\lodash\\_mapCacheDelete.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var isKeyable = _require(_dependencyMap[0], './_isKeyable');

  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
  }

  module.exports = getMapData;
},227,[228],"node_modules\\lodash\\_getMapData.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function isKeyable(value) {
    var type = typeof value;
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
  }

  module.exports = isKeyable;
},228,[],"node_modules\\lodash\\_isKeyable.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var getMapData = _require(_dependencyMap[0], './_getMapData');

  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }

  module.exports = mapCacheGet;
},229,[227],"node_modules\\lodash\\_mapCacheGet.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var getMapData = _require(_dependencyMap[0], './_getMapData');

  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }

  module.exports = mapCacheHas;
},230,[227],"node_modules\\lodash\\_mapCacheHas.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var getMapData = _require(_dependencyMap[0], './_getMapData');

  function mapCacheSet(key, value) {
    var data = getMapData(this, key),
        size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }

  module.exports = mapCacheSet;
},231,[227],"node_modules\\lodash\\_mapCacheSet.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseIsEqualDeep = _require(_dependencyMap[0], './_baseIsEqualDeep'),
      isObjectLike = _require(_dependencyMap[1], './isObjectLike');

  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }

    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
      return value !== value && other !== other;
    }

    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }

  module.exports = baseIsEqual;
},232,[233,257],"node_modules\\lodash\\_baseIsEqual.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var Stack = _require(_dependencyMap[0], './_Stack'),
      equalArrays = _require(_dependencyMap[1], './_equalArrays'),
      equalByTag = _require(_dependencyMap[2], './_equalByTag'),
      equalObjects = _require(_dependencyMap[3], './_equalObjects'),
      getTag = _require(_dependencyMap[4], './_getTag'),
      isArray = _require(_dependencyMap[5], './isArray'),
      isBuffer = _require(_dependencyMap[6], './isBuffer'),
      isTypedArray = _require(_dependencyMap[7], './isTypedArray');

  var COMPARE_PARTIAL_FLAG = 1;
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      objectTag = '[object Object]';
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray(object),
        othIsArr = isArray(other),
        objTag = objIsArr ? arrayTag : getTag(object),
        othTag = othIsArr ? arrayTag : getTag(other);
    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;
    var objIsObj = objTag == objectTag,
        othIsObj = othTag == objectTag,
        isSameTag = objTag == othTag;

    if (isSameTag && isBuffer(object)) {
      if (!isBuffer(other)) {
        return false;
      }

      objIsArr = true;
      objIsObj = false;
    }

    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack());
      return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }

    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new Stack());
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }

    if (!isSameTag) {
      return false;
    }

    stack || (stack = new Stack());
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }

  module.exports = baseIsEqualDeep;
},233,[188,234,240,244,271,248,258,261],"node_modules\\lodash\\_baseIsEqualDeep.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var SetCache = _require(_dependencyMap[0], './_SetCache'),
      arraySome = _require(_dependencyMap[1], './_arraySome'),
      cacheHas = _require(_dependencyMap[2], './_cacheHas');

  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }

    var stacked = stack.get(array);

    if (stacked && stack.get(other)) {
      return stacked == other;
    }

    var index = -1,
        result = true,
        seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
    stack.set(array, other);
    stack.set(other, array);

    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }

      if (compared !== undefined) {
        if (compared) {
          continue;
        }

        result = false;
        break;
      }

      if (seen) {
        if (!arraySome(other, function (othValue, othIndex) {
          if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            return seen.push(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
        result = false;
        break;
      }
    }

    stack['delete'](array);
    stack['delete'](other);
    return result;
  }

  module.exports = equalArrays;
},234,[235,238,239],"node_modules\\lodash\\_equalArrays.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var MapCache = _require(_dependencyMap[0], './_MapCache'),
        setCacheAdd = _require(_dependencyMap[1], './_setCacheAdd'),
        setCacheHas = _require(_dependencyMap[2], './_setCacheHas');

    function SetCache(values) {
        var index = -1,
            length = values == null ? 0 : values.length;
        this.__data__ = new MapCache();

        while (++index < length) {
            this.add(values[index]);
        }
    }

    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    module.exports = SetCache;
},235,[217,236,237],"node_modules\\lodash\\_SetCache.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);

    return this;
  }

  module.exports = setCacheAdd;
},236,[],"node_modules\\lodash\\_setCacheAdd.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function setCacheHas(value) {
    return this.__data__.has(value);
  }

  module.exports = setCacheHas;
},237,[],"node_modules\\lodash\\_setCacheHas.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }

    return false;
  }

  module.exports = arraySome;
},238,[],"node_modules\\lodash\\_arraySome.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  module.exports = cacheHas;
},239,[],"node_modules\\lodash\\_cacheHas.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var Symbol = _require(_dependencyMap[0], './_Symbol'),
      Uint8Array = _require(_dependencyMap[1], './_Uint8Array'),
      eq = _require(_dependencyMap[2], './eq'),
      equalArrays = _require(_dependencyMap[3], './_equalArrays'),
      mapToArray = _require(_dependencyMap[4], './_mapToArray'),
      setToArray = _require(_dependencyMap[5], './_setToArray');

  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;
  var boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]';
  var symbolProto = Symbol ? typeof Symbol === "function" ? Symbol.prototype : "@@prototype" : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }

        object = object.buffer;
        other = other.buffer;

      case arrayBufferTag:
        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
          return false;
        }

        return true;

      case boolTag:
      case dateTag:
      case numberTag:
        return eq(+object, +other);

      case errorTag:
        return object.name == other.name && object.message == other.message;

      case regexpTag:
      case stringTag:
        return object == other + '';

      case mapTag:
        var convert = mapToArray;

      case setTag:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
        convert || (convert = setToArray);

        if (object.size != other.size && !isPartial) {
          return false;
        }

        var stacked = stack.get(object);

        if (stacked) {
          return stacked == other;
        }

        bitmask |= COMPARE_UNORDERED_FLAG;
        stack.set(object, other);
        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack['delete'](object);
        return result;

      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }

    }

    return false;
  }

  module.exports = equalByTag;
},240,[207,241,193,234,242,243],"node_modules\\lodash\\_equalByTag.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var root = _require(_dependencyMap[0], './_root');

  var Uint8Array = root.Uint8Array;
  module.exports = Uint8Array;
},241,[208],"node_modules\\lodash\\_Uint8Array.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);
    map.forEach(function (value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  module.exports = mapToArray;
},242,[],"node_modules\\lodash\\_mapToArray.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);
    set.forEach(function (value) {
      result[++index] = value;
    });
    return result;
  }

  module.exports = setToArray;
},243,[],"node_modules\\lodash\\_setToArray.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var getAllKeys = _require(_dependencyMap[0], './_getAllKeys');

  var COMPARE_PARTIAL_FLAG = 1;
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        objProps = getAllKeys(object),
        objLength = objProps.length,
        othProps = getAllKeys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }

    var index = objLength;

    while (index--) {
      var key = objProps[index];

      if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
        return false;
      }
    }

    var stacked = stack.get(object);

    if (stacked && stack.get(other)) {
      return stacked == other;
    }

    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;

    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      }

      if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result = false;
        break;
      }

      skipCtor || (skipCtor = key == 'constructor');
    }

    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;

      if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }

    stack['delete'](object);
    stack['delete'](other);
    return result;
  }

  module.exports = equalObjects;
},244,[245],"node_modules\\lodash\\_equalObjects.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseGetAllKeys = _require(_dependencyMap[0], './_baseGetAllKeys'),
      getSymbols = _require(_dependencyMap[1], './_getSymbols'),
      keys = _require(_dependencyMap[2], './keys');

  function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols);
  }

  module.exports = getAllKeys;
},245,[246,249,252],"node_modules\\lodash\\_getAllKeys.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var arrayPush = _require(_dependencyMap[0], './_arrayPush'),
      isArray = _require(_dependencyMap[1], './isArray');

  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
  }

  module.exports = baseGetAllKeys;
},246,[247,248],"node_modules\\lodash\\_baseGetAllKeys.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }

    return array;
  }

  module.exports = arrayPush;
},247,[],"node_modules\\lodash\\_arrayPush.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var isArray = Array.isArray;
  module.exports = isArray;
},248,[],"node_modules\\lodash\\isArray.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var arrayFilter = _require(_dependencyMap[0], './_arrayFilter'),
      stubArray = _require(_dependencyMap[1], './stubArray');

  var objectProto = Object.prototype;
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;
  var nativeGetSymbols = Object.getOwnPropertySymbols;
  var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
    if (object == null) {
      return [];
    }

    object = Object(object);
    return arrayFilter(nativeGetSymbols(object), function (symbol) {
      return propertyIsEnumerable.call(object, symbol);
    });
  };
  module.exports = getSymbols;
},249,[250,251],"node_modules\\lodash\\_getSymbols.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];

      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }

    return result;
  }

  module.exports = arrayFilter;
},250,[],"node_modules\\lodash\\_arrayFilter.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function stubArray() {
    return [];
  }

  module.exports = stubArray;
},251,[],"node_modules\\lodash\\stubArray.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var arrayLikeKeys = _require(_dependencyMap[0], './_arrayLikeKeys'),
      baseKeys = _require(_dependencyMap[1], './_baseKeys'),
      isArrayLike = _require(_dependencyMap[2], './isArrayLike');

  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }

  module.exports = keys;
},252,[253,266,270],"node_modules\\lodash\\keys.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseTimes = _require(_dependencyMap[0], './_baseTimes'),
      isArguments = _require(_dependencyMap[1], './isArguments'),
      isArray = _require(_dependencyMap[2], './isArray'),
      isBuffer = _require(_dependencyMap[3], './isBuffer'),
      isIndex = _require(_dependencyMap[4], './_isIndex'),
      isTypedArray = _require(_dependencyMap[5], './isTypedArray');

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value),
        isArg = !isArr && isArguments(value),
        isBuff = !isArr && !isArg && isBuffer(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? baseTimes(value.length, String) : [],
        length = result.length;

    for (var key in value) {
      if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || isIndex(key, length)))) {
        result.push(key);
      }
    }

    return result;
  }

  module.exports = arrayLikeKeys;
},253,[254,255,248,258,260,261],"node_modules\\lodash\\_arrayLikeKeys.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }

    return result;
  }

  module.exports = baseTimes;
},254,[],"node_modules\\lodash\\_baseTimes.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var baseIsArguments = _require(_dependencyMap[0], './_baseIsArguments'),
        isObjectLike = _require(_dependencyMap[1], './isObjectLike');

    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var isArguments = baseIsArguments(function () {
        return arguments;
    }()) ? baseIsArguments : function (value) {
        return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
    };
    module.exports = isArguments;
},255,[256,257],"node_modules\\lodash\\isArguments.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseGetTag = _require(_dependencyMap[0], './_baseGetTag'),
      isObjectLike = _require(_dependencyMap[1], './isObjectLike');

  var argsTag = '[object Arguments]';

  function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
  }

  module.exports = baseIsArguments;
},256,[206,257],"node_modules\\lodash\\_baseIsArguments.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function isObjectLike(value) {
    return value != null && typeof value == 'object';
  }

  module.exports = isObjectLike;
},257,[],"node_modules\\lodash\\isObjectLike.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var root = _require(_dependencyMap[0], './_root'),
      stubFalse = _require(_dependencyMap[1], './stubFalse');

  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var Buffer = moduleExports ? root.Buffer : undefined;
  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
  var isBuffer = nativeIsBuffer || stubFalse;
  module.exports = isBuffer;
},258,[208,259],"node_modules\\lodash\\isBuffer.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function stubFalse() {
    return false;
  }

  module.exports = stubFalse;
},259,[],"node_modules\\lodash\\stubFalse.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var MAX_SAFE_INTEGER = 9007199254740991;
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
  }

  module.exports = isIndex;
},260,[],"node_modules\\lodash\\_isIndex.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseIsTypedArray = _require(_dependencyMap[0], './_baseIsTypedArray'),
      baseUnary = _require(_dependencyMap[1], './_baseUnary'),
      nodeUtil = _require(_dependencyMap[2], './_nodeUtil');

  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
  module.exports = isTypedArray;
},261,[262,264,265],"node_modules\\lodash\\isTypedArray.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var baseGetTag = _require(_dependencyMap[0], './_baseGetTag'),
        isLength = _require(_dependencyMap[1], './isLength'),
        isObjectLike = _require(_dependencyMap[2], './isObjectLike');

    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        objectTag = '[object Object]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        weakMapTag = '[object WeakMap]';
    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

    function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    module.exports = baseIsTypedArray;
},262,[206,263,257],"node_modules\\lodash\\_baseIsTypedArray.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var MAX_SAFE_INTEGER = 9007199254740991;

  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  module.exports = isLength;
},263,[],"node_modules\\lodash\\isLength.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function baseUnary(func) {
    return function (value) {
      return func(value);
    };
  }

  module.exports = baseUnary;
},264,[],"node_modules\\lodash\\_baseUnary.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var freeGlobal = _require(_dependencyMap[0], './_freeGlobal');

  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var freeProcess = moduleExports && freeGlobal.process;

  var nodeUtil = function () {
    try {
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }();

  module.exports = nodeUtil;
},265,[209],"node_modules\\lodash\\_nodeUtil.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var isPrototype = _require(_dependencyMap[0], './_isPrototype'),
      nativeKeys = _require(_dependencyMap[1], './_nativeKeys');

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }

    var result = [];

    for (var key in Object(object)) {
      if (hasOwnProperty.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }

    return result;
  }

  module.exports = baseKeys;
},266,[267,268],"node_modules\\lodash\\_baseKeys.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var objectProto = Object.prototype;

  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
    return value === proto;
  }

  module.exports = isPrototype;
},267,[],"node_modules\\lodash\\_isPrototype.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var overArg = _require(_dependencyMap[0], './_overArg');

  var nativeKeys = overArg(Object.keys, Object);
  module.exports = nativeKeys;
},268,[269],"node_modules\\lodash\\_nativeKeys.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function overArg(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }

  module.exports = overArg;
},269,[],"node_modules\\lodash\\_overArg.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var isFunction = _require(_dependencyMap[0], './isFunction'),
      isLength = _require(_dependencyMap[1], './isLength');

  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  module.exports = isArrayLike;
},270,[205,263],"node_modules\\lodash\\isArrayLike.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var DataView = _require(_dependencyMap[0], './_DataView'),
        Map = _require(_dependencyMap[1], './_Map'),
        Promise = _require(_dependencyMap[2], './_Promise'),
        Set = _require(_dependencyMap[3], './_Set'),
        WeakMap = _require(_dependencyMap[4], './_WeakMap'),
        baseGetTag = _require(_dependencyMap[5], './_baseGetTag'),
        toSource = _require(_dependencyMap[6], './_toSource');

    var mapTag = '[object Map]',
        objectTag = '[object Object]',
        promiseTag = '[object Promise]',
        setTag = '[object Set]',
        weakMapTag = '[object WeakMap]';
    var dataViewTag = '[object DataView]';
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);
    var getTag = baseGetTag;

    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
        getTag = function getTag(value) {
            var result = baseGetTag(value),
                Ctor = result == objectTag ? value.constructor : undefined,
                ctorString = Ctor ? toSource(Ctor) : '';

            if (ctorString) {
                switch (ctorString) {
                    case dataViewCtorString:
                        return dataViewTag;

                    case mapCtorString:
                        return mapTag;

                    case promiseCtorString:
                        return promiseTag;

                    case setCtorString:
                        return setTag;

                    case weakMapCtorString:
                        return weakMapTag;
                }
            }

            return result;
        };
    }

    module.exports = getTag;
},271,[272,202,273,274,275,206,215],"node_modules\\lodash\\_getTag.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var getNative = _require(_dependencyMap[0], './_getNative'),
        root = _require(_dependencyMap[1], './_root');

    var DataView = getNative(root, 'DataView');
    module.exports = DataView;
},272,[203,208],"node_modules\\lodash\\_DataView.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var getNative = _require(_dependencyMap[0], './_getNative'),
        root = _require(_dependencyMap[1], './_root');

    var Promise = getNative(root, 'Promise');
    module.exports = Promise;
},273,[203,208],"node_modules\\lodash\\_Promise.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var getNative = _require(_dependencyMap[0], './_getNative'),
        root = _require(_dependencyMap[1], './_root');

    var Set = getNative(root, 'Set');
    module.exports = Set;
},274,[203,208],"node_modules\\lodash\\_Set.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var getNative = _require(_dependencyMap[0], './_getNative'),
        root = _require(_dependencyMap[1], './_root');

    var WeakMap = getNative(root, 'WeakMap');
    module.exports = WeakMap;
},275,[203,208],"node_modules\\lodash\\_WeakMap.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var isStrictComparable = _require(_dependencyMap[0], './_isStrictComparable'),
        keys = _require(_dependencyMap[1], './keys');

    function getMatchData(object) {
        var result = keys(object),
            length = result.length;

        while (length--) {
            var key = result[length],
                value = object[key];
            result[length] = [key, value, isStrictComparable(value)];
        }

        return result;
    }

    module.exports = getMatchData;
},276,[277,252],"node_modules\\lodash\\_getMatchData.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var isObject = _require(_dependencyMap[0], './isObject');

  function isStrictComparable(value) {
    return value === value && !isObject(value);
  }

  module.exports = isStrictComparable;
},277,[212],"node_modules\\lodash\\_isStrictComparable.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function matchesStrictComparable(key, srcValue) {
    return function (object) {
      if (object == null) {
        return false;
      }

      return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
    };
  }

  module.exports = matchesStrictComparable;
},278,[],"node_modules\\lodash\\_matchesStrictComparable.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseIsEqual = _require(_dependencyMap[0], './_baseIsEqual'),
      get = _require(_dependencyMap[1], './get'),
      hasIn = _require(_dependencyMap[2], './hasIn'),
      isKey = _require(_dependencyMap[3], './_isKey'),
      isStrictComparable = _require(_dependencyMap[4], './_isStrictComparable'),
      matchesStrictComparable = _require(_dependencyMap[5], './_matchesStrictComparable'),
      toKey = _require(_dependencyMap[6], './_toKey');

  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  function baseMatchesProperty(path, srcValue) {
    if (isKey(path) && isStrictComparable(srcValue)) {
      return matchesStrictComparable(toKey(path), srcValue);
    }

    return function (object) {
      var objValue = get(object, path);
      return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
    };
  }

  module.exports = baseMatchesProperty;
},279,[232,280,292,283,277,278,291],"node_modules\\lodash\\_baseMatchesProperty.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseGet = _require(_dependencyMap[0], './_baseGet');

  function get(object, path, defaultValue) {
    var result = object == null ? undefined : baseGet(object, path);
    return result === undefined ? defaultValue : result;
  }

  module.exports = get;
},280,[281],"node_modules\\lodash\\get.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var castPath = _require(_dependencyMap[0], './_castPath'),
      toKey = _require(_dependencyMap[1], './_toKey');

  function baseGet(object, path) {
    path = castPath(path, object);
    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[toKey(path[index++])];
    }

    return index && index == length ? object : undefined;
  }

  module.exports = baseGet;
},281,[282,291],"node_modules\\lodash\\_baseGet.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var isArray = _require(_dependencyMap[0], './isArray'),
      isKey = _require(_dependencyMap[1], './_isKey'),
      stringToPath = _require(_dependencyMap[2], './_stringToPath'),
      toString = _require(_dependencyMap[3], './toString');

  function castPath(value, object) {
    if (isArray(value)) {
      return value;
    }

    return isKey(value, object) ? [value] : stringToPath(toString(value));
  }

  module.exports = castPath;
},282,[248,283,285,288],"node_modules\\lodash\\_castPath.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var isArray = _require(_dependencyMap[0], './isArray'),
      isSymbol = _require(_dependencyMap[1], './isSymbol');

  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/;

  function isKey(value, object) {
    if (isArray(value)) {
      return false;
    }

    var type = typeof value;

    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
      return true;
    }

    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  }

  module.exports = isKey;
},283,[248,284],"node_modules\\lodash\\_isKey.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var baseGetTag = _require(_dependencyMap[0], './_baseGetTag'),
        isObjectLike = _require(_dependencyMap[1], './isObjectLike');

    var symbolTag = '[object Symbol]';

    function isSymbol(value) {
        return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }

    module.exports = isSymbol;
},284,[206,257],"node_modules\\lodash\\isSymbol.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var memoizeCapped = _require(_dependencyMap[0], './_memoizeCapped');

  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  var reEscapeChar = /\\(\\)?/g;
  var stringToPath = memoizeCapped(function (string) {
    var result = [];

    if (string.charCodeAt(0) === 46) {
        result.push('');
      }

    string.replace(rePropName, function (match, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
    });
    return result;
  });
  module.exports = stringToPath;
},285,[286],"node_modules\\lodash\\_stringToPath.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var memoize = _require(_dependencyMap[0], './memoize');

  var MAX_MEMOIZE_SIZE = 500;

  function memoizeCapped(func) {
    var result = memoize(func, function (key) {
      if (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear();
      }

      return key;
    });
    var cache = result.cache;
    return result;
  }

  module.exports = memoizeCapped;
},286,[287],"node_modules\\lodash\\_memoizeCapped.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var MapCache = _require(_dependencyMap[0], './_MapCache');

  var FUNC_ERROR_TEXT = 'Expected a function';

  function memoize(func, resolver) {
    if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }

    var memoized = function memoized() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }

      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result) || cache;
      return result;
    };

    memoized.cache = new (memoize.Cache || MapCache)();
    return memoized;
  }

  memoize.Cache = MapCache;
  module.exports = memoize;
},287,[217],"node_modules\\lodash\\memoize.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseToString = _require(_dependencyMap[0], './_baseToString');

  function toString(value) {
    return value == null ? '' : baseToString(value);
  }

  module.exports = toString;
},288,[289],"node_modules\\lodash\\toString.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var Symbol = _require(_dependencyMap[0], './_Symbol'),
      arrayMap = _require(_dependencyMap[1], './_arrayMap'),
      isArray = _require(_dependencyMap[2], './isArray'),
      isSymbol = _require(_dependencyMap[3], './isSymbol');

  var INFINITY = 1 / 0;
  var symbolProto = Symbol ? typeof Symbol === "function" ? Symbol.prototype : "@@prototype" : undefined,
      symbolToString = symbolProto ? symbolProto.toString : undefined;

  function baseToString(value) {
    if (typeof value == 'string') {
      return value;
    }

    if (isArray(value)) {
      return arrayMap(value, baseToString) + '';
    }

    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }

    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
  }

  module.exports = baseToString;
},289,[207,290,248,284],"node_modules\\lodash\\_baseToString.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }

    return result;
  }

  module.exports = arrayMap;
},290,[],"node_modules\\lodash\\_arrayMap.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var isSymbol = _require(_dependencyMap[0], './isSymbol');

  var INFINITY = 1 / 0;

  function toKey(value) {
    if (typeof value == 'string' || isSymbol(value)) {
      return value;
    }

    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
  }

  module.exports = toKey;
},291,[284],"node_modules\\lodash\\_toKey.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseHasIn = _require(_dependencyMap[0], './_baseHasIn'),
      hasPath = _require(_dependencyMap[1], './_hasPath');

  function hasIn(object, path) {
    return object != null && hasPath(object, path, baseHasIn);
  }

  module.exports = hasIn;
},292,[293,294],"node_modules\\lodash\\hasIn.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function baseHasIn(object, key) {
    return object != null && key in Object(object);
  }

  module.exports = baseHasIn;
},293,[],"node_modules\\lodash\\_baseHasIn.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var castPath = _require(_dependencyMap[0], './_castPath'),
      isArguments = _require(_dependencyMap[1], './isArguments'),
      isArray = _require(_dependencyMap[2], './isArray'),
      isIndex = _require(_dependencyMap[3], './_isIndex'),
      isLength = _require(_dependencyMap[4], './isLength'),
      toKey = _require(_dependencyMap[5], './_toKey');

  function hasPath(object, path, hasFunc) {
    path = castPath(path, object);
    var index = -1,
        length = path.length,
        result = false;

    while (++index < length) {
      var key = toKey(path[index]);

      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }

      object = object[key];
    }

    if (result || ++index != length) {
      return result;
    }

    length = object == null ? 0 : object.length;
    return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
  }

  module.exports = hasPath;
},294,[282,255,248,260,263,291],"node_modules\\lodash\\_hasPath.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function identity(value) {
    return value;
  }

  module.exports = identity;
},295,[],"node_modules\\lodash\\identity.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseProperty = _require(_dependencyMap[0], './_baseProperty'),
      basePropertyDeep = _require(_dependencyMap[1], './_basePropertyDeep'),
      isKey = _require(_dependencyMap[2], './_isKey'),
      toKey = _require(_dependencyMap[3], './_toKey');

  function property(path) {
    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
  }

  module.exports = property;
},296,[297,298,283,291],"node_modules\\lodash\\property.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function baseProperty(key) {
    return function (object) {
      return object == null ? undefined : object[key];
    };
  }

  module.exports = baseProperty;
},297,[],"node_modules\\lodash\\_baseProperty.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseGet = _require(_dependencyMap[0], './_baseGet');

  function basePropertyDeep(path) {
    return function (object) {
      return baseGet(object, path);
    };
  }

  module.exports = basePropertyDeep;
},298,[281],"node_modules\\lodash\\_basePropertyDeep.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseFindIndex = _require(_dependencyMap[0], './_baseFindIndex'),
      baseIteratee = _require(_dependencyMap[1], './_baseIteratee'),
      toInteger = _require(_dependencyMap[2], './toInteger');

  var nativeMax = Math.max;

  function findIndex(array, predicate, fromIndex) {
    var length = array == null ? 0 : array.length;

    if (!length) {
      return -1;
    }

    var index = fromIndex == null ? 0 : toInteger(fromIndex);

    if (index < 0) {
      index = nativeMax(length + index, 0);
    }

    return baseFindIndex(array, baseIteratee(predicate, 3), index);
  }

  module.exports = findIndex;
},299,[300,185,301],"node_modules\\lodash\\findIndex.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while (fromRight ? index-- : ++index < length) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }

    return -1;
  }

  module.exports = baseFindIndex;
},300,[],"node_modules\\lodash\\_baseFindIndex.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var toFinite = _require(_dependencyMap[0], './toFinite');

  function toInteger(value) {
    var result = toFinite(value),
        remainder = result % 1;
    return result === result ? remainder ? result - remainder : result : 0;
  }

  module.exports = toInteger;
},301,[302],"node_modules\\lodash\\toInteger.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var toNumber = _require(_dependencyMap[0], './toNumber');

  var INFINITY = 1 / 0,
      MAX_INTEGER = 1.7976931348623157e+308;

  function toFinite(value) {
    if (!value) {
      return value === 0 ? value : 0;
    }

    value = toNumber(value);

    if (value === INFINITY || value === -INFINITY) {
      var sign = value < 0 ? -1 : 1;
      return sign * MAX_INTEGER;
    }

    return value === value ? value : 0;
  }

  module.exports = toFinite;
},302,[303],"node_modules\\lodash\\toFinite.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var isObject = _require(_dependencyMap[0], './isObject'),
      isSymbol = _require(_dependencyMap[1], './isSymbol');

  var NAN = 0 / 0;
  var reTrim = /^\s+|\s+$/g;
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
  var reIsBinary = /^0b[01]+$/i;
  var reIsOctal = /^0o[0-7]+$/i;
  var freeParseInt = parseInt;

  function toNumber(value) {
    if (typeof value == 'number') {
      return value;
    }

    if (isSymbol(value)) {
      return NAN;
    }

    if (isObject(value)) {
      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
      value = isObject(other) ? other + '' : other;
    }

    if (typeof value != 'string') {
      return value === 0 ? value : +value;
    }

    value = value.replace(reTrim, '');
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
  }

  module.exports = toNumber;
},303,[212,284],"node_modules\\lodash\\toNumber.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createPrototypeProxy;

  var _assign = _require(_dependencyMap[0], 'lodash/assign');

  var _assign2 = _interopRequireDefault(_assign);

  var _difference = _require(_dependencyMap[1], 'lodash/difference');

  var _difference2 = _interopRequireDefault(_difference);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function createPrototypeProxy() {
    var proxy = {};
    var current = null;
    var mountedInstances = [];

    function proxyToString(name) {
      return function toString() {
        if (typeof current[name] === 'function') {
          return current[name].toString();
        } else {
          return '<method was deleted>';
        }
      };
    }

    function proxyMethod(name) {
      var proxiedMethod = function proxiedMethod() {
        if (typeof current[name] === 'function') {
          return current[name].apply(this, arguments);
        }
      };

      (0, _assign2.default)(proxiedMethod, current[name]);
      proxiedMethod.toString = proxyToString(name);
      return proxiedMethod;
    }

    function proxiedComponentDidMount() {
      mountedInstances.push(this);

      if (typeof current.componentDidMount === 'function') {
        return current.componentDidMount.apply(this, arguments);
      }
    }

    proxiedComponentDidMount.toString = proxyToString('componentDidMount');

    function proxiedComponentWillUnmount() {
      var index = mountedInstances.indexOf(this);

      if (index !== -1) {
        mountedInstances.splice(index, 1);
      }

      if (typeof current.componentWillUnmount === 'function') {
        return current.componentWillUnmount.apply(this, arguments);
      }
    }

    proxiedComponentWillUnmount.toString = proxyToString('componentWillUnmount');

    function defineProxyProperty(name, descriptor) {
      Object.defineProperty(proxy, name, descriptor);
    }

    function defineProxyPropertyWithValue(name, value) {
      var _ref = Object.getOwnPropertyDescriptor(current, name) || {};

      var _ref$enumerable = _ref.enumerable;
      var enumerable = _ref$enumerable === undefined ? false : _ref$enumerable;
      var _ref$writable = _ref.writable;
      var writable = _ref$writable === undefined ? true : _ref$writable;
      defineProxyProperty(name, {
        configurable: true,
        enumerable: enumerable,
        writable: writable,
        value: value
      });
    }

    function createAutoBindMap() {
      if (!current.__reactAutoBindMap) {
        return;
      }

      var __reactAutoBindMap = {};

      for (var name in current.__reactAutoBindMap) {
        if (typeof proxy[name] === 'function' && current.__reactAutoBindMap.hasOwnProperty(name)) {
          __reactAutoBindMap[name] = proxy[name];
        }
      }

      return __reactAutoBindMap;
    }

    function createAutoBindPairs() {
      var __reactAutoBindPairs = [];

      for (var i = 0; i < current.__reactAutoBindPairs.length; i += 2) {
        var name = current.__reactAutoBindPairs[i];
        var method = proxy[name];

        if (typeof method === 'function') {
          __reactAutoBindPairs.push(name, method);
        }
      }

      return __reactAutoBindPairs;
    }

    function update(next) {
      current = next;
      var currentNames = Object.getOwnPropertyNames(current);
      var previousName = Object.getOwnPropertyNames(proxy);
      var removedNames = (0, _difference2.default)(previousName, currentNames);
      removedNames.forEach(function (name) {
        delete proxy[name];
      });
      currentNames.forEach(function (name) {
        var descriptor = Object.getOwnPropertyDescriptor(current, name);

        if (typeof descriptor.value === 'function') {
          defineProxyPropertyWithValue(name, proxyMethod(name));
        } else {
          defineProxyProperty(name, descriptor);
        }
      });
      defineProxyPropertyWithValue('componentDidMount', proxiedComponentDidMount);
      defineProxyPropertyWithValue('componentWillUnmount', proxiedComponentWillUnmount);

      if (current.hasOwnProperty('__reactAutoBindMap')) {
        defineProxyPropertyWithValue('__reactAutoBindMap', createAutoBindMap());
      }

      if (current.hasOwnProperty('__reactAutoBindPairs')) {
        defineProxyPropertyWithValue('__reactAutoBindPairs', createAutoBindPairs());
      }

      proxy.__proto__ = next;
      return mountedInstances;
    }

    function get() {
      return proxy;
    }

    return {
      update: update,
      get: get
    };
  }

  ;
},304,[305,319],"node_modules\\react-proxy\\modules\\createPrototypeProxy.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var assignValue = _require(_dependencyMap[0], './_assignValue'),
      copyObject = _require(_dependencyMap[1], './_copyObject'),
      createAssigner = _require(_dependencyMap[2], './_createAssigner'),
      isArrayLike = _require(_dependencyMap[3], './isArrayLike'),
      isPrototype = _require(_dependencyMap[4], './_isPrototype'),
      keys = _require(_dependencyMap[5], './keys');

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var assign = createAssigner(function (object, source) {
    if (isPrototype(source) || isArrayLike(source)) {
      copyObject(source, keys(source), object);
      return;
    }

    for (var key in source) {
      if (hasOwnProperty.call(source, key)) {
        assignValue(object, key, source[key]);
      }
    }
  });
  module.exports = assign;
},305,[306,309,310,270,267,252],"node_modules\\lodash\\assign.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseAssignValue = _require(_dependencyMap[0], './_baseAssignValue'),
      eq = _require(_dependencyMap[1], './eq');

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function assignValue(object, key, value) {
    var objValue = object[key];

    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
      baseAssignValue(object, key, value);
    }
  }

  module.exports = assignValue;
},306,[307,193],"node_modules\\lodash\\_assignValue.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var defineProperty = _require(_dependencyMap[0], './_defineProperty');

  function baseAssignValue(object, key, value) {
    if (key == '__proto__' && defineProperty) {
      defineProperty(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
      });
    } else {
      object[key] = value;
    }
  }

  module.exports = baseAssignValue;
},307,[308],"node_modules\\lodash\\_baseAssignValue.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var getNative = _require(_dependencyMap[0], './_getNative');

  var defineProperty = function () {
    try {
      var func = getNative(Object, 'defineProperty');
      func({}, '', {});
      return func;
    } catch (e) {}
  }();

  module.exports = defineProperty;
},308,[203],"node_modules\\lodash\\_defineProperty.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var assignValue = _require(_dependencyMap[0], './_assignValue'),
      baseAssignValue = _require(_dependencyMap[1], './_baseAssignValue');

  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index = -1,
        length = props.length;

    while (++index < length) {
      var key = props[index];
      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

      if (newValue === undefined) {
        newValue = source[key];
      }

      if (isNew) {
        baseAssignValue(object, key, newValue);
      } else {
        assignValue(object, key, newValue);
      }
    }

    return object;
  }

  module.exports = copyObject;
},309,[306,307],"node_modules\\lodash\\_copyObject.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseRest = _require(_dependencyMap[0], './_baseRest'),
      isIterateeCall = _require(_dependencyMap[1], './_isIterateeCall');

  function createAssigner(assigner) {
    return baseRest(function (object, sources) {
      var index = -1,
          length = sources.length,
          customizer = length > 1 ? sources[length - 1] : undefined,
          guard = length > 2 ? sources[2] : undefined;
      customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        customizer = length < 3 ? undefined : customizer;
        length = 1;
      }

      object = Object(object);

      while (++index < length) {
        var source = sources[index];

        if (source) {
          assigner(object, source, index, customizer);
        }
      }

      return object;
    });
  }

  module.exports = createAssigner;
},310,[311,318],"node_modules\\lodash\\_createAssigner.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var identity = _require(_dependencyMap[0], './identity'),
      overRest = _require(_dependencyMap[1], './_overRest'),
      setToString = _require(_dependencyMap[2], './_setToString');

  function baseRest(func, start) {
    return setToString(overRest(func, start, identity), func + '');
  }

  module.exports = baseRest;
},311,[295,312,314],"node_modules\\lodash\\_baseRest.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var apply = _require(_dependencyMap[0], './_apply');

  var nativeMax = Math.max;

  function overRest(func, start, transform) {
    start = nativeMax(start === undefined ? func.length - 1 : start, 0);
    return function () {
      var args = arguments,
          index = -1,
          length = nativeMax(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }

      index = -1;
      var otherArgs = Array(start + 1);

      while (++index < start) {
        otherArgs[index] = args[index];
      }

      otherArgs[start] = transform(array);
      return apply(func, this, otherArgs);
    };
  }

  module.exports = overRest;
},312,[313],"node_modules\\lodash\\_overRest.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);

      case 1:
        return func.call(thisArg, args[0]);

      case 2:
        return func.call(thisArg, args[0], args[1]);

      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }

    return func.apply(thisArg, args);
  }

  module.exports = apply;
},313,[],"node_modules\\lodash\\_apply.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseSetToString = _require(_dependencyMap[0], './_baseSetToString'),
      shortOut = _require(_dependencyMap[1], './_shortOut');

  var setToString = shortOut(baseSetToString);
  module.exports = setToString;
},314,[315,317],"node_modules\\lodash\\_setToString.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var constant = _require(_dependencyMap[0], './constant'),
      defineProperty = _require(_dependencyMap[1], './_defineProperty'),
      identity = _require(_dependencyMap[2], './identity');

  var baseSetToString = !defineProperty ? identity : function (func, string) {
    return defineProperty(func, 'toString', {
      'configurable': true,
      'enumerable': false,
      'value': constant(string),
      'writable': true
    });
  };
  module.exports = baseSetToString;
},315,[316,308,295],"node_modules\\lodash\\_baseSetToString.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function constant(value) {
    return function () {
      return value;
    };
  }

  module.exports = constant;
},316,[],"node_modules\\lodash\\constant.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var HOT_COUNT = 800,
      HOT_SPAN = 16;
  var nativeNow = Date.now;

  function shortOut(func) {
    var count = 0,
        lastCalled = 0;
    return function () {
      var stamp = nativeNow(),
          remaining = HOT_SPAN - (stamp - lastCalled);
      lastCalled = stamp;

      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }

      return func.apply(undefined, arguments);
    };
  }

  module.exports = shortOut;
},317,[],"node_modules\\lodash\\_shortOut.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var eq = _require(_dependencyMap[0], './eq'),
      isArrayLike = _require(_dependencyMap[1], './isArrayLike'),
      isIndex = _require(_dependencyMap[2], './_isIndex'),
      isObject = _require(_dependencyMap[3], './isObject');

  function isIterateeCall(value, index, object) {
    if (!isObject(object)) {
      return false;
    }

    var type = typeof index;

    if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
      return eq(object[index], value);
    }

    return false;
  }

  module.exports = isIterateeCall;
},318,[193,270,260,212],"node_modules\\lodash\\_isIterateeCall.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var baseDifference = _require(_dependencyMap[0], './_baseDifference'),
        baseFlatten = _require(_dependencyMap[1], './_baseFlatten'),
        baseRest = _require(_dependencyMap[2], './_baseRest'),
        isArrayLikeObject = _require(_dependencyMap[3], './isArrayLikeObject');

    var difference = baseRest(function (array, values) {
        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
    });
    module.exports = difference;
},319,[320,326,311,328],"node_modules\\lodash\\difference.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var SetCache = _require(_dependencyMap[0], './_SetCache'),
      arrayIncludes = _require(_dependencyMap[1], './_arrayIncludes'),
      arrayIncludesWith = _require(_dependencyMap[2], './_arrayIncludesWith'),
      arrayMap = _require(_dependencyMap[3], './_arrayMap'),
      baseUnary = _require(_dependencyMap[4], './_baseUnary'),
      cacheHas = _require(_dependencyMap[5], './_cacheHas');

  var LARGE_ARRAY_SIZE = 200;

  function baseDifference(array, values, iteratee, comparator) {
    var index = -1,
        includes = arrayIncludes,
        isCommon = true,
        length = array.length,
        result = [],
        valuesLength = values.length;

    if (!length) {
      return result;
    }

    if (iteratee) {
      values = arrayMap(values, baseUnary(iteratee));
    }

    if (comparator) {
      includes = arrayIncludesWith;
      isCommon = false;
    } else if (values.length >= LARGE_ARRAY_SIZE) {
      includes = cacheHas;
      isCommon = false;
      values = new SetCache(values);
    }

    outer: while (++index < length) {
      var value = array[index],
          computed = iteratee == null ? value : iteratee(value);
      value = comparator || value !== 0 ? value : 0;

      if (isCommon && computed === computed) {
        var valuesIndex = valuesLength;

        while (valuesIndex--) {
          if (values[valuesIndex] === computed) {
            continue outer;
          }
        }

        result.push(value);
      } else if (!includes(values, computed, comparator)) {
        result.push(value);
      }
    }

    return result;
  }

  module.exports = baseDifference;
},320,[235,321,325,290,264,239],"node_modules\\lodash\\_baseDifference.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseIndexOf = _require(_dependencyMap[0], './_baseIndexOf');

  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  module.exports = arrayIncludes;
},321,[322],"node_modules\\lodash\\_arrayIncludes.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var baseFindIndex = _require(_dependencyMap[0], './_baseFindIndex'),
        baseIsNaN = _require(_dependencyMap[1], './_baseIsNaN'),
        strictIndexOf = _require(_dependencyMap[2], './_strictIndexOf');

    function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }

    module.exports = baseIndexOf;
},322,[300,323,324],"node_modules\\lodash\\_baseIndexOf.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function baseIsNaN(value) {
    return value !== value;
  }

  module.exports = baseIsNaN;
},323,[],"node_modules\\lodash\\_baseIsNaN.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }

    return -1;
  }

  module.exports = strictIndexOf;
},324,[],"node_modules\\lodash\\_strictIndexOf.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }

    return false;
  }

  module.exports = arrayIncludesWith;
},325,[],"node_modules\\lodash\\_arrayIncludesWith.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var arrayPush = _require(_dependencyMap[0], './_arrayPush'),
      isFlattenable = _require(_dependencyMap[1], './_isFlattenable');

  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1,
        length = array.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);

    while (++index < length) {
      var value = array[index];

      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }

    return result;
  }

  module.exports = baseFlatten;
},326,[247,327],"node_modules\\lodash\\_baseFlatten.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var Symbol = _require(_dependencyMap[0], './_Symbol'),
        isArguments = _require(_dependencyMap[1], './isArguments'),
        isArray = _require(_dependencyMap[2], './isArray');

    var spreadableSymbol = Symbol ? typeof Symbol === "function" ? Symbol.isConcatSpreadable : "@@isConcatSpreadable" : undefined;

    function isFlattenable(value) {
        return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    module.exports = isFlattenable;
},327,[207,255,248],"node_modules\\lodash\\_isFlattenable.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var isArrayLike = _require(_dependencyMap[0], './isArrayLike'),
      isObjectLike = _require(_dependencyMap[1], './isObjectLike');

  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }

  module.exports = isArrayLikeObject;
},328,[270,257],"node_modules\\lodash\\isArrayLikeObject.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = bindAutoBindMethods;

  function bindAutoBindMethod(component, method) {
    var boundMethod = method.bind(component);
    boundMethod.__reactBoundContext = component;
    boundMethod.__reactBoundMethod = method;
    boundMethod.__reactBoundArguments = null;
    var componentName = component.constructor.displayName,
        _bind = boundMethod.bind;

    boundMethod.bind = function (newThis) {
      var args = Array.prototype.slice.call(arguments, 1);

      if (newThis !== component && newThis !== null) {
        console.warn('bind(): React component methods may only be bound to the ' + 'component instance. See ' + componentName);
      } else if (!args.length) {
        console.warn('bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See ' + componentName);
        return boundMethod;
      }

      var reboundMethod = _bind.apply(boundMethod, arguments);

      reboundMethod.__reactBoundContext = component;
      reboundMethod.__reactBoundMethod = method;
      reboundMethod.__reactBoundArguments = args;
      return reboundMethod;
    };

    return boundMethod;
  }

  function bindAutoBindMethodsFromMap(component) {
    for (var autoBindKey in component.__reactAutoBindMap) {
      if (!component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
        return;
      }

      if (component.hasOwnProperty(autoBindKey) && component[autoBindKey].__reactBoundContext === component) {
        continue;
      }

      var method = component.__reactAutoBindMap[autoBindKey];
      component[autoBindKey] = bindAutoBindMethod(component, method);
    }
  }

  function bindAutoBindMethods(component) {
    if (component.__reactAutoBindPairs) {
      bindAutoBindMethodsFromArray(component);
    } else if (component.__reactAutoBindMap) {
      bindAutoBindMethodsFromMap(component);
    }
  }

  function bindAutoBindMethodsFromArray(component) {
    var pairs = component.__reactAutoBindPairs;

    if (!pairs) {
      return;
    }

    for (var i = 0; i < pairs.length; i += 2) {
      var autoBindKey = pairs[i];

      if (component.hasOwnProperty(autoBindKey) && component[autoBindKey].__reactBoundContext === component) {
        continue;
      }

      var method = pairs[i + 1];
      component[autoBindKey] = bindAutoBindMethod(component, method);
    }
  }
},329,[],"node_modules\\react-proxy\\modules\\bindAutoBindMethods.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = deleteUnknownAutoBindMethods;

  function shouldDeleteClassicInstanceMethod(component, name) {
    if (component.__reactAutoBindMap && component.__reactAutoBindMap.hasOwnProperty(name)) {
      return false;
    }

    if (component.__reactAutoBindPairs && component.__reactAutoBindPairs.indexOf(name) >= 0) {
      return false;
    }

    if (component[name].__reactBoundArguments !== null) {
      return false;
    }

    return true;
  }

  function shouldDeleteModernInstanceMethod(component, name) {
    var prototype = component.constructor.prototype;
    var prototypeDescriptor = Object.getOwnPropertyDescriptor(prototype, name);

    if (!prototypeDescriptor || !prototypeDescriptor.get) {
      return false;
    }

    if (prototypeDescriptor.get().length !== component[name].length) {
      return false;
    }

    return true;
  }

  function shouldDeleteInstanceMethod(component, name) {
    var descriptor = Object.getOwnPropertyDescriptor(component, name);

    if (typeof descriptor.value !== 'function') {
      return;
    }

    if (component.__reactAutoBindMap || component.__reactAutoBindPairs) {
      return shouldDeleteClassicInstanceMethod(component, name);
    } else {
      return shouldDeleteModernInstanceMethod(component, name);
    }
  }

  function deleteUnknownAutoBindMethods(component) {
    var names = Object.getOwnPropertyNames(component);
    names.forEach(function (name) {
      if (shouldDeleteInstanceMethod(component, name)) {
        delete component[name];
      }
    });
  }
},330,[],"node_modules\\react-proxy\\modules\\deleteUnknownAutoBindMethods.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports['default'] = getForceUpdate;
  var ReactClassComponent = 2;

  function traverseRenderedChildren(internalInstance, callback, argument) {
    callback(internalInstance, argument);

    if (internalInstance._renderedComponent) {
      traverseRenderedChildren(internalInstance._renderedComponent, callback, argument);
    } else {
      for (var key in internalInstance._renderedChildren) {
        if (internalInstance._renderedChildren.hasOwnProperty(key)) {
          traverseRenderedChildren(internalInstance._renderedChildren[key], callback, argument);
        }
      }
    }
  }

  function setPendingForceUpdate(internalInstance) {
    if (internalInstance._pendingForceUpdate === false) {
      internalInstance._pendingForceUpdate = true;
    }
  }

  function forceUpdateIfPending(internalInstance, React) {
    if (internalInstance._pendingForceUpdate === true) {
      var publicInstance = internalInstance._instance;
      React.Component.prototype.forceUpdate.call(publicInstance);
    }
  }

  function deepForceUpdateStack(instance, React) {
    var internalInstance = instance._reactInternalInstance;
    traverseRenderedChildren(internalInstance, setPendingForceUpdate);
    traverseRenderedChildren(internalInstance, forceUpdateIfPending, React);
  }

  function deepForceUpdate(instance, React) {
    var root = instance._reactInternalFiber || instance._reactInternalInstance;

    if (typeof root.tag !== 'number') {
      return deepForceUpdateStack(instance, React);
    }

    var node = root;

    while (true) {
      if (node.tag === ReactClassComponent) {
        var publicInstance = node.stateNode;
        var updater = publicInstance.updater;

        if (typeof publicInstance.forceUpdate === 'function') {
          publicInstance.forceUpdate();
        } else if (updater && typeof updater.enqueueForceUpdate === 'function') {
          updater.enqueueForceUpdate(publicInstance);
        }
      }

      if (node.child) {
        node.child['return'] = node;
        node = node.child;
        continue;
      }

      if (node === root) {
        return undefined;
      }

      while (!node.sibling) {
        if (!node['return'] || node['return'] === root) {
          return undefined;
        }

        node = node['return'];
      }

      node.sibling['return'] = node['return'];
      node = node.sibling;
    }
  }

  function getForceUpdate(React) {
    return function (instance) {
      deepForceUpdate(instance, React);
    };
  }

  module.exports = exports['default'];
},331,[],"node_modules\\react-deep-force-update\\lib\\index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var win;

    if (typeof window !== "undefined") {
        win = window;
    } else if (typeof global !== "undefined") {
        win = global;
    } else if (typeof self !== "undefined") {
        win = self;
    } else {
        win = {};
    }

    module.exports = win;
},332,[],"node_modules\\global\\window.js");
__d(function (global, _require, module, exports, _dependencyMap) {
	var colors = {
		maroon: '#800000',
		red: '#ff0000',
		orange: '#ffA500',
		yellow: '#ffff00',
		olive: '#808000',
		purple: '#800080',
		fuchsia: "#ff00ff",
		white: '#ffffff',
		lime: '#00ff00',
		green: '#008000',
		navy: '#000080',
		blue: '#0000ff',
		aqua: '#00ffff',
		teal: '#008080',
		black: '#000000',
		silver: '#c0c0c0',
		gray: '#808080'
	};

	var map = function map(array, fn) {
		var results = [];

		for (var i = 0, l = array.length; i < l; i++) {
			results[i] = fn(array[i], i);
		}

		return results;
	};

	var Color = function Color(color, type) {
		if (color.isColor) {
			this.red = color.red;
			this.green = color.green;
			this.blue = color.blue;
			this.alpha = color.alpha;
		} else {
			var namedColor = colors[color];

			if (namedColor) {
				color = namedColor;
				type = 'hex';
			}

			switch (typeof color) {
				case 'string':
					if (!type) type = (type = color.match(/^rgb|^hsb|^hsl/)) ? type[0] : 'hex';
					break;

				case 'object':
					type = type || 'rgb';
					color = color.toString();
					break;

				case 'number':
					type = 'hex';
					color = color.toString(16);
					break;
			}

			color = Color['parse' + type.toUpperCase()](color);
			this.red = color[0];
			this.green = color[1];
			this.blue = color[2];
			this.alpha = color[3];
		}

		this.isColor = true;
	};

	var limit = function limit(number, min, max) {
		return Math.min(max, Math.max(min, number));
	};

	var listMatch = /([-.\d]+\%?)\s*,\s*([-.\d]+\%?)\s*,\s*([-.\d]+\%?)\s*,?\s*([-.\d]*\%?)/;
	var hexMatch = /^#?([a-f0-9]{1,2})([a-f0-9]{1,2})([a-f0-9]{1,2})([a-f0-9]{0,2})$/i;

	Color.parseRGB = function (color) {
		return map(color.match(listMatch).slice(1), function (bit, i) {
			if (bit) bit = parseFloat(bit) * (bit[bit.length - 1] == '%' ? 2.55 : 1);
			return i < 3 ? Math.round((bit %= 256) < 0 ? bit + 256 : bit) : limit(bit === '' ? 1 : Number(bit), 0, 1);
		});
	};

	Color.parseHEX = function (color) {
		if (color.length == 1) color = color + color + color;
		return map(color.match(hexMatch).slice(1), function (bit, i) {
			if (i == 3) return bit ? parseInt(bit, 16) / 255 : 1;
			return parseInt(bit.length == 1 ? bit + bit : bit, 16);
		});
	};

	Color.parseHSB = function (color) {
		var hsb = map(color.match(listMatch).slice(1), function (bit, i) {
			if (bit) bit = parseFloat(bit);
			if (i === 0) return Math.round((bit %= 360) < 0 ? bit + 360 : bit);else if (i < 3) return limit(Math.round(bit), 0, 100);else return limit(bit === '' ? 1 : Number(bit), 0, 1);
		});
		var a = hsb[3];
		var br = Math.round(hsb[2] / 100 * 255);
		if (hsb[1] == 0) return [br, br, br, a];
		var hue = hsb[0];
		var f = hue % 60;
		var p = Math.round(hsb[2] * (100 - hsb[1]) / 10000 * 255);
		var q = Math.round(hsb[2] * (6000 - hsb[1] * f) / 600000 * 255);
		var t = Math.round(hsb[2] * (6000 - hsb[1] * (60 - f)) / 600000 * 255);

		switch (Math.floor(hue / 60)) {
			case 0:
				return [br, t, p, a];

			case 1:
				return [q, br, p, a];

			case 2:
				return [p, br, t, a];

			case 3:
				return [p, q, br, a];

			case 4:
				return [t, p, br, a];

			default:
				return [br, p, q, a];
		}
	};

	Color.parseHSL = function (color) {
		var hsb = map(color.match(listMatch).slice(1), function (bit, i) {
			if (bit) bit = parseFloat(bit);
			if (i === 0) return Math.round((bit %= 360) < 0 ? bit + 360 : bit);else if (i < 3) return limit(Math.round(bit), 0, 100);else return limit(bit === '' ? 1 : Number(bit), 0, 1);
		});
		var h = hsb[0] / 60;
		var s = hsb[1] / 100;
		var l = hsb[2] / 100;
		var a = hsb[3];
		var c = (1 - Math.abs(2 * l - 1)) * s;
		var x = c * (1 - Math.abs(h % 2 - 1));
		var m = l - c / 2;
		var p = Math.round((c + m) * 255);
		var q = Math.round((x + m) * 255);
		var t = Math.round(m * 255);

		switch (Math.floor(h)) {
			case 0:
				return [p, q, t, a];

			case 1:
				return [q, p, t, a];

			case 2:
				return [t, p, q, a];

			case 3:
				return [t, q, p, a];

			case 4:
				return [q, t, p, a];

			default:
				return [p, t, q, a];
		}
	};

	var toString = function toString(type, array) {
		if (array[3] != 1) type += 'a';else array.pop();
		return type + '(' + array.join(', ') + ')';
	};

	Color.prototype = {
		toHSB: function toHSB(array) {
			var red = this.red,
			    green = this.green,
			    blue = this.blue,
			    alpha = this.alpha;
			var max = Math.max(red, green, blue),
			    min = Math.min(red, green, blue),
			    delta = max - min;
			var hue = 0,
			    saturation = delta != 0 ? delta / max : 0,
			    brightness = max / 255;

			if (saturation) {
				var rr = (max - red) / delta,
				    gr = (max - green) / delta,
				    br = (max - blue) / delta;
				hue = red == max ? br - gr : green == max ? 2 + rr - br : 4 + gr - rr;
				if ((hue /= 6) < 0) hue++;
			}

			var hsb = [Math.round(hue * 360), Math.round(saturation * 100), Math.round(brightness * 100), alpha];
			return array ? hsb : toString('hsb', hsb);
		},
		toHSL: function toHSL(array) {
			var red = this.red,
			    green = this.green,
			    blue = this.blue,
			    alpha = this.alpha;
			var max = Math.max(red, green, blue),
			    min = Math.min(red, green, blue),
			    delta = max - min;
			var hue = 0,
			    saturation = delta != 0 ? delta / (255 - Math.abs(max + min - 255)) : 0,
			    lightness = (max + min) / 512;

			if (saturation) {
				var rr = (max - red) / delta,
				    gr = (max - green) / delta,
				    br = (max - blue) / delta;
				hue = red == max ? br - gr : green == max ? 2 + rr - br : 4 + gr - rr;
				if ((hue /= 6) < 0) hue++;
			}

			var hsl = [Math.round(hue * 360), Math.round(saturation * 100), Math.round(lightness * 100), alpha];
			return array ? hsl : toString('hsl', hsl);
		},
		toHEX: function toHEX(array) {
			var a = this.alpha;
			var alpha = (a = Math.round(a * 255).toString(16)).length == 1 ? a + a : a;
			var hex = map([this.red, this.green, this.blue], function (bit) {
				bit = bit.toString(16);
				return bit.length == 1 ? '0' + bit : bit;
			});
			return array ? hex.concat(alpha) : '#' + hex.join('') + (alpha == 'ff' ? '' : alpha);
		},
		toRGB: function toRGB(array) {
			var rgb = [this.red, this.green, this.blue, this.alpha];
			return array ? rgb : toString('rgb', rgb);
		}
	};
	Color.prototype.toString = Color.prototype.toRGB;

	Color.hex = function (hex) {
		return new Color(hex, 'hex');
	};

	if (this.hex == null) this.hex = Color.hex;

	Color.hsb = function (h, s, b, a) {
		return new Color([h || 0, s || 0, b || 0, a == null ? 1 : a], 'hsb');
	};

	if (this.hsb == null) this.hsb = Color.hsb;

	Color.hsl = function (h, s, l, a) {
		return new Color([h || 0, s || 0, l || 0, a == null ? 1 : a], 'hsl');
	};

	if (this.hsl == null) this.hsl = Color.hsl;

	Color.rgb = function (r, g, b, a) {
		return new Color([r || 0, g || 0, b || 0, a == null ? 1 : a], 'rgb');
	};

	if (this.rgb == null) this.rgb = Color.rgb;

	Color.detach = function (color) {
		color = new Color(color);
		return [Color.rgb(color.red, color.green, color.blue).toString(), color.alpha];
	};

	module.exports = Color;
},333,[],"node_modules\\art\\core\\color.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Class = _require(_dependencyMap[0], 'art/core/class.js');

  var Path = _require(_dependencyMap[1], 'art/core/path.js');

  var MOVE_TO = 0;
  var CLOSE = 1;
  var LINE_TO = 2;
  var CURVE_TO = 3;
  var ARC = 4;
  var SerializablePath = Class(Path, {
    initialize: function initialize(path) {
      this.reset();

      if (path instanceof SerializablePath) {
        this.path = path.path.slice(0);
      } else if (path) {
        if (path.applyToPath) {
          path.applyToPath(this);
        } else {
          this.push(path);
        }
      }
    },
    onReset: function onReset() {
      this.path = [];
    },
    onMove: function onMove(sx, sy, x, y) {
      this.path.push(MOVE_TO, x, y);
    },
    onLine: function onLine(sx, sy, x, y) {
      this.path.push(LINE_TO, x, y);
    },
    onBezierCurve: function onBezierCurve(sx, sy, p1x, p1y, p2x, p2y, x, y) {
      this.path.push(CURVE_TO, p1x, p1y, p2x, p2y, x, y);
    },
    _arcToBezier: Path.prototype.onArc,
    onArc: function onArc(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation) {
      if (rx !== ry || rotation) {
        return this._arcToBezier(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation);
      }

      this.path.push(ARC, cx, cy, rx, sa, ea, ccw ? 0 : 1);
    },
    onClose: function onClose() {
      this.path.push(CLOSE);
    },
    toJSON: function toJSON() {
      return this.path;
    }
  });
  module.exports = SerializablePath;
},334,[335,336],"ARTSerializablePath");
__d(function (global, _require, module, exports, _dependencyMap) {
	module.exports = function (mixins) {
		var proto = {};

		for (var i = 0, l = arguments.length; i < l; i++) {
			var mixin = arguments[i];
			if (typeof mixin == 'function') mixin = mixin.prototype;

			for (var key in mixin) {
				proto[key] = mixin[key];
			}
		}

		if (!proto.initialize) proto.initialize = function () {};

		proto.constructor = function (a, b, c, d, e, f, g, h) {
			return new proto.initialize(a, b, c, d, e, f, g, h);
		};

		proto.constructor.prototype = proto.initialize.prototype = proto;
		return proto.constructor;
	};
},335,[],"node_modules\\art\\core\\class.js");
__d(function (global, _require, module, exports, _dependencyMap) {
	var Class = _require(_dependencyMap[0], './class');

	module.exports = Class({
		initialize: function initialize(path) {
			this.reset().push(path);
		},
		push: function push() {
			var p = Array.prototype.join.call(arguments, ' ').match(/[a-df-z]|[\-+]?(?:[\d\.]e[\-+]?|[^\s\-+,a-z])+/ig);
			if (!p) return this;
			var last,
			    cmd = p[0],
			    i = 1;

			while (cmd) {
				switch (cmd) {
					case 'm':
						this.move(p[i++], p[i++]);
						break;

					case 'l':
						this.line(p[i++], p[i++]);
						break;

					case 'c':
						this.curve(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);
						break;

					case 's':
						this.curve(p[i++], p[i++], null, null, p[i++], p[i++]);
						break;

					case 'q':
						this.curve(p[i++], p[i++], p[i++], p[i++]);
						break;

					case 't':
						this.curve(p[i++], p[i++]);
						break;

					case 'a':
						this.arc(p[i + 5], p[i + 6], p[i], p[i + 1], p[i + 3], !+p[i + 4], p[i + 2]);
						i += 7;
						break;

					case 'h':
						this.line(p[i++], 0);
						break;

					case 'v':
						this.line(0, p[i++]);
						break;

					case 'M':
						this.moveTo(p[i++], p[i++]);
						break;

					case 'L':
						this.lineTo(p[i++], p[i++]);
						break;

					case 'C':
						this.curveTo(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);
						break;

					case 'S':
						this.curveTo(p[i++], p[i++], null, null, p[i++], p[i++]);
						break;

					case 'Q':
						this.curveTo(p[i++], p[i++], p[i++], p[i++]);
						break;

					case 'T':
						this.curveTo(p[i++], p[i++]);
						break;

					case 'A':
						this.arcTo(p[i + 5], p[i + 6], p[i], p[i + 1], p[i + 3], !+p[i + 4], p[i + 2]);
						i += 7;
						break;

					case 'H':
						this.lineTo(p[i++], this.penY);
						break;

					case 'V':
						this.lineTo(this.penX, p[i++]);
						break;

					case 'Z':
					case 'z':
						this.close();
						break;

					default:
						cmd = last;
						i--;
						continue;
				}

				last = cmd;
				if (last == 'm') last = 'l';else if (last == 'M') last = 'L';
				cmd = p[i++];
			}

			return this;
		},
		reset: function reset() {
			this.penX = this.penY = 0;
			this.penDownX = this.penDownY = null;
			this._pivotX = this._pivotY = 0;
			this.onReset();
			return this;
		},
		move: function move(x, y) {
			this.onMove(this.penX, this.penY, this._pivotX = this.penX += +x, this._pivotY = this.penY += +y);
			return this;
		},
		moveTo: function moveTo(x, y) {
			this.onMove(this.penX, this.penY, this._pivotX = this.penX = +x, this._pivotY = this.penY = +y);
			return this;
		},
		line: function line(x, y) {
			return this.lineTo(this.penX + +x, this.penY + +y);
		},
		lineTo: function lineTo(x, y) {
			if (this.penDownX == null) {
				this.penDownX = this.penX;
				this.penDownY = this.penY;
			}

			this.onLine(this.penX, this.penY, this._pivotX = this.penX = +x, this._pivotY = this.penY = +y);
			return this;
		},
		curve: function curve(c1x, c1y, c2x, c2y, ex, ey) {
			var x = this.penX,
			    y = this.penY;
			return this.curveTo(x + +c1x, y + +c1y, c2x == null ? null : x + +c2x, c2y == null ? null : y + +c2y, ex == null ? null : x + +ex, ey == null ? null : y + +ey);
		},
		curveTo: function curveTo(c1x, c1y, c2x, c2y, ex, ey) {
			var x = this.penX,
			    y = this.penY;

			if (c2x == null) {
				c2x = +c1x;
				c2y = +c1y;
				c1x = x * 2 - (this._pivotX || 0);
				c1y = y * 2 - (this._pivotY || 0);
			}

			if (ex == null) {
				this._pivotX = +c1x;
				this._pivotY = +c1y;
				ex = +c2x;
				ey = +c2y;
				c2x = (ex + +c1x * 2) / 3;
				c2y = (ey + +c1y * 2) / 3;
				c1x = (x + +c1x * 2) / 3;
				c1y = (y + +c1y * 2) / 3;
			} else {
				this._pivotX = +c2x;
				this._pivotY = +c2y;
			}

			if (this.penDownX == null) {
				this.penDownX = x;
				this.penDownY = y;
			}

			this.onBezierCurve(x, y, +c1x, +c1y, +c2x, +c2y, this.penX = +ex, this.penY = +ey);
			return this;
		},
		arc: function arc(x, y, rx, ry, outer, counterClockwise, rotation) {
			return this.arcTo(this.penX + +x, this.penY + +y, rx, ry, outer, counterClockwise, rotation);
		},
		arcTo: function arcTo(x, y, rx, ry, outer, counterClockwise, rotation) {
			ry = Math.abs(+ry || +rx || +y - this.penY);
			rx = Math.abs(+rx || +x - this.penX);
			if (!rx || !ry || x == this.penX && y == this.penY) return this.lineTo(x, y);
			var tX = this.penX,
			    tY = this.penY,
			    clockwise = !+counterClockwise,
			    large = !!+outer;
			var rad = rotation ? rotation * Math.PI / 180 : 0,
			    cos = Math.cos(rad),
			    sin = Math.sin(rad);
			x -= tX;
			y -= tY;
			var cx = cos * x / 2 + sin * y / 2,
			    cy = -sin * x / 2 + cos * y / 2,
			    rxry = rx * rx * ry * ry,
			    rycx = ry * ry * cx * cx,
			    rxcy = rx * rx * cy * cy,
			    a = rxry - rxcy - rycx;

			if (a < 0) {
				a = Math.sqrt(1 - a / rxry);
				rx *= a;
				ry *= a;
				cx = x / 2;
				cy = y / 2;
			} else {
				a = Math.sqrt(a / (rxcy + rycx));
				if (large == clockwise) a = -a;
				var cxd = -a * cy * rx / ry,
				    cyd = a * cx * ry / rx;
				cx = cos * cxd - sin * cyd + x / 2;
				cy = sin * cxd + cos * cyd + y / 2;
			}

			var xx = cos / rx,
			    yx = sin / rx,
			    xy = -sin / ry,
			    yy = cos / ry;
			var sa = Math.atan2(xy * -cx + yy * -cy, xx * -cx + yx * -cy),
			    ea = Math.atan2(xy * (x - cx) + yy * (y - cy), xx * (x - cx) + yx * (y - cy));
			cx += tX;
			cy += tY;
			x += tX;
			y += tY;

			if (this.penDownX == null) {
				this.penDownX = this.penX;
				this.penDownY = this.penY;
			}

			this.onArc(tX, tY, this._pivotX = this.penX = x, this._pivotY = this.penY = y, cx, cy, rx, ry, sa, ea, !clockwise, rotation);
			return this;
		},
		counterArc: function counterArc(x, y, rx, ry, outer) {
			return this.arc(x, y, rx, ry, outer, true);
		},
		counterArcTo: function counterArcTo(x, y, rx, ry, outer) {
			return this.arcTo(x, y, rx, ry, outer, true);
		},
		close: function close() {
			if (this.penDownX != null) {
				this.onClose(this.penX, this.penY, this.penX = this.penDownX, this.penY = this.penDownY);
				this.penDownX = null;
			}

			return this;
		},
		onReset: function onReset() {},
		onMove: function onMove(sx, sy, ex, ey) {},
		onLine: function onLine(sx, sy, ex, ey) {
			this.onBezierCurve(sx, sy, sx, sy, ex, ey, ex, ey);
		},
		onBezierCurve: function onBezierCurve(sx, sy, c1x, c1y, c2x, c2y, ex, ey) {
			var gx = ex - sx,
			    gy = ey - sy,
			    g = gx * gx + gy * gy,
			    v1,
			    v2,
			    cx,
			    cy,
			    u;
			cx = c1x - sx;
			cy = c1y - sy;
			u = cx * gx + cy * gy;

			if (u > g) {
				cx -= gx;
				cy -= gy;
			} else if (u > 0 && g != 0) {
				cx -= u / g * gx;
				cy -= u / g * gy;
			}

			v1 = cx * cx + cy * cy;
			cx = c2x - sx;
			cy = c2y - sy;
			u = cx * gx + cy * gy;

			if (u > g) {
				cx -= gx;
				cy -= gy;
			} else if (u > 0 && g != 0) {
				cx -= u / g * gx;
				cy -= u / g * gy;
			}

			v2 = cx * cx + cy * cy;

			if (v1 < 0.01 && v2 < 0.01) {
				this.onLine(sx, sy, ex, ey);
				return;
			}

			if (isNaN(v1) || isNaN(v2)) {
				throw new Error('Bad input');
			}

			var s1x = (c1x + c2x) * 0.5,
			    s1y = (c1y + c2y) * 0.5,
			    l1x = (c1x + sx) * 0.5,
			    l1y = (c1y + sy) * 0.5,
			    l2x = (l1x + s1x) * 0.5,
			    l2y = (l1y + s1y) * 0.5,
			    r2x = (ex + c2x) * 0.5,
			    r2y = (ey + c2y) * 0.5,
			    r1x = (r2x + s1x) * 0.5,
			    r1y = (r2y + s1y) * 0.5,
			    l2r1x = (l2x + r1x) * 0.5,
			    l2r1y = (l2y + r1y) * 0.5;
			this.onBezierCurve(sx, sy, l1x, l1y, l2x, l2y, l2r1x, l2r1y);
			this.onBezierCurve(l2r1x, l2r1y, r1x, r1y, r2x, r2y, ex, ey);
		},
		onArc: function onArc(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation) {
			var rad = rotation ? rotation * Math.PI / 180 : 0,
			    cos = Math.cos(rad),
			    sin = Math.sin(rad),
			    xx = cos * rx,
			    yx = -sin * ry,
			    xy = sin * rx,
			    yy = cos * ry;
			var arc = ea - sa;
			if (arc < 0 && !ccw) arc += Math.PI * 2;else if (arc > 0 && ccw) arc -= Math.PI * 2;
			var n = Math.ceil(Math.abs(arc / (Math.PI / 2))),
			    step = arc / n,
			    k = 4 / 3 * Math.tan(step / 4);
			var x = Math.cos(sa),
			    y = Math.sin(sa);

			for (var i = 0; i < n; i++) {
				var cp1x = x - k * y,
				    cp1y = y + k * x;
				sa += step;
				x = Math.cos(sa);
				y = Math.sin(sa);
				var cp2x = x + k * y,
				    cp2y = y - k * x;
				this.onBezierCurve(sx, sy, cx + xx * cp1x + yx * cp1y, cy + xy * cp1x + yy * cp1y, cx + xx * cp2x + yx * cp2y, cy + xy * cp2x + yy * cp2y, sx = cx + xx * x + yx * y, sy = cy + xy * x + yy * y);
			}
		},
		onClose: function onClose(sx, sy, ex, ey) {
			this.onLine(sx, sy, ex, ey);
		}
	});
},336,[335],"node_modules\\art\\core\\path.js");
__d(function (global, _require, module, exports, _dependencyMap) {
	var Class = _require(_dependencyMap[0], './class');

	function Transform(xx, yx, xy, yy, x, y) {
		if (xx && typeof xx == 'object') {
			yx = xx.yx;
			yy = xx.yy;
			y = xx.y;
			xy = xx.xy;
			x = xx.x;
			xx = xx.xx;
		}

		this.xx = xx == null ? 1 : xx;
		this.yx = yx || 0;
		this.xy = xy || 0;
		this.yy = yy == null ? 1 : yy;
		this.x = (x == null ? this.x : x) || 0;
		this.y = (y == null ? this.y : y) || 0;

		this._transform();

		return this;
	}

	;
	module.exports = Class({
		initialize: Transform,
		_transform: function _transform() {},
		xx: 1,
		yx: 0,
		x: 0,
		xy: 0,
		yy: 1,
		y: 0,
		transform: function transform(xx, yx, xy, yy, x, y) {
			var m = this;

			if (xx && typeof xx == 'object') {
				yx = xx.yx;
				yy = xx.yy;
				y = xx.y;
				xy = xx.xy;
				x = xx.x;
				xx = xx.xx;
			}

			if (!x) x = 0;
			if (!y) y = 0;
			return this.transformTo(m.xx * xx + m.xy * yx, m.yx * xx + m.yy * yx, m.xx * xy + m.xy * yy, m.yx * xy + m.yy * yy, m.xx * x + m.xy * y + m.x, m.yx * x + m.yy * y + m.y);
		},
		transformTo: Transform,
		translate: function translate(x, y) {
			return this.transform(1, 0, 0, 1, x, y);
		},
		move: function move(x, y) {
			this.x += x || 0;
			this.y += y || 0;

			this._transform();

			return this;
		},
		scale: function scale(x, y) {
			if (y == null) y = x;
			return this.transform(x, 0, 0, y, 0, 0);
		},
		rotate: function rotate(deg, x, y) {
			if (x == null || y == null) {
				x = (this.left || 0) + (this.width || 0) / 2;
				y = (this.top || 0) + (this.height || 0) / 2;
			}

			var rad = deg * Math.PI / 180,
			    sin = Math.sin(rad),
			    cos = Math.cos(rad);
			this.transform(1, 0, 0, 1, x, y);
			var m = this;
			return this.transformTo(cos * m.xx - sin * m.yx, sin * m.xx + cos * m.yx, cos * m.xy - sin * m.yy, sin * m.xy + cos * m.yy, m.x, m.y).transform(1, 0, 0, 1, -x, -y);
		},
		moveTo: function moveTo(x, y) {
			var m = this;
			return this.transformTo(m.xx, m.yx, m.xy, m.yy, x, y);
		},
		rotateTo: function rotateTo(deg, x, y) {
			var m = this;
			var flip = m.yx / m.xx > m.yy / m.xy ? -1 : 1;
			if (m.xx < 0 ? m.xy >= 0 : m.xy < 0) flip = -flip;
			return this.rotate(deg - Math.atan2(flip * m.yx, flip * m.xx) * 180 / Math.PI, x, y);
		},
		scaleTo: function scaleTo(x, y) {
			var m = this;
			var h = Math.sqrt(m.xx * m.xx + m.yx * m.yx);
			m.xx /= h;
			m.yx /= h;
			h = Math.sqrt(m.yy * m.yy + m.xy * m.xy);
			m.yy /= h;
			m.xy /= h;
			return this.scale(x, y);
		},
		resizeTo: function resizeTo(width, height) {
			var w = this.width,
			    h = this.height;
			if (!w || !h) return this;
			return this.scaleTo(width / w, height / h);
		},
		inversePoint: function inversePoint(x, y) {
			var a = this.xx,
			    b = this.yx,
			    c = this.xy,
			    d = this.yy,
			    e = this.x,
			    f = this.y;
			var det = b * c - a * d;
			if (det == 0) return null;
			return {
				x: (d * (e - x) + c * (y - f)) / det,
				y: (a * (f - y) + b * (x - e)) / det
			};
		},
		point: function point(x, y) {
			var m = this;
			return {
				x: m.xx * x + m.xy * y + m.x,
				y: m.yx * x + m.yy * y + m.y
			};
		}
	});
},337,[335],"node_modules\\art\\core\\transform.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Components\\Button.js";

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    Button: {
      displayName: "Button"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Components/Button.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var ColorPropType = _require(_dependencyMap[2], 'ColorPropType');

  var Platform = _require(_dependencyMap[3], 'Platform');

  var React = _require(_dependencyMap[4], 'React');

  var PropTypes = _require(_dependencyMap[5], 'prop-types');

  var StyleSheet = _require(_dependencyMap[6], 'StyleSheet');

  var Text = _require(_dependencyMap[7], 'Text');

  var TouchableNativeFeedback = _require(_dependencyMap[8], 'TouchableNativeFeedback');

  var TouchableOpacity = _require(_dependencyMap[9], 'TouchableOpacity');

  var View = _require(_dependencyMap[10], 'View');

  var invariant = _require(_dependencyMap[11], 'fbjs/lib/invariant');

  var Button = _wrapComponent("Button")((_temp = _class = function (_React$Component) {
    _inherits(Button, _React$Component);

    function Button() {
      _classCallCheck(this, Button);

      return _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
    }

    _createClass(Button, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            accessibilityLabel = _props.accessibilityLabel,
            color = _props.color,
            onPress = _props.onPress,
            title = _props.title,
            hasTVPreferredFocus = _props.hasTVPreferredFocus,
            disabled = _props.disabled,
            testID = _props.testID;
        var buttonStyles = [styles.button];
        var textStyles = [styles.text];

        if (color) {
          if (Platform.OS === 'ios') {
            textStyles.push({
              color: color
            });
          } else {
            buttonStyles.push({
              backgroundColor: color
            });
          }
        }

        var accessibilityTraits = ['button'];

        if (disabled) {
          buttonStyles.push(styles.buttonDisabled);
          textStyles.push(styles.textDisabled);
          accessibilityTraits.push('disabled');
        }

        invariant(typeof title === 'string', 'The title prop of a Button must be a string');
        var formattedTitle = Platform.OS === 'android' ? title.toUpperCase() : title;
        var Touchable = Platform.OS === 'android' ? TouchableNativeFeedback : TouchableOpacity;
        return React.createElement(
          Touchable,
          {
            accessibilityComponentType: "button",
            accessibilityLabel: accessibilityLabel,
            accessibilityTraits: accessibilityTraits,
            hasTVPreferredFocus: hasTVPreferredFocus,
            testID: testID,
            disabled: disabled,
            onPress: onPress,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 128
            }
          },
          React.createElement(
            View,
            {
              style: buttonStyles,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 136
              }
            },
            React.createElement(
              Text,
              {
                style: textStyles,
                disabled: disabled,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 137
                }
              },
              formattedTitle
            )
          )
        );
      }
    }]);

    return Button;
  }(React.Component), _class.propTypes = {
    title: PropTypes.string.isRequired,
    accessibilityLabel: PropTypes.string,
    color: ColorPropType,
    disabled: PropTypes.bool,
    onPress: PropTypes.func.isRequired,
    testID: PropTypes.string,
    hasTVPreferredFocus: PropTypes.bool
  }, _temp));

  var styles = StyleSheet.create({
    button: Platform.select({
      ios: {},
      android: {
        elevation: 4,
        backgroundColor: '#2196F3',
        borderRadius: 2
      }
    }),
    text: Platform.select({
      ios: {
        color: '#007AFF',
        textAlign: 'center',
        padding: 8,
        fontSize: 18
      },
      android: {
        color: 'white',
        textAlign: 'center',
        padding: 8,
        fontWeight: '500'
      }
    }),
    buttonDisabled: Platform.select({
      ios: {},
      android: {
        elevation: 0,
        backgroundColor: '#dfdfdf'
      }
    }),
    textDisabled: Platform.select({
      ios: {
        color: '#cdcdcd'
      },
      android: {
        color: '#a1a1a1'
      }
    })
  });
  module.exports = Button;
},338,[113,179,126,52,133,130,171,339,347,351,173,13],"Button");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Text\\Text.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var ColorPropType = _require2(_dependencyMap[0], 'ColorPropType');

  var EdgeInsetsPropType = _require2(_dependencyMap[1], 'EdgeInsetsPropType');

  var NativeMethodsMixin = _require2(_dependencyMap[2], 'NativeMethodsMixin');

  var Platform = _require2(_dependencyMap[3], 'Platform');

  var React = _require2(_dependencyMap[4], 'React');

  var PropTypes = _require2(_dependencyMap[5], 'prop-types');

  var ReactNativeViewAttributes = _require2(_dependencyMap[6], 'ReactNativeViewAttributes');

  var StyleSheetPropType = _require2(_dependencyMap[7], 'StyleSheetPropType');

  var TextStylePropTypes = _require2(_dependencyMap[8], 'TextStylePropTypes');

  var Touchable = _require2(_dependencyMap[9], 'Touchable');

  var UIManager = _require2(_dependencyMap[10], 'UIManager');

  var createReactClass = _require2(_dependencyMap[11], 'create-react-class');

  var createReactNativeComponentClass = _require2(_dependencyMap[12], 'createReactNativeComponentClass');

  var mergeFast = _require2(_dependencyMap[13], 'mergeFast');

  var processColor = _require2(_dependencyMap[14], 'processColor');

  var _require = _require2(_dependencyMap[15], 'ViewContext'),
      ViewContextTypes = _require.ViewContextTypes;

  var stylePropType = StyleSheetPropType(TextStylePropTypes);
  var viewConfig = {
    validAttributes: mergeFast(ReactNativeViewAttributes.UIView, {
      isHighlighted: true,
      numberOfLines: true,
      ellipsizeMode: true,
      allowFontScaling: true,
      disabled: true,
      selectable: true,
      selectionColor: true,
      adjustsFontSizeToFit: true,
      minimumFontScale: true,
      textBreakStrategy: true
    }),
    uiViewClassName: 'RCTText'
  };
  var Text = createReactClass({
    displayName: 'Text',
    propTypes: {
      ellipsizeMode: PropTypes.oneOf(['head', 'middle', 'tail', 'clip']),
      numberOfLines: PropTypes.number,
      textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),
      onLayout: PropTypes.func,
      onPress: PropTypes.func,
      onLongPress: PropTypes.func,
      pressRetentionOffset: EdgeInsetsPropType,
      selectable: PropTypes.bool,
      selectionColor: ColorPropType,
      suppressHighlighting: PropTypes.bool,
      style: stylePropType,
      testID: PropTypes.string,
      nativeID: PropTypes.string,
      allowFontScaling: PropTypes.bool,
      accessible: PropTypes.bool,
      adjustsFontSizeToFit: PropTypes.bool,
      minimumFontScale: PropTypes.number,
      disabled: PropTypes.bool
    },
    getDefaultProps: function getDefaultProps() {
      return {
        accessible: true,
        allowFontScaling: true,
        ellipsizeMode: 'tail'
      };
    },
    getInitialState: function getInitialState() {
      return mergeFast(Touchable.Mixin.touchableGetInitialState(), {
        isHighlighted: false
      });
    },
    mixins: [NativeMethodsMixin],
    viewConfig: viewConfig,
    getChildContext: function getChildContext() {
      return {
        isInAParentText: true
      };
    },
    childContextTypes: ViewContextTypes,
    contextTypes: ViewContextTypes,
    _handlers: null,
    _hasPressHandler: function _hasPressHandler() {
      return !!this.props.onPress || !!this.props.onLongPress;
    },
    touchableHandleActivePressIn: null,
    touchableHandleActivePressOut: null,
    touchableHandlePress: null,
    touchableHandleLongPress: null,
    touchableGetPressRectOffset: null,
    render: function render() {
      var _this = this;

      var newProps = this.props;

      if (this.props.onStartShouldSetResponder || this._hasPressHandler()) {
        if (!this._handlers) {
          this._handlers = {
            onStartShouldSetResponder: function onStartShouldSetResponder() {
              var shouldSetFromProps = _this.props.onStartShouldSetResponder && _this.props.onStartShouldSetResponder();

              var setResponder = shouldSetFromProps || _this._hasPressHandler();

              if (setResponder && !_this.touchableHandleActivePressIn) {
                for (var key in Touchable.Mixin) {
                  if (typeof Touchable.Mixin[key] === 'function') {
                    _this[key] = Touchable.Mixin[key].bind(_this);
                  }
                }

                _this.touchableHandleActivePressIn = function () {
                  if (_this.props.suppressHighlighting || !_this._hasPressHandler()) {
                    return;
                  }

                  _this.setState({
                    isHighlighted: true
                  });
                };

                _this.touchableHandleActivePressOut = function () {
                  if (_this.props.suppressHighlighting || !_this._hasPressHandler()) {
                    return;
                  }

                  _this.setState({
                    isHighlighted: false
                  });
                };

                _this.touchableHandlePress = function (e) {
                  _this.props.onPress && _this.props.onPress(e);
                };

                _this.touchableHandleLongPress = function (e) {
                  _this.props.onLongPress && _this.props.onLongPress(e);
                };

                _this.touchableGetPressRectOffset = function () {
                  return this.props.pressRetentionOffset || PRESS_RECT_OFFSET;
                };
              }

              return setResponder;
            },
            onResponderGrant: function (e, dispatchID) {
              this.touchableHandleResponderGrant(e, dispatchID);
              this.props.onResponderGrant && this.props.onResponderGrant.apply(this, arguments);
            }.bind(this),
            onResponderMove: function (e) {
              this.touchableHandleResponderMove(e);
              this.props.onResponderMove && this.props.onResponderMove.apply(this, arguments);
            }.bind(this),
            onResponderRelease: function (e) {
              this.touchableHandleResponderRelease(e);
              this.props.onResponderRelease && this.props.onResponderRelease.apply(this, arguments);
            }.bind(this),
            onResponderTerminate: function (e) {
              this.touchableHandleResponderTerminate(e);
              this.props.onResponderTerminate && this.props.onResponderTerminate.apply(this, arguments);
            }.bind(this),
            onResponderTerminationRequest: function () {
              var allowTermination = this.touchableHandleResponderTerminationRequest();

              if (allowTermination && this.props.onResponderTerminationRequest) {
                allowTermination = this.props.onResponderTerminationRequest.apply(this, arguments);
              }

              return allowTermination;
            }.bind(this)
          };
        }

        newProps = _extends({}, this.props, this._handlers, {
          isHighlighted: this.state.isHighlighted
        });
      }

      if (newProps.selectionColor != null) {
        newProps = _extends({}, newProps, {
          selectionColor: processColor(newProps.selectionColor)
        });
      }

      if (Touchable.TOUCH_TARGET_DEBUG && newProps.onPress) {
        newProps = _extends({}, newProps, {
          style: [this.props.style, {
            color: 'magenta'
          }]
        });
      }

      if (this.context.isInAParentText) {
        return React.createElement(RCTVirtualText, _extends({}, newProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 315
          }
        }));
      } else {
        return React.createElement(RCTText, _extends({}, newProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 317
          }
        }));
      }
    }
  });
  var PRESS_RECT_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var RCTText = createReactNativeComponentClass(viewConfig.uiViewClassName, function () {
    return viewConfig;
  });
  var RCTVirtualText = RCTText;

  if (UIManager.RCTVirtualText) {
    RCTVirtualText = createReactNativeComponentClass('RCTVirtualText', function () {
      return {
        validAttributes: mergeFast(ReactNativeViewAttributes.UIView, {
          isHighlighted: true
        }),
        uiViewClassName: 'RCTVirtualText'
      };
    });
  }

  module.exports = Text;
},339,[126,135,128,52,133,130,174,141,154,340,109,176,159,346,155,175],"Text");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Components\\Touchable\\Touchable.js";

  var BoundingDimensions = _require(_dependencyMap[0], 'BoundingDimensions');

  var Platform = _require(_dependencyMap[1], 'Platform');

  var Position = _require(_dependencyMap[2], 'Position');

  var React = _require(_dependencyMap[3], 'React');

  var ReactNative = _require(_dependencyMap[4], 'ReactNative');

  var TVEventHandler = _require(_dependencyMap[5], 'TVEventHandler');

  var TouchEventUtils = _require(_dependencyMap[6], 'fbjs/lib/TouchEventUtils');

  var UIManager = _require(_dependencyMap[7], 'UIManager');

  var View = _require(_dependencyMap[8], 'View');

  var keyMirror = _require(_dependencyMap[9], 'fbjs/lib/keyMirror');

  var normalizeColor = _require(_dependencyMap[10], 'normalizeColor');

  var States = keyMirror({
    NOT_RESPONDER: null,
    RESPONDER_INACTIVE_PRESS_IN: null,
    RESPONDER_INACTIVE_PRESS_OUT: null,
    RESPONDER_ACTIVE_PRESS_IN: null,
    RESPONDER_ACTIVE_PRESS_OUT: null,
    RESPONDER_ACTIVE_LONG_PRESS_IN: null,
    RESPONDER_ACTIVE_LONG_PRESS_OUT: null,
    ERROR: null
  });
  var IsActive = {
    RESPONDER_ACTIVE_PRESS_OUT: true,
    RESPONDER_ACTIVE_PRESS_IN: true
  };
  var IsPressingIn = {
    RESPONDER_INACTIVE_PRESS_IN: true,
    RESPONDER_ACTIVE_PRESS_IN: true,
    RESPONDER_ACTIVE_LONG_PRESS_IN: true
  };
  var IsLongPressingIn = {
    RESPONDER_ACTIVE_LONG_PRESS_IN: true
  };
  var Signals = keyMirror({
    DELAY: null,
    RESPONDER_GRANT: null,
    RESPONDER_RELEASE: null,
    RESPONDER_TERMINATED: null,
    ENTER_PRESS_RECT: null,
    LEAVE_PRESS_RECT: null,
    LONG_PRESS_DETECTED: null
  });
  var Transitions = {
    NOT_RESPONDER: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
      RESPONDER_RELEASE: States.ERROR,
      RESPONDER_TERMINATED: States.ERROR,
      ENTER_PRESS_RECT: States.ERROR,
      LEAVE_PRESS_RECT: States.ERROR,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_INACTIVE_PRESS_IN: {
      DELAY: States.RESPONDER_ACTIVE_PRESS_IN,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_INACTIVE_PRESS_OUT: {
      DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_ACTIVE_PRESS_IN: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
    },
    RESPONDER_ACTIVE_PRESS_OUT: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_ACTIVE_LONG_PRESS_IN: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
      LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
    },
    RESPONDER_ACTIVE_LONG_PRESS_OUT: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    error: {
      DELAY: States.NOT_RESPONDER,
      RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.NOT_RESPONDER,
      LEAVE_PRESS_RECT: States.NOT_RESPONDER,
      LONG_PRESS_DETECTED: States.NOT_RESPONDER
    }
  };
  var HIGHLIGHT_DELAY_MS = 130;
  var PRESS_EXPAND_PX = 20;
  var LONG_PRESS_THRESHOLD = 500;
  var LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;
  var LONG_PRESS_ALLOWED_MOVEMENT = 10;
  var TouchableMixin = {
    componentDidMount: function componentDidMount() {
      if (!Platform.isTVOS) {
        return;
      }

      this._tvEventHandler = new TVEventHandler();

      this._tvEventHandler.enable(this, function (cmp, evt) {
        var myTag = ReactNative.findNodeHandle(cmp);
        evt.dispatchConfig = {};

        if (myTag === evt.tag) {
          if (evt.eventType === 'focus') {
            cmp.touchableHandleActivePressIn && cmp.touchableHandleActivePressIn(evt);
          } else if (evt.eventType === 'blur') {
            cmp.touchableHandleActivePressOut && cmp.touchableHandleActivePressOut(evt);
          } else if (evt.eventType === 'select') {
            cmp.touchableHandlePress && cmp.touchableHandlePress(evt);
          }
        }
      });
    },
    componentWillUnmount: function componentWillUnmount() {
      if (this._tvEventHandler) {
        this._tvEventHandler.disable();

        delete this._tvEventHandler;
      }

      this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
      this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
      this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
    },
    touchableGetInitialState: function touchableGetInitialState() {
      return {
        touchable: {
          touchState: undefined,
          responderID: null
        }
      };
    },
    touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest() {
      return !this.props.rejectResponderTermination;
    },
    touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder() {
      return !this.props.disabled;
    },
    touchableLongPressCancelsPress: function touchableLongPressCancelsPress() {
      return true;
    },
    touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {
      var dispatchID = e.currentTarget;
      e.persist();
      this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
      this.pressOutDelayTimeout = null;
      this.state.touchable.touchState = States.NOT_RESPONDER;
      this.state.touchable.responderID = dispatchID;

      this._receiveSignal(Signals.RESPONDER_GRANT, e);

      var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;
      delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;

      if (delayMS !== 0) {
        this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);
      } else {
        this._handleDelay(e);
      }

      var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;
      longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;
      this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);
    },
    touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {
      this._receiveSignal(Signals.RESPONDER_RELEASE, e);
    },
    touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {
      this._receiveSignal(Signals.RESPONDER_TERMINATED, e);
    },
    touchableHandleResponderMove: function touchableHandleResponderMove(e) {
      if (this.state.touchable.touchState === States.RESPONDER_INACTIVE_PRESS_IN) {
        return;
      }

      if (!this.state.touchable.positionOnActivate) {
        return;
      }

      var positionOnActivate = this.state.touchable.positionOnActivate;
      var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;
      var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {
        left: PRESS_EXPAND_PX,
        right: PRESS_EXPAND_PX,
        top: PRESS_EXPAND_PX,
        bottom: PRESS_EXPAND_PX
      };
      var pressExpandLeft = pressRectOffset.left;
      var pressExpandTop = pressRectOffset.top;
      var pressExpandRight = pressRectOffset.right;
      var pressExpandBottom = pressRectOffset.bottom;
      var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;

      if (hitSlop) {
        pressExpandLeft += hitSlop.left;
        pressExpandTop += hitSlop.top;
        pressExpandRight += hitSlop.right;
        pressExpandBottom += hitSlop.bottom;
      }

      var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);
      var pageX = touch && touch.pageX;
      var pageY = touch && touch.pageY;

      if (this.pressInLocation) {
        var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);

        if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {
          this._cancelLongPressDelayTimeout();
        }
      }

      var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;

      if (isTouchWithinActive) {
        this._receiveSignal(Signals.ENTER_PRESS_RECT, e);

        var curState = this.state.touchable.touchState;

        if (curState === States.RESPONDER_INACTIVE_PRESS_IN) {
          this._cancelLongPressDelayTimeout();
        }
      } else {
        this._cancelLongPressDelayTimeout();

        this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);
      }
    },
    _remeasureMetricsOnActivation: function _remeasureMetricsOnActivation() {
      var tag = this.state.touchable.responderID;

      if (tag == null) {
        return;
      }

      UIManager.measure(tag, this._handleQueryLayout);
    },
    _handleQueryLayout: function _handleQueryLayout(l, t, w, h, globalX, globalY) {
      if (!l && !t && !w && !h && !globalX && !globalY) {
        return;
      }

      this.state.touchable.positionOnActivate && Position.release(this.state.touchable.positionOnActivate);
      this.state.touchable.dimensionsOnActivate && BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);
      this.state.touchable.positionOnActivate = Position.getPooled(globalX, globalY);
      this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(w, h);
    },
    _handleDelay: function _handleDelay(e) {
      this.touchableDelayTimeout = null;

      this._receiveSignal(Signals.DELAY, e);
    },
    _handleLongDelay: function _handleLongDelay(e) {
      this.longPressDelayTimeout = null;
      var curState = this.state.touchable.touchState;

      if (curState !== States.RESPONDER_ACTIVE_PRESS_IN && curState !== States.RESPONDER_ACTIVE_LONG_PRESS_IN) {
        console.error('Attempted to transition from state `' + curState + '` to `' + States.RESPONDER_ACTIVE_LONG_PRESS_IN + '`, which is not supported. This is ' + 'most likely due to `Touchable.longPressDelayTimeout` not being cancelled.');
      } else {
        this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);
      }
    },
    _receiveSignal: function _receiveSignal(signal, e) {
      var responderID = this.state.touchable.responderID;
      var curState = this.state.touchable.touchState;
      var nextState = Transitions[curState] && Transitions[curState][signal];

      if (!responderID && signal === Signals.RESPONDER_RELEASE) {
        return;
      }

      if (!nextState) {
        throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + responderID + '`');
      }

      if (nextState === States.ERROR) {
        throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + responderID + '`');
      }

      if (curState !== nextState) {
        this._performSideEffectsForTransition(curState, nextState, signal, e);

        this.state.touchable.touchState = nextState;
      }
    },
    _cancelLongPressDelayTimeout: function _cancelLongPressDelayTimeout() {
      this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
      this.longPressDelayTimeout = null;
    },
    _isHighlight: function _isHighlight(state) {
      return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;
    },
    _savePressInLocation: function _savePressInLocation(e) {
      var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);
      var pageX = touch && touch.pageX;
      var pageY = touch && touch.pageY;
      var locationX = touch && touch.locationX;
      var locationY = touch && touch.locationY;
      this.pressInLocation = {
        pageX: pageX,
        pageY: pageY,
        locationX: locationX,
        locationY: locationY
      };
    },
    _getDistanceBetweenPoints: function _getDistanceBetweenPoints(aX, aY, bX, bY) {
      var deltaX = aX - bX;
      var deltaY = aY - bY;
      return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    },
    _performSideEffectsForTransition: function _performSideEffectsForTransition(curState, nextState, signal, e) {
      var curIsHighlight = this._isHighlight(curState);

      var newIsHighlight = this._isHighlight(nextState);

      var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;

      if (isFinalSignal) {
        this._cancelLongPressDelayTimeout();
      }

      if (!IsActive[curState] && IsActive[nextState]) {
        this._remeasureMetricsOnActivation();
      }

      if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {
        this.touchableHandleLongPress && this.touchableHandleLongPress(e);
      }

      if (newIsHighlight && !curIsHighlight) {
        this._startHighlight(e);
      } else if (!newIsHighlight && curIsHighlight) {
        this._endHighlight(e);
      }

      if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {
        var hasLongPressHandler = !!this.props.onLongPress;
        var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && (!hasLongPressHandler || !this.touchableLongPressCancelsPress());
        var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;

        if (shouldInvokePress && this.touchableHandlePress) {
          if (!newIsHighlight && !curIsHighlight) {
            this._startHighlight(e);

            this._endHighlight(e);
          }

          this.touchableHandlePress(e);
        }
      }

      this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
      this.touchableDelayTimeout = null;
    },
    _startHighlight: function _startHighlight(e) {
      this._savePressInLocation(e);

      this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);
    },
    _endHighlight: function _endHighlight(e) {
      var _this = this;

      if (this.touchableHandleActivePressOut) {
        if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {
          this.pressOutDelayTimeout = setTimeout(function () {
            _this.touchableHandleActivePressOut(e);
          }, this.touchableGetPressOutDelayMS());
        } else {
          this.touchableHandleActivePressOut(e);
        }
      }
    }
  };
  var Touchable = {
    Mixin: TouchableMixin,
    TOUCH_TARGET_DEBUG: false,
    renderDebugView: function renderDebugView(_ref) {
      var color = _ref.color,
          hitSlop = _ref.hitSlop;

      if (!Touchable.TOUCH_TARGET_DEBUG) {
        return null;
      }

      if (!__DEV__) {
        throw Error('Touchable.TOUCH_TARGET_DEBUG should not be enabled in prod!');
      }

      var debugHitSlopStyle = {};
      hitSlop = hitSlop || {
        top: 0,
        bottom: 0,
        left: 0,
        right: 0
      };

      for (var key in hitSlop) {
        debugHitSlopStyle[key] = -hitSlop[key];
      }

      var hexColor = '#' + ('00000000' + normalizeColor(color).toString(16)).substr(-8);
      return React.createElement(View, {
        pointerEvents: "none",
        style: _extends({
          position: 'absolute',
          borderColor: hexColor.slice(0, -2) + '55',
          borderWidth: 1,
          borderStyle: 'dashed',
          backgroundColor: hexColor.slice(0, -2) + '0F'
        }, debugHitSlopStyle),
        __source: {
          fileName: _jsxFileName,
          lineNumber: 793
        }
      });
    }
  };
  module.exports = Touchable;
},340,[341,52,343,133,21,344,345,109,173,153,127],"Touchable");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var PooledClass = _require(_dependencyMap[0], 'PooledClass');

  var twoArgumentPooler = PooledClass.twoArgumentPooler;

  function BoundingDimensions(width, height) {
    this.width = width;
    this.height = height;
  }

  BoundingDimensions.prototype.destructor = function () {
    this.width = null;
    this.height = null;
  };

  BoundingDimensions.getPooledFromElement = function (element) {
    return BoundingDimensions.getPooled(element.offsetWidth, element.offsetHeight);
  };

  PooledClass.addPoolingTo(BoundingDimensions, twoArgumentPooler);
  module.exports = BoundingDimensions;
},341,[342],"BoundingDimensions");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, copyFieldsFrom);
      return instance;
    } else {
      return new Klass(copyFieldsFrom);
    }
  };

  var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2);
      return instance;
    } else {
      return new Klass(a1, a2);
    }
  };

  var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2, a3);
      return instance;
    } else {
      return new Klass(a1, a2, a3);
    }
  };

  var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2, a3, a4);
      return instance;
    } else {
      return new Klass(a1, a2, a3, a4);
    }
  };

  var standardReleaser = function standardReleaser(instance) {
    var Klass = this;
    invariant(instance instanceof Klass, 'Trying to release an instance into a pool of a different type.');
    instance.destructor();

    if (Klass.instancePool.length < Klass.poolSize) {
      Klass.instancePool.push(instance);
    }
  };

  var DEFAULT_POOL_SIZE = 10;
  var DEFAULT_POOLER = oneArgumentPooler;

  var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
    var NewKlass = CopyConstructor;
    NewKlass.instancePool = [];
    NewKlass.getPooled = pooler || DEFAULT_POOLER;

    if (!NewKlass.poolSize) {
      NewKlass.poolSize = DEFAULT_POOL_SIZE;
    }

    NewKlass.release = standardReleaser;
    return NewKlass;
  };

  var PooledClass = {
    addPoolingTo: addPoolingTo,
    oneArgumentPooler: oneArgumentPooler,
    twoArgumentPooler: twoArgumentPooler,
    threeArgumentPooler: threeArgumentPooler,
    fourArgumentPooler: fourArgumentPooler
  };
  module.exports = PooledClass;
},342,[13],"PooledClass");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var PooledClass = _require(_dependencyMap[0], 'PooledClass');

  var twoArgumentPooler = PooledClass.twoArgumentPooler;

  function Position(left, top) {
    this.left = left;
    this.top = top;
  }

  Position.prototype.destructor = function () {
    this.left = null;
    this.top = null;
  };

  PooledClass.addPoolingTo(Position, twoArgumentPooler);
  module.exports = Position;
},343,[342],"Position");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function TVEventHandler() {}

  TVEventHandler.prototype.enable = function (component, callback) {};

  TVEventHandler.prototype.disable = function () {};

  module.exports = TVEventHandler;
},344,[],"TVEventHandler");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var TouchEventUtils = {
    extractSingleTouch: function extractSingleTouch(nativeEvent) {
      var touches = nativeEvent.touches;
      var changedTouches = nativeEvent.changedTouches;
      var hasTouches = touches && touches.length > 0;
      var hasChangedTouches = changedTouches && changedTouches.length > 0;
      return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;
    }
  };
  module.exports = TouchEventUtils;
},345,[],"node_modules\\fbjs\\lib\\TouchEventUtils.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var mergeFast = function mergeFast(one, two) {
    var ret = {};

    for (var keyOne in one) {
      ret[keyOne] = one[keyOne];
    }

    for (var keyTwo in two) {
      ret[keyTwo] = two[keyTwo];
    }

    return ret;
  };

  module.exports = mergeFast;
},346,[],"mergeFast");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var Platform = _require(_dependencyMap[0], 'Platform');

  var React = _require(_dependencyMap[1], 'React');

  var PropTypes = _require(_dependencyMap[2], 'prop-types');

  var ReactNative = _require(_dependencyMap[3], 'ReactNative');

  var Touchable = _require(_dependencyMap[4], 'Touchable');

  var TouchableWithoutFeedback = _require(_dependencyMap[5], 'TouchableWithoutFeedback');

  var UIManager = _require(_dependencyMap[6], 'UIManager');

  var createReactClass = _require(_dependencyMap[7], 'create-react-class');

  var ensurePositiveDelayProps = _require(_dependencyMap[8], 'ensurePositiveDelayProps');

  var processColor = _require(_dependencyMap[9], 'processColor');

  var rippleBackgroundPropType = PropTypes.shape({
    type: PropTypes.oneOf(['RippleAndroid']),
    color: PropTypes.number,
    borderless: PropTypes.bool
  });
  var themeAttributeBackgroundPropType = PropTypes.shape({
    type: PropTypes.oneOf(['ThemeAttrAndroid']),
    attribute: PropTypes.string.isRequired
  });
  var backgroundPropType = PropTypes.oneOfType([rippleBackgroundPropType, themeAttributeBackgroundPropType]);
  var PRESS_RETENTION_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var TouchableNativeFeedback = createReactClass({
    displayName: 'TouchableNativeFeedback',
    propTypes: _extends({}, TouchableWithoutFeedback.propTypes, {
      background: backgroundPropType,
      useForeground: PropTypes.bool
    }),
    statics: {
      SelectableBackground: function SelectableBackground() {
        return {
          type: 'ThemeAttrAndroid',
          attribute: 'selectableItemBackground'
        };
      },
      SelectableBackgroundBorderless: function SelectableBackgroundBorderless() {
        return {
          type: 'ThemeAttrAndroid',
          attribute: 'selectableItemBackgroundBorderless'
        };
      },
      Ripple: function Ripple(color, borderless) {
        return {
          type: 'RippleAndroid',
          color: processColor(color),
          borderless: borderless
        };
      },
      canUseNativeForeground: function canUseNativeForeground() {
        return Platform.OS === 'android' && Platform.Version >= 23;
      }
    },
    mixins: [Touchable.Mixin],
    getDefaultProps: function getDefaultProps() {
      return {
        background: this.SelectableBackground()
      };
    },
    getInitialState: function getInitialState() {
      return this.touchableGetInitialState();
    },
    componentDidMount: function componentDidMount() {
      ensurePositiveDelayProps(this.props);
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      ensurePositiveDelayProps(nextProps);
    },
    touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
      this.props.onPressIn && this.props.onPressIn(e);

      this._dispatchPressedStateChange(true);

      this._dispatchHotspotUpdate(this.pressInLocation.locationX, this.pressInLocation.locationY);
    },
    touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
      this.props.onPressOut && this.props.onPressOut(e);

      this._dispatchPressedStateChange(false);
    },
    touchableHandlePress: function touchableHandlePress(e) {
      this.props.onPress && this.props.onPress(e);
    },
    touchableHandleLongPress: function touchableHandleLongPress(e) {
      this.props.onLongPress && this.props.onLongPress(e);
    },
    touchableGetPressRectOffset: function touchableGetPressRectOffset() {
      return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
    },
    touchableGetHitSlop: function touchableGetHitSlop() {
      return this.props.hitSlop;
    },
    touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
      return this.props.delayPressIn;
    },
    touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
      return this.props.delayLongPress;
    },
    touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
      return this.props.delayPressOut;
    },
    _handleResponderMove: function _handleResponderMove(e) {
      this.touchableHandleResponderMove(e);

      this._dispatchHotspotUpdate(e.nativeEvent.locationX, e.nativeEvent.locationY);
    },
    _dispatchHotspotUpdate: function _dispatchHotspotUpdate(destX, destY) {
      UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(this), UIManager.RCTView.Commands.hotspotUpdate, [destX || 0, destY || 0]);
    },
    _dispatchPressedStateChange: function _dispatchPressedStateChange(pressed) {
      UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(this), UIManager.RCTView.Commands.setPressed, [pressed]);
    },
    render: function render() {
      var _extends2;

      var child = React.Children.only(this.props.children);
      var children = child.props.children;

      if (Touchable.TOUCH_TARGET_DEBUG && child.type.displayName === 'View') {
        if (!Array.isArray(children)) {
          children = [children];
        }

        children.push(Touchable.renderDebugView({
          color: 'brown',
          hitSlop: this.props.hitSlop
        }));
      }

      if (this.props.useForeground && !TouchableNativeFeedback.canUseNativeForeground()) {
        console.warn('Requested foreground ripple, but it is not available on this version of Android. ' + 'Consider calling TouchableNativeFeedback.canUseNativeForeground() and using a different ' + 'Touchable if the result is false.');
      }

      var drawableProp = this.props.useForeground && TouchableNativeFeedback.canUseNativeForeground() ? 'nativeForegroundAndroid' : 'nativeBackgroundAndroid';

      var childProps = _extends({}, child.props, (_extends2 = {}, _defineProperty(_extends2, drawableProp, this.props.background), _defineProperty(_extends2, "accessible", this.props.accessible !== false), _defineProperty(_extends2, "accessibilityLabel", this.props.accessibilityLabel), _defineProperty(_extends2, "accessibilityComponentType", this.props.accessibilityComponentType), _defineProperty(_extends2, "accessibilityTraits", this.props.accessibilityTraits), _defineProperty(_extends2, "children", children), _defineProperty(_extends2, "testID", this.props.testID), _defineProperty(_extends2, "onLayout", this.props.onLayout), _defineProperty(_extends2, "hitSlop", this.props.hitSlop), _defineProperty(_extends2, "onStartShouldSetResponder", this.touchableHandleStartShouldSetResponder), _defineProperty(_extends2, "onResponderTerminationRequest", this.touchableHandleResponderTerminationRequest), _defineProperty(_extends2, "onResponderGrant", this.touchableHandleResponderGrant), _defineProperty(_extends2, "onResponderMove", this._handleResponderMove), _defineProperty(_extends2, "onResponderRelease", this.touchableHandleResponderRelease), _defineProperty(_extends2, "onResponderTerminate", this.touchableHandleResponderTerminate), _extends2));

      return React.cloneElement(child, childProps);
    }
  });
  module.exports = TouchableNativeFeedback;
},347,[52,133,130,21,340,348,109,176,350,155],"TouchableNativeFeedback");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var EdgeInsetsPropType = _require2(_dependencyMap[0], 'EdgeInsetsPropType');

  var React = _require2(_dependencyMap[1], 'React');

  var PropTypes = _require2(_dependencyMap[2], 'prop-types');

  var TimerMixin = _require2(_dependencyMap[3], 'react-timer-mixin');

  var Touchable = _require2(_dependencyMap[4], 'Touchable');

  var createReactClass = _require2(_dependencyMap[5], 'create-react-class');

  var ensurePositiveDelayProps = _require2(_dependencyMap[6], 'ensurePositiveDelayProps');

  var warning = _require2(_dependencyMap[7], 'fbjs/lib/warning');

  var _require = _require2(_dependencyMap[8], 'ViewAccessibility'),
      AccessibilityComponentTypes = _require.AccessibilityComponentTypes,
      AccessibilityTraits = _require.AccessibilityTraits;

  var PRESS_RETENTION_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var TouchableWithoutFeedback = createReactClass({
    displayName: 'TouchableWithoutFeedback',
    mixins: [TimerMixin, Touchable.Mixin],
    propTypes: {
      accessible: PropTypes.bool,
      accessibilityComponentType: PropTypes.oneOf(AccessibilityComponentTypes),
      accessibilityTraits: PropTypes.oneOfType([PropTypes.oneOf(AccessibilityTraits), PropTypes.arrayOf(PropTypes.oneOf(AccessibilityTraits))]),
      disabled: PropTypes.bool,
      onPress: PropTypes.func,
      onPressIn: PropTypes.func,
      onPressOut: PropTypes.func,
      onLayout: PropTypes.func,
      onLongPress: PropTypes.func,
      delayPressIn: PropTypes.number,
      delayPressOut: PropTypes.number,
      delayLongPress: PropTypes.number,
      pressRetentionOffset: EdgeInsetsPropType,
      hitSlop: EdgeInsetsPropType
    },
    getInitialState: function getInitialState() {
      return this.touchableGetInitialState();
    },
    componentDidMount: function componentDidMount() {
      ensurePositiveDelayProps(this.props);
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      ensurePositiveDelayProps(nextProps);
    },
    touchableHandlePress: function touchableHandlePress(e) {
      this.props.onPress && this.props.onPress(e);
    },
    touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
      this.props.onPressIn && this.props.onPressIn(e);
    },
    touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
      this.props.onPressOut && this.props.onPressOut(e);
    },
    touchableHandleLongPress: function touchableHandleLongPress(e) {
      this.props.onLongPress && this.props.onLongPress(e);
    },
    touchableGetPressRectOffset: function touchableGetPressRectOffset() {
      return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
    },
    touchableGetHitSlop: function touchableGetHitSlop() {
      return this.props.hitSlop;
    },
    touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
      return this.props.delayPressIn || 0;
    },
    touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
      return this.props.delayLongPress === 0 ? 0 : this.props.delayLongPress || 500;
    },
    touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
      return this.props.delayPressOut || 0;
    },
    render: function render() {
      var child = React.Children.only(this.props.children);
      var children = child.props.children;
      warning(!child.type || child.type.displayName !== 'Text', 'TouchableWithoutFeedback does not work well with Text children. Wrap children in a View instead. See ' + (child._owner && child._owner.getName && child._owner.getName() || '<unknown>'));

      if (Touchable.TOUCH_TARGET_DEBUG && child.type && child.type.displayName === 'View') {
        children = React.Children.toArray(children);
        children.push(Touchable.renderDebugView({
          color: 'red',
          hitSlop: this.props.hitSlop
        }));
      }

      var style = Touchable.TOUCH_TARGET_DEBUG && child.type && child.type.displayName === 'Text' ? [child.props.style, {
        color: 'red'
      }] : child.props.style;
      return React.cloneElement(child, {
        accessible: this.props.accessible !== false,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityComponentType: this.props.accessibilityComponentType,
        accessibilityTraits: this.props.accessibilityTraits,
        nativeID: this.props.nativeID,
        testID: this.props.testID,
        onLayout: this.props.onLayout,
        hitSlop: this.props.hitSlop,
        onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
        onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
        onResponderGrant: this.touchableHandleResponderGrant,
        onResponderMove: this.touchableHandleResponderMove,
        onResponderRelease: this.touchableHandleResponderRelease,
        onResponderTerminate: this.touchableHandleResponderTerminate,
        style: style,
        children: children
      });
    }
  });
  module.exports = TouchableWithoutFeedback;
},348,[135,133,130,349,340,176,350,56,147],"TouchableWithoutFeedback");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var GLOBAL = typeof window === 'undefined' ? global : window;

  var setter = function setter(_setter, _clearer, array) {
    return function (callback, delta) {
      var id = _setter(function () {
        _clearer.call(this, id);

        callback.apply(this, arguments);
      }.bind(this), delta);

      if (!this[array]) {
        this[array] = [id];
      } else {
        this[array].push(id);
      }

      return id;
    };
  };

  var clearer = function clearer(_clearer, array) {
    return function (id) {
      if (this[array]) {
        var index = this[array].indexOf(id);

        if (index !== -1) {
          this[array].splice(index, 1);
        }
      }

      _clearer(id);
    };
  };

  var _timeouts = 'TimerMixin_timeouts';

  var _clearTimeout = clearer(GLOBAL.clearTimeout, _timeouts);

  var _setTimeout = setter(GLOBAL.setTimeout, _clearTimeout, _timeouts);

  var _intervals = 'TimerMixin_intervals';

  var _clearInterval = clearer(GLOBAL.clearInterval, _intervals);

  var _setInterval = setter(GLOBAL.setInterval, function () {}, _intervals);

  var _immediates = 'TimerMixin_immediates';

  var _clearImmediate = clearer(GLOBAL.clearImmediate, _immediates);

  var _setImmediate = setter(GLOBAL.setImmediate, _clearImmediate, _immediates);

  var _rafs = 'TimerMixin_rafs';

  var _cancelAnimationFrame = clearer(GLOBAL.cancelAnimationFrame, _rafs);

  var _requestAnimationFrame = setter(GLOBAL.requestAnimationFrame, _cancelAnimationFrame, _rafs);

  var TimerMixin = {
    componentWillUnmount: function componentWillUnmount() {
      this[_timeouts] && this[_timeouts].forEach(function (id) {
        GLOBAL.clearTimeout(id);
      });
      this[_timeouts] = null;
      this[_intervals] && this[_intervals].forEach(function (id) {
        GLOBAL.clearInterval(id);
      });
      this[_intervals] = null;
      this[_immediates] && this[_immediates].forEach(function (id) {
        GLOBAL.clearImmediate(id);
      });
      this[_immediates] = null;
      this[_rafs] && this[_rafs].forEach(function (id) {
        GLOBAL.cancelAnimationFrame(id);
      });
      this[_rafs] = null;
    },
    setTimeout: _setTimeout,
    clearTimeout: _clearTimeout,
    setInterval: _setInterval,
    clearInterval: _clearInterval,
    setImmediate: _setImmediate,
    clearImmediate: _clearImmediate,
    requestAnimationFrame: _requestAnimationFrame,
    cancelAnimationFrame: _cancelAnimationFrame
  };
  module.exports = TimerMixin;
},349,[],"node_modules\\react-timer-mixin\\TimerMixin.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var ensurePositiveDelayProps = function ensurePositiveDelayProps(props) {
    invariant(!(props.delayPressIn < 0 || props.delayPressOut < 0 || props.delayLongPress < 0), 'Touchable components cannot have negative delay properties');
  };

  module.exports = ensurePositiveDelayProps;
},350,[13],"ensurePositiveDelayProps");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Components\\Touchable\\TouchableOpacity.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var Animated = _require(_dependencyMap[0], 'Animated');

  var Easing = _require(_dependencyMap[1], 'Easing');

  var NativeMethodsMixin = _require(_dependencyMap[2], 'NativeMethodsMixin');

  var React = _require(_dependencyMap[3], 'React');

  var PropTypes = _require(_dependencyMap[4], 'prop-types');

  var TimerMixin = _require(_dependencyMap[5], 'react-timer-mixin');

  var Touchable = _require(_dependencyMap[6], 'Touchable');

  var TouchableWithoutFeedback = _require(_dependencyMap[7], 'TouchableWithoutFeedback');

  var createReactClass = _require(_dependencyMap[8], 'create-react-class');

  var ensurePositiveDelayProps = _require(_dependencyMap[9], 'ensurePositiveDelayProps');

  var flattenStyle = _require(_dependencyMap[10], 'flattenStyle');

  var PRESS_RETENTION_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var TouchableOpacity = createReactClass({
    displayName: 'TouchableOpacity',
    mixins: [TimerMixin, Touchable.Mixin, NativeMethodsMixin],
    propTypes: _extends({}, TouchableWithoutFeedback.propTypes, {
      activeOpacity: PropTypes.number,
      hasTVPreferredFocus: PropTypes.bool,
      tvParallaxProperties: PropTypes.object
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        activeOpacity: 0.2
      };
    },
    getInitialState: function getInitialState() {
      return _extends({}, this.touchableGetInitialState(), {
        anim: new Animated.Value(this._getChildStyleOpacityWithDefault())
      });
    },
    componentDidMount: function componentDidMount() {
      ensurePositiveDelayProps(this.props);
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      ensurePositiveDelayProps(nextProps);
    },
    setOpacityTo: function setOpacityTo(value, duration) {
      Animated.timing(this.state.anim, {
        toValue: value,
        duration: duration,
        easing: Easing.inOut(Easing.quad),
        useNativeDriver: true
      }).start();
    },
    touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
      if (e.dispatchConfig.registrationName === 'onResponderGrant') {
        this._opacityActive(0);
      } else {
        this._opacityActive(150);
      }

      this.props.onPressIn && this.props.onPressIn(e);
    },
    touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
      this._opacityInactive(250);

      this.props.onPressOut && this.props.onPressOut(e);
    },
    touchableHandlePress: function touchableHandlePress(e) {
      this.props.onPress && this.props.onPress(e);
    },
    touchableHandleLongPress: function touchableHandleLongPress(e) {
      this.props.onLongPress && this.props.onLongPress(e);
    },
    touchableGetPressRectOffset: function touchableGetPressRectOffset() {
      return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
    },
    touchableGetHitSlop: function touchableGetHitSlop() {
      return this.props.hitSlop;
    },
    touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
      return this.props.delayPressIn || 0;
    },
    touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
      return this.props.delayLongPress === 0 ? 0 : this.props.delayLongPress || 500;
    },
    touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
      return this.props.delayPressOut;
    },
    _opacityActive: function _opacityActive(duration) {
      this.setOpacityTo(this.props.activeOpacity, duration);
    },
    _opacityInactive: function _opacityInactive(duration) {
      this.setOpacityTo(this._getChildStyleOpacityWithDefault(), duration);
    },
    _getChildStyleOpacityWithDefault: function _getChildStyleOpacityWithDefault() {
      var childStyle = flattenStyle(this.props.style) || {};
      return childStyle.opacity == undefined ? 1 : childStyle.opacity;
    },
    render: function render() {
      return React.createElement(
        Animated.View,
        {
          accessible: this.props.accessible !== false,
          accessibilityLabel: this.props.accessibilityLabel,
          accessibilityComponentType: this.props.accessibilityComponentType,
          accessibilityTraits: this.props.accessibilityTraits,
          style: [this.props.style, {
            opacity: this.state.anim
          }],
          nativeID: this.props.nativeID,
          testID: this.props.testID,
          onLayout: this.props.onLayout,
          isTVSelectable: true,
          hasTVPreferredFocus: this.props.hasTVPreferredFocus,
          tvParallaxProperties: this.props.tvParallaxProperties,
          hitSlop: this.props.hitSlop,
          onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
          onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
          onResponderGrant: this.touchableHandleResponderGrant,
          onResponderMove: this.touchableHandleResponderMove,
          onResponderRelease: this.touchableHandleResponderRelease,
          onResponderTerminate: this.touchableHandleResponderTerminate,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 245
          }
        },
        this.props.children,
        Touchable.renderDebugView({
          color: 'cyan',
          hitSlop: this.props.hitSlop
        })
      );
    }
  });
  module.exports = TouchableOpacity;
},351,[352,377,128,133,130,349,340,348,176,350,104],"TouchableOpacity");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var AnimatedImplementation = _require(_dependencyMap[0], 'AnimatedImplementation');

  var Image = _require(_dependencyMap[1], 'Image');

  var Text = _require(_dependencyMap[2], 'Text');

  var View = _require(_dependencyMap[3], 'View');

  var AnimatedScrollView = void 0;
  var Animated = {
    View: AnimatedImplementation.createAnimatedComponent(View),
    Text: AnimatedImplementation.createAnimatedComponent(Text),
    Image: AnimatedImplementation.createAnimatedComponent(Image),

    get ScrollView() {
      if (!AnimatedScrollView) {
        AnimatedScrollView = AnimatedImplementation.createAnimatedComponent(_require(_dependencyMap[4], 'ScrollView'));
      }

      return AnimatedScrollView;
    }

  };

  _extends(Animated, AnimatedImplementation);

  module.exports = Animated;
},352,[353,380,339,173,381],"Animated");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _require = _require2(_dependencyMap[0], './AnimatedEvent'),
      AnimatedEvent = _require.AnimatedEvent,
      attachNativeEvent = _require.attachNativeEvent;

  var AnimatedAddition = _require2(_dependencyMap[1], './nodes/AnimatedAddition');

  var AnimatedDiffClamp = _require2(_dependencyMap[2], './nodes/AnimatedDiffClamp');

  var AnimatedDivision = _require2(_dependencyMap[3], './nodes/AnimatedDivision');

  var AnimatedInterpolation = _require2(_dependencyMap[4], './nodes/AnimatedInterpolation');

  var AnimatedModulo = _require2(_dependencyMap[5], './nodes/AnimatedModulo');

  var AnimatedMultiplication = _require2(_dependencyMap[6], './nodes/AnimatedMultiplication');

  var AnimatedNode = _require2(_dependencyMap[7], './nodes/AnimatedNode');

  var AnimatedProps = _require2(_dependencyMap[8], './nodes/AnimatedProps');

  var AnimatedTracking = _require2(_dependencyMap[9], './nodes/AnimatedTracking');

  var AnimatedValue = _require2(_dependencyMap[10], './nodes/AnimatedValue');

  var AnimatedValueXY = _require2(_dependencyMap[11], './nodes/AnimatedValueXY');

  var DecayAnimation = _require2(_dependencyMap[12], './animations/DecayAnimation');

  var SpringAnimation = _require2(_dependencyMap[13], './animations/SpringAnimation');

  var TimingAnimation = _require2(_dependencyMap[14], './animations/TimingAnimation');

  var createAnimatedComponent = _require2(_dependencyMap[15], './createAnimatedComponent');

  var add = function add(a, b) {
    return new AnimatedAddition(a, b);
  };

  var divide = function divide(a, b) {
    return new AnimatedDivision(a, b);
  };

  var multiply = function multiply(a, b) {
    return new AnimatedMultiplication(a, b);
  };

  var modulo = function modulo(a, modulus) {
    return new AnimatedModulo(a, modulus);
  };

  var diffClamp = function diffClamp(a, min, max) {
    return new AnimatedDiffClamp(a, min, max);
  };

  var _combineCallbacks = function _combineCallbacks(callback, config) {
    if (callback && config.onComplete) {
      return function () {
        config.onComplete && config.onComplete.apply(config, arguments);
        callback && callback.apply(undefined, arguments);
      };
    } else {
      return callback || config.onComplete;
    }
  };

  var maybeVectorAnim = function maybeVectorAnim(value, config, anim) {
    if (value instanceof AnimatedValueXY) {
      var configX = _extends({}, config);

      var configY = _extends({}, config);

      for (var key in config) {
        var _config$key = config[key],
            x = _config$key.x,
            y = _config$key.y;

        if (x !== undefined && y !== undefined) {
          configX[key] = x;
          configY[key] = y;
        }
      }

      var aX = anim(value.x, configX);
      var aY = anim(value.y, configY);
      return parallel([aX, aY], {
        stopTogether: false
      });
    }

    return null;
  };

  var spring = function spring(value, config) {
    var start = function start(animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();

      if (configuration.toValue instanceof AnimatedNode) {
        singleValue.track(new AnimatedTracking(singleValue, configuration.toValue, SpringAnimation, singleConfig, callback));
      } else {
        singleValue.animate(new SpringAnimation(singleConfig), callback);
      }
    };

    return maybeVectorAnim(value, config, spring) || {
      start: function (_start) {
        function start(_x) {
          return _start.apply(this, arguments);
        }

        start.toString = function () {
          return _start.toString();
        };

        return start;
      }(function (callback) {
        start(value, config, callback);
      }),
      stop: function stop() {
        value.stopAnimation();
      },
      reset: function reset() {
        value.resetAnimation();
      },
      _startNativeLoop: function _startNativeLoop(iterations) {
        var singleConfig = _extends({}, config, {
          iterations: iterations
        });

        start(value, singleConfig);
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return config.useNativeDriver || false;
      }
    };
  };

  var timing = function timing(value, config) {
    var start = function start(animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();

      if (configuration.toValue instanceof AnimatedNode) {
        singleValue.track(new AnimatedTracking(singleValue, configuration.toValue, TimingAnimation, singleConfig, callback));
      } else {
        singleValue.animate(new TimingAnimation(singleConfig), callback);
      }
    };

    return maybeVectorAnim(value, config, timing) || {
      start: function (_start2) {
        function start(_x2) {
          return _start2.apply(this, arguments);
        }

        start.toString = function () {
          return _start2.toString();
        };

        return start;
      }(function (callback) {
        start(value, config, callback);
      }),
      stop: function stop() {
        value.stopAnimation();
      },
      reset: function reset() {
        value.resetAnimation();
      },
      _startNativeLoop: function _startNativeLoop(iterations) {
        var singleConfig = _extends({}, config, {
          iterations: iterations
        });

        start(value, singleConfig);
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return config.useNativeDriver || false;
      }
    };
  };

  var decay = function decay(value, config) {
    var start = function start(animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();
      singleValue.animate(new DecayAnimation(singleConfig), callback);
    };

    return maybeVectorAnim(value, config, decay) || {
      start: function (_start3) {
        function start(_x3) {
          return _start3.apply(this, arguments);
        }

        start.toString = function () {
          return _start3.toString();
        };

        return start;
      }(function (callback) {
        start(value, config, callback);
      }),
      stop: function stop() {
        value.stopAnimation();
      },
      reset: function reset() {
        value.resetAnimation();
      },
      _startNativeLoop: function _startNativeLoop(iterations) {
        var singleConfig = _extends({}, config, {
          iterations: iterations
        });

        start(value, singleConfig);
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return config.useNativeDriver || false;
      }
    };
  };

  var sequence = function sequence(animations) {
    var current = 0;
    return {
      start: function start(callback) {
        var onComplete = function onComplete(result) {
          if (!result.finished) {
            callback && callback(result);
            return;
          }

          current++;

          if (current === animations.length) {
            callback && callback(result);
            return;
          }

          animations[current].start(onComplete);
        };

        if (animations.length === 0) {
          callback && callback({
            finished: true
          });
        } else {
          animations[current].start(onComplete);
        }
      },
      stop: function stop() {
        if (current < animations.length) {
          animations[current].stop();
        }
      },
      reset: function reset() {
        animations.forEach(function (animation, idx) {
          if (idx <= current) {
            animation.reset();
          }
        });
        current = 0;
      },
      _startNativeLoop: function _startNativeLoop() {
        throw new Error('Loops run using the native driver cannot contain Animated.sequence animations');
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return false;
      }
    };
  };

  var parallel = function parallel(animations, config) {
    var doneCount = 0;
    var hasEnded = {};
    var stopTogether = !(config && config.stopTogether === false);
    var result = {
      start: function start(callback) {
        if (doneCount === animations.length) {
          callback && callback({
            finished: true
          });
          return;
        }

        animations.forEach(function (animation, idx) {
          var cb = function cb(endResult) {
            hasEnded[idx] = true;
            doneCount++;

            if (doneCount === animations.length) {
              doneCount = 0;
              callback && callback(endResult);
              return;
            }

            if (!endResult.finished && stopTogether) {
              result.stop();
            }
          };

          if (!animation) {
            cb({
              finished: true
            });
          } else {
            animation.start(cb);
          }
        });
      },
      stop: function stop() {
        animations.forEach(function (animation, idx) {
          !hasEnded[idx] && animation.stop();
          hasEnded[idx] = true;
        });
      },
      reset: function reset() {
        animations.forEach(function (animation, idx) {
          animation.reset();
          hasEnded[idx] = false;
          doneCount = 0;
        });
      },
      _startNativeLoop: function _startNativeLoop() {
        throw new Error('Loops run using the native driver cannot contain Animated.parallel animations');
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return false;
      }
    };
    return result;
  };

  var delay = function delay(time) {
    return timing(new AnimatedValue(0), {
      toValue: 0,
      delay: time,
      duration: 0
    });
  };

  var stagger = function stagger(time, animations) {
    return parallel(animations.map(function (animation, i) {
      return sequence([delay(time * i), animation]);
    }));
  };

  var loop = function loop(animation) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$iterations = _ref.iterations,
        iterations = _ref$iterations === undefined ? -1 : _ref$iterations;

    var isFinished = false;
    var iterationsSoFar = 0;
    return {
      start: function start(callback) {
        var restart = function restart() {
          var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
            finished: true
          };

          if (isFinished || iterationsSoFar === iterations || result.finished === false) {
            callback && callback(result);
          } else {
            iterationsSoFar++;
            animation.reset();
            animation.start(restart);
          }
        };

        if (!animation || iterations === 0) {
          callback && callback({
            finished: true
          });
        } else {
          if (animation._isUsingNativeDriver()) {
            animation._startNativeLoop(iterations);
          } else {
            restart();
          }
        }
      },
      stop: function stop() {
        isFinished = true;
        animation.stop();
      },
      reset: function reset() {
        iterationsSoFar = 0;
        isFinished = false;
        animation.reset();
      },
      _startNativeLoop: function _startNativeLoop() {
        throw new Error('Loops run using the native driver cannot contain Animated.loop animations');
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return animation._isUsingNativeDriver();
      }
    };
  };

  function forkEvent(event, listener) {
    if (!event) {
      return listener;
    } else if (event instanceof AnimatedEvent) {
      event.__addListener(listener);

      return event;
    } else {
      return function () {
        typeof event === 'function' && event.apply(undefined, arguments);
        listener.apply(undefined, arguments);
      };
    }
  }

  function unforkEvent(event, listener) {
    if (event && event instanceof AnimatedEvent) {
      event.__removeListener(listener);
    }
  }

  var event = function event(argMapping, config) {
    var animatedEvent = new AnimatedEvent(argMapping, config);

    if (animatedEvent.__isNative) {
      return animatedEvent;
    } else {
      return animatedEvent.__getHandler();
    }
  };

  module.exports = {
    Value: AnimatedValue,
    ValueXY: AnimatedValueXY,
    Interpolation: AnimatedInterpolation,
    Node: AnimatedNode,
    decay: decay,
    timing: timing,
    spring: spring,
    add: add,
    divide: divide,
    multiply: multiply,
    modulo: modulo,
    diffClamp: diffClamp,
    delay: delay,
    sequence: sequence,
    parallel: parallel,
    stagger: stagger,
    loop: loop,
    event: event,
    createAnimatedComponent: createAnimatedComponent,
    attachNativeEvent: attachNativeEvent,
    forkEvent: forkEvent,
    unforkEvent: unforkEvent,
    __PropsOnlyForTests: AnimatedProps
  };
},353,[354,362,363,364,356,365,366,357,367,370,355,371,372,374,376,379],"AnimatedImplementation");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var AnimatedValue = _require2(_dependencyMap[0], './nodes/AnimatedValue');

  var NativeAnimatedHelper = _require2(_dependencyMap[1], './NativeAnimatedHelper');

  var ReactNative = _require2(_dependencyMap[2], 'ReactNative');

  var invariant = _require2(_dependencyMap[3], 'fbjs/lib/invariant');

  var _require = _require2(_dependencyMap[1], './NativeAnimatedHelper'),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  function attachNativeEvent(viewRef, eventName, argMapping) {
    var eventMappings = [];

    var traverse = function traverse(value, path) {
      if (value instanceof AnimatedValue) {
        value.__makeNative();

        eventMappings.push({
          nativeEventPath: path,
          animatedValueTag: value.__getNativeTag()
        });
      } else if (typeof value === 'object') {
        for (var _key in value) {
          traverse(value[_key], path.concat(_key));
        }
      }
    };

    invariant(argMapping[0] && argMapping[0].nativeEvent, 'Native driven events only support animated values contained inside `nativeEvent`.');
    traverse(argMapping[0].nativeEvent, []);
    var viewTag = ReactNative.findNodeHandle(viewRef);
    eventMappings.forEach(function (mapping) {
      NativeAnimatedHelper.API.addAnimatedEventToView(viewTag, eventName, mapping);
    });
    return {
      detach: function detach() {
        eventMappings.forEach(function (mapping) {
          NativeAnimatedHelper.API.removeAnimatedEventFromView(viewTag, eventName, mapping.animatedValueTag);
        });
      }
    };
  }

  var AnimatedEvent = function () {
    function AnimatedEvent(argMapping) {
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, AnimatedEvent);

      this._listeners = [];
      this._argMapping = argMapping;

      if (config.listener) {
        this.__addListener(config.listener);
      }

      this._callListeners = this._callListeners.bind(this);
      this._attachedEvent = null;
      this.__isNative = shouldUseNativeDriver(config);

      if (__DEV__) {
        this._validateMapping();
      }
    }

    _createClass(AnimatedEvent, [{
      key: "__addListener",
      value: function __addListener(callback) {
        this._listeners.push(callback);
      }
    }, {
      key: "__removeListener",
      value: function __removeListener(callback) {
        this._listeners = this._listeners.filter(function (listener) {
          return listener !== callback;
        });
      }
    }, {
      key: "__attach",
      value: function __attach(viewRef, eventName) {
        invariant(this.__isNative, 'Only native driven events need to be attached.');
        this._attachedEvent = attachNativeEvent(viewRef, eventName, this._argMapping);
      }
    }, {
      key: "__detach",
      value: function __detach(viewTag, eventName) {
        invariant(this.__isNative, 'Only native driven events need to be detached.');
        this._attachedEvent && this._attachedEvent.detach();
      }
    }, {
      key: "__getHandler",
      value: function __getHandler() {
        var _this = this;

        if (this.__isNative) {
          return this._callListeners;
        }

        return function () {
          for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {
            args[_key2] = arguments[_key2];
          }

          var traverse = function traverse(recMapping, recEvt, key) {
            if (typeof recEvt === 'number' && recMapping instanceof AnimatedValue) {
              recMapping.setValue(recEvt);
            } else if (typeof recMapping === 'object') {
              for (var mappingKey in recMapping) {
                traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
              }
            }
          };

          if (!_this.__isNative) {
            _this._argMapping.forEach(function (mapping, idx) {
              traverse(mapping, args[idx], 'arg' + idx);
            });
          }

          _this._callListeners.apply(_this, _toConsumableArray(args));
        };
      }
    }, {
      key: "_callListeners",
      value: function _callListeners() {
        for (var _len2 = arguments.length, args = Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {
          args[_key3] = arguments[_key3];
        }

        this._listeners.forEach(function (listener) {
          return listener.apply(undefined, args);
        });
      }
    }, {
      key: "_validateMapping",
      value: function _validateMapping() {
        var traverse = function traverse(recMapping, recEvt, key) {
          if (typeof recEvt === 'number') {
            invariant(recMapping instanceof AnimatedValue, 'Bad mapping of type ' + typeof recMapping + ' for key ' + key + ', event value must map to AnimatedValue');
            return;
          }

          invariant(typeof recMapping === 'object', 'Bad mapping of type ' + typeof recMapping + ' for key ' + key);
          invariant(typeof recEvt === 'object', 'Bad event of type ' + typeof recEvt + ' for key ' + key);

          for (var mappingKey in recMapping) {
            traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
          }
        };
      }
    }]);

    return AnimatedEvent;
  }();

  module.exports = {
    AnimatedEvent: AnimatedEvent,
    attachNativeEvent: attachNativeEvent
  };
},354,[355,358,21,13],"AnimatedEvent");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AnimatedInterpolation = _require(_dependencyMap[0], './AnimatedInterpolation');

  var AnimatedNode = _require(_dependencyMap[1], './AnimatedNode');

  var AnimatedWithChildren = _require(_dependencyMap[2], './AnimatedWithChildren');

  var InteractionManager = _require(_dependencyMap[3], 'InteractionManager');

  var NativeAnimatedHelper = _require(_dependencyMap[4], '../NativeAnimatedHelper');

  var NativeAnimatedAPI = NativeAnimatedHelper.API;
  var _uniqueId = 1;

  function _flush(rootNode) {
    var animatedStyles = new Set();

    function findAnimatedStyles(node) {
      if (typeof node.update === 'function') {
        animatedStyles.add(node);
      } else {
        node.__getChildren().forEach(findAnimatedStyles);
      }
    }

    findAnimatedStyles(rootNode);
    animatedStyles.forEach(function (animatedStyle) {
      return animatedStyle.update();
    });
  }

  var AnimatedValue = function (_AnimatedWithChildren) {
    _inherits(AnimatedValue, _AnimatedWithChildren);

    function AnimatedValue(value) {
      _classCallCheck(this, AnimatedValue);

      var _this = _possibleConstructorReturn(this, (AnimatedValue.__proto__ || Object.getPrototypeOf(AnimatedValue)).call(this));

      _this._startingValue = _this._value = value;
      _this._offset = 0;
      _this._animation = null;
      _this._listeners = {};
      return _this;
    }

    _createClass(AnimatedValue, [{
      key: "__detach",
      value: function __detach() {
        this.stopAnimation();

        _get(AnimatedValue.prototype.__proto__ || Object.getPrototypeOf(AnimatedValue.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._value + this._offset;
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        _get(AnimatedValue.prototype.__proto__ || Object.getPrototypeOf(AnimatedValue.prototype), "__makeNative", this).call(this);

        if (Object.keys(this._listeners).length) {
          this._startListeningToNativeValueUpdates();
        }
      }
    }, {
      key: "setValue",
      value: function setValue(value) {
        if (this._animation) {
          this._animation.stop();

          this._animation = null;
        }

        this._updateValue(value, !this.__isNative);

        if (this.__isNative) {
          NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value);
        }
      }
    }, {
      key: "setOffset",
      value: function setOffset(offset) {
        this._offset = offset;

        if (this.__isNative) {
          NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);
        }
      }
    }, {
      key: "flattenOffset",
      value: function flattenOffset() {
        this._value += this._offset;
        this._offset = 0;

        if (this.__isNative) {
          NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());
        }
      }
    }, {
      key: "extractOffset",
      value: function extractOffset() {
        this._offset += this._value;
        this._value = 0;

        if (this.__isNative) {
          NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());
        }
      }
    }, {
      key: "addListener",
      value: function addListener(callback) {
        var id = String(_uniqueId++);
        this._listeners[id] = callback;

        if (this.__isNative) {
          this._startListeningToNativeValueUpdates();
        }

        return id;
      }
    }, {
      key: "removeListener",
      value: function removeListener(id) {
        delete this._listeners[id];

        if (this.__isNative && Object.keys(this._listeners).length === 0) {
          this._stopListeningForNativeValueUpdates();
        }
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {
        this._listeners = {};

        if (this.__isNative) {
          this._stopListeningForNativeValueUpdates();
        }
      }
    }, {
      key: "_startListeningToNativeValueUpdates",
      value: function _startListeningToNativeValueUpdates() {
        var _this2 = this;

        if (this.__nativeAnimatedValueListener) {
          return;
        }

        NativeAnimatedAPI.startListeningToAnimatedNodeValue(this.__getNativeTag());
        this.__nativeAnimatedValueListener = NativeAnimatedHelper.nativeEventEmitter.addListener('onAnimatedValueUpdate', function (data) {
          if (data.tag !== _this2.__getNativeTag()) {
            return;
          }

          _this2._updateValue(data.value, false);
        });
      }
    }, {
      key: "_stopListeningForNativeValueUpdates",
      value: function _stopListeningForNativeValueUpdates() {
        if (!this.__nativeAnimatedValueListener) {
          return;
        }

        this.__nativeAnimatedValueListener.remove();

        this.__nativeAnimatedValueListener = null;
        NativeAnimatedAPI.stopListeningToAnimatedNodeValue(this.__getNativeTag());
      }
    }, {
      key: "stopAnimation",
      value: function stopAnimation(callback) {
        this.stopTracking();
        this._animation && this._animation.stop();
        this._animation = null;
        callback && callback(this.__getValue());
      }
    }, {
      key: "resetAnimation",
      value: function resetAnimation(callback) {
        this.stopAnimation(callback);
        this._value = this._startingValue;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "animate",
      value: function animate(animation, callback) {
        var _this3 = this;

        var handle = null;

        if (animation.__isInteraction) {
          handle = InteractionManager.createInteractionHandle();
        }

        var previousAnimation = this._animation;
        this._animation && this._animation.stop();
        this._animation = animation;
        animation.start(this._value, function (value) {
          _this3._updateValue(value, true);
        }, function (result) {
          _this3._animation = null;

          if (handle !== null) {
            InteractionManager.clearInteractionHandle(handle);
          }

          callback && callback(result);
        }, previousAnimation, this);
      }
    }, {
      key: "stopTracking",
      value: function stopTracking() {
        this._tracking && this._tracking.__detach();
        this._tracking = null;
      }
    }, {
      key: "track",
      value: function track(tracking) {
        this.stopTracking();
        this._tracking = tracking;
      }
    }, {
      key: "_updateValue",
      value: function _updateValue(value, flush) {
        this._value = value;

        if (flush) {
          _flush(this);
        }

        for (var _key in this._listeners) {
          this._listeners[_key]({
            value: this.__getValue()
          });
        }
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'value',
          value: this._value,
          offset: this._offset
        };
      }
    }]);

    return AnimatedValue;
  }(AnimatedWithChildren);

  module.exports = AnimatedValue;
},355,[356,357,359,360,358],"AnimatedValue");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AnimatedNode = _require(_dependencyMap[0], './AnimatedNode');

  var AnimatedWithChildren = _require(_dependencyMap[1], './AnimatedWithChildren');

  var NativeAnimatedHelper = _require(_dependencyMap[2], '../NativeAnimatedHelper');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var normalizeColor = _require(_dependencyMap[4], 'normalizeColor');

  var linear = function linear(t) {
    return t;
  };

  function createInterpolation(config) {
    if (config.outputRange && typeof config.outputRange[0] === 'string') {
      return createInterpolationFromStringOutputRange(config);
    }

    var outputRange = config.outputRange;
    checkInfiniteRange('outputRange', outputRange);
    var inputRange = config.inputRange;
    checkInfiniteRange('inputRange', inputRange);
    checkValidInputRange(inputRange);
    invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');
    var easing = config.easing || linear;
    var extrapolateLeft = 'extend';

    if (config.extrapolateLeft !== undefined) {
      extrapolateLeft = config.extrapolateLeft;
    } else if (config.extrapolate !== undefined) {
      extrapolateLeft = config.extrapolate;
    }

    var extrapolateRight = 'extend';

    if (config.extrapolateRight !== undefined) {
      extrapolateRight = config.extrapolateRight;
    } else if (config.extrapolate !== undefined) {
      extrapolateRight = config.extrapolate;
    }

    return function (input) {
      invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');
      var range = findRange(input, inputRange);
      return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);
    };
  }

  function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {
    var result = input;

    if (result < inputMin) {
      if (extrapolateLeft === 'identity') {
        return result;
      } else if (extrapolateLeft === 'clamp') {
        result = inputMin;
      } else if (extrapolateLeft === 'extend') {}
    }

    if (result > inputMax) {
      if (extrapolateRight === 'identity') {
        return result;
      } else if (extrapolateRight === 'clamp') {
        result = inputMax;
      } else if (extrapolateRight === 'extend') {}
    }

    if (outputMin === outputMax) {
      return outputMin;
    }

    if (inputMin === inputMax) {
      if (input <= inputMin) {
        return outputMin;
      }

      return outputMax;
    }

    if (inputMin === -Infinity) {
      result = -result;
    } else if (inputMax === Infinity) {
      result = result - inputMin;
    } else {
      result = (result - inputMin) / (inputMax - inputMin);
    }

    result = easing(result);

    if (outputMin === -Infinity) {
      result = -result;
    } else if (outputMax === Infinity) {
      result = result + outputMin;
    } else {
      result = result * (outputMax - outputMin) + outputMin;
    }

    return result;
  }

  function colorToRgba(input) {
    var int32Color = normalizeColor(input);

    if (int32Color === null) {
      return input;
    }

    int32Color = int32Color || 0;
    var r = (int32Color & 0xff000000) >>> 24;
    var g = (int32Color & 0x00ff0000) >>> 16;
    var b = (int32Color & 0x0000ff00) >>> 8;
    var a = (int32Color & 0x000000ff) / 255;
    return "rgba(" + r + ", " + g + ", " + b + ", " + a + ")";
  }

  var stringShapeRegex = /[0-9\.-]+/g;

  function createInterpolationFromStringOutputRange(config) {
    var outputRange = config.outputRange;
    invariant(outputRange.length >= 2, 'Bad output range');
    outputRange = outputRange.map(colorToRgba);
    checkPattern(outputRange);
    var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {
      return [];
    });
    outputRange.forEach(function (value) {
      value.match(stringShapeRegex).forEach(function (number, i) {
        outputRanges[i].push(+number);
      });
    });
    var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {
      return createInterpolation(_extends({}, config, {
        outputRange: outputRanges[i]
      }));
    });
    var shouldRound = isRgbOrRgba(outputRange[0]);
    return function (input) {
      var i = 0;
      return outputRange[0].replace(stringShapeRegex, function () {
        var val = +interpolations[i++](input);
        var rounded = shouldRound && i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;
        return String(rounded);
      });
    };
  }

  function isRgbOrRgba(range) {
    return typeof range === 'string' && range.startsWith('rgb');
  }

  function checkPattern(arr) {
    var pattern = arr[0].replace(stringShapeRegex, '');

    for (var i = 1; i < arr.length; ++i) {
      invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);
    }
  }

  function findRange(input, inputRange) {
    var i = void 0;

    for (i = 1; i < inputRange.length - 1; ++i) {
      if (inputRange[i] >= input) {
        break;
      }
    }

    return i - 1;
  }

  function checkValidInputRange(arr) {
    invariant(arr.length >= 2, 'inputRange must have at least 2 elements');

    for (var i = 1; i < arr.length; ++i) {
      invariant(arr[i] >= arr[i - 1], 'inputRange must be monotonically increasing ' + arr);
    }
  }

  function checkInfiniteRange(name, arr) {
    invariant(arr.length >= 2, name + ' must have at least 2 elements');
    invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, name + 'cannot be ]-infinity;+infinity[ ' + arr);
  }

  var AnimatedInterpolation = function (_AnimatedWithChildren) {
    _inherits(AnimatedInterpolation, _AnimatedWithChildren);

    function AnimatedInterpolation(parent, config) {
      _classCallCheck(this, AnimatedInterpolation);

      var _this = _possibleConstructorReturn(this, (AnimatedInterpolation.__proto__ || Object.getPrototypeOf(AnimatedInterpolation)).call(this));

      _this._parent = parent;
      _this._config = config;
      _this._interpolation = createInterpolation(config);
      return _this;
    }

    _createClass(AnimatedInterpolation, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._parent.__makeNative();

        _get(AnimatedInterpolation.prototype.__proto__ || Object.getPrototypeOf(AnimatedInterpolation.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var parentValue = this._parent.__getValue();

        invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');
        return this._interpolation(parentValue);
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._parent.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._parent.__removeChild(this);

        _get(AnimatedInterpolation.prototype.__proto__ || Object.getPrototypeOf(AnimatedInterpolation.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__transformDataType",
      value: function __transformDataType(range) {
        return range.map(function (value) {
          if (typeof value !== 'string') {
            return value;
          }

          if (/deg$/.test(value)) {
            var degrees = parseFloat(value) || 0;
            var radians = degrees * Math.PI / 180.0;
            return radians;
          } else {
            return parseFloat(value) || 0;
          }
        });
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        if (__DEV__) {
          NativeAnimatedHelper.validateInterpolation(this._config);
        }

        return {
          inputRange: this._config.inputRange,
          outputRange: this.__transformDataType(this._config.outputRange),
          extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',
          extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',
          type: 'interpolation'
        };
      }
    }]);

    return AnimatedInterpolation;
  }(AnimatedWithChildren);

  AnimatedInterpolation.__createInterpolation = createInterpolation;
  module.exports = AnimatedInterpolation;
},356,[357,359,358,13,127],"AnimatedInterpolation");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var NativeAnimatedHelper = _require(_dependencyMap[0], '../NativeAnimatedHelper');

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  var AnimatedNode = function () {
    function AnimatedNode() {
      _classCallCheck(this, AnimatedNode);
    }

    _createClass(AnimatedNode, [{
      key: "__attach",
      value: function __attach() {}
    }, {
      key: "__detach",
      value: function __detach() {
        if (this.__isNative && this.__nativeTag != null) {
          NativeAnimatedHelper.API.dropAnimatedNode(this.__nativeTag);
          this.__nativeTag = undefined;
        }
      }
    }, {
      key: "__getValue",
      value: function __getValue() {}
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this.__getValue();
      }
    }, {
      key: "__addChild",
      value: function __addChild(child) {}
    }, {
      key: "__removeChild",
      value: function __removeChild(child) {}
    }, {
      key: "__getChildren",
      value: function __getChildren() {
        return [];
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        if (!this.__isNative) {
          throw new Error('This node cannot be made a "native" animated node');
        }
      }
    }, {
      key: "__getNativeTag",
      value: function __getNativeTag() {
        NativeAnimatedHelper.assertNativeAnimatedModule();
        invariant(this.__isNative, 'Attempt to get native tag from node not marked as "native"');

        if (this.__nativeTag == null) {
          var nativeTag = NativeAnimatedHelper.generateNewNodeTag();
          NativeAnimatedHelper.API.createAnimatedNode(nativeTag, this.__getNativeConfig());
          this.__nativeTag = nativeTag;
        }

        return this.__nativeTag;
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        throw new Error('This JS animated node type cannot be used as native animated node');
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.__getValue();
      }
    }]);

    return AnimatedNode;
  }();

  module.exports = AnimatedNode;
},357,[358,13],"AnimatedNode");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeAnimatedModule = _require(_dependencyMap[0], 'NativeModules').NativeAnimatedModule;

  var NativeEventEmitter = _require(_dependencyMap[1], 'NativeEventEmitter');

  var invariant = _require(_dependencyMap[2], 'fbjs/lib/invariant');

  var __nativeAnimatedNodeTagCount = 1;
  var __nativeAnimationIdCount = 1;
  var nativeEventEmitter = void 0;
  var API = {
    createAnimatedNode: function createAnimatedNode(tag, config) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.createAnimatedNode(tag, config);
    },
    startListeningToAnimatedNodeValue: function startListeningToAnimatedNodeValue(tag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.startListeningToAnimatedNodeValue(tag);
    },
    stopListeningToAnimatedNodeValue: function stopListeningToAnimatedNodeValue(tag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.stopListeningToAnimatedNodeValue(tag);
    },
    connectAnimatedNodes: function connectAnimatedNodes(parentTag, childTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.connectAnimatedNodes(parentTag, childTag);
    },
    disconnectAnimatedNodes: function disconnectAnimatedNodes(parentTag, childTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.disconnectAnimatedNodes(parentTag, childTag);
    },
    startAnimatingNode: function startAnimatingNode(animationId, nodeTag, config, endCallback) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.startAnimatingNode(animationId, nodeTag, config, endCallback);
    },
    stopAnimation: function stopAnimation(animationId) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.stopAnimation(animationId);
    },
    setAnimatedNodeValue: function setAnimatedNodeValue(nodeTag, value) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.setAnimatedNodeValue(nodeTag, value);
    },
    setAnimatedNodeOffset: function setAnimatedNodeOffset(nodeTag, offset) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.setAnimatedNodeOffset(nodeTag, offset);
    },
    flattenAnimatedNodeOffset: function flattenAnimatedNodeOffset(nodeTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.flattenAnimatedNodeOffset(nodeTag);
    },
    extractAnimatedNodeOffset: function extractAnimatedNodeOffset(nodeTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.extractAnimatedNodeOffset(nodeTag);
    },
    connectAnimatedNodeToView: function connectAnimatedNodeToView(nodeTag, viewTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.connectAnimatedNodeToView(nodeTag, viewTag);
    },
    disconnectAnimatedNodeFromView: function disconnectAnimatedNodeFromView(nodeTag, viewTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.disconnectAnimatedNodeFromView(nodeTag, viewTag);
    },
    dropAnimatedNode: function dropAnimatedNode(tag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.dropAnimatedNode(tag);
    },
    addAnimatedEventToView: function addAnimatedEventToView(viewTag, eventName, eventMapping) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.addAnimatedEventToView(viewTag, eventName, eventMapping);
    },
    removeAnimatedEventFromView: function removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag);
    }
  };
  var STYLES_WHITELIST = {
    opacity: true,
    transform: true,
    shadowOpacity: true,
    shadowRadius: true,
    scaleX: true,
    scaleY: true,
    translateX: true,
    translateY: true
  };
  var TRANSFORM_WHITELIST = {
    translateX: true,
    translateY: true,
    scale: true,
    scaleX: true,
    scaleY: true,
    rotate: true,
    rotateX: true,
    rotateY: true,
    perspective: true
  };
  var SUPPORTED_INTERPOLATION_PARAMS = {
    inputRange: true,
    outputRange: true,
    extrapolate: true,
    extrapolateRight: true,
    extrapolateLeft: true
  };

  function addWhitelistedStyleProp(prop) {
    STYLES_WHITELIST[prop] = true;
  }

  function addWhitelistedTransformProp(prop) {
    TRANSFORM_WHITELIST[prop] = true;
  }

  function addWhitelistedInterpolationParam(param) {
    SUPPORTED_INTERPOLATION_PARAMS[param] = true;
  }

  function validateTransform(configs) {
    configs.forEach(function (config) {
      if (!TRANSFORM_WHITELIST.hasOwnProperty(config.property)) {
        throw new Error("Property '" + config.property + "' is not supported by native animated module");
      }
    });
  }

  function validateStyles(styles) {
    for (var key in styles) {
      if (!STYLES_WHITELIST.hasOwnProperty(key)) {
        throw new Error("Style property '" + key + "' is not supported by native animated module");
      }
    }
  }

  function validateInterpolation(config) {
    for (var key in config) {
      if (!SUPPORTED_INTERPOLATION_PARAMS.hasOwnProperty(key)) {
        throw new Error("Interpolation property '" + key + "' is not supported by native animated module");
      }
    }
  }

  function generateNewNodeTag() {
    return __nativeAnimatedNodeTagCount++;
  }

  function generateNewAnimationId() {
    return __nativeAnimationIdCount++;
  }

  function assertNativeAnimatedModule() {
    invariant(NativeAnimatedModule, 'Native animated module is not available');
  }

  var _warnedMissingNativeAnimated = false;

  function shouldUseNativeDriver(config) {
    if (config.useNativeDriver && !NativeAnimatedModule) {
      if (!_warnedMissingNativeAnimated) {
        console.warn('Animated: `useNativeDriver` is not supported because the native ' + 'animated module is missing. Falling back to JS-based animation. To ' + 'resolve this, add `RCTAnimation` module to this app, or remove ' + '`useNativeDriver`. ' + 'More info: https://github.com/facebook/react-native/issues/11094#issuecomment-263240420');
        _warnedMissingNativeAnimated = true;
      }

      return false;
    }

    return config.useNativeDriver || false;
  }

  module.exports = {
    API: API,
    addWhitelistedStyleProp: addWhitelistedStyleProp,
    addWhitelistedTransformProp: addWhitelistedTransformProp,
    addWhitelistedInterpolationParam: addWhitelistedInterpolationParam,
    validateStyles: validateStyles,
    validateTransform: validateTransform,
    validateInterpolation: validateInterpolation,
    generateNewNodeTag: generateNewNodeTag,
    generateNewAnimationId: generateNewAnimationId,
    assertNativeAnimatedModule: assertNativeAnimatedModule,
    shouldUseNativeDriver: shouldUseNativeDriver,

    get nativeEventEmitter() {
      if (!nativeEventEmitter) {
        nativeEventEmitter = new NativeEventEmitter(NativeAnimatedModule);
      }

      return nativeEventEmitter;
    }

  };
},358,[15,69,13],"NativeAnimatedHelper");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AnimatedNode = _require(_dependencyMap[0], './AnimatedNode');

  var NativeAnimatedHelper = _require(_dependencyMap[1], '../NativeAnimatedHelper');

  var AnimatedWithChildren = function (_AnimatedNode) {
    _inherits(AnimatedWithChildren, _AnimatedNode);

    function AnimatedWithChildren() {
      _classCallCheck(this, AnimatedWithChildren);

      var _this = _possibleConstructorReturn(this, (AnimatedWithChildren.__proto__ || Object.getPrototypeOf(AnimatedWithChildren)).call(this));

      _this._children = [];
      return _this;
    }

    _createClass(AnimatedWithChildren, [{
      key: "__makeNative",
      value: function __makeNative() {
        if (!this.__isNative) {
          this.__isNative = true;

          for (var _iterator = this._children, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var child = _ref;

            child.__makeNative();

            NativeAnimatedHelper.API.connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
          }
        }
      }
    }, {
      key: "__addChild",
      value: function __addChild(child) {
        if (this._children.length === 0) {
          this.__attach();
        }

        this._children.push(child);

        if (this.__isNative) {
          child.__makeNative();

          NativeAnimatedHelper.API.connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
        }
      }
    }, {
      key: "__removeChild",
      value: function __removeChild(child) {
        var index = this._children.indexOf(child);

        if (index === -1) {
          console.warn("Trying to remove a child that doesn't exist");
          return;
        }

        if (this.__isNative && child.__isNative) {
          NativeAnimatedHelper.API.disconnectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
        }

        this._children.splice(index, 1);

        if (this._children.length === 0) {
          this.__detach();
        }
      }
    }, {
      key: "__getChildren",
      value: function __getChildren() {
        return this._children;
      }
    }]);

    return AnimatedWithChildren;
  }(AnimatedNode);

  module.exports = AnimatedWithChildren;
},359,[357,358],"AnimatedWithChildren");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var BatchedBridge = _require(_dependencyMap[0], 'BatchedBridge');

  var EventEmitter = _require(_dependencyMap[1], 'EventEmitter');

  var Set = _require(_dependencyMap[2], 'Set');

  var TaskQueue = _require(_dependencyMap[3], 'TaskQueue');

  var infoLog = _require(_dependencyMap[4], 'infoLog');

  var invariant = _require(_dependencyMap[5], 'fbjs/lib/invariant');

  var keyMirror = _require(_dependencyMap[6], 'fbjs/lib/keyMirror');

  var _emitter = new EventEmitter();

  var DEBUG_DELAY = 0;
  var DEBUG = false;
  var InteractionManager = {
    Events: keyMirror({
      interactionStart: true,
      interactionComplete: true
    }),
    runAfterInteractions: function runAfterInteractions(task) {
      var tasks = [];
      var promise = new Promise(function (resolve) {
        _scheduleUpdate();

        if (task) {
          tasks.push(task);
        }

        tasks.push({
          run: resolve,
          name: 'resolve ' + (task && task.name || '?')
        });

        _taskQueue.enqueueTasks(tasks);
      });
      return {
        then: promise.then.bind(promise),
        done: function done() {
          if (promise.done) {
            return promise.done.apply(promise, arguments);
          } else {
            console.warn('Tried to call done when not supported by current Promise implementation.');
          }
        },
        cancel: function cancel() {
          _taskQueue.cancelTasks(tasks);
        }
      };
    },
    createInteractionHandle: function createInteractionHandle() {
      DEBUG && infoLog('create interaction handle');

      _scheduleUpdate();

      var handle = ++_inc;

      _addInteractionSet.add(handle);

      return handle;
    },
    clearInteractionHandle: function clearInteractionHandle(handle) {
      DEBUG && infoLog('clear interaction handle');
      invariant(!!handle, 'Must provide a handle to clear.');

      _scheduleUpdate();

      _addInteractionSet.delete(handle);

      _deleteInteractionSet.add(handle);
    },
    addListener: _emitter.addListener.bind(_emitter),
    setDeadline: function setDeadline(deadline) {
      _deadline = deadline;
    }
  };

  var _interactionSet = new Set();

  var _addInteractionSet = new Set();

  var _deleteInteractionSet = new Set();

  var _taskQueue = new TaskQueue({
    onMoreTasks: _scheduleUpdate
  });

  var _nextUpdateHandle = 0;
  var _inc = 0;

  var _deadline = -1;

  function _scheduleUpdate() {
    if (!_nextUpdateHandle) {
      if (_deadline > 0) {
        _nextUpdateHandle = setTimeout(_processUpdate, 0 + DEBUG_DELAY);
      } else {
        _nextUpdateHandle = setImmediate(_processUpdate);
      }
    }
  }

  function _processUpdate() {
    _nextUpdateHandle = 0;
    var interactionCount = _interactionSet.size;

    _addInteractionSet.forEach(function (handle) {
      return _interactionSet.add(handle);
    });

    _deleteInteractionSet.forEach(function (handle) {
      return _interactionSet.delete(handle);
    });

    var nextInteractionCount = _interactionSet.size;

    if (interactionCount !== 0 && nextInteractionCount === 0) {
      _emitter.emit(InteractionManager.Events.interactionComplete);
    } else if (interactionCount === 0 && nextInteractionCount !== 0) {
      _emitter.emit(InteractionManager.Events.interactionStart);
    }

    if (nextInteractionCount === 0) {
      while (_taskQueue.hasTasksToProcess()) {
        _taskQueue.processNext();

        if (_deadline > 0 && BatchedBridge.getEventLoopRunningTime() >= _deadline) {
          _scheduleUpdate();

          break;
        }
      }
    }

    _addInteractionSet.clear();

    _deleteInteractionSet.clear();
  }

  module.exports = InteractionManager;
},360,[16,67,30,361,93,13,153],"InteractionManager");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var infoLog = _require(_dependencyMap[0], 'infoLog');

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  var DEBUG = false;

  var TaskQueue = function () {
    function TaskQueue(_ref) {
      var onMoreTasks = _ref.onMoreTasks;

      _classCallCheck(this, TaskQueue);

      this._onMoreTasks = onMoreTasks;
      this._queueStack = [{
        tasks: [],
        popable: false
      }];
    }

    _createClass(TaskQueue, [{
      key: "enqueue",
      value: function enqueue(task) {
        this._getCurrentQueue().push(task);
      }
    }, {
      key: "enqueueTasks",
      value: function enqueueTasks(tasks) {
        var _this = this;

        tasks.forEach(function (task) {
          return _this.enqueue(task);
        });
      }
    }, {
      key: "cancelTasks",
      value: function cancelTasks(tasksToCancel) {
        this._queueStack = this._queueStack.map(function (queue) {
          return _extends({}, queue, {
            tasks: queue.tasks.filter(function (task) {
              return tasksToCancel.indexOf(task) === -1;
            })
          });
        }).filter(function (queue, idx) {
          return queue.tasks.length > 0 || idx === 0;
        });
      }
    }, {
      key: "hasTasksToProcess",
      value: function hasTasksToProcess() {
        return this._getCurrentQueue().length > 0;
      }
    }, {
      key: "processNext",
      value: function processNext() {
        var queue = this._getCurrentQueue();

        if (queue.length) {
          var task = queue.shift();

          try {
            if (task.gen) {
              DEBUG && infoLog('genPromise for task ' + task.name);

              this._genPromise(task);
            } else if (task.run) {
              DEBUG && infoLog('run task ' + task.name);
              task.run();
            } else {
              invariant(typeof task === 'function', 'Expected Function, SimpleTask, or PromiseTask, but got:\n' + JSON.stringify(task, null, 2));
              DEBUG && infoLog('run anonymous task');
              task();
            }
          } catch (e) {
            e.message = 'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;
            throw e;
          }
        }
      }
    }, {
      key: "_getCurrentQueue",
      value: function _getCurrentQueue() {
        var stackIdx = this._queueStack.length - 1;
        var queue = this._queueStack[stackIdx];

        if (queue.popable && queue.tasks.length === 0 && this._queueStack.length > 1) {
          this._queueStack.pop();

          DEBUG && infoLog('popped queue: ', {
            stackIdx: stackIdx,
            queueStackSize: this._queueStack.length
          });
          return this._getCurrentQueue();
        } else {
          return queue.tasks;
        }
      }
    }, {
      key: "_genPromise",
      value: function _genPromise(task) {
        var _this2 = this;

        this._queueStack.push({
          tasks: [],
          popable: false
        });

        var stackIdx = this._queueStack.length - 1;
        DEBUG && infoLog('push new queue: ', {
          stackIdx: stackIdx
        });
        DEBUG && infoLog('exec gen task ' + task.name);
        task.gen().then(function () {
          DEBUG && infoLog('onThen for gen task ' + task.name, {
            stackIdx: stackIdx,
            queueStackSize: _this2._queueStack.length
          });
          _this2._queueStack[stackIdx].popable = true;
          _this2.hasTasksToProcess() && _this2._onMoreTasks();
        }).catch(function (ex) {
          ex.message = "TaskQueue: Error resolving Promise in task " + task.name + ": " + ex.message;
          throw ex;
        }).done();
      }
    }]);

    return TaskQueue;
  }();

  module.exports = TaskQueue;
},361,[93,13],"TaskQueue");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AnimatedInterpolation = _require(_dependencyMap[0], './AnimatedInterpolation');

  var AnimatedNode = _require(_dependencyMap[1], './AnimatedNode');

  var AnimatedValue = _require(_dependencyMap[2], './AnimatedValue');

  var AnimatedWithChildren = _require(_dependencyMap[3], './AnimatedWithChildren');

  var AnimatedAddition = function (_AnimatedWithChildren) {
    _inherits(AnimatedAddition, _AnimatedWithChildren);

    function AnimatedAddition(a, b) {
      _classCallCheck(this, AnimatedAddition);

      var _this = _possibleConstructorReturn(this, (AnimatedAddition.__proto__ || Object.getPrototypeOf(AnimatedAddition)).call(this));

      _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
      _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
      return _this;
    }

    _createClass(AnimatedAddition, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        _get(AnimatedAddition.prototype.__proto__ || Object.getPrototypeOf(AnimatedAddition.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() + this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        _get(AnimatedAddition.prototype.__proto__ || Object.getPrototypeOf(AnimatedAddition.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'addition',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);

    return AnimatedAddition;
  }(AnimatedWithChildren);

  module.exports = AnimatedAddition;
},362,[356,357,355,359],"AnimatedAddition");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AnimatedInterpolation = _require(_dependencyMap[0], './AnimatedInterpolation');

  var AnimatedNode = _require(_dependencyMap[1], './AnimatedNode');

  var AnimatedWithChildren = _require(_dependencyMap[2], './AnimatedWithChildren');

  var AnimatedDiffClamp = function (_AnimatedWithChildren) {
    _inherits(AnimatedDiffClamp, _AnimatedWithChildren);

    function AnimatedDiffClamp(a, min, max) {
      _classCallCheck(this, AnimatedDiffClamp);

      var _this = _possibleConstructorReturn(this, (AnimatedDiffClamp.__proto__ || Object.getPrototypeOf(AnimatedDiffClamp)).call(this));

      _this._a = a;
      _this._min = min;
      _this._max = max;
      _this._value = _this._lastValue = _this._a.__getValue();
      return _this;
    }

    _createClass(AnimatedDiffClamp, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        _get(AnimatedDiffClamp.prototype.__proto__ || Object.getPrototypeOf(AnimatedDiffClamp.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var value = this._a.__getValue();

        var diff = value - this._lastValue;
        this._lastValue = value;
        this._value = Math.min(Math.max(this._value + diff, this._min), this._max);
        return this._value;
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        _get(AnimatedDiffClamp.prototype.__proto__ || Object.getPrototypeOf(AnimatedDiffClamp.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'diffclamp',
          input: this._a.__getNativeTag(),
          min: this._min,
          max: this._max
        };
      }
    }]);

    return AnimatedDiffClamp;
  }(AnimatedWithChildren);

  module.exports = AnimatedDiffClamp;
},363,[356,357,359],"AnimatedDiffClamp");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AnimatedInterpolation = _require(_dependencyMap[0], './AnimatedInterpolation');

  var AnimatedNode = _require(_dependencyMap[1], './AnimatedNode');

  var AnimatedValue = _require(_dependencyMap[2], './AnimatedValue');

  var AnimatedWithChildren = _require(_dependencyMap[3], './AnimatedWithChildren');

  var AnimatedDivision = function (_AnimatedWithChildren) {
    _inherits(AnimatedDivision, _AnimatedWithChildren);

    function AnimatedDivision(a, b) {
      _classCallCheck(this, AnimatedDivision);

      var _this = _possibleConstructorReturn(this, (AnimatedDivision.__proto__ || Object.getPrototypeOf(AnimatedDivision)).call(this));

      _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
      _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
      return _this;
    }

    _createClass(AnimatedDivision, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        _get(AnimatedDivision.prototype.__proto__ || Object.getPrototypeOf(AnimatedDivision.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var a = this._a.__getValue();

        var b = this._b.__getValue();

        if (b === 0) {
          console.error('Detected division by zero in AnimatedDivision');
        }

        return a / b;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        _get(AnimatedDivision.prototype.__proto__ || Object.getPrototypeOf(AnimatedDivision.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'division',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);

    return AnimatedDivision;
  }(AnimatedWithChildren);

  module.exports = AnimatedDivision;
},364,[356,357,355,359],"AnimatedDivision");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AnimatedInterpolation = _require(_dependencyMap[0], './AnimatedInterpolation');

  var AnimatedNode = _require(_dependencyMap[1], './AnimatedNode');

  var AnimatedWithChildren = _require(_dependencyMap[2], './AnimatedWithChildren');

  var AnimatedModulo = function (_AnimatedWithChildren) {
    _inherits(AnimatedModulo, _AnimatedWithChildren);

    function AnimatedModulo(a, modulus) {
      _classCallCheck(this, AnimatedModulo);

      var _this = _possibleConstructorReturn(this, (AnimatedModulo.__proto__ || Object.getPrototypeOf(AnimatedModulo)).call(this));

      _this._a = a;
      _this._modulus = modulus;
      return _this;
    }

    _createClass(AnimatedModulo, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        _get(AnimatedModulo.prototype.__proto__ || Object.getPrototypeOf(AnimatedModulo.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return (this._a.__getValue() % this._modulus + this._modulus) % this._modulus;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        _get(AnimatedModulo.prototype.__proto__ || Object.getPrototypeOf(AnimatedModulo.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'modulus',
          input: this._a.__getNativeTag(),
          modulus: this._modulus
        };
      }
    }]);

    return AnimatedModulo;
  }(AnimatedWithChildren);

  module.exports = AnimatedModulo;
},365,[356,357,359],"AnimatedModulo");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AnimatedInterpolation = _require(_dependencyMap[0], './AnimatedInterpolation');

  var AnimatedNode = _require(_dependencyMap[1], './AnimatedNode');

  var AnimatedValue = _require(_dependencyMap[2], './AnimatedValue');

  var AnimatedWithChildren = _require(_dependencyMap[3], './AnimatedWithChildren');

  var AnimatedMultiplication = function (_AnimatedWithChildren) {
    _inherits(AnimatedMultiplication, _AnimatedWithChildren);

    function AnimatedMultiplication(a, b) {
      _classCallCheck(this, AnimatedMultiplication);

      var _this = _possibleConstructorReturn(this, (AnimatedMultiplication.__proto__ || Object.getPrototypeOf(AnimatedMultiplication)).call(this));

      _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
      _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
      return _this;
    }

    _createClass(AnimatedMultiplication, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        _get(AnimatedMultiplication.prototype.__proto__ || Object.getPrototypeOf(AnimatedMultiplication.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() * this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        _get(AnimatedMultiplication.prototype.__proto__ || Object.getPrototypeOf(AnimatedMultiplication.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'multiplication',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);

    return AnimatedMultiplication;
  }(AnimatedWithChildren);

  module.exports = AnimatedMultiplication;
},366,[356,357,355,359],"AnimatedMultiplication");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _require = _require2(_dependencyMap[0], '../AnimatedEvent'),
      AnimatedEvent = _require.AnimatedEvent;

  var AnimatedNode = _require2(_dependencyMap[1], './AnimatedNode');

  var AnimatedStyle = _require2(_dependencyMap[2], './AnimatedStyle');

  var NativeAnimatedHelper = _require2(_dependencyMap[3], '../NativeAnimatedHelper');

  var ReactNative = _require2(_dependencyMap[4], 'ReactNative');

  var invariant = _require2(_dependencyMap[5], 'fbjs/lib/invariant');

  var AnimatedProps = function (_AnimatedNode) {
    _inherits(AnimatedProps, _AnimatedNode);

    function AnimatedProps(props, callback) {
      _classCallCheck(this, AnimatedProps);

      var _this = _possibleConstructorReturn(this, (AnimatedProps.__proto__ || Object.getPrototypeOf(AnimatedProps)).call(this));

      if (props.style) {
        props = _extends({}, props, {
          style: new AnimatedStyle(props.style)
        });
      }

      _this._props = props;
      _this._callback = callback;

      _this.__attach();

      return _this;
    }

    _createClass(AnimatedProps, [{
      key: "__getValue",
      value: function __getValue() {
        var props = {};

        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            if (!value.__isNative || value instanceof AnimatedStyle) {
              props[key] = value.__getValue();
            }
          } else if (value instanceof AnimatedEvent) {
            props[key] = value.__getHandler();
          } else {
            props[key] = value;
          }
        }

        return props;
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        var props = {};

        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            props[key] = value.__getAnimatedValue();
          }
        }

        return props;
      }
    }, {
      key: "__attach",
      value: function __attach() {
        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            value.__addChild(this);
          }
        }
      }
    }, {
      key: "__detach",
      value: function __detach() {
        if (this.__isNative && this._animatedView) {
          this.__disconnectAnimatedView();
        }

        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            value.__removeChild(this);
          }
        }

        _get(AnimatedProps.prototype.__proto__ || Object.getPrototypeOf(AnimatedProps.prototype), "__detach", this).call(this);
      }
    }, {
      key: "update",
      value: function update() {
        this._callback();
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        if (!this.__isNative) {
          this.__isNative = true;

          for (var key in this._props) {
            var value = this._props[key];

            if (value instanceof AnimatedNode) {
              value.__makeNative();
            }
          }

          if (this._animatedView) {
            this.__connectAnimatedView();
          }
        }
      }
    }, {
      key: "setNativeView",
      value: function setNativeView(animatedView) {
        if (this._animatedView === animatedView) {
          return;
        }

        this._animatedView = animatedView;

        if (this.__isNative) {
          this.__connectAnimatedView();
        }
      }
    }, {
      key: "__connectAnimatedView",
      value: function __connectAnimatedView() {
        invariant(this.__isNative, 'Expected node to be marked as "native"');
        var nativeViewTag = ReactNative.findNodeHandle(this._animatedView);
        invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');
        NativeAnimatedHelper.API.connectAnimatedNodeToView(this.__getNativeTag(), nativeViewTag);
      }
    }, {
      key: "__disconnectAnimatedView",
      value: function __disconnectAnimatedView() {
        invariant(this.__isNative, 'Expected node to be marked as "native"');
        var nativeViewTag = ReactNative.findNodeHandle(this._animatedView);
        invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');
        NativeAnimatedHelper.API.disconnectAnimatedNodeFromView(this.__getNativeTag(), nativeViewTag);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var propsConfig = {};

        for (var propKey in this._props) {
          var value = this._props[propKey];

          if (value instanceof AnimatedNode) {
            propsConfig[propKey] = value.__getNativeTag();
          }
        }

        return {
          type: 'props',
          props: propsConfig
        };
      }
    }]);

    return AnimatedProps;
  }(AnimatedNode);

  module.exports = AnimatedProps;
},367,[354,357,368,358,21,13],"AnimatedProps");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AnimatedNode = _require(_dependencyMap[0], './AnimatedNode');

  var AnimatedTransform = _require(_dependencyMap[1], './AnimatedTransform');

  var AnimatedWithChildren = _require(_dependencyMap[2], './AnimatedWithChildren');

  var NativeAnimatedHelper = _require(_dependencyMap[3], '../NativeAnimatedHelper');

  var flattenStyle = _require(_dependencyMap[4], 'flattenStyle');

  var AnimatedStyle = function (_AnimatedWithChildren) {
    _inherits(AnimatedStyle, _AnimatedWithChildren);

    function AnimatedStyle(style) {
      _classCallCheck(this, AnimatedStyle);

      var _this = _possibleConstructorReturn(this, (AnimatedStyle.__proto__ || Object.getPrototypeOf(AnimatedStyle)).call(this));

      style = flattenStyle(style) || {};

      if (style.transform) {
        style = _extends({}, style, {
          transform: new AnimatedTransform(style.transform)
        });
      }

      _this._style = style;
      return _this;
    }

    _createClass(AnimatedStyle, [{
      key: "_walkStyleAndGetValues",
      value: function _walkStyleAndGetValues(style) {
        var updatedStyle = {};

        for (var key in style) {
          var value = style[key];

          if (value instanceof AnimatedNode) {
            if (!value.__isNative) {
              updatedStyle[key] = value.__getValue();
            }
          } else if (value && !Array.isArray(value) && typeof value === 'object') {
            updatedStyle[key] = this._walkStyleAndGetValues(value);
          } else {
            updatedStyle[key] = value;
          }
        }

        return updatedStyle;
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._walkStyleAndGetValues(this._style);
      }
    }, {
      key: "_walkStyleAndGetAnimatedValues",
      value: function _walkStyleAndGetAnimatedValues(style) {
        var updatedStyle = {};

        for (var key in style) {
          var value = style[key];

          if (value instanceof AnimatedNode) {
            updatedStyle[key] = value.__getAnimatedValue();
          } else if (value && !Array.isArray(value) && typeof value === 'object') {
            updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);
          }
        }

        return updatedStyle;
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this._walkStyleAndGetAnimatedValues(this._style);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        for (var key in this._style) {
          var value = this._style[key];

          if (value instanceof AnimatedNode) {
            value.__addChild(this);
          }
        }
      }
    }, {
      key: "__detach",
      value: function __detach() {
        for (var key in this._style) {
          var value = this._style[key];

          if (value instanceof AnimatedNode) {
            value.__removeChild(this);
          }
        }

        _get(AnimatedStyle.prototype.__proto__ || Object.getPrototypeOf(AnimatedStyle.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        _get(AnimatedStyle.prototype.__proto__ || Object.getPrototypeOf(AnimatedStyle.prototype), "__makeNative", this).call(this);

        for (var key in this._style) {
          var value = this._style[key];

          if (value instanceof AnimatedNode) {
            value.__makeNative();
          }
        }
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var styleConfig = {};

        for (var styleKey in this._style) {
          if (this._style[styleKey] instanceof AnimatedNode) {
            styleConfig[styleKey] = this._style[styleKey].__getNativeTag();
          }
        }

        NativeAnimatedHelper.validateStyles(styleConfig);
        return {
          type: 'style',
          style: styleConfig
        };
      }
    }]);

    return AnimatedStyle;
  }(AnimatedWithChildren);

  module.exports = AnimatedStyle;
},368,[357,369,359,358,104],"AnimatedStyle");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AnimatedNode = _require(_dependencyMap[0], './AnimatedNode');

  var AnimatedWithChildren = _require(_dependencyMap[1], './AnimatedWithChildren');

  var NativeAnimatedHelper = _require(_dependencyMap[2], '../NativeAnimatedHelper');

  var AnimatedTransform = function (_AnimatedWithChildren) {
    _inherits(AnimatedTransform, _AnimatedWithChildren);

    function AnimatedTransform(transforms) {
      _classCallCheck(this, AnimatedTransform);

      var _this = _possibleConstructorReturn(this, (AnimatedTransform.__proto__ || Object.getPrototypeOf(AnimatedTransform)).call(this));

      _this._transforms = transforms;
      return _this;
    }

    _createClass(AnimatedTransform, [{
      key: "__makeNative",
      value: function __makeNative() {
        _get(AnimatedTransform.prototype.__proto__ || Object.getPrototypeOf(AnimatedTransform.prototype), "__makeNative", this).call(this);

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              value.__makeNative();
            }
          }
        });
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._transforms.map(function (transform) {
          var result = {};

          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              result[key] = value.__getValue();
            } else {
              result[key] = value;
            }
          }

          return result;
        });
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this._transforms.map(function (transform) {
          var result = {};

          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              result[key] = value.__getAnimatedValue();
            } else {
              result[key] = value;
            }
          }

          return result;
        });
      }
    }, {
      key: "__attach",
      value: function __attach() {
        var _this2 = this;

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              value.__addChild(_this2);
            }
          }
        });
      }
    }, {
      key: "__detach",
      value: function __detach() {
        var _this3 = this;

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              value.__removeChild(_this3);
            }
          }
        });

        _get(AnimatedTransform.prototype.__proto__ || Object.getPrototypeOf(AnimatedTransform.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var transConfigs = [];

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              transConfigs.push({
                type: 'animated',
                property: key,
                nodeTag: value.__getNativeTag()
              });
            } else {
              transConfigs.push({
                type: 'static',
                property: key,
                value: value
              });
            }
          }
        });

        NativeAnimatedHelper.validateTransform(transConfigs);
        return {
          type: 'transform',
          transforms: transConfigs
        };
      }
    }]);

    return AnimatedTransform;
  }(AnimatedWithChildren);

  module.exports = AnimatedTransform;
},369,[357,359,358],"AnimatedTransform");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AnimatedValue = _require(_dependencyMap[0], './AnimatedValue');

  var AnimatedNode = _require(_dependencyMap[1], './AnimatedNode');

  var AnimatedTracking = function (_AnimatedNode) {
    _inherits(AnimatedTracking, _AnimatedNode);

    function AnimatedTracking(value, parent, animationClass, animationConfig, callback) {
      _classCallCheck(this, AnimatedTracking);

      var _this = _possibleConstructorReturn(this, (AnimatedTracking.__proto__ || Object.getPrototypeOf(AnimatedTracking)).call(this));

      _this._value = value;
      _this._parent = parent;
      _this._animationClass = animationClass;
      _this._animationConfig = animationConfig;
      _this._callback = callback;

      _this.__attach();

      return _this;
    }

    _createClass(AnimatedTracking, [{
      key: "__getValue",
      value: function __getValue() {
        return this._parent.__getValue();
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._parent.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._parent.__removeChild(this);

        _get(AnimatedTracking.prototype.__proto__ || Object.getPrototypeOf(AnimatedTracking.prototype), "__detach", this).call(this);
      }
    }, {
      key: "update",
      value: function update() {
        this._value.animate(new this._animationClass(_extends({}, this._animationConfig, {
          toValue: this._animationConfig.toValue.__getValue()
        })), this._callback);
      }
    }]);

    return AnimatedTracking;
  }(AnimatedNode);

  module.exports = AnimatedTracking;
},370,[355,357],"AnimatedTracking");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AnimatedValue = _require(_dependencyMap[0], './AnimatedValue');

  var AnimatedWithChildren = _require(_dependencyMap[1], './AnimatedWithChildren');

  var invariant = _require(_dependencyMap[2], 'fbjs/lib/invariant');

  var _uniqueId = 1;

  var AnimatedValueXY = function (_AnimatedWithChildren) {
    _inherits(AnimatedValueXY, _AnimatedWithChildren);

    function AnimatedValueXY(valueIn) {
      _classCallCheck(this, AnimatedValueXY);

      var _this = _possibleConstructorReturn(this, (AnimatedValueXY.__proto__ || Object.getPrototypeOf(AnimatedValueXY)).call(this));

      var value = valueIn || {
        x: 0,
        y: 0
      };

      if (typeof value.x === 'number' && typeof value.y === 'number') {
        _this.x = new AnimatedValue(value.x);
        _this.y = new AnimatedValue(value.y);
      } else {
        invariant(value.x instanceof AnimatedValue && value.y instanceof AnimatedValue, 'AnimatedValueXY must be initialized with an object of numbers or ' + 'AnimatedValues.');
        _this.x = value.x;
        _this.y = value.y;
      }

      _this._listeners = {};
      return _this;
    }

    _createClass(AnimatedValueXY, [{
      key: "setValue",
      value: function setValue(value) {
        this.x.setValue(value.x);
        this.y.setValue(value.y);
      }
    }, {
      key: "setOffset",
      value: function setOffset(offset) {
        this.x.setOffset(offset.x);
        this.y.setOffset(offset.y);
      }
    }, {
      key: "flattenOffset",
      value: function flattenOffset() {
        this.x.flattenOffset();
        this.y.flattenOffset();
      }
    }, {
      key: "extractOffset",
      value: function extractOffset() {
        this.x.extractOffset();
        this.y.extractOffset();
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return {
          x: this.x.__getValue(),
          y: this.y.__getValue()
        };
      }
    }, {
      key: "resetAnimation",
      value: function resetAnimation(callback) {
        this.x.resetAnimation();
        this.y.resetAnimation();
        callback && callback(this.__getValue());
      }
    }, {
      key: "stopAnimation",
      value: function stopAnimation(callback) {
        this.x.stopAnimation();
        this.y.stopAnimation();
        callback && callback(this.__getValue());
      }
    }, {
      key: "addListener",
      value: function addListener(callback) {
        var _this2 = this;

        var id = String(_uniqueId++);

        var jointCallback = function jointCallback(_ref) {
          var number = _ref.value;
          callback(_this2.__getValue());
        };

        this._listeners[id] = {
          x: this.x.addListener(jointCallback),
          y: this.y.addListener(jointCallback)
        };
        return id;
      }
    }, {
      key: "removeListener",
      value: function removeListener(id) {
        this.x.removeListener(this._listeners[id].x);
        this.y.removeListener(this._listeners[id].y);
        delete this._listeners[id];
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {
        this.x.removeAllListeners();
        this.y.removeAllListeners();
        this._listeners = {};
      }
    }, {
      key: "getLayout",
      value: function getLayout() {
        return {
          left: this.x,
          top: this.y
        };
      }
    }, {
      key: "getTranslateTransform",
      value: function getTranslateTransform() {
        return [{
          translateX: this.x
        }, {
          translateY: this.y
        }];
      }
    }]);

    return AnimatedValueXY;
  }(AnimatedWithChildren);

  module.exports = AnimatedValueXY;
},371,[355,359,13],"AnimatedValueXY");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Animation = _require2(_dependencyMap[0], './Animation');

  var _require = _require2(_dependencyMap[1], '../NativeAnimatedHelper'),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  var DecayAnimation = function (_Animation) {
    _inherits(DecayAnimation, _Animation);

    function DecayAnimation(config) {
      _classCallCheck(this, DecayAnimation);

      var _this = _possibleConstructorReturn(this, (DecayAnimation.__proto__ || Object.getPrototypeOf(DecayAnimation)).call(this));

      _this._deceleration = config.deceleration !== undefined ? config.deceleration : 0.998;
      _this._velocity = config.velocity;
      _this._useNativeDriver = shouldUseNativeDriver(config);
      _this.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
      _this.__iterations = config.iterations !== undefined ? config.iterations : 1;
      return _this;
    }

    _createClass(DecayAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        return {
          type: 'decay',
          deceleration: this._deceleration,
          velocity: this._velocity,
          iterations: this.__iterations
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        this.__active = true;
        this._lastValue = fromValue;
        this._fromValue = fromValue;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;
        this._startTime = Date.now();

        if (this._useNativeDriver) {
          this.__startNativeAnimation(animatedValue);
        } else {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var now = Date.now();
        var value = this._fromValue + this._velocity / (1 - this._deceleration) * (1 - Math.exp(-(1 - this._deceleration) * (now - this._startTime)));

        this._onUpdate(value);

        if (Math.abs(this._lastValue - value) < 0.1) {
          this.__debouncedOnEnd({
            finished: true
          });

          return;
        }

        this._lastValue = value;

        if (this.__active) {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "stop",
      value: function stop() {
        _get(DecayAnimation.prototype.__proto__ || Object.getPrototypeOf(DecayAnimation.prototype), "stop", this).call(this);

        this.__active = false;
        global.cancelAnimationFrame(this._animationFrame);

        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);

    return DecayAnimation;
  }(Animation);

  module.exports = DecayAnimation;
},372,[373,358],"DecayAnimation");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var NativeAnimatedHelper = _require(_dependencyMap[0], 'NativeAnimatedHelper');

  var Animation = function () {
    function Animation() {
      _classCallCheck(this, Animation);
    }

    _createClass(Animation, [{
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}
    }, {
      key: "stop",
      value: function stop() {
        if (this.__nativeId) {
          NativeAnimatedHelper.API.stopAnimation(this.__nativeId);
        }
      }
    }, {
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        throw new Error('This animation type cannot be offloaded to native');
      }
    }, {
      key: "__debouncedOnEnd",
      value: function __debouncedOnEnd(result) {
        var onEnd = this.__onEnd;
        this.__onEnd = null;
        onEnd && onEnd(result);
      }
    }, {
      key: "__startNativeAnimation",
      value: function __startNativeAnimation(animatedValue) {
        animatedValue.__makeNative();

        this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();
        NativeAnimatedHelper.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), this.__getNativeAnimationConfig(), this.__debouncedOnEnd.bind(this));
      }
    }]);

    return Animation;
  }();

  module.exports = Animation;
},373,[358],"Animation");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AnimatedValue = _require2(_dependencyMap[0], '../nodes/AnimatedValue');

  var AnimatedValueXY = _require2(_dependencyMap[1], '../nodes/AnimatedValueXY');

  var Animation = _require2(_dependencyMap[2], './Animation');

  var SpringConfig = _require2(_dependencyMap[3], '../SpringConfig');

  var invariant = _require2(_dependencyMap[4], 'fbjs/lib/invariant');

  var _require = _require2(_dependencyMap[5], '../NativeAnimatedHelper'),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  function withDefault(value, defaultValue) {
    if (value === undefined || value === null) {
      return defaultValue;
    }

    return value;
  }

  var SpringAnimation = function (_Animation) {
    _inherits(SpringAnimation, _Animation);

    function SpringAnimation(config) {
      _classCallCheck(this, SpringAnimation);

      var _this = _possibleConstructorReturn(this, (SpringAnimation.__proto__ || Object.getPrototypeOf(SpringAnimation)).call(this));

      _this._overshootClamping = withDefault(config.overshootClamping, false);
      _this._restDisplacementThreshold = withDefault(config.restDisplacementThreshold, 0.001);
      _this._restSpeedThreshold = withDefault(config.restSpeedThreshold, 0.001);
      _this._initialVelocity = withDefault(config.velocity, 0);
      _this._lastVelocity = withDefault(config.velocity, 0);
      _this._toValue = config.toValue;
      _this._delay = withDefault(config.delay, 0);
      _this._useNativeDriver = shouldUseNativeDriver(config);
      _this.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
      _this.__iterations = config.iterations !== undefined ? config.iterations : 1;

      if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {
        invariant(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');
        _this._stiffness = withDefault(config.stiffness, 100);
        _this._damping = withDefault(config.damping, 10);
        _this._mass = withDefault(config.mass, 1);
      } else if (config.bounciness !== undefined || config.speed !== undefined) {
        invariant(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');
        var springConfig = SpringConfig.fromBouncinessAndSpeed(withDefault(config.bounciness, 8), withDefault(config.speed, 12));
        _this._stiffness = springConfig.stiffness;
        _this._damping = springConfig.damping;
        _this._mass = 1;
      } else {
        var _springConfig = SpringConfig.fromOrigamiTensionAndFriction(withDefault(config.tension, 40), withDefault(config.friction, 7));

        _this._stiffness = _springConfig.stiffness;
        _this._damping = _springConfig.damping;
        _this._mass = 1;
      }

      invariant(_this._stiffness > 0, 'Stiffness value must be greater than 0');
      invariant(_this._damping > 0, 'Damping value must be greater than 0');
      invariant(_this._mass > 0, 'Mass value must be greater than 0');
      return _this;
    }

    _createClass(SpringAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        return {
          type: 'spring',
          overshootClamping: this._overshootClamping,
          restDisplacementThreshold: this._restDisplacementThreshold,
          restSpeedThreshold: this._restSpeedThreshold,
          stiffness: this._stiffness,
          damping: this._damping,
          mass: this._mass,
          initialVelocity: withDefault(this._initialVelocity, this._lastVelocity),
          toValue: this._toValue,
          iterations: this.__iterations
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        var _this2 = this;

        this.__active = true;
        this._startPosition = fromValue;
        this._lastPosition = this._startPosition;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;
        this._lastTime = Date.now();
        this._frameTime = 0.0;

        if (previousAnimation instanceof SpringAnimation) {
          var internalState = previousAnimation.getInternalState();
          this._lastPosition = internalState.lastPosition;
          this._lastVelocity = internalState.lastVelocity;
          this._initialVelocity = this._lastVelocity;
          this._lastTime = internalState.lastTime;
        }

        var start = function start() {
          if (_this2._useNativeDriver) {
            _this2.__startNativeAnimation(animatedValue);
          } else {
            _this2.onUpdate();
          }
        };

        if (this._delay) {
          this._timeout = setTimeout(start, this._delay);
        } else {
          start();
        }
      }
    }, {
      key: "getInternalState",
      value: function getInternalState() {
        return {
          lastPosition: this._lastPosition,
          lastVelocity: this._lastVelocity,
          lastTime: this._lastTime
        };
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var MAX_STEPS = 64;
        var now = Date.now();

        if (now > this._lastTime + MAX_STEPS) {
          now = this._lastTime + MAX_STEPS;
        }

        var deltaTime = (now - this._lastTime) / 1000;
        this._frameTime += deltaTime;
        var c = this._damping;
        var m = this._mass;
        var k = this._stiffness;
        var v0 = -this._initialVelocity;
        var zeta = c / (2 * Math.sqrt(k * m));
        var omega0 = Math.sqrt(k / m);
        var omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta);
        var x0 = this._toValue - this._startPosition;
        var position = 0.0;
        var velocity = 0.0;
        var t = this._frameTime;

        if (zeta < 1) {
          var envelope = Math.exp(-zeta * omega0 * t);
          position = this._toValue - envelope * ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) + x0 * Math.cos(omega1 * t));
          velocity = zeta * omega0 * envelope * (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 + x0 * Math.cos(omega1 * t)) - envelope * (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) - omega1 * x0 * Math.sin(omega1 * t));
        } else {
          var _envelope = Math.exp(-omega0 * t);

          position = this._toValue - _envelope * (x0 + (v0 + omega0 * x0) * t);
          velocity = _envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));
        }

        this._lastTime = now;
        this._lastPosition = position;
        this._lastVelocity = velocity;

        this._onUpdate(position);

        if (!this.__active) {
          return;
        }

        var isOvershooting = false;

        if (this._overshootClamping && this._stiffness !== 0) {
          if (this._startPosition < this._toValue) {
            isOvershooting = position > this._toValue;
          } else {
            isOvershooting = position < this._toValue;
          }
        }

        var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;

        var isDisplacement = true;

        if (this._stiffness !== 0) {
          isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;
        }

        if (isOvershooting || isVelocity && isDisplacement) {
          if (this._stiffness !== 0) {
            this._lastPosition = this._toValue;
            this._lastVelocity = 0;

            this._onUpdate(this._toValue);
          }

          this.__debouncedOnEnd({
            finished: true
          });

          return;
        }

        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }, {
      key: "stop",
      value: function stop() {
        _get(SpringAnimation.prototype.__proto__ || Object.getPrototypeOf(SpringAnimation.prototype), "stop", this).call(this);

        this.__active = false;
        clearTimeout(this._timeout);
        global.cancelAnimationFrame(this._animationFrame);

        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);

    return SpringAnimation;
  }(Animation);

  module.exports = SpringAnimation;
},374,[355,371,373,375,13,358],"SpringAnimation");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function stiffnessFromOrigamiValue(oValue) {
    return (oValue - 30) * 3.62 + 194;
  }

  function dampingFromOrigamiValue(oValue) {
    return (oValue - 8) * 3 + 25;
  }

  function fromOrigamiTensionAndFriction(tension, friction) {
    return {
      stiffness: stiffnessFromOrigamiValue(tension),
      damping: dampingFromOrigamiValue(friction)
    };
  }

  function fromBouncinessAndSpeed(bounciness, speed) {
    function normalize(value, startValue, endValue) {
      return (value - startValue) / (endValue - startValue);
    }

    function projectNormal(n, start, end) {
      return start + n * (end - start);
    }

    function linearInterpolation(t, start, end) {
      return t * end + (1 - t) * start;
    }

    function quadraticOutInterpolation(t, start, end) {
      return linearInterpolation(2 * t - t * t, start, end);
    }

    function b3Friction1(x) {
      return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
    }

    function b3Friction2(x) {
      return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;
    }

    function b3Friction3(x) {
      return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;
    }

    function b3Nobounce(tension) {
      if (tension <= 18) {
        return b3Friction1(tension);
      } else if (tension > 18 && tension <= 44) {
        return b3Friction2(tension);
      } else {
        return b3Friction3(tension);
      }
    }

    var b = normalize(bounciness / 1.7, 0, 20);
    b = projectNormal(b, 0, 0.8);
    var s = normalize(speed / 1.7, 0, 20);
    var bouncyTension = projectNormal(s, 0.5, 200);
    var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);
    return {
      stiffness: stiffnessFromOrigamiValue(bouncyTension),
      damping: dampingFromOrigamiValue(bouncyFriction)
    };
  }

  module.exports = {
    fromOrigamiTensionAndFriction: fromOrigamiTensionAndFriction,
    fromBouncinessAndSpeed: fromBouncinessAndSpeed
  };
},375,[],"SpringConfig");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AnimatedValue = _require2(_dependencyMap[0], '../nodes/AnimatedValue');

  var AnimatedValueXY = _require2(_dependencyMap[1], '../nodes/AnimatedValueXY');

  var Animation = _require2(_dependencyMap[2], './Animation');

  var _require = _require2(_dependencyMap[3], '../NativeAnimatedHelper'),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  var _easeInOut = void 0;

  function easeInOut() {
    if (!_easeInOut) {
      var Easing = _require2(_dependencyMap[4], 'Easing');

      _easeInOut = Easing.inOut(Easing.ease);
    }

    return _easeInOut;
  }

  var TimingAnimation = function (_Animation) {
    _inherits(TimingAnimation, _Animation);

    function TimingAnimation(config) {
      _classCallCheck(this, TimingAnimation);

      var _this = _possibleConstructorReturn(this, (TimingAnimation.__proto__ || Object.getPrototypeOf(TimingAnimation)).call(this));

      _this._toValue = config.toValue;
      _this._easing = config.easing !== undefined ? config.easing : easeInOut();
      _this._duration = config.duration !== undefined ? config.duration : 500;
      _this._delay = config.delay !== undefined ? config.delay : 0;
      _this.__iterations = config.iterations !== undefined ? config.iterations : 1;
      _this.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
      _this._useNativeDriver = shouldUseNativeDriver(config);
      return _this;
    }

    _createClass(TimingAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        var frameDuration = 1000.0 / 60.0;
        var frames = [];

        for (var dt = 0.0; dt < this._duration; dt += frameDuration) {
          frames.push(this._easing(dt / this._duration));
        }

        frames.push(this._easing(1));
        return {
          type: 'frames',
          frames: frames,
          toValue: this._toValue,
          iterations: this.__iterations
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        var _this2 = this;

        this.__active = true;
        this._fromValue = fromValue;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;

        var start = function start() {
          if (_this2._duration === 0 && !_this2._useNativeDriver) {
            _this2._onUpdate(_this2._toValue);

            _this2.__debouncedOnEnd({
              finished: true
            });
          } else {
            _this2._startTime = Date.now();

            if (_this2._useNativeDriver) {
              _this2.__startNativeAnimation(animatedValue);
            } else {
              _this2._animationFrame = requestAnimationFrame(_this2.onUpdate.bind(_this2));
            }
          }
        };

        if (this._delay) {
          this._timeout = setTimeout(start, this._delay);
        } else {
          start();
        }
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var now = Date.now();

        if (now >= this._startTime + this._duration) {
          if (this._duration === 0) {
            this._onUpdate(this._toValue);
          } else {
            this._onUpdate(this._fromValue + this._easing(1) * (this._toValue - this._fromValue));
          }

          this.__debouncedOnEnd({
            finished: true
          });

          return;
        }

        this._onUpdate(this._fromValue + this._easing((now - this._startTime) / this._duration) * (this._toValue - this._fromValue));

        if (this.__active) {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "stop",
      value: function stop() {
        _get(TimingAnimation.prototype.__proto__ || Object.getPrototypeOf(TimingAnimation.prototype), "stop", this).call(this);

        this.__active = false;
        clearTimeout(this._timeout);
        global.cancelAnimationFrame(this._animationFrame);

        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);

    return TimingAnimation;
  }(Animation);

  module.exports = TimingAnimation;
},376,[355,371,373,358,377],"TimingAnimation");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var _ease = void 0;

  var Easing = function () {
    function Easing() {
      _classCallCheck(this, Easing);
    }

    _createClass(Easing, null, [{
      key: "step0",
      value: function step0(n) {
        return n > 0 ? 1 : 0;
      }
    }, {
      key: "step1",
      value: function step1(n) {
        return n >= 1 ? 1 : 0;
      }
    }, {
      key: "linear",
      value: function linear(t) {
        return t;
      }
    }, {
      key: "ease",
      value: function ease(t) {
        if (!_ease) {
          _ease = Easing.bezier(0.42, 0, 1, 1);
        }

        return _ease(t);
      }
    }, {
      key: "quad",
      value: function quad(t) {
        return t * t;
      }
    }, {
      key: "cubic",
      value: function cubic(t) {
        return t * t * t;
      }
    }, {
      key: "poly",
      value: function poly(n) {
        return function (t) {
          return Math.pow(t, n);
        };
      }
    }, {
      key: "sin",
      value: function sin(t) {
        return 1 - Math.cos(t * Math.PI / 2);
      }
    }, {
      key: "circle",
      value: function circle(t) {
        return 1 - Math.sqrt(1 - t * t);
      }
    }, {
      key: "exp",
      value: function exp(t) {
        return Math.pow(2, 10 * (t - 1));
      }
    }, {
      key: "elastic",
      value: function elastic() {
        var bounciness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var p = bounciness * Math.PI;
        return function (t) {
          return 1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);
        };
      }
    }, {
      key: "back",
      value: function back(s) {
        if (s === undefined) {
          s = 1.70158;
        }

        return function (t) {
          return t * t * ((s + 1) * t - s);
        };
      }
    }, {
      key: "bounce",
      value: function bounce(t) {
        if (t < 1 / 2.75) {
          return 7.5625 * t * t;
        }

        if (t < 2 / 2.75) {
          t -= 1.5 / 2.75;
          return 7.5625 * t * t + 0.75;
        }

        if (t < 2.5 / 2.75) {
          t -= 2.25 / 2.75;
          return 7.5625 * t * t + 0.9375;
        }

        t -= 2.625 / 2.75;
        return 7.5625 * t * t + 0.984375;
      }
    }, {
      key: "bezier",
      value: function bezier(x1, y1, x2, y2) {
        var _bezier = _require(_dependencyMap[0], 'bezier');

        return _bezier(x1, y1, x2, y2);
      }
    }, {
      key: "in",
      value: function _in(easing) {
        return easing;
      }
    }, {
      key: "out",
      value: function out(easing) {
        return function (t) {
          return 1 - easing(1 - t);
        };
      }
    }, {
      key: "inOut",
      value: function inOut(easing) {
        return function (t) {
          if (t < 0.5) {
            return easing(t * 2) / 2;
          }

          return 1 - easing((1 - t) * 2) / 2;
        };
      }
    }]);

    return Easing;
  }();

  module.exports = Easing;
},377,[378],"Easing");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NEWTON_ITERATIONS = 4;
  var NEWTON_MIN_SLOPE = 0.001;
  var SUBDIVISION_PRECISION = 0.0000001;
  var SUBDIVISION_MAX_ITERATIONS = 10;
  var kSplineTableSize = 11;
  var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);
  var float32ArraySupported = typeof Float32Array === 'function';

  function A(aA1, aA2) {
    return 1.0 - 3.0 * aA2 + 3.0 * aA1;
  }

  function B(aA1, aA2) {
    return 3.0 * aA2 - 6.0 * aA1;
  }

  function C(aA1) {
    return 3.0 * aA1;
  }

  function calcBezier(aT, aA1, aA2) {
    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
  }

  function getSlope(aT, aA1, aA2) {
    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
  }

  function binarySubdivide(aX, aA, aB, mX1, mX2) {
    var currentX,
        currentT,
        i = 0;

    do {
      currentT = aA + (aB - aA) / 2.0;
      currentX = calcBezier(currentT, mX1, mX2) - aX;

      if (currentX > 0.0) {
        aB = currentT;
      } else {
        aA = currentT;
      }
    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);

    return currentT;
  }

  function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
    for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
      var currentSlope = getSlope(aGuessT, mX1, mX2);

      if (currentSlope === 0.0) {
        return aGuessT;
      }

      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
      aGuessT -= currentX / currentSlope;
    }

    return aGuessT;
  }

  module.exports = function bezier(mX1, mY1, mX2, mY2) {
    if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
      throw new Error('bezier x values must be in [0, 1] range');
    }

    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);

    if (mX1 !== mY1 || mX2 !== mY2) {
      for (var i = 0; i < kSplineTableSize; ++i) {
        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
      }
    }

    function getTForX(aX) {
      var intervalStart = 0.0;
      var currentSample = 1;
      var lastSample = kSplineTableSize - 1;

      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
        intervalStart += kSampleStepSize;
      }

      --currentSample;
      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
      var guessForT = intervalStart + dist * kSampleStepSize;
      var initialSlope = getSlope(guessForT, mX1, mX2);

      if (initialSlope >= NEWTON_MIN_SLOPE) {
        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
      } else if (initialSlope === 0.0) {
        return guessForT;
      } else {
        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
      }
    }

    return function BezierEasing(x) {
      if (mX1 === mY1 && mX2 === mY2) {
        return x;
      }

      if (x === 0) {
        return 0;
      }

      if (x === 1) {
        return 1;
      }

      return calcBezier(getTForX(x), mY1, mY2);
    };
  };
},378,[],"bezier");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require2(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require2(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Animated\\src\\createAnimatedComponent.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    AnimatedComponent: {
      displayName: "AnimatedComponent",
      isInFunction: true
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Animated/src/createAnimatedComponent.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var _require = _require2(_dependencyMap[2], './AnimatedEvent'),
      AnimatedEvent = _require.AnimatedEvent;

  var AnimatedProps = _require2(_dependencyMap[3], './nodes/AnimatedProps');

  var React = _require2(_dependencyMap[4], 'React');

  var ViewStylePropTypes = _require2(_dependencyMap[5], 'ViewStylePropTypes');

  function createAnimatedComponent(Component) {
    var _class, _temp;

    var AnimatedComponent = _wrapComponent("AnimatedComponent")((_temp = _class = function (_React$Component) {
      _inherits(AnimatedComponent, _React$Component);

      function AnimatedComponent(props) {
        _classCallCheck(this, AnimatedComponent);

        var _this = _possibleConstructorReturn(this, (AnimatedComponent.__proto__ || Object.getPrototypeOf(AnimatedComponent)).call(this, props));

        _this._invokeAnimatedPropsCallbackOnMount = false;
        _this._eventDetachers = [];

        _this._animatedPropsCallback = function () {
          if (_this._component == null) {
            _this._invokeAnimatedPropsCallbackOnMount = true;
          } else if (AnimatedComponent.__skipSetNativeProps_FOR_TESTS_ONLY || typeof _this._component.setNativeProps !== 'function') {
            _this.forceUpdate();
          } else if (!_this._propsAnimated.__isNative) {
            _this._component.setNativeProps(_this._propsAnimated.__getAnimatedValue());
          } else {
            throw new Error('Attempting to run JS driven animation on animated ' + 'node that has been moved to "native" earlier by starting an ' + 'animation with `useNativeDriver: true`');
          }
        };

        _this._setComponentRef = _this._setComponentRef.bind(_this);
        return _this;
      }

      _createClass(AnimatedComponent, [{
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this._propsAnimated && this._propsAnimated.__detach();

          this._detachNativeEvents();
        }
      }, {
        key: "setNativeProps",
        value: function setNativeProps(props) {
          this._component.setNativeProps(props);
        }
      }, {
        key: "UNSAFE_componentWillMount",
        value: function UNSAFE_componentWillMount() {
          this._attachProps(this.props);
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          if (this._invokeAnimatedPropsCallbackOnMount) {
            this._invokeAnimatedPropsCallbackOnMount = false;

            this._animatedPropsCallback();
          }

          this._propsAnimated.setNativeView(this._component);

          this._attachNativeEvents();
        }
      }, {
        key: "_attachNativeEvents",
        value: function _attachNativeEvents() {
          var _this2 = this;

          var scrollableNode = this._component.getScrollableNode ? this._component.getScrollableNode() : this._component;

          var _loop = function _loop(key) {
            var prop = _this2.props[key];

            if (prop instanceof AnimatedEvent && prop.__isNative) {
              prop.__attach(scrollableNode, key);

              _this2._eventDetachers.push(function () {
                return prop.__detach(scrollableNode, key);
              });
            }
          };

          for (var key in this.props) {
            _loop(key);
          }
        }
      }, {
        key: "_detachNativeEvents",
        value: function _detachNativeEvents() {
          this._eventDetachers.forEach(function (remove) {
            return remove();
          });

          this._eventDetachers = [];
        }
      }, {
        key: "_attachProps",
        value: function _attachProps(nextProps) {
          var oldPropsAnimated = this._propsAnimated;
          this._propsAnimated = new AnimatedProps(nextProps, this._animatedPropsCallback);
          oldPropsAnimated && oldPropsAnimated.__detach();
        }
      }, {
        key: "UNSAFE_componentWillReceiveProps",
        value: function UNSAFE_componentWillReceiveProps(newProps) {
          this._attachProps(newProps);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          if (this._component !== this._prevComponent) {
            this._propsAnimated.setNativeView(this._component);
          }

          if (this._component !== this._prevComponent || prevProps !== this.props) {
            this._detachNativeEvents();

            this._attachNativeEvents();
          }
        }
      }, {
        key: "render",
        value: function render() {
          var props = this._propsAnimated.__getValue();

          return React.createElement(Component, _extends({}, props, {
            ref: this._setComponentRef,
            collapsable: this._propsAnimated.__isNative ? false : props.collapsable,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 147
            }
          }));
        }
      }, {
        key: "_setComponentRef",
        value: function _setComponentRef(c) {
          this._prevComponent = this._component;
          this._component = c;
        }
      }, {
        key: "getNode",
        value: function getNode() {
          return this._component;
        }
      }]);

      return AnimatedComponent;
    }(React.Component), _class.__skipSetNativeProps_FOR_TESTS_ONLY = false, _temp));

    var propTypes = Component.propTypes;
    AnimatedComponent.propTypes = {
      style: function style(props, propName, componentName) {
        if (!propTypes) {
          return;
        }

        for (var key in ViewStylePropTypes) {
          if (!propTypes[key] && props[key] !== undefined) {
            console.warn('You are setting the style `{ ' + key + ': ... }` as a prop. You ' + 'should nest it in a style object. ' + 'E.g. `{ style: { ' + key + ': ... } }`');
          }
        }
      }
    };
    return AnimatedComponent;
  }

  module.exports = createAnimatedComponent;
},379,[113,179,354,367,133,142],"createAnimatedComponent");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Image\\Image.android.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var ImageResizeMode = _require2(_dependencyMap[0], 'ImageResizeMode');

  var ImageStylePropTypes = _require2(_dependencyMap[1], 'ImageStylePropTypes');

  var NativeMethodsMixin = _require2(_dependencyMap[2], 'NativeMethodsMixin');

  var NativeModules = _require2(_dependencyMap[3], 'NativeModules');

  var React = _require2(_dependencyMap[4], 'React');

  var PropTypes = _require2(_dependencyMap[5], 'prop-types');

  var ReactNativeViewAttributes = _require2(_dependencyMap[6], 'ReactNativeViewAttributes');

  var StyleSheet = _require2(_dependencyMap[7], 'StyleSheet');

  var StyleSheetPropType = _require2(_dependencyMap[8], 'StyleSheetPropType');

  var ViewPropTypes = _require2(_dependencyMap[9], 'ViewPropTypes');

  var createReactClass = _require2(_dependencyMap[10], 'create-react-class');

  var flattenStyle = _require2(_dependencyMap[11], 'flattenStyle');

  var merge = _require2(_dependencyMap[12], 'merge');

  var requireNativeComponent = _require2(_dependencyMap[13], 'requireNativeComponent');

  var resolveAssetSource = _require2(_dependencyMap[14], 'resolveAssetSource');

  var _require = _require2(_dependencyMap[15], 'ViewContext'),
      ViewContextTypes = _require.ViewContextTypes;

  var ImageLoader = NativeModules.ImageLoader;
  var _requestId = 1;

  function generateRequestId() {
    return _requestId++;
  }

  var Image = createReactClass({
    displayName: 'Image',
    propTypes: _extends({}, ViewPropTypes, {
      style: StyleSheetPropType(ImageStylePropTypes),
      source: PropTypes.oneOfType([PropTypes.shape({
        uri: PropTypes.string,
        headers: PropTypes.objectOf(PropTypes.string)
      }), PropTypes.number, PropTypes.arrayOf(PropTypes.shape({
        uri: PropTypes.string,
        width: PropTypes.number,
        height: PropTypes.number,
        headers: PropTypes.objectOf(PropTypes.string)
      }))]),
      blurRadius: PropTypes.number,
      loadingIndicatorSource: PropTypes.oneOfType([PropTypes.shape({
        uri: PropTypes.string
      }), PropTypes.number]),
      progressiveRenderingEnabled: PropTypes.bool,
      fadeDuration: PropTypes.number,
      onLoadStart: PropTypes.func,
      onError: PropTypes.func,
      onLoad: PropTypes.func,
      onLoadEnd: PropTypes.func,
      testID: PropTypes.string,
      resizeMethod: PropTypes.oneOf(['auto', 'resize', 'scale']),
      resizeMode: PropTypes.oneOf(['cover', 'contain', 'stretch', 'center'])
    }),
    statics: {
      resizeMode: ImageResizeMode,
      getSize: function getSize(url, success, failure) {
        return ImageLoader.getSize(url).then(function (sizes) {
          success(sizes.width, sizes.height);
        }).catch(failure || function () {
          console.warn('Failed to get size for image: ' + url);
        });
      },
      prefetch: function prefetch(url, callback) {
        var requestId = generateRequestId();
        callback && callback(requestId);
        return ImageLoader.prefetchImage(url, requestId);
      },
      abortPrefetch: function abortPrefetch(requestId) {
        ImageLoader.abortRequest(requestId);
      },
      queryCache: function queryCache(urls) {
        return regeneratorRuntime.async(function queryCache$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return regeneratorRuntime.awrap(ImageLoader.queryCache(urls));

              case 2:
                return _context.abrupt("return", _context.sent);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      },
      resolveAssetSource: resolveAssetSource
    },
    mixins: [NativeMethodsMixin],
    viewConfig: {
      uiViewClassName: 'RCTView',
      validAttributes: ReactNativeViewAttributes.RCTView
    },
    contextTypes: ViewContextTypes,
    render: function render() {
      var source = resolveAssetSource(this.props.source);
      var loadingIndicatorSource = resolveAssetSource(this.props.loadingIndicatorSource);

      if (source && source.uri === '') {
        console.warn('source.uri should not be an empty string');
      }

      if (this.props.src) {
        console.warn('The <Image> component requires a `source` property rather than `src`.');
      }

      if (this.props.children) {
        throw new Error('The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');
      }

      if (source && (source.uri || Array.isArray(source))) {
        var style = void 0;
        var sources = void 0;

        if (source.uri) {
          var _width = source.width,
              _height = source.height;
          style = flattenStyle([{
            width: _width,
            height: _height
          }, styles.base, this.props.style]);
          sources = [{
            uri: source.uri
          }];
        } else {
          style = flattenStyle([styles.base, this.props.style]);
          sources = source;
        }

        var _props = this.props,
            onLoadStart = _props.onLoadStart,
            onLoad = _props.onLoad,
            onLoadEnd = _props.onLoadEnd,
            onError = _props.onError;
        var nativeProps = merge(this.props, {
          style: style,
          shouldNotifyLoadEvents: !!(onLoadStart || onLoad || onLoadEnd || onError),
          src: sources,
          headers: source.headers,
          loadingIndicatorSrc: loadingIndicatorSource ? loadingIndicatorSource.uri : null
        });

        if (this.context.isInAParentText) {
          return React.createElement(RCTTextInlineImage, _extends({}, nativeProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 254
            }
          }));
        } else {
          return React.createElement(RKImage, _extends({}, nativeProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 256
            }
          }));
        }
      }

      return null;
    }
  });
  var styles = StyleSheet.create({
    base: {
      overflow: 'hidden'
    }
  });
  var cfg = {
    nativeOnly: {
      src: true,
      headers: true,
      loadingIndicatorSrc: true,
      shouldNotifyLoadEvents: true
    }
  };
  var RKImage = requireNativeComponent('RCTImageView', Image, cfg);
  var RCTTextInlineImage = requireNativeComponent('RCTTextInlineImage', Image, cfg);
  module.exports = Image;
},380,[152,151,128,15,133,130,174,171,141,134,176,104,137,148,163,175],"Image");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Components\\ScrollView\\ScrollView.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var Animated = _require(_dependencyMap[0], 'Animated');

  var ColorPropType = _require(_dependencyMap[1], 'ColorPropType');

  var EdgeInsetsPropType = _require(_dependencyMap[2], 'EdgeInsetsPropType');

  var Platform = _require(_dependencyMap[3], 'Platform');

  var PointPropType = _require(_dependencyMap[4], 'PointPropType');

  var PropTypes = _require(_dependencyMap[5], 'prop-types');

  var React = _require(_dependencyMap[6], 'React');

  var ReactNative = _require(_dependencyMap[7], 'ReactNative');

  var ScrollResponder = _require(_dependencyMap[8], 'ScrollResponder');

  var ScrollViewStickyHeader = _require(_dependencyMap[9], 'ScrollViewStickyHeader');

  var StyleSheet = _require(_dependencyMap[10], 'StyleSheet');

  var StyleSheetPropType = _require(_dependencyMap[11], 'StyleSheetPropType');

  var View = _require(_dependencyMap[12], 'View');

  var ViewPropTypes = _require(_dependencyMap[13], 'ViewPropTypes');

  var ViewStylePropTypes = _require(_dependencyMap[14], 'ViewStylePropTypes');

  var createReactClass = _require(_dependencyMap[15], 'create-react-class');

  var dismissKeyboard = _require(_dependencyMap[16], 'dismissKeyboard');

  var flattenStyle = _require(_dependencyMap[17], 'flattenStyle');

  var invariant = _require(_dependencyMap[18], 'fbjs/lib/invariant');

  var processDecelerationRate = _require(_dependencyMap[19], 'processDecelerationRate');

  var requireNativeComponent = _require(_dependencyMap[20], 'requireNativeComponent');

  var warning = _require(_dependencyMap[21], 'fbjs/lib/warning');

  var resolveAssetSource = _require(_dependencyMap[22], 'resolveAssetSource');

  var ScrollView = createReactClass({
    displayName: 'ScrollView',
    propTypes: _extends({}, ViewPropTypes, {
      automaticallyAdjustContentInsets: PropTypes.bool,
      contentInset: EdgeInsetsPropType,
      contentOffset: PointPropType,
      bounces: PropTypes.bool,
      bouncesZoom: PropTypes.bool,
      alwaysBounceHorizontal: PropTypes.bool,
      alwaysBounceVertical: PropTypes.bool,
      centerContent: PropTypes.bool,
      contentContainerStyle: StyleSheetPropType(ViewStylePropTypes),
      decelerationRate: PropTypes.oneOfType([PropTypes.oneOf(['fast', 'normal']), PropTypes.number]),
      horizontal: PropTypes.bool,
      indicatorStyle: PropTypes.oneOf(['default', 'black', 'white']),
      invertStickyHeaders: PropTypes.bool,
      directionalLockEnabled: PropTypes.bool,
      canCancelContentTouches: PropTypes.bool,
      keyboardDismissMode: PropTypes.oneOf(['none', 'on-drag', 'interactive']),
      keyboardShouldPersistTaps: PropTypes.oneOf(['always', 'never', 'handled', false, true]),
      maintainVisibleContentPosition: PropTypes.shape({
        minIndexForVisible: PropTypes.number.isRequired,
        autoscrollToTopThreshold: PropTypes.number
      }),
      maximumZoomScale: PropTypes.number,
      minimumZoomScale: PropTypes.number,
      onMomentumScrollBegin: PropTypes.func,
      onMomentumScrollEnd: PropTypes.func,
      onScroll: PropTypes.func,
      onScrollBeginDrag: PropTypes.func,
      onScrollEndDrag: PropTypes.func,
      onContentSizeChange: PropTypes.func,
      pagingEnabled: PropTypes.bool,
      pinchGestureEnabled: PropTypes.bool,
      scrollEnabled: PropTypes.bool,
      scrollEventThrottle: PropTypes.number,
      scrollIndicatorInsets: EdgeInsetsPropType,
      scrollsToTop: PropTypes.bool,
      showsHorizontalScrollIndicator: PropTypes.bool,
      showsVerticalScrollIndicator: PropTypes.bool,
      stickyHeaderIndices: PropTypes.arrayOf(PropTypes.number),
      snapToInterval: PropTypes.number,
      snapToAlignment: PropTypes.oneOf(['start', 'center', 'end']),
      removeClippedSubviews: PropTypes.bool,
      zoomScale: PropTypes.number,
      contentInsetAdjustmentBehavior: PropTypes.oneOf(['automatic', 'scrollableAxes', 'never', 'always']),
      refreshControl: PropTypes.element,
      endFillColor: ColorPropType,
      scrollPerfTag: PropTypes.string,
      overScrollMode: PropTypes.oneOf(['auto', 'always', 'never']),
      DEPRECATED_sendUpdatedChildFrames: PropTypes.bool,
      scrollBarThumbImage: PropTypes.oneOfType([PropTypes.shape({
        uri: PropTypes.string
      }), PropTypes.number])
    }),
    mixins: [ScrollResponder.Mixin],
    _scrollAnimatedValue: new Animated.Value(0),
    _scrollAnimatedValueAttachment: null,
    _stickyHeaderRefs: new Map(),
    _headerLayoutYs: new Map(),
    getInitialState: function getInitialState() {
      return _extends({}, this.scrollResponderMixinGetInitialState(), {
        layoutHeight: null
      });
    },
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      this._scrollAnimatedValue = new Animated.Value(this.props.contentOffset ? this.props.contentOffset.y : 0);

      this._scrollAnimatedValue.setOffset(this.props.contentInset ? this.props.contentInset.top : 0);

      this._stickyHeaderRefs = new Map();
      this._headerLayoutYs = new Map();
    },
    componentDidMount: function componentDidMount() {
      this._updateAnimatedNodeAttachment();
    },
    componentDidUpdate: function componentDidUpdate() {
      this._updateAnimatedNodeAttachment();
    },
    componentWillUnmount: function componentWillUnmount() {
      if (this._scrollAnimatedValueAttachment) {
        this._scrollAnimatedValueAttachment.detach();
      }
    },
    setNativeProps: function setNativeProps(props) {
      this._scrollViewRef && this._scrollViewRef.setNativeProps(props);
    },
    getScrollResponder: function getScrollResponder() {
      return this;
    },
    getScrollableNode: function getScrollableNode() {
      return ReactNative.findNodeHandle(this._scrollViewRef);
    },
    getInnerViewNode: function getInnerViewNode() {
      return ReactNative.findNodeHandle(this._innerViewRef);
    },
    scrollTo: function scrollTo(y, x, animated) {
      if (typeof y === 'number') {
        console.warn('`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' + 'animated: true})` instead.');
      } else {
        var _ref = y || {};

        x = _ref.x;
        y = _ref.y;
        animated = _ref.animated;
      }

      this.getScrollResponder().scrollResponderScrollTo({
        x: x || 0,
        y: y || 0,
        animated: animated !== false
      });
    },
    scrollToEnd: function scrollToEnd(options) {
      var animated = (options && options.animated) !== false;
      this.getScrollResponder().scrollResponderScrollToEnd({
        animated: animated
      });
    },
    scrollWithoutAnimationTo: function scrollWithoutAnimationTo() {
      var y = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      console.warn('`scrollWithoutAnimationTo` is deprecated. Use `scrollTo` instead');
      this.scrollTo({
        x: x,
        y: y,
        animated: false
      });
    },
    flashScrollIndicators: function flashScrollIndicators() {
      this.getScrollResponder().scrollResponderFlashScrollIndicators();
    },
    _getKeyForIndex: function _getKeyForIndex(index, childArray) {
      var child = childArray[index];
      return child && child.key;
    },
    _updateAnimatedNodeAttachment: function _updateAnimatedNodeAttachment() {
      if (this._scrollAnimatedValueAttachment) {
        this._scrollAnimatedValueAttachment.detach();
      }

      if (this.props.stickyHeaderIndices && this.props.stickyHeaderIndices.length > 0) {
        this._scrollAnimatedValueAttachment = Animated.attachNativeEvent(this._scrollViewRef, 'onScroll', [{
          nativeEvent: {
            contentOffset: {
              y: this._scrollAnimatedValue
            }
          }
        }]);
      }
    },
    _setStickyHeaderRef: function _setStickyHeaderRef(key, ref) {
      if (ref) {
        this._stickyHeaderRefs.set(key, ref);
      } else {
        this._stickyHeaderRefs.delete(key);
      }
    },
    _onStickyHeaderLayout: function _onStickyHeaderLayout(index, event, key) {
      if (!this.props.stickyHeaderIndices) {
        return;
      }

      var childArray = React.Children.toArray(this.props.children);

      if (key !== this._getKeyForIndex(index, childArray)) {
        return;
      }

      var layoutY = event.nativeEvent.layout.y;

      this._headerLayoutYs.set(key, layoutY);

      var indexOfIndex = this.props.stickyHeaderIndices.indexOf(index);
      var previousHeaderIndex = this.props.stickyHeaderIndices[indexOfIndex - 1];

      if (previousHeaderIndex != null) {
        var previousHeader = this._stickyHeaderRefs.get(this._getKeyForIndex(previousHeaderIndex, childArray));

        previousHeader && previousHeader.setNextHeaderY(layoutY);
      }
    },
    _handleScroll: function _handleScroll(e) {
      if (__DEV__) {
        if (this.props.onScroll && this.props.scrollEventThrottle == null && Platform.OS === 'ios') {
          console.log('You specified `onScroll` on a <ScrollView> but not ' + '`scrollEventThrottle`. You will only receive one event. ' + 'Using `16` you get all the events but be aware that it may ' + 'cause frame drops, use a bigger number if you don\'t need as ' + 'much precision.');
        }
      }

      if (Platform.OS === 'android') {
        if (this.props.keyboardDismissMode === 'on-drag') {
          dismissKeyboard();
        }
      }

      this.scrollResponderHandleScroll(e);
    },
    _handleLayout: function _handleLayout(e) {
      if (this.props.invertStickyHeaders) {
        this.setState({
          layoutHeight: e.nativeEvent.layout.height
        });
      }

      if (this.props.onLayout) {
        this.props.onLayout(e);
      }
    },
    _handleContentOnLayout: function _handleContentOnLayout(e) {
      var _e$nativeEvent$layout = e.nativeEvent.layout,
          width = _e$nativeEvent$layout.width,
          height = _e$nativeEvent$layout.height;
      this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);
    },
    _scrollViewRef: null,
    _setScrollViewRef: function _setScrollViewRef(ref) {
      this._scrollViewRef = ref;
    },
    _innerViewRef: null,
    _setInnerViewRef: function _setInnerViewRef(ref) {
      this._innerViewRef = ref;
    },
    render: function render() {
      var _this = this;

      var ScrollViewClass = void 0;
      var ScrollContentContainerViewClass = void 0;

      if (Platform.OS === 'android') {
        if (this.props.horizontal) {
          ScrollViewClass = AndroidHorizontalScrollView;
          ScrollContentContainerViewClass = AndroidHorizontalScrollContentView;
        } else {
          ScrollViewClass = AndroidScrollView;
          ScrollContentContainerViewClass = View;
        }
      } else {
        ScrollViewClass = RCTScrollView;
        ScrollContentContainerViewClass = RCTScrollContentView;
        warning(!this.props.snapToInterval || !this.props.pagingEnabled, 'snapToInterval is currently ignored when pagingEnabled is true.');
      }

      invariant(ScrollViewClass !== undefined, 'ScrollViewClass must not be undefined');
      invariant(ScrollContentContainerViewClass !== undefined, 'ScrollContentContainerViewClass must not be undefined');
      var contentContainerStyle = [this.props.horizontal && styles.contentContainerHorizontal, this.props.contentContainerStyle];
      var style = void 0,
          childLayoutProps = void 0;

      if (__DEV__ && this.props.style) {
        style = flattenStyle(this.props.style);
        childLayoutProps = ['alignItems', 'justifyContent'].filter(function (prop) {
          return style && style[prop] !== undefined;
        });
        invariant(childLayoutProps.length === 0, 'ScrollView child layout (' + JSON.stringify(childLayoutProps) + ') must be applied through the contentContainerStyle prop.');
      }

      var contentSizeChangeProps = {};

      if (this.props.onContentSizeChange) {
        contentSizeChangeProps = {
          onLayout: this._handleContentOnLayout
        };
      }

      var stickyHeaderIndices = this.props.stickyHeaderIndices;
      var hasStickyHeaders = stickyHeaderIndices && stickyHeaderIndices.length > 0;
      var childArray = hasStickyHeaders && React.Children.toArray(this.props.children);
      var children = hasStickyHeaders ? childArray.map(function (child, index) {
        var indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;

        if (indexOfIndex > -1) {
          var key = child.key;
          var nextIndex = stickyHeaderIndices[indexOfIndex + 1];
          return React.createElement(
            ScrollViewStickyHeader,
            {
              key: key,
              ref: function ref(_ref2) {
                return _this._setStickyHeaderRef(key, _ref2);
              },
              nextHeaderLayoutY: _this._headerLayoutYs.get(_this._getKeyForIndex(nextIndex, childArray)),
              onLayout: function onLayout(event) {
                return _this._onStickyHeaderLayout(index, event, key);
              },
              scrollAnimatedValue: _this._scrollAnimatedValue,
              inverted: _this.props.invertStickyHeaders,
              scrollViewHeight: _this.state.layoutHeight,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 774
              }
            },
            child
          );
        } else {
          return child;
        }
      }) : this.props.children;
      var contentContainer = React.createElement(
        ScrollContentContainerViewClass,
        _extends({}, contentSizeChangeProps, {
          ref: this._setInnerViewRef,
          style: contentContainerStyle,
          removeClippedSubviews: Platform.OS === 'android' && hasStickyHeaders ? false : this.props.removeClippedSubviews,
          collapsable: false,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 793
          }
        }),
        children
      );
      var alwaysBounceHorizontal = this.props.alwaysBounceHorizontal !== undefined ? this.props.alwaysBounceHorizontal : this.props.horizontal;
      var alwaysBounceVertical = this.props.alwaysBounceVertical !== undefined ? this.props.alwaysBounceVertical : !this.props.horizontal;
      var DEPRECATED_sendUpdatedChildFrames = !!this.props.DEPRECATED_sendUpdatedChildFrames;
      var baseStyle = this.props.horizontal ? styles.baseHorizontal : styles.baseVertical;

      var props = _extends({}, this.props, {
        alwaysBounceHorizontal: alwaysBounceHorizontal,
        alwaysBounceVertical: alwaysBounceVertical,
        style: [baseStyle, this.props.style],
        onContentSizeChange: null,
        onLayout: this._handleLayout,
        onMomentumScrollBegin: this.scrollResponderHandleMomentumScrollBegin,
        onMomentumScrollEnd: this.scrollResponderHandleMomentumScrollEnd,
        onResponderGrant: this.scrollResponderHandleResponderGrant,
        onResponderReject: this.scrollResponderHandleResponderReject,
        onResponderRelease: this.scrollResponderHandleResponderRelease,
        onResponderTerminate: this.scrollResponderHandleTerminate,
        onResponderTerminationRequest: this.scrollResponderHandleTerminationRequest,
        onScroll: this._handleScroll,
        onScrollBeginDrag: this.scrollResponderHandleScrollBeginDrag,
        onScrollEndDrag: this.scrollResponderHandleScrollEndDrag,
        onScrollShouldSetResponder: this.scrollResponderHandleScrollShouldSetResponder,
        onStartShouldSetResponder: this.scrollResponderHandleStartShouldSetResponder,
        onStartShouldSetResponderCapture: this.scrollResponderHandleStartShouldSetResponderCapture,
        onTouchEnd: this.scrollResponderHandleTouchEnd,
        onTouchMove: this.scrollResponderHandleTouchMove,
        onTouchStart: this.scrollResponderHandleTouchStart,
        onTouchCancel: this.scrollResponderHandleTouchCancel,
        scrollBarThumbImage: resolveAssetSource(this.props.scrollBarThumbImage),
        scrollEventThrottle: hasStickyHeaders ? 1 : this.props.scrollEventThrottle,
        sendMomentumEvents: this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd ? true : false,
        DEPRECATED_sendUpdatedChildFrames: DEPRECATED_sendUpdatedChildFrames
      });

      var decelerationRate = this.props.decelerationRate;

      if (decelerationRate) {
        props.decelerationRate = processDecelerationRate(decelerationRate);
      }

      var refreshControl = this.props.refreshControl;

      if (refreshControl) {
        if (Platform.OS === 'ios') {
          return React.createElement(
            ScrollViewClass,
            _extends({}, props, {
              ref: this._setScrollViewRef,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 867
              }
            }),
            Platform.isTVOS ? null : refreshControl,
            contentContainer
          );
        } else if (Platform.OS === 'android') {
          return React.cloneElement(refreshControl, {
            style: props.style
          }, React.createElement(
            ScrollViewClass,
            _extends({}, props, {
              style: baseStyle,
              ref: this._setScrollViewRef,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 882
              }
            }),
            contentContainer
          ));
        }
      }

      return React.createElement(
        ScrollViewClass,
        _extends({}, props, {
          ref: this._setScrollViewRef,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 889
          }
        }),
        contentContainer
      );
    }
  });
  var styles = StyleSheet.create({
    baseVertical: {
      flexGrow: 1,
      flexShrink: 1,
      flexDirection: 'column',
      overflow: 'scroll'
    },
    baseHorizontal: {
      flexGrow: 1,
      flexShrink: 1,
      flexDirection: 'row',
      overflow: 'scroll'
    },
    contentContainerHorizontal: {
      flexDirection: 'row'
    }
  });
  var nativeOnlyProps = void 0,
      AndroidScrollView = void 0,
      AndroidHorizontalScrollContentView = void 0,
      AndroidHorizontalScrollView = void 0,
      RCTScrollView = void 0,
      RCTScrollContentView = void 0;

  if (Platform.OS === 'android') {
    nativeOnlyProps = {
      nativeOnly: {
        sendMomentumEvents: true
      }
    };
    AndroidScrollView = requireNativeComponent('RCTScrollView', ScrollView, nativeOnlyProps);
    AndroidHorizontalScrollView = requireNativeComponent('AndroidHorizontalScrollView', ScrollView, nativeOnlyProps);
    AndroidHorizontalScrollContentView = requireNativeComponent('AndroidHorizontalScrollContentView');
  } else if (Platform.OS === 'ios') {
    nativeOnlyProps = {
      nativeOnly: {
        onMomentumScrollBegin: true,
        onMomentumScrollEnd: true,
        onScrollBeginDrag: true,
        onScrollEndDrag: true
      }
    };
    RCTScrollView = requireNativeComponent('RCTScrollView', ScrollView, nativeOnlyProps);
    RCTScrollContentView = requireNativeComponent('RCTScrollContentView', View);
  } else {
    nativeOnlyProps = {
      nativeOnly: {}
    };
    RCTScrollView = requireNativeComponent('RCTScrollView', null, nativeOnlyProps);
    RCTScrollContentView = requireNativeComponent('RCTScrollContentView', View);
  }

  module.exports = ScrollView;
},381,[352,126,135,52,382,130,133,21,383,391,171,141,173,134,142,176,387,104,13,392,148,56,163],"ScrollView");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = _require(_dependencyMap[0], 'prop-types');

  var createStrictShapeTypeChecker = _require(_dependencyMap[1], 'createStrictShapeTypeChecker');

  var PointPropType = createStrictShapeTypeChecker({
    x: PropTypes.number,
    y: PropTypes.number
  });
  module.exports = PointPropType;
},382,[130,136],"PointPropType");
__d(function (global, _require3, module, exports, _dependencyMap) {
  'use strict';

  var Dimensions = _require3(_dependencyMap[0], 'Dimensions');

  var FrameRateLogger = _require3(_dependencyMap[1], 'FrameRateLogger');

  var Keyboard = _require3(_dependencyMap[2], 'Keyboard');

  var ReactNative = _require3(_dependencyMap[3], 'ReactNative');

  var Subscribable = _require3(_dependencyMap[4], 'Subscribable');

  var TextInputState = _require3(_dependencyMap[5], 'TextInputState');

  var UIManager = _require3(_dependencyMap[6], 'UIManager');

  var invariant = _require3(_dependencyMap[7], 'fbjs/lib/invariant');

  var nullthrows = _require3(_dependencyMap[8], 'fbjs/lib/nullthrows');

  var performanceNow = _require3(_dependencyMap[9], 'fbjs/lib/performanceNow');

  var warning = _require3(_dependencyMap[10], 'fbjs/lib/warning');

  var _require = _require3(_dependencyMap[11], 'NativeModules'),
      ScrollViewManager = _require.ScrollViewManager;

  var _require2 = _require3(_dependencyMap[12], 'ReactNativeComponentTree'),
      getInstanceFromNode = _require2.getInstanceFromNode;

  var IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;

  function isTagInstanceOfTextInput(tag) {
    var instance = getInstanceFromNode(tag);
    return instance && instance.viewConfig && (instance.viewConfig.uiViewClassName === 'AndroidTextInput' || instance.viewConfig.uiViewClassName === 'RCTMultilineTextInputView' || instance.viewConfig.uiViewClassName === 'RCTSinglelineTextInputView');
  }

  var ScrollResponderMixin = {
    mixins: [Subscribable.Mixin],
    scrollResponderMixinGetInitialState: function scrollResponderMixinGetInitialState() {
      return {
        isTouching: false,
        lastMomentumScrollBeginTime: 0,
        lastMomentumScrollEndTime: 0,
        observedScrollSinceBecomingResponder: false,
        becameResponderWhileAnimating: false
      };
    },
    scrollResponderHandleScrollShouldSetResponder: function scrollResponderHandleScrollShouldSetResponder() {
      return this.state.isTouching;
    },
    scrollResponderHandleStartShouldSetResponder: function scrollResponderHandleStartShouldSetResponder(e) {
      var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();

      if (this.props.keyboardShouldPersistTaps === 'handled' && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput) {
        return true;
      }

      return false;
    },
    scrollResponderHandleStartShouldSetResponderCapture: function scrollResponderHandleStartShouldSetResponderCapture(e) {
      var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();
      var keyboardShouldPersistTaps = this.props.keyboardShouldPersistTaps;
      var keyboardNeverPersistTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';

      if (keyboardNeverPersistTaps && currentlyFocusedTextInput != null && !isTagInstanceOfTextInput(e.target)) {
        return true;
      }

      return this.scrollResponderIsAnimating();
    },
    scrollResponderHandleResponderReject: function scrollResponderHandleResponderReject() {},
    scrollResponderHandleTerminationRequest: function scrollResponderHandleTerminationRequest() {
      return !this.state.observedScrollSinceBecomingResponder;
    },
    scrollResponderHandleTouchEnd: function scrollResponderHandleTouchEnd(e) {
      var nativeEvent = e.nativeEvent;
      this.state.isTouching = nativeEvent.touches.length !== 0;
      this.props.onTouchEnd && this.props.onTouchEnd(e);
    },
    scrollResponderHandleTouchCancel: function scrollResponderHandleTouchCancel(e) {
      this.state.isTouching = false;
      this.props.onTouchCancel && this.props.onTouchCancel(e);
    },
    scrollResponderHandleResponderRelease: function scrollResponderHandleResponderRelease(e) {
      this.props.onResponderRelease && this.props.onResponderRelease(e);
      var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();

      if (this.props.keyboardShouldPersistTaps !== true && this.props.keyboardShouldPersistTaps !== 'always' && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && !this.state.observedScrollSinceBecomingResponder && !this.state.becameResponderWhileAnimating) {
        this.props.onScrollResponderKeyboardDismissed && this.props.onScrollResponderKeyboardDismissed(e);
        TextInputState.blurTextInput(currentlyFocusedTextInput);
      }
    },
    scrollResponderHandleScroll: function scrollResponderHandleScroll(e) {
      this.state.observedScrollSinceBecomingResponder = true;
      this.props.onScroll && this.props.onScroll(e);
    },
    scrollResponderHandleResponderGrant: function scrollResponderHandleResponderGrant(e) {
      this.state.observedScrollSinceBecomingResponder = false;
      this.props.onResponderGrant && this.props.onResponderGrant(e);
      this.state.becameResponderWhileAnimating = this.scrollResponderIsAnimating();
    },
    scrollResponderHandleScrollBeginDrag: function scrollResponderHandleScrollBeginDrag(e) {
      FrameRateLogger.beginScroll();
      this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);
    },
    scrollResponderHandleScrollEndDrag: function scrollResponderHandleScrollEndDrag(e) {
      var velocity = e.nativeEvent.velocity;

      if (!this.scrollResponderIsAnimating() && (!velocity || velocity.x === 0 && velocity.y === 0)) {
        FrameRateLogger.endScroll();
      }

      this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);
    },
    scrollResponderHandleMomentumScrollBegin: function scrollResponderHandleMomentumScrollBegin(e) {
      this.state.lastMomentumScrollBeginTime = performanceNow();
      this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);
    },
    scrollResponderHandleMomentumScrollEnd: function scrollResponderHandleMomentumScrollEnd(e) {
      FrameRateLogger.endScroll();
      this.state.lastMomentumScrollEndTime = performanceNow();
      this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);
    },
    scrollResponderHandleTouchStart: function scrollResponderHandleTouchStart(e) {
      this.state.isTouching = true;
      this.props.onTouchStart && this.props.onTouchStart(e);
    },
    scrollResponderHandleTouchMove: function scrollResponderHandleTouchMove(e) {
      this.props.onTouchMove && this.props.onTouchMove(e);
    },
    scrollResponderIsAnimating: function scrollResponderIsAnimating() {
      var now = performanceNow();
      var timeSinceLastMomentumScrollEnd = now - this.state.lastMomentumScrollEndTime;
      var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || this.state.lastMomentumScrollEndTime < this.state.lastMomentumScrollBeginTime;
      return isAnimating;
    },
    scrollResponderGetScrollableNode: function scrollResponderGetScrollableNode() {
      return this.getScrollableNode ? this.getScrollableNode() : ReactNative.findNodeHandle(this);
    },
    scrollResponderScrollTo: function scrollResponderScrollTo(x, y, animated) {
      if (typeof x === 'number') {
        console.warn('`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.');
      } else {
        var _ref = x || {};

        x = _ref.x;
        y = _ref.y;
        animated = _ref.animated;
      }

      UIManager.dispatchViewManagerCommand(nullthrows(this.scrollResponderGetScrollableNode()), UIManager.RCTScrollView.Commands.scrollTo, [x || 0, y || 0, animated !== false]);
    },
    scrollResponderScrollToEnd: function scrollResponderScrollToEnd(options) {
      var animated = (options && options.animated) !== false;
      UIManager.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(), UIManager.RCTScrollView.Commands.scrollToEnd, [animated]);
    },
    scrollResponderScrollWithoutAnimationTo: function scrollResponderScrollWithoutAnimationTo(offsetX, offsetY) {
      console.warn('`scrollResponderScrollWithoutAnimationTo` is deprecated. Use `scrollResponderScrollTo` instead');
      this.scrollResponderScrollTo({
        x: offsetX,
        y: offsetY,
        animated: false
      });
    },
    scrollResponderZoomTo: function scrollResponderZoomTo(rect, animated) {
      invariant(ScrollViewManager && ScrollViewManager.zoomToRect, 'zoomToRect is not implemented');

      if ('animated' in rect) {
        animated = rect.animated;
        delete rect.animated;
      } else if (typeof animated !== 'undefined') {
        console.warn('`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead');
      }

      ScrollViewManager.zoomToRect(this.scrollResponderGetScrollableNode(), rect, animated !== false);
    },
    scrollResponderFlashScrollIndicators: function scrollResponderFlashScrollIndicators() {
      UIManager.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(), UIManager.RCTScrollView.Commands.flashScrollIndicators, []);
    },
    scrollResponderScrollNativeHandleToKeyboard: function scrollResponderScrollNativeHandleToKeyboard(nodeHandle, additionalOffset, preventNegativeScrollOffset) {
      this.additionalScrollOffset = additionalOffset || 0;
      this.preventNegativeScrollOffset = !!preventNegativeScrollOffset;
      UIManager.measureLayout(nodeHandle, ReactNative.findNodeHandle(this.getInnerViewNode()), this.scrollResponderTextInputFocusError, this.scrollResponderInputMeasureAndScrollToKeyboard);
    },
    scrollResponderInputMeasureAndScrollToKeyboard: function scrollResponderInputMeasureAndScrollToKeyboard(left, top, width, height) {
      var keyboardScreenY = Dimensions.get('window').height;

      if (this.keyboardWillOpenTo) {
        keyboardScreenY = this.keyboardWillOpenTo.endCoordinates.screenY;
      }

      var scrollOffsetY = top - keyboardScreenY + height + this.additionalScrollOffset;

      if (this.preventNegativeScrollOffset) {
        scrollOffsetY = Math.max(0, scrollOffsetY);
      }

      this.scrollResponderScrollTo({
        x: 0,
        y: scrollOffsetY,
        animated: true
      });
      this.additionalOffset = 0;
      this.preventNegativeScrollOffset = false;
    },
    scrollResponderTextInputFocusError: function scrollResponderTextInputFocusError(e) {
      console.error('Error measuring text field: ', e);
    },
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      var keyboardShouldPersistTaps = this.props.keyboardShouldPersistTaps;
      warning(typeof keyboardShouldPersistTaps !== 'boolean', "'keyboardShouldPersistTaps={" + keyboardShouldPersistTaps + "}' is deprecated. " + ("Use 'keyboardShouldPersistTaps=\"" + (keyboardShouldPersistTaps ? 'always' : 'never') + "\"' instead"));
      this.keyboardWillOpenTo = null;
      this.additionalScrollOffset = 0;
      this.addListenerOn(Keyboard, 'keyboardWillShow', this.scrollResponderKeyboardWillShow);
      this.addListenerOn(Keyboard, 'keyboardWillHide', this.scrollResponderKeyboardWillHide);
      this.addListenerOn(Keyboard, 'keyboardDidShow', this.scrollResponderKeyboardDidShow);
      this.addListenerOn(Keyboard, 'keyboardDidHide', this.scrollResponderKeyboardDidHide);
    },
    scrollResponderKeyboardWillShow: function scrollResponderKeyboardWillShow(e) {
      this.keyboardWillOpenTo = e;
      this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);
    },
    scrollResponderKeyboardWillHide: function scrollResponderKeyboardWillHide(e) {
      this.keyboardWillOpenTo = null;
      this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);
    },
    scrollResponderKeyboardDidShow: function scrollResponderKeyboardDidShow(e) {
      if (e) {
        this.keyboardWillOpenTo = e;
      }

      this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);
    },
    scrollResponderKeyboardDidHide: function scrollResponderKeyboardDidHide(e) {
      this.keyboardWillOpenTo = null;
      this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);
    }
  };
  var ScrollResponder = {
    Mixin: ScrollResponderMixin
  };
  module.exports = ScrollResponder;
},383,[167,384,385,21,388,111,109,13,389,53,56,15,390],"ScrollResponder");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = _require(_dependencyMap[0], 'NativeModules');

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  var FrameRateLogger = {
    setGlobalOptions: function setGlobalOptions(options) {
      if (options.debug !== undefined) {
        invariant(NativeModules.FrameRateLogger, 'Trying to debug FrameRateLogger without the native module!');
      }

      NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.setGlobalOptions(options);
    },
    setContext: function setContext(context) {
      NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.setContext(context);
    },
    beginScroll: function beginScroll() {
      NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.beginScroll();
    },
    endScroll: function endScroll() {
      NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.endScroll();
    }
  };
  module.exports = FrameRateLogger;
},384,[15,13],"FrameRateLogger");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var LayoutAnimation = _require(_dependencyMap[0], 'LayoutAnimation');

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  var NativeEventEmitter = _require(_dependencyMap[2], 'NativeEventEmitter');

  var KeyboardObserver = _require(_dependencyMap[3], 'NativeModules').KeyboardObserver;

  var dismissKeyboard = _require(_dependencyMap[4], 'dismissKeyboard');

  var KeyboardEventEmitter = new NativeEventEmitter(KeyboardObserver);
  var Keyboard = {
    addListener: function addListener(eventName, callback) {
      invariant(false, 'Dummy method used for documentation');
    },
    removeListener: function removeListener(eventName, callback) {
      invariant(false, 'Dummy method used for documentation');
    },
    removeAllListeners: function removeAllListeners(eventName) {
      invariant(false, 'Dummy method used for documentation');
    },
    dismiss: function dismiss() {
      invariant(false, 'Dummy method used for documentation');
    },
    scheduleLayoutAnimation: function scheduleLayoutAnimation(event) {
      invariant(false, 'Dummy method used for documentation');
    }
  };
  Keyboard = KeyboardEventEmitter;
  Keyboard.dismiss = dismissKeyboard;

  Keyboard.scheduleLayoutAnimation = function (event) {
    var duration = event.duration,
        easing = event.easing;

    if (duration) {
      LayoutAnimation.configureNext({
        duration: duration,
        update: {
          duration: duration,
          type: easing && LayoutAnimation.Types[easing] || 'keyboard'
        }
      });
    }
  };

  module.exports = Keyboard;
},385,[386,13,69,15,387],"Keyboard");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = _require(_dependencyMap[0], 'prop-types');

  var UIManager = _require(_dependencyMap[1], 'UIManager');

  var keyMirror = _require(_dependencyMap[2], 'fbjs/lib/keyMirror');

  var checkPropTypes = PropTypes.checkPropTypes;
  var TypesEnum = {
    spring: true,
    linear: true,
    easeInEaseOut: true,
    easeIn: true,
    easeOut: true,
    keyboard: true
  };
  var Types = keyMirror(TypesEnum);
  var PropertiesEnum = {
    opacity: true,
    scaleXY: true
  };
  var Properties = keyMirror(PropertiesEnum);
  var animType = PropTypes.shape({
    duration: PropTypes.number,
    delay: PropTypes.number,
    springDamping: PropTypes.number,
    initialVelocity: PropTypes.number,
    type: PropTypes.oneOf(Object.keys(Types)).isRequired,
    property: PropTypes.oneOf(Object.keys(Properties))
  });
  var configType = PropTypes.shape({
    duration: PropTypes.number.isRequired,
    create: animType,
    update: animType,
    delete: animType
  });

  function checkConfig(config, location, name) {
    checkPropTypes({
      config: configType
    }, {
      config: config
    }, location, name);
  }

  function configureNext(config, onAnimationDidEnd) {
    if (__DEV__) {
      checkConfig(config, 'config', 'LayoutAnimation.configureNext');
    }

    UIManager.configureNextLayoutAnimation(config, onAnimationDidEnd || function () {}, function () {});
  }

  function create(duration, type, creationProp) {
    return {
      duration: duration,
      create: {
        type: type,
        property: creationProp
      },
      update: {
        type: type
      },
      delete: {
        type: type,
        property: creationProp
      }
    };
  }

  var Presets = {
    easeInEaseOut: create(300, Types.easeInEaseOut, Properties.opacity),
    linear: create(500, Types.linear, Properties.opacity),
    spring: {
      duration: 700,
      create: {
        type: Types.linear,
        property: Properties.opacity
      },
      update: {
        type: Types.spring,
        springDamping: 0.4
      },
      delete: {
        type: Types.linear,
        property: Properties.opacity
      }
    }
  };
  var LayoutAnimation = {
    configureNext: configureNext,
    create: create,
    Types: Types,
    Properties: Properties,
    checkConfig: checkConfig,
    Presets: Presets,
    easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),
    linear: configureNext.bind(null, Presets.linear),
    spring: configureNext.bind(null, Presets.spring)
  };
  module.exports = LayoutAnimation;
},386,[130,109,153],"LayoutAnimation");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var TextInputState = _require(_dependencyMap[0], 'TextInputState');

  function dismissKeyboard() {
    TextInputState.blurTextInput(TextInputState.currentlyFocusedField());
  }

  module.exports = dismissKeyboard;
},387,[111],"dismissKeyboard");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Subscribable = {};
  Subscribable.Mixin = {
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      this._subscribableSubscriptions = [];
    },
    componentWillUnmount: function componentWillUnmount() {
      this._subscribableSubscriptions.forEach(function (subscription) {
        return subscription.remove();
      });

      this._subscribableSubscriptions = null;
    },
    addListenerOn: function addListenerOn(eventEmitter, eventType, listener, context) {
      this._subscribableSubscriptions.push(eventEmitter.addListener(eventType, listener, context));
    }
  };
  module.exports = Subscribable;
},388,[],"Subscribable");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var nullthrows = function nullthrows(x) {
    if (x != null) {
      return x;
    }

    throw new Error("Got unexpected null or undefined");
  };

  module.exports = nullthrows;
},389,[],"node_modules\\fbjs\\lib\\nullthrows.js");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactNativeComponentTree;
},390,[21],"ReactNativeComponentTree");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Components\\ScrollView\\ScrollViewStickyHeader.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    ScrollViewStickyHeader: {
      displayName: "ScrollViewStickyHeader"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Components/ScrollView/ScrollViewStickyHeader.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var Animated = _require(_dependencyMap[2], 'Animated');

  var React = _require(_dependencyMap[3], 'React');

  var StyleSheet = _require(_dependencyMap[4], 'StyleSheet');

  var ScrollViewStickyHeader = _wrapComponent("ScrollViewStickyHeader")(function (_React$Component) {
    _inherits(ScrollViewStickyHeader, _React$Component);

    function ScrollViewStickyHeader() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, ScrollViewStickyHeader);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ScrollViewStickyHeader.__proto__ || Object.getPrototypeOf(ScrollViewStickyHeader)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        measured: false,
        layoutY: 0,
        layoutHeight: 0,
        nextHeaderLayoutY: _this.props.nextHeaderLayoutY
      }, _this._onLayout = function (event) {
        _this.setState({
          measured: true,
          layoutY: event.nativeEvent.layout.y,
          layoutHeight: event.nativeEvent.layout.height
        });

        _this.props.onLayout(event);

        var child = React.Children.only(_this.props.children);

        if (child.props.onLayout) {
          child.props.onLayout(event);
        }
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(ScrollViewStickyHeader, [{
      key: "setNextHeaderY",
      value: function setNextHeaderY(y) {
        this.setState({
          nextHeaderLayoutY: y
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            inverted = _props.inverted,
            scrollViewHeight = _props.scrollViewHeight;
        var _state = this.state,
            measured = _state.measured,
            layoutHeight = _state.layoutHeight,
            layoutY = _state.layoutY,
            nextHeaderLayoutY = _state.nextHeaderLayoutY;
        var inputRange = [-1, 0];
        var outputRange = [0, 0];

        if (measured) {
          if (inverted) {
            if (scrollViewHeight != null) {
              var stickStartPoint = layoutY + layoutHeight - scrollViewHeight;

              if (stickStartPoint > 0) {
                inputRange.push(stickStartPoint);
                outputRange.push(0);
                inputRange.push(stickStartPoint + 1);
                outputRange.push(1);
                var collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight - scrollViewHeight;

                if (collisionPoint > stickStartPoint) {
                  inputRange.push(collisionPoint, collisionPoint + 1);
                  outputRange.push(collisionPoint - stickStartPoint, collisionPoint - stickStartPoint);
                }
              }
            }
          } else {
            inputRange.push(layoutY);
            outputRange.push(0);

            var _collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight;

            if (_collisionPoint >= layoutY) {
              inputRange.push(_collisionPoint, _collisionPoint + 1);
              outputRange.push(_collisionPoint - layoutY, _collisionPoint - layoutY);
            } else {
              inputRange.push(layoutY + 1);
              outputRange.push(1);
            }
          }
        }

        var translateY = this.props.scrollAnimatedValue.interpolate({
          inputRange: inputRange,
          outputRange: outputRange
        });
        var child = React.Children.only(this.props.children);
        return React.createElement(
          Animated.View,
          {
            collapsable: false,
            onLayout: this._onLayout,
            style: [child.props.style, styles.header, {
              transform: [{
                translateY: translateY
              }]
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 141
            }
          },
          React.cloneElement(child, {
            style: styles.fill,
            onLayout: undefined
          })
        );
      }
    }]);

    return ScrollViewStickyHeader;
  }(React.Component));

  var styles = StyleSheet.create({
    header: {
      zIndex: 10
    },
    fill: {
      flex: 1
    }
  });
  module.exports = ScrollViewStickyHeader;
},391,[113,179,352,133,171],"ScrollViewStickyHeader");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function processDecelerationRate(decelerationRate) {
    if (decelerationRate === 'normal') {
      decelerationRate = 0.998;
    } else if (decelerationRate === 'fast') {
      decelerationRate = 0.99;
    }

    return decelerationRate;
  }

  module.exports = processDecelerationRate;
},392,[],"processDecelerationRate");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Components\\CheckBox\\CheckBox.android.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var NativeMethodsMixin = _require(_dependencyMap[0], 'NativeMethodsMixin');

  var PropTypes = _require(_dependencyMap[1], 'prop-types');

  var React = _require(_dependencyMap[2], 'React');

  var StyleSheet = _require(_dependencyMap[3], 'StyleSheet');

  var ViewPropTypes = _require(_dependencyMap[4], 'ViewPropTypes');

  var createReactClass = _require(_dependencyMap[5], 'create-react-class');

  var requireNativeComponent = _require(_dependencyMap[6], 'requireNativeComponent');

  var CheckBox = createReactClass({
    displayName: 'CheckBox',
    propTypes: _extends({}, ViewPropTypes, {
      value: PropTypes.bool,
      disabled: PropTypes.bool,
      onChange: PropTypes.func,
      onValueChange: PropTypes.func,
      testID: PropTypes.string
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        value: false,
        disabled: false
      };
    },
    mixins: [NativeMethodsMixin],
    _rctCheckBox: {},
    _onChange: function _onChange(event) {
      this._rctCheckBox.setNativeProps({
        value: this.props.value
      });

      this.props.onChange && this.props.onChange(event);
      this.props.onValueChange && this.props.onValueChange(event.nativeEvent.value);
    },
    render: function render() {
      var _this = this;

      var props = _extends({}, this.props);

      props.onStartShouldSetResponder = function () {
        return true;
      };

      props.onResponderTerminationRequest = function () {
        return false;
      };

      props.enabled = !this.props.disabled;
      props.on = this.props.value;
      props.style = [styles.rctCheckBox, this.props.style];
      return React.createElement(RCTCheckBox, _extends({}, props, {
        ref: function ref(_ref) {
          _this._rctCheckBox = _ref;
        },
        onChange: this._onChange,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 140
        }
      }));
    }
  });
  var styles = StyleSheet.create({
    rctCheckBox: {
      height: 32,
      width: 32
    }
  });
  var RCTCheckBox = requireNativeComponent('AndroidCheckBox', CheckBox, {
    nativeOnly: {
      onChange: true,
      on: true,
      enabled: true
    }
  });
  module.exports = CheckBox;
},393,[128,130,133,171,134,176,148],"CheckBox");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Components\\DatePicker\\DatePickerIOS.android.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    DummyDatePickerIOS: {
      displayName: "DummyDatePickerIOS"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Components/DatePicker/DatePickerIOS.android.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var React = _require(_dependencyMap[2], 'React');

  var StyleSheet = _require(_dependencyMap[3], 'StyleSheet');

  var Text = _require(_dependencyMap[4], 'Text');

  var View = _require(_dependencyMap[5], 'View');

  var DummyDatePickerIOS = _wrapComponent("DummyDatePickerIOS")(function (_React$Component) {
    _inherits(DummyDatePickerIOS, _React$Component);

    function DummyDatePickerIOS() {
      _classCallCheck(this, DummyDatePickerIOS);

      return _possibleConstructorReturn(this, (DummyDatePickerIOS.__proto__ || Object.getPrototypeOf(DummyDatePickerIOS)).apply(this, arguments));
    }

    _createClass(DummyDatePickerIOS, [{
      key: "render",
      value: function render() {
        return React.createElement(
          View,
          {
            style: [styles.dummyDatePickerIOS, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 22
            }
          },
          React.createElement(
            Text,
            {
              style: styles.datePickerText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 23
              }
            },
            "DatePickerIOS is not supported on this platform!"
          )
        );
      }
    }]);

    return DummyDatePickerIOS;
  }(React.Component));

  var styles = StyleSheet.create({
    dummyDatePickerIOS: {
      height: 100,
      width: 300,
      backgroundColor: '#ffbcbc',
      borderWidth: 1,
      borderColor: 'red',
      alignItems: 'center',
      justifyContent: 'center',
      margin: 10
    },
    datePickerText: {
      color: '#333333',
      margin: 20
    }
  });
  module.exports = DummyDatePickerIOS;
},394,[113,179,133,171,339,173],"DatePickerIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Components\\DrawerAndroid\\DrawerLayoutAndroid.android.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var NativeMethodsMixin = _require(_dependencyMap[1], 'NativeMethodsMixin');

  var Platform = _require(_dependencyMap[2], 'Platform');

  var React = _require(_dependencyMap[3], 'React');

  var PropTypes = _require(_dependencyMap[4], 'prop-types');

  var ReactNative = _require(_dependencyMap[5], 'ReactNative');

  var StatusBar = _require(_dependencyMap[6], 'StatusBar');

  var StyleSheet = _require(_dependencyMap[7], 'StyleSheet');

  var UIManager = _require(_dependencyMap[8], 'UIManager');

  var View = _require(_dependencyMap[9], 'View');

  var ViewPropTypes = _require(_dependencyMap[10], 'ViewPropTypes');

  var DrawerConsts = UIManager.AndroidDrawerLayout.Constants;

  var createReactClass = _require(_dependencyMap[11], 'create-react-class');

  var dismissKeyboard = _require(_dependencyMap[12], 'dismissKeyboard');

  var requireNativeComponent = _require(_dependencyMap[13], 'requireNativeComponent');

  var RK_DRAWER_REF = 'drawerlayout';
  var INNERVIEW_REF = 'innerView';
  var DRAWER_STATES = ['Idle', 'Dragging', 'Settling'];
  var DrawerLayoutAndroid = createReactClass({
    displayName: 'DrawerLayoutAndroid',
    statics: {
      positions: DrawerConsts.DrawerPosition
    },
    propTypes: _extends({}, ViewPropTypes, {
      keyboardDismissMode: PropTypes.oneOf(['none', 'on-drag']),
      drawerBackgroundColor: ColorPropType,
      drawerPosition: PropTypes.oneOf([DrawerConsts.DrawerPosition.Left, DrawerConsts.DrawerPosition.Right]),
      drawerWidth: PropTypes.number,
      drawerLockMode: PropTypes.oneOf(['unlocked', 'locked-closed', 'locked-open']),
      onDrawerSlide: PropTypes.func,
      onDrawerStateChanged: PropTypes.func,
      onDrawerOpen: PropTypes.func,
      onDrawerClose: PropTypes.func,
      renderNavigationView: PropTypes.func.isRequired,
      statusBarBackgroundColor: ColorPropType
    }),
    mixins: [NativeMethodsMixin],
    getDefaultProps: function getDefaultProps() {
      return {
        drawerBackgroundColor: 'white'
      };
    },
    getInitialState: function getInitialState() {
      return {
        statusBarBackgroundColor: undefined
      };
    },
    getInnerViewNode: function getInnerViewNode() {
      return this.refs[INNERVIEW_REF].getInnerViewNode();
    },
    render: function render() {
      var drawStatusBar = Platform.Version >= 21 && this.props.statusBarBackgroundColor;
      var drawerViewWrapper = React.createElement(
        View,
        {
          style: [styles.drawerSubview, {
            width: this.props.drawerWidth,
            backgroundColor: this.props.drawerBackgroundColor
          }],
          collapsable: false,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 176
          }
        },
        this.props.renderNavigationView(),
        drawStatusBar && React.createElement(View, {
          style: styles.drawerStatusBar,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 183
          }
        })
      );
      var childrenWrapper = React.createElement(
        View,
        {
          ref: INNERVIEW_REF,
          style: styles.mainSubview,
          collapsable: false,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 186
          }
        },
        drawStatusBar && React.createElement(StatusBar, {
          translucent: true,
          backgroundColor: this.props.statusBarBackgroundColor,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 188
          }
        }),
        drawStatusBar && React.createElement(View, {
          style: [styles.statusBar, {
            backgroundColor: this.props.statusBarBackgroundColor
          }],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 193
          }
        }),
        this.props.children
      );
      return React.createElement(
        AndroidDrawerLayout,
        _extends({}, this.props, {
          ref: RK_DRAWER_REF,
          drawerWidth: this.props.drawerWidth,
          drawerPosition: this.props.drawerPosition,
          drawerLockMode: this.props.drawerLockMode,
          style: [styles.base, this.props.style],
          onDrawerSlide: this._onDrawerSlide,
          onDrawerOpen: this._onDrawerOpen,
          onDrawerClose: this._onDrawerClose,
          onDrawerStateChanged: this._onDrawerStateChanged,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 200
          }
        }),
        childrenWrapper,
        drawerViewWrapper
      );
    },
    _onDrawerSlide: function _onDrawerSlide(event) {
      if (this.props.onDrawerSlide) {
        this.props.onDrawerSlide(event);
      }

      if (this.props.keyboardDismissMode === 'on-drag') {
        dismissKeyboard();
      }
    },
    _onDrawerOpen: function _onDrawerOpen() {
      if (this.props.onDrawerOpen) {
        this.props.onDrawerOpen();
      }
    },
    _onDrawerClose: function _onDrawerClose() {
      if (this.props.onDrawerClose) {
        this.props.onDrawerClose();
      }
    },
    _onDrawerStateChanged: function _onDrawerStateChanged(event) {
      if (this.props.onDrawerStateChanged) {
        this.props.onDrawerStateChanged(DRAWER_STATES[event.nativeEvent.drawerState]);
      }
    },
    openDrawer: function openDrawer() {
      UIManager.dispatchViewManagerCommand(this._getDrawerLayoutHandle(), UIManager.AndroidDrawerLayout.Commands.openDrawer, null);
    },
    closeDrawer: function closeDrawer() {
      UIManager.dispatchViewManagerCommand(this._getDrawerLayoutHandle(), UIManager.AndroidDrawerLayout.Commands.closeDrawer, null);
    },
    _getDrawerLayoutHandle: function _getDrawerLayoutHandle() {
      return ReactNative.findNodeHandle(this.refs[RK_DRAWER_REF]);
    }
  });
  var styles = StyleSheet.create({
    base: {
      flex: 1,
      elevation: 16
    },
    mainSubview: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    drawerSubview: {
      position: 'absolute',
      top: 0,
      bottom: 0
    },
    statusBar: {
      height: StatusBar.currentHeight
    },
    drawerStatusBar: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      height: StatusBar.currentHeight,
      backgroundColor: 'rgba(0, 0, 0, 0.251)'
    }
  });
  var AndroidDrawerLayout = requireNativeComponent('AndroidDrawerLayout', DrawerLayoutAndroid);
  module.exports = DrawerLayoutAndroid;
},395,[126,128,52,133,130,21,396,171,109,173,134,176,387,148],"DrawerLayoutAndroid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class, _temp2;

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    StatusBar: {
      displayName: "StatusBar"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Components/StatusBar/StatusBar.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var React = _require(_dependencyMap[2], 'React');

  var PropTypes = _require(_dependencyMap[3], 'prop-types');

  var ColorPropType = _require(_dependencyMap[4], 'ColorPropType');

  var Platform = _require(_dependencyMap[5], 'Platform');

  var processColor = _require(_dependencyMap[6], 'processColor');

  var StatusBarManager = _require(_dependencyMap[7], 'NativeModules').StatusBarManager;

  function mergePropsStack(propsStack, defaultValues) {
    return propsStack.reduce(function (prev, cur) {
      for (var prop in cur) {
        if (cur[prop] != null) {
          prev[prop] = cur[prop];
        }
      }

      return prev;
    }, _extends({}, defaultValues));
  }

  function createStackEntry(props) {
    return {
      backgroundColor: props.backgroundColor != null ? {
        value: props.backgroundColor,
        animated: props.animated
      } : null,
      barStyle: props.barStyle != null ? {
        value: props.barStyle,
        animated: props.animated
      } : null,
      translucent: props.translucent,
      hidden: props.hidden != null ? {
        value: props.hidden,
        animated: props.animated,
        transition: props.showHideTransition
      } : null,
      networkActivityIndicatorVisible: props.networkActivityIndicatorVisible
    };
  }

  var StatusBar = _wrapComponent("StatusBar")((_temp2 = _class = function (_React$Component) {
    _inherits(StatusBar, _React$Component);

    function StatusBar() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, StatusBar);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = StatusBar.__proto__ || Object.getPrototypeOf(StatusBar)).call.apply(_ref, [this].concat(args))), _this), _this._stackEntry = null, _this._updatePropsStack = function () {
        clearImmediate(StatusBar._updateImmediate);
        StatusBar._updateImmediate = setImmediate(function () {
          var oldProps = StatusBar._currentValues;
          var mergedProps = mergePropsStack(StatusBar._propsStack, StatusBar._defaultProps);

          if (Platform.OS === 'ios') {
            if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {
              StatusBarManager.setStyle(mergedProps.barStyle.value, mergedProps.barStyle.animated);
            }

            if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
              StatusBarManager.setHidden(mergedProps.hidden.value, mergedProps.hidden.animated ? mergedProps.hidden.transition : 'none');
            }

            if (!oldProps || oldProps.networkActivityIndicatorVisible !== mergedProps.networkActivityIndicatorVisible) {
              StatusBarManager.setNetworkActivityIndicatorVisible(mergedProps.networkActivityIndicatorVisible);
            }
          } else if (Platform.OS === 'android') {
            if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {
              StatusBarManager.setStyle(mergedProps.barStyle.value);
            }

            if (!oldProps || oldProps.backgroundColor.value !== mergedProps.backgroundColor.value) {
              StatusBarManager.setColor(processColor(mergedProps.backgroundColor.value), mergedProps.backgroundColor.animated);
            }

            if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
              StatusBarManager.setHidden(mergedProps.hidden.value);
            }

            if (!oldProps || oldProps.translucent !== mergedProps.translucent) {
              StatusBarManager.setTranslucent(mergedProps.translucent);
            }
          }

          StatusBar._currentValues = mergedProps;
        });
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(StatusBar, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._stackEntry = createStackEntry(this.props);

        StatusBar._propsStack.push(this._stackEntry);

        this._updatePropsStack();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var index = StatusBar._propsStack.indexOf(this._stackEntry);

        StatusBar._propsStack.splice(index, 1);

        this._updatePropsStack();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        var index = StatusBar._propsStack.indexOf(this._stackEntry);

        this._stackEntry = createStackEntry(this.props);
        StatusBar._propsStack[index] = this._stackEntry;

        this._updatePropsStack();
      }
    }, {
      key: "render",
      value: function render() {
        return null;
      }
    }], [{
      key: "setHidden",
      value: function setHidden(hidden, animation) {
        animation = animation || 'none';
        StatusBar._defaultProps.hidden.value = hidden;

        if (Platform.OS === 'ios') {
          StatusBarManager.setHidden(hidden, animation);
        } else if (Platform.OS === 'android') {
          StatusBarManager.setHidden(hidden);
        }
      }
    }, {
      key: "setBarStyle",
      value: function setBarStyle(style, animated) {
        animated = animated || false;
        StatusBar._defaultProps.barStyle.value = style;

        if (Platform.OS === 'ios') {
          StatusBarManager.setStyle(style, animated);
        } else if (Platform.OS === 'android') {
          StatusBarManager.setStyle(style);
        }
      }
    }, {
      key: "setNetworkActivityIndicatorVisible",
      value: function setNetworkActivityIndicatorVisible(visible) {
        if (Platform.OS !== 'ios') {
          console.warn('`setNetworkActivityIndicatorVisible` is only available on iOS');
          return;
        }

        StatusBar._defaultProps.networkActivityIndicatorVisible = visible;
        StatusBarManager.setNetworkActivityIndicatorVisible(visible);
      }
    }, {
      key: "setBackgroundColor",
      value: function setBackgroundColor(color, animated) {
        if (Platform.OS !== 'android') {
          console.warn('`setBackgroundColor` is only available on Android');
          return;
        }

        animated = animated || false;
        StatusBar._defaultProps.backgroundColor.value = color;
        StatusBarManager.setColor(processColor(color), animated);
      }
    }, {
      key: "setTranslucent",
      value: function setTranslucent(translucent) {
        if (Platform.OS !== 'android') {
          console.warn('`setTranslucent` is only available on Android');
          return;
        }

        StatusBar._defaultProps.translucent = translucent;
        StatusBarManager.setTranslucent(translucent);
      }
    }]);

    return StatusBar;
  }(React.Component), _class._propsStack = [], _class._defaultProps = createStackEntry({
    animated: false,
    showHideTransition: 'fade',
    backgroundColor: 'black',
    barStyle: 'default',
    translucent: false,
    hidden: false,
    networkActivityIndicatorVisible: false
  }), _class._updateImmediate = null, _class._currentValues = null, _class.currentHeight = StatusBarManager.HEIGHT, _class.propTypes = {
    hidden: PropTypes.bool,
    animated: PropTypes.bool,
    backgroundColor: ColorPropType,
    translucent: PropTypes.bool,
    barStyle: PropTypes.oneOf(['default', 'light-content', 'dark-content']),
    networkActivityIndicatorVisible: PropTypes.bool,
    showHideTransition: PropTypes.oneOf(['fade', 'slide'])
  }, _class.defaultProps = {
    animated: false,
    showHideTransition: 'fade'
  }, _temp2));

  module.exports = StatusBar;
},396,[113,179,133,130,126,52,155,15],"StatusBar");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index2 = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index3 = _interopRequireDefault(_index2);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Lists\\FlatList.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    FlatList: {
      displayName: "FlatList"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index3.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Lists/FlatList.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var MetroListView = _require(_dependencyMap[2], 'MetroListView');

  var React = _require(_dependencyMap[3], 'React');

  var View = _require(_dependencyMap[4], 'View');

  var VirtualizedList = _require(_dependencyMap[5], 'VirtualizedList');

  var ListView = _require(_dependencyMap[6], 'ListView');

  var invariant = _require(_dependencyMap[7], 'fbjs/lib/invariant');

  var defaultProps = _extends({}, VirtualizedList.defaultProps, {
    numColumns: 1
  });

  var FlatList = _wrapComponent("FlatList")((_temp = _class = function (_React$PureComponent) {
    _inherits(FlatList, _React$PureComponent);

    _createClass(FlatList, [{
      key: "scrollToEnd",
      value: function scrollToEnd(params) {
        if (this._listRef) {
          this._listRef.scrollToEnd(params);
        }
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        if (this._listRef) {
          this._listRef.scrollToIndex(params);
        }
      }
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        if (this._listRef) {
          this._listRef.scrollToItem(params);
        }
      }
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        if (this._listRef) {
          this._listRef.scrollToOffset(params);
        }
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        if (this._listRef) {
          this._listRef.recordInteraction();
        }
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        if (this._listRef) {
          this._listRef.flashScrollIndicators();
        }
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._listRef) {
          return this._listRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        if (this._listRef) {
          return this._listRef.getScrollableNode();
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._listRef) {
          this._listRef.setNativeProps(props);
        }
      }
    }, {
      key: "UNSAFE_componentWillMount",
      value: function UNSAFE_componentWillMount() {
        this._checkProps(this.props);
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        invariant(nextProps.numColumns === this.props.numColumns, 'Changing numColumns on the fly is not supported. Change the key prop on FlatList when ' + 'changing the number of columns to force a fresh render of the component.');
        invariant(nextProps.onViewableItemsChanged === this.props.onViewableItemsChanged, 'Changing onViewableItemsChanged on the fly is not supported');
        invariant(nextProps.viewabilityConfig === this.props.viewabilityConfig, 'Changing viewabilityConfig on the fly is not supported');
        invariant(nextProps.viewabilityConfigCallbackPairs === this.props.viewabilityConfigCallbackPairs, 'Changing viewabilityConfigCallbackPairs on the fly is not supported');

        this._checkProps(nextProps);
      }
    }]);

    function FlatList(props) {
      _classCallCheck(this, FlatList);

      var _this = _possibleConstructorReturn(this, (FlatList.__proto__ || Object.getPrototypeOf(FlatList)).call(this, props));

      _this._hasWarnedLegacy = false;
      _this._virtualizedListPairs = [];

      _this._captureRef = function (ref) {
        _this._listRef = ref;
      };

      _this._getItem = function (data, index) {
        var numColumns = _this.props.numColumns;

        if (numColumns > 1) {
          var ret = [];

          for (var kk = 0; kk < numColumns; kk++) {
            var _item = data[index * numColumns + kk];
            _item && ret.push(_item);
          }

          return ret;
        } else {
          return data[index];
        }
      };

      _this._getItemCount = function (data) {
        return data ? Math.ceil(data.length / _this.props.numColumns) : 0;
      };

      _this._keyExtractor = function (items, index) {
        var _this$props = _this.props,
            keyExtractor = _this$props.keyExtractor,
            numColumns = _this$props.numColumns;

        if (numColumns > 1) {
          invariant(Array.isArray(items), 'FlatList: Encountered internal consistency error, expected each item to consist of an ' + 'array with 1-%s columns; instead, received a single item.', numColumns);
          return items.map(function (it, kk) {
            return keyExtractor(it, index * numColumns + kk);
          }).join(':');
        } else {
          return keyExtractor(items, index);
        }
      };

      _this._renderItem = function (info) {
        var _this$props2 = _this.props,
            renderItem = _this$props2.renderItem,
            numColumns = _this$props2.numColumns,
            columnWrapperStyle = _this$props2.columnWrapperStyle;

        if (numColumns > 1) {
          var _item2 = info.item,
              _index = info.index;
          invariant(Array.isArray(_item2), 'Expected array of items with numColumns > 1');
          return React.createElement(
            View,
            {
              style: [{
                flexDirection: 'row'
              }, columnWrapperStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 613
              }
            },
            _item2.map(function (it, kk) {
              var element = renderItem({
                item: it,
                index: _index * numColumns + kk,
                separators: info.separators
              });
              return element && React.cloneElement(element, {
                key: kk
              });
            })
          );
        } else {
          return renderItem(info);
        }
      };

      if (_this.props.viewabilityConfigCallbackPairs) {
        _this._virtualizedListPairs = _this.props.viewabilityConfigCallbackPairs.map(function (pair) {
          return {
            viewabilityConfig: pair.viewabilityConfig,
            onViewableItemsChanged: _this._createOnViewableItemsChanged(pair.onViewableItemsChanged)
          };
        });
      } else if (_this.props.onViewableItemsChanged) {
        _this._virtualizedListPairs.push({
          viewabilityConfig: _this.props.viewabilityConfig,
          onViewableItemsChanged: _this._createOnViewableItemsChanged(_this.props.onViewableItemsChanged)
        });
      }

      return _this;
    }

    _createClass(FlatList, [{
      key: "_checkProps",
      value: function _checkProps(props) {
        var getItem = props.getItem,
            getItemCount = props.getItemCount,
            horizontal = props.horizontal,
            legacyImplementation = props.legacyImplementation,
            numColumns = props.numColumns,
            columnWrapperStyle = props.columnWrapperStyle,
            onViewableItemsChanged = props.onViewableItemsChanged,
            viewabilityConfigCallbackPairs = props.viewabilityConfigCallbackPairs;
        invariant(!getItem && !getItemCount, 'FlatList does not support custom data formats.');

        if (numColumns > 1) {
          invariant(!horizontal, 'numColumns does not support horizontal.');
        } else {
          invariant(!columnWrapperStyle, 'columnWrapperStyle not supported for single column lists');
        }

        if (legacyImplementation) {
          invariant(numColumns === 1, 'Legacy list does not support multiple columns.');

          if (!this._hasWarnedLegacy) {
            console.warn('FlatList: Using legacyImplementation - some features not supported and performance ' + 'may suffer');
            this._hasWarnedLegacy = true;
          }
        }

        invariant(!(onViewableItemsChanged && viewabilityConfigCallbackPairs), 'FlatList does not support setting both onViewableItemsChanged and ' + 'viewabilityConfigCallbackPairs.');
      }
    }, {
      key: "_pushMultiColumnViewable",
      value: function _pushMultiColumnViewable(arr, v) {
        var _props = this.props,
            numColumns = _props.numColumns,
            keyExtractor = _props.keyExtractor;
        v.item.forEach(function (item, ii) {
          invariant(v.index != null, 'Missing index!');
          var index = v.index * numColumns + ii;
          arr.push(_extends({}, v, {
            item: item,
            key: keyExtractor(item, index),
            index: index
          }));
        });
      }
    }, {
      key: "_createOnViewableItemsChanged",
      value: function _createOnViewableItemsChanged(onViewableItemsChanged) {
        var _this2 = this;

        return function (info) {
          var numColumns = _this2.props.numColumns;

          if (onViewableItemsChanged) {
            if (numColumns > 1) {
              var _changed = [];
              var _viewableItems = [];
              info.viewableItems.forEach(function (v) {
                return _this2._pushMultiColumnViewable(_viewableItems, v);
              });
              info.changed.forEach(function (v) {
                return _this2._pushMultiColumnViewable(_changed, v);
              });
              onViewableItemsChanged({
                viewableItems: _viewableItems,
                changed: _changed
              });
            } else {
              onViewableItemsChanged(info);
            }
          }
        };
      }
    }, {
      key: "render",
      value: function render() {
        if (this.props.legacyImplementation) {
          return React.createElement(MetroListView, _extends({}, this.props, {
            items: this.props.data,
            ref: this._captureRef,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 632
            }
          }));
        } else {
          return React.createElement(VirtualizedList, _extends({}, this.props, {
            renderItem: this._renderItem,
            getItem: this._getItem,
            getItemCount: this._getItemCount,
            keyExtractor: this._keyExtractor,
            ref: this._captureRef,
            viewabilityConfigCallbackPairs: this._virtualizedListPairs,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 640
            }
          }));
        }
      }
    }]);

    return FlatList;
  }(React.PureComponent), _class.defaultProps = defaultProps, _temp));

  module.exports = FlatList;
},397,[113,179,398,133,173,405,399,13],"FlatList");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp2,
      _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Lists\\MetroListView.js";

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    MetroListView: {
      displayName: "MetroListView"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Lists/MetroListView.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var ListView = _require(_dependencyMap[2], 'ListView');

  var React = _require(_dependencyMap[3], 'React');

  var RefreshControl = _require(_dependencyMap[4], 'RefreshControl');

  var ScrollView = _require(_dependencyMap[5], 'ScrollView');

  var invariant = _require(_dependencyMap[6], 'fbjs/lib/invariant');

  var MetroListView = _wrapComponent("MetroListView")((_temp2 = _class = function (_React$Component) {
    _inherits(MetroListView, _React$Component);

    function MetroListView() {
      var _ref,
          _this2 = this;

      var _temp, _this, _ret;

      _classCallCheck(this, MetroListView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = MetroListView.__proto__ || Object.getPrototypeOf(MetroListView)).call.apply(_ref, [this].concat(args))), _this), _this.state = _this._computeState(_this.props, {
        ds: new ListView.DataSource({
          rowHasChanged: function rowHasChanged(itemA, itemB) {
            return true;
          },
          sectionHeaderHasChanged: function sectionHeaderHasChanged() {
            return true;
          },
          getSectionHeaderData: function getSectionHeaderData(dataBlob, sectionID) {
            return _this.state.sectionHeaderData[sectionID];
          }
        }),
        sectionHeaderData: {}
      }), _this._captureRef = function (ref) {
        _this._listRef = ref;
      }, _this._renderFooter = function () {
        return React.createElement(_this2.props.FooterComponent, {
          key: "$footer",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 183
          }
        });
      }, _this._renderRow = function (item, sectionID, rowID, highlightRow) {
        return _this.props.renderItem({
          item: item,
          index: rowID
        });
      }, _this._renderSectionHeader = function (section, sectionID) {
        var renderSectionHeader = _this.props.renderSectionHeader;
        invariant(renderSectionHeader, 'Must provide renderSectionHeader with sections prop');
        return renderSectionHeader({
          section: section
        });
      }, _this._renderSeparator = function (sID, rID) {
        return React.createElement(_this2.props.SeparatorComponent, {
          key: sID + rID,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 199
          }
        });
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(MetroListView, [{
      key: "scrollToEnd",
      value: function scrollToEnd(params) {
        throw new Error('scrollToEnd not supported in legacy ListView.');
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        throw new Error('scrollToIndex not supported in legacy ListView.');
      }
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        throw new Error('scrollToItem not supported in legacy ListView.');
      }
    }, {
      key: "scrollToLocation",
      value: function scrollToLocation(params) {
        throw new Error('scrollToLocation not supported in legacy ListView.');
      }
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        var animated = params.animated,
            offset = params.offset;

        this._listRef.scrollTo(this.props.horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "getListRef",
      value: function getListRef() {
        return this._listRef;
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._listRef) {
          this._listRef.setNativeProps(props);
        }
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(newProps) {
        var _this3 = this;

        this.setState(function (state) {
          return _this3._computeState(newProps, state);
        });
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(ListView, _extends({}, this.props, {
          dataSource: this.state.ds,
          ref: this._captureRef,
          renderRow: this._renderRow,
          renderFooter: this.props.FooterComponent && this._renderFooter,
          renderSectionHeader: this.props.sections && this._renderSectionHeader,
          renderSeparator: this.props.SeparatorComponent && this._renderSeparator,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 143
          }
        }));
      }
    }, {
      key: "_computeState",
      value: function _computeState(props, state) {
        var sectionHeaderData = {};

        if (props.sections) {
          invariant(!props.items, 'Cannot have both sections and items props.');
          var _sections = {};
          props.sections.forEach(function (sectionIn, ii) {
            var sectionID = 's' + ii;
            _sections[sectionID] = sectionIn.data;
            sectionHeaderData[sectionID] = sectionIn;
          });
          return {
            ds: state.ds.cloneWithRowsAndSections(_sections),
            sectionHeaderData: sectionHeaderData
          };
        } else {
          invariant(!props.sections, 'Cannot have both sections and items props.');
          return {
            ds: state.ds.cloneWithRows(props.items),
            sectionHeaderData: sectionHeaderData
          };
        }
      }
    }]);

    return MetroListView;
  }(React.Component), _class.defaultProps = {
    keyExtractor: function keyExtractor(item, index) {
      return item.key || String(index);
    },
    renderScrollComponent: function renderScrollComponent(props) {
      if (props.onRefresh) {
        return React.createElement(ScrollView, _extends({}, props, {
          refreshControl: React.createElement(RefreshControl, {
            refreshing: props.refreshing,
            onRefresh: props.onRefresh,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 117
            }
          }),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 110
          }
        }));
      } else {
        return React.createElement(ScrollView, _extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 125
          }
        }));
      }
    }
  }, _temp2));

  module.exports = MetroListView;
},398,[113,179,399,133,404,381,13],"MetroListView");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Lists\\ListView\\ListView.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  var ListViewDataSource = _require(_dependencyMap[0], 'ListViewDataSource');

  var Platform = _require(_dependencyMap[1], 'Platform');

  var React = _require(_dependencyMap[2], 'React');

  var PropTypes = _require(_dependencyMap[3], 'prop-types');

  var ReactNative = _require(_dependencyMap[4], 'ReactNative');

  var RCTScrollViewManager = _require(_dependencyMap[5], 'NativeModules').ScrollViewManager;

  var ScrollView = _require(_dependencyMap[6], 'ScrollView');

  var ScrollResponder = _require(_dependencyMap[7], 'ScrollResponder');

  var StaticRenderer = _require(_dependencyMap[8], 'StaticRenderer');

  var TimerMixin = _require(_dependencyMap[9], 'react-timer-mixin');

  var View = _require(_dependencyMap[10], 'View');

  var cloneReferencedElement = _require(_dependencyMap[11], 'react-clone-referenced-element');

  var createReactClass = _require(_dependencyMap[12], 'create-react-class');

  var isEmpty = _require(_dependencyMap[13], 'isEmpty');

  var merge = _require(_dependencyMap[14], 'merge');

  var DEFAULT_PAGE_SIZE = 1;
  var DEFAULT_INITIAL_ROWS = 10;
  var DEFAULT_SCROLL_RENDER_AHEAD = 1000;
  var DEFAULT_END_REACHED_THRESHOLD = 1000;
  var DEFAULT_SCROLL_CALLBACK_THROTTLE = 50;
  var ListView = createReactClass({
    displayName: 'ListView',
    _childFrames: [],
    _sentEndForContentLength: null,
    _scrollComponent: null,
    _prevRenderedRowsCount: 0,
    _visibleRows: {},
    scrollProperties: {},
    mixins: [ScrollResponder.Mixin, TimerMixin],
    statics: {
      DataSource: ListViewDataSource
    },
    propTypes: _extends({}, ScrollView.propTypes, {
      dataSource: PropTypes.instanceOf(ListViewDataSource).isRequired,
      renderSeparator: PropTypes.func,
      renderRow: PropTypes.func.isRequired,
      initialListSize: PropTypes.number.isRequired,
      onEndReached: PropTypes.func,
      onEndReachedThreshold: PropTypes.number.isRequired,
      pageSize: PropTypes.number.isRequired,
      renderFooter: PropTypes.func,
      renderHeader: PropTypes.func,
      renderSectionHeader: PropTypes.func,
      renderScrollComponent: PropTypes.func.isRequired,
      scrollRenderAheadDistance: PropTypes.number.isRequired,
      onChangeVisibleRows: PropTypes.func,
      removeClippedSubviews: PropTypes.bool,
      stickySectionHeadersEnabled: PropTypes.bool,
      stickyHeaderIndices: PropTypes.arrayOf(PropTypes.number).isRequired,
      enableEmptySections: PropTypes.bool
    }),
    getMetrics: function getMetrics() {
      return {
        contentLength: this.scrollProperties.contentLength,
        totalRows: this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount(),
        renderedRows: this.state.curRenderedRowsCount,
        visibleRows: Object.keys(this._visibleRows).length
      };
    },
    getScrollResponder: function getScrollResponder() {
      if (this._scrollComponent && this._scrollComponent.getScrollResponder) {
        return this._scrollComponent.getScrollResponder();
      }
    },
    getScrollableNode: function getScrollableNode() {
      if (this._scrollComponent && this._scrollComponent.getScrollableNode) {
        return this._scrollComponent.getScrollableNode();
      } else {
        return ReactNative.findNodeHandle(this._scrollComponent);
      }
    },
    scrollTo: function scrollTo() {
      if (this._scrollComponent && this._scrollComponent.scrollTo) {
        var _scrollComponent;

        (_scrollComponent = this._scrollComponent).scrollTo.apply(_scrollComponent, arguments);
      }
    },
    scrollToEnd: function scrollToEnd(options) {
      if (this._scrollComponent) {
        if (this._scrollComponent.scrollToEnd) {
          this._scrollComponent.scrollToEnd(options);
        } else {
          console.warn('The scroll component used by the ListView does not support ' + 'scrollToEnd. Check the renderScrollComponent prop of your ListView.');
        }
      }
    },
    flashScrollIndicators: function flashScrollIndicators() {
      if (this._scrollComponent && this._scrollComponent.flashScrollIndicators) {
        this._scrollComponent.flashScrollIndicators();
      }
    },
    setNativeProps: function setNativeProps(props) {
      if (this._scrollComponent) {
        this._scrollComponent.setNativeProps(props);
      }
    },
    getDefaultProps: function getDefaultProps() {
      return {
        initialListSize: DEFAULT_INITIAL_ROWS,
        pageSize: DEFAULT_PAGE_SIZE,
        renderScrollComponent: function renderScrollComponent(props) {
          return React.createElement(ScrollView, _extends({}, props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 338
            }
          }));
        },
        scrollRenderAheadDistance: DEFAULT_SCROLL_RENDER_AHEAD,
        onEndReachedThreshold: DEFAULT_END_REACHED_THRESHOLD,
        stickySectionHeadersEnabled: Platform.OS === 'ios',
        stickyHeaderIndices: []
      };
    },
    getInitialState: function getInitialState() {
      return {
        curRenderedRowsCount: this.props.initialListSize,
        highlightedRow: {}
      };
    },
    getInnerViewNode: function getInnerViewNode() {
      return this._scrollComponent.getInnerViewNode();
    },
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      this.scrollProperties = {
        visibleLength: null,
        contentLength: null,
        offset: 0
      };
      this._childFrames = [];
      this._visibleRows = {};
      this._prevRenderedRowsCount = 0;
      this._sentEndForContentLength = null;
    },
    componentDidMount: function componentDidMount() {
      var _this = this;

      this.requestAnimationFrame(function () {
        _this._measureAndUpdateScrollProps();
      });
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      var _this2 = this;

      if (this.props.dataSource !== nextProps.dataSource || this.props.initialListSize !== nextProps.initialListSize) {
        this.setState(function (state, props) {
          _this2._prevRenderedRowsCount = 0;
          return {
            curRenderedRowsCount: Math.min(Math.max(state.curRenderedRowsCount, props.initialListSize), props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount())
          };
        }, function () {
          return _this2._renderMoreRowsIfNeeded();
        });
      }
    },
    componentDidUpdate: function componentDidUpdate() {
      var _this3 = this;

      this.requestAnimationFrame(function () {
        _this3._measureAndUpdateScrollProps();
      });
    },
    _onRowHighlighted: function _onRowHighlighted(sectionID, rowID) {
      this.setState({
        highlightedRow: {
          sectionID: sectionID,
          rowID: rowID
        }
      });
    },
    render: function render() {
      var bodyComponents = [];
      var dataSource = this.props.dataSource;
      var allRowIDs = dataSource.rowIdentities;
      var rowCount = 0;
      var stickySectionHeaderIndices = [];
      var renderSectionHeader = this.props.renderSectionHeader;
      var header = this.props.renderHeader && this.props.renderHeader();
      var footer = this.props.renderFooter && this.props.renderFooter();
      var totalIndex = header ? 1 : 0;

      for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
        var sectionID = dataSource.sectionIdentities[sectionIdx];
        var rowIDs = allRowIDs[sectionIdx];

        if (rowIDs.length === 0) {
          if (this.props.enableEmptySections === undefined) {
            var warning = _require(_dependencyMap[15], 'fbjs/lib/warning');

            warning(false, 'In next release empty section headers will be rendered.' + " In this release you can use 'enableEmptySections' flag to render empty section headers.");
            continue;
          } else {
            var invariant = _require(_dependencyMap[16], 'fbjs/lib/invariant');

            invariant(this.props.enableEmptySections, "In next release 'enableEmptySections' flag will be deprecated, empty section headers will always be rendered." + ' If empty section headers are not desirable their indices should be excluded from sectionIDs object.' + " In this release 'enableEmptySections' may only have value 'true' to allow empty section headers rendering.");
          }
        }

        if (renderSectionHeader) {
          var element = renderSectionHeader(dataSource.getSectionHeaderData(sectionIdx), sectionID);

          if (element) {
            bodyComponents.push(React.cloneElement(element, {
              key: 's_' + sectionID
            }));

            if (this.props.stickySectionHeadersEnabled) {
              stickySectionHeaderIndices.push(totalIndex);
            }

            totalIndex++;
          }
        }

        for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {
          var rowID = rowIDs[rowIdx];
          var comboID = sectionID + '_' + rowID;
          var shouldUpdateRow = rowCount >= this._prevRenderedRowsCount && dataSource.rowShouldUpdate(sectionIdx, rowIdx);
          var row = React.createElement(StaticRenderer, {
            key: 'r_' + comboID,
            shouldUpdate: !!shouldUpdateRow,
            render: this.props.renderRow.bind(null, dataSource.getRowData(sectionIdx, rowIdx), sectionID, rowID, this._onRowHighlighted),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 473
            }
          });
          bodyComponents.push(row);
          totalIndex++;

          if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {
            var adjacentRowHighlighted = this.state.highlightedRow.sectionID === sectionID && (this.state.highlightedRow.rowID === rowID || this.state.highlightedRow.rowID === rowIDs[rowIdx + 1]);
            var separator = this.props.renderSeparator(sectionID, rowID, adjacentRowHighlighted);

            if (separator) {
              bodyComponents.push(React.createElement(
                View,
                {
                  key: 's_' + comboID,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 502
                  }
                },
                separator
              ));
              totalIndex++;
            }
          }

          if (++rowCount === this.state.curRenderedRowsCount) {
            break;
          }
        }

        if (rowCount >= this.state.curRenderedRowsCount) {
          break;
        }
      }

      var _props = this.props,
          renderScrollComponent = _props.renderScrollComponent,
          props = _objectWithoutProperties(_props, ["renderScrollComponent"]);

      if (!props.scrollEventThrottle) {
        props.scrollEventThrottle = DEFAULT_SCROLL_CALLBACK_THROTTLE;
      }

      if (props.removeClippedSubviews === undefined) {
        props.removeClippedSubviews = true;
      }

      _extends(props, {
        onScroll: this._onScroll,
        stickyHeaderIndices: this.props.stickyHeaderIndices.concat(stickySectionHeaderIndices),
        onKeyboardWillShow: undefined,
        onKeyboardWillHide: undefined,
        onKeyboardDidShow: undefined,
        onKeyboardDidHide: undefined
      });

      return cloneReferencedElement(renderScrollComponent(props), {
        ref: this._setScrollComponentRef,
        onContentSizeChange: this._onContentSizeChange,
        onLayout: this._onLayout,
        DEPRECATED_sendUpdatedChildFrames: typeof props.onChangeVisibleRows !== undefined
      }, header, bodyComponents, footer);
    },
    _measureAndUpdateScrollProps: function _measureAndUpdateScrollProps() {
      var scrollComponent = this.getScrollResponder();

      if (!scrollComponent || !scrollComponent.getInnerViewNode) {
        return;
      }

      RCTScrollViewManager && RCTScrollViewManager.calculateChildFrames && RCTScrollViewManager.calculateChildFrames(ReactNative.findNodeHandle(scrollComponent), this._updateVisibleRows);
    },
    _setScrollComponentRef: function _setScrollComponentRef(scrollComponent) {
      this._scrollComponent = scrollComponent;
    },
    _onContentSizeChange: function _onContentSizeChange(width, height) {
      var contentLength = !this.props.horizontal ? height : width;

      if (contentLength !== this.scrollProperties.contentLength) {
        this.scrollProperties.contentLength = contentLength;

        this._updateVisibleRows();

        this._renderMoreRowsIfNeeded();
      }

      this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);
    },
    _onLayout: function _onLayout(event) {
      var _event$nativeEvent$la = event.nativeEvent.layout,
          width = _event$nativeEvent$la.width,
          height = _event$nativeEvent$la.height;
      var visibleLength = !this.props.horizontal ? height : width;

      if (visibleLength !== this.scrollProperties.visibleLength) {
        this.scrollProperties.visibleLength = visibleLength;

        this._updateVisibleRows();

        this._renderMoreRowsIfNeeded();
      }

      this.props.onLayout && this.props.onLayout(event);
    },
    _maybeCallOnEndReached: function _maybeCallOnEndReached(event) {
      if (this.props.onEndReached && this.scrollProperties.contentLength !== this._sentEndForContentLength && this._getDistanceFromEnd(this.scrollProperties) < this.props.onEndReachedThreshold && this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {
        this._sentEndForContentLength = this.scrollProperties.contentLength;
        this.props.onEndReached(event);
        return true;
      }

      return false;
    },
    _renderMoreRowsIfNeeded: function _renderMoreRowsIfNeeded() {
      if (this.scrollProperties.contentLength === null || this.scrollProperties.visibleLength === null || this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {
        this._maybeCallOnEndReached();

        return;
      }

      var distanceFromEnd = this._getDistanceFromEnd(this.scrollProperties);

      if (distanceFromEnd < this.props.scrollRenderAheadDistance) {
        this._pageInNewRows();
      }
    },
    _pageInNewRows: function _pageInNewRows() {
      var _this4 = this;

      this.setState(function (state, props) {
        var rowsToRender = Math.min(state.curRenderedRowsCount + props.pageSize, props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount());
        _this4._prevRenderedRowsCount = state.curRenderedRowsCount;
        return {
          curRenderedRowsCount: rowsToRender
        };
      }, function () {
        _this4._measureAndUpdateScrollProps();

        _this4._prevRenderedRowsCount = _this4.state.curRenderedRowsCount;
      });
    },
    _getDistanceFromEnd: function _getDistanceFromEnd(scrollProperties) {
      return scrollProperties.contentLength - scrollProperties.visibleLength - scrollProperties.offset;
    },
    _updateVisibleRows: function _updateVisibleRows(updatedFrames) {
      var _this5 = this;

      if (!this.props.onChangeVisibleRows) {
        return;
      }

      if (updatedFrames) {
        updatedFrames.forEach(function (newFrame) {
          _this5._childFrames[newFrame.index] = merge(newFrame);
        });
      }

      var isVertical = !this.props.horizontal;
      var dataSource = this.props.dataSource;
      var visibleMin = this.scrollProperties.offset;
      var visibleMax = visibleMin + this.scrollProperties.visibleLength;
      var allRowIDs = dataSource.rowIdentities;
      var header = this.props.renderHeader && this.props.renderHeader();
      var totalIndex = header ? 1 : 0;
      var visibilityChanged = false;
      var changedRows = {};

      for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
        var rowIDs = allRowIDs[sectionIdx];

        if (rowIDs.length === 0) {
          continue;
        }

        var sectionID = dataSource.sectionIdentities[sectionIdx];

        if (this.props.renderSectionHeader) {
          totalIndex++;
        }

        var visibleSection = this._visibleRows[sectionID];

        if (!visibleSection) {
          visibleSection = {};
        }

        for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {
          var rowID = rowIDs[rowIdx];
          var frame = this._childFrames[totalIndex];
          totalIndex++;

          if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {
            totalIndex++;
          }

          if (!frame) {
            break;
          }

          var rowVisible = visibleSection[rowID];
          var min = isVertical ? frame.y : frame.x;
          var max = min + (isVertical ? frame.height : frame.width);

          if (!min && !max || min === max) {
            break;
          }

          if (min > visibleMax || max < visibleMin) {
            if (rowVisible) {
              visibilityChanged = true;
              delete visibleSection[rowID];

              if (!changedRows[sectionID]) {
                changedRows[sectionID] = {};
              }

              changedRows[sectionID][rowID] = false;
            }
          } else if (!rowVisible) {
            visibilityChanged = true;
            visibleSection[rowID] = true;

            if (!changedRows[sectionID]) {
              changedRows[sectionID] = {};
            }

            changedRows[sectionID][rowID] = true;
          }
        }

        if (!isEmpty(visibleSection)) {
          this._visibleRows[sectionID] = visibleSection;
        } else if (this._visibleRows[sectionID]) {
          delete this._visibleRows[sectionID];
        }
      }

      visibilityChanged && this.props.onChangeVisibleRows(this._visibleRows, changedRows);
    },
    _onScroll: function _onScroll(e) {
      var isVertical = !this.props.horizontal;
      this.scrollProperties.visibleLength = e.nativeEvent.layoutMeasurement[isVertical ? 'height' : 'width'];
      this.scrollProperties.contentLength = e.nativeEvent.contentSize[isVertical ? 'height' : 'width'];
      this.scrollProperties.offset = e.nativeEvent.contentOffset[isVertical ? 'y' : 'x'];

      this._updateVisibleRows(e.nativeEvent.updatedChildFrames);

      if (!this._maybeCallOnEndReached(e)) {
        this._renderMoreRowsIfNeeded();
      }

      if (this.props.onEndReached && this._getDistanceFromEnd(this.scrollProperties) > this.props.onEndReachedThreshold) {
        this._sentEndForContentLength = null;
      }

      this.props.onScroll && this.props.onScroll(e);
    }
  });
  module.exports = ListView;
},399,[400,52,133,130,21,15,381,383,402,349,173,403,176,401,137,56,13],"ListView");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var isEmpty = _require(_dependencyMap[1], 'isEmpty');

  var warning = _require(_dependencyMap[2], 'fbjs/lib/warning');

  function defaultGetRowData(dataBlob, sectionID, rowID) {
    return dataBlob[sectionID][rowID];
  }

  function defaultGetSectionHeaderData(dataBlob, sectionID) {
    return dataBlob[sectionID];
  }

  var ListViewDataSource = function () {
    function ListViewDataSource(params) {
      _classCallCheck(this, ListViewDataSource);

      invariant(params && typeof params.rowHasChanged === 'function', 'Must provide a rowHasChanged function.');
      this._rowHasChanged = params.rowHasChanged;
      this._getRowData = params.getRowData || defaultGetRowData;
      this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;
      this._getSectionHeaderData = params.getSectionHeaderData || defaultGetSectionHeaderData;
      this._dataBlob = null;
      this._dirtyRows = [];
      this._dirtySections = [];
      this._cachedRowCount = 0;
      this.rowIdentities = [];
      this.sectionIdentities = [];
    }

    _createClass(ListViewDataSource, [{
      key: "cloneWithRows",
      value: function cloneWithRows(dataBlob, rowIdentities) {
        var rowIds = rowIdentities ? [[].concat(_toConsumableArray(rowIdentities))] : null;

        if (!this._sectionHeaderHasChanged) {
          this._sectionHeaderHasChanged = function () {
            return false;
          };
        }

        return this.cloneWithRowsAndSections({
          s1: dataBlob
        }, ['s1'], rowIds);
      }
    }, {
      key: "cloneWithRowsAndSections",
      value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {
        invariant(typeof this._sectionHeaderHasChanged === 'function', 'Must provide a sectionHeaderHasChanged function with section data.');
        invariant(!sectionIdentities || !rowIdentities || sectionIdentities.length === rowIdentities.length, 'row and section ids lengths must be the same');
        var newSource = new ListViewDataSource({
          getRowData: this._getRowData,
          getSectionHeaderData: this._getSectionHeaderData,
          rowHasChanged: this._rowHasChanged,
          sectionHeaderHasChanged: this._sectionHeaderHasChanged
        });
        newSource._dataBlob = dataBlob;

        if (sectionIdentities) {
          newSource.sectionIdentities = sectionIdentities;
        } else {
          newSource.sectionIdentities = Object.keys(dataBlob);
        }

        if (rowIdentities) {
          newSource.rowIdentities = rowIdentities;
        } else {
          newSource.rowIdentities = [];
          newSource.sectionIdentities.forEach(function (sectionID) {
            newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));
          });
        }

        newSource._cachedRowCount = countRows(newSource.rowIdentities);

        newSource._calculateDirtyArrays(this._dataBlob, this.sectionIdentities, this.rowIdentities);

        return newSource;
      }
    }, {
      key: "getRowCount",
      value: function getRowCount() {
        return this._cachedRowCount;
      }
    }, {
      key: "getRowAndSectionCount",
      value: function getRowAndSectionCount() {
        return this._cachedRowCount + this.sectionIdentities.length;
      }
    }, {
      key: "rowShouldUpdate",
      value: function rowShouldUpdate(sectionIndex, rowIndex) {
        var needsUpdate = this._dirtyRows[sectionIndex][rowIndex];
        warning(needsUpdate !== undefined, 'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex);
        return needsUpdate;
      }
    }, {
      key: "getRowData",
      value: function getRowData(sectionIndex, rowIndex) {
        var sectionID = this.sectionIdentities[sectionIndex];
        var rowID = this.rowIdentities[sectionIndex][rowIndex];
        warning(sectionID !== undefined && rowID !== undefined, 'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex);
        return this._getRowData(this._dataBlob, sectionID, rowID);
      }
    }, {
      key: "getRowIDForFlatIndex",
      value: function getRowIDForFlatIndex(index) {
        var accessIndex = index;

        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
          if (accessIndex >= this.rowIdentities[ii].length) {
            accessIndex -= this.rowIdentities[ii].length;
          } else {
            return this.rowIdentities[ii][accessIndex];
          }
        }

        return null;
      }
    }, {
      key: "getSectionIDForFlatIndex",
      value: function getSectionIDForFlatIndex(index) {
        var accessIndex = index;

        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
          if (accessIndex >= this.rowIdentities[ii].length) {
            accessIndex -= this.rowIdentities[ii].length;
          } else {
            return this.sectionIdentities[ii];
          }
        }

        return null;
      }
    }, {
      key: "getSectionLengths",
      value: function getSectionLengths() {
        var results = [];

        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
          results.push(this.rowIdentities[ii].length);
        }

        return results;
      }
    }, {
      key: "sectionHeaderShouldUpdate",
      value: function sectionHeaderShouldUpdate(sectionIndex) {
        var needsUpdate = this._dirtySections[sectionIndex];
        warning(needsUpdate !== undefined, 'missing dirtyBit for section: ' + sectionIndex);
        return needsUpdate;
      }
    }, {
      key: "getSectionHeaderData",
      value: function getSectionHeaderData(sectionIndex) {
        if (!this._getSectionHeaderData) {
          return null;
        }

        var sectionID = this.sectionIdentities[sectionIndex];
        warning(sectionID !== undefined, 'renderSection called on invalid section: ' + sectionIndex);
        return this._getSectionHeaderData(this._dataBlob, sectionID);
      }
    }, {
      key: "_calculateDirtyArrays",
      value: function _calculateDirtyArrays(prevDataBlob, prevSectionIDs, prevRowIDs) {
        var prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);
        var prevRowsHash = {};

        for (var ii = 0; ii < prevRowIDs.length; ii++) {
          var sectionID = prevSectionIDs[ii];
          warning(!prevRowsHash[sectionID], 'SectionID appears more than once: ' + sectionID);
          prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);
        }

        this._dirtySections = [];
        this._dirtyRows = [];
        var dirty;

        for (var sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {
          var sectionID = this.sectionIdentities[sIndex];
          dirty = !prevSectionsHash[sectionID];
          var sectionHeaderHasChanged = this._sectionHeaderHasChanged;

          if (!dirty && sectionHeaderHasChanged) {
            dirty = sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob, sectionID), this._getSectionHeaderData(this._dataBlob, sectionID));
          }

          this._dirtySections.push(!!dirty);

          this._dirtyRows[sIndex] = [];

          for (var rIndex = 0; rIndex < this.rowIdentities[sIndex].length; rIndex++) {
            var rowID = this.rowIdentities[sIndex][rIndex];
            dirty = !prevSectionsHash[sectionID] || !prevRowsHash[sectionID][rowID] || this._rowHasChanged(this._getRowData(prevDataBlob, sectionID, rowID), this._getRowData(this._dataBlob, sectionID, rowID));

            this._dirtyRows[sIndex].push(!!dirty);
          }
        }
      }
    }]);

    return ListViewDataSource;
  }();

  function countRows(allRowIDs) {
    var totalRows = 0;

    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
      var rowIDs = allRowIDs[sectionIdx];
      totalRows += rowIDs.length;
    }

    return totalRows;
  }

  function keyedDictionaryFromArray(arr) {
    if (isEmpty(arr)) {
      return {};
    }

    var result = {};

    for (var ii = 0; ii < arr.length; ii++) {
      var key = arr[ii];
      warning(!result[key], 'Value appears more than once in array: ' + key);
      result[key] = true;
    }

    return result;
  }

  module.exports = ListViewDataSource;
},400,[13,401,56],"ListViewDataSource");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function isEmpty(obj) {
    if (Array.isArray(obj)) {
      return obj.length === 0;
    } else if (typeof obj === 'object') {
      for (var i in obj) {
        return false;
      }

      return true;
    } else {
      return !obj;
    }
  }

  module.exports = isEmpty;
},401,[],"isEmpty");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class, _temp;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    StaticRenderer: {
      displayName: "StaticRenderer"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Components/StaticRenderer.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var React = _require(_dependencyMap[2], 'React');

  var PropTypes = _require(_dependencyMap[3], 'prop-types');

  var StaticRenderer = _wrapComponent("StaticRenderer")((_temp = _class = function (_React$Component) {
    _inherits(StaticRenderer, _React$Component);

    function StaticRenderer() {
      _classCallCheck(this, StaticRenderer);

      return _possibleConstructorReturn(this, (StaticRenderer.__proto__ || Object.getPrototypeOf(StaticRenderer)).apply(this, arguments));
    }

    _createClass(StaticRenderer, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps) {
        return nextProps.shouldUpdate;
      }
    }, {
      key: "render",
      value: function render() {
        return this.props.render();
      }
    }]);

    return StaticRenderer;
  }(React.Component), _class.propTypes = {
    shouldUpdate: PropTypes.bool.isRequired,
    render: PropTypes.func.isRequired
  }, _temp));

  module.exports = StaticRenderer;
},402,[113,179,133,130],"StaticRenderer");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var React = _require(_dependencyMap[0], 'react');

  function cloneReferencedElement(element, config) {
    var cloneRef = config.ref;
    var originalRef = element.ref;

    for (var _len = arguments.length, children = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      children[_key - 2] = arguments[_key];
    }

    if (originalRef == null || cloneRef == null) {
      return React.cloneElement.apply(React, [element, config].concat(children));
    }

    if (typeof originalRef !== 'function') {
      if (__DEV__) {
        console.warn('Cloning an element with a ref that will be overwritten because it ' + 'is not a function. Use a composable callback-style ref instead. ' + 'Ignoring ref: ' + originalRef);
      }

      return React.cloneElement.apply(React, [element, config].concat(children));
    }

    return React.cloneElement.apply(React, [element, _extends({}, config, {
      ref: function ref(component) {
        cloneRef(component);
        originalRef(component);
      }
    })].concat(children));
  }

  module.exports = cloneReferencedElement;
},403,[113],"node_modules\\react-clone-referenced-element\\cloneReferencedElement.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Components\\RefreshControl\\RefreshControl.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var NativeMethodsMixin = _require(_dependencyMap[1], 'NativeMethodsMixin');

  var Platform = _require(_dependencyMap[2], 'Platform');

  var React = _require(_dependencyMap[3], 'React');

  var PropTypes = _require(_dependencyMap[4], 'prop-types');

  var ViewPropTypes = _require(_dependencyMap[5], 'ViewPropTypes');

  var createReactClass = _require(_dependencyMap[6], 'create-react-class');

  var requireNativeComponent = _require(_dependencyMap[7], 'requireNativeComponent');

  if (Platform.OS === 'android') {
    var RefreshLayoutConsts = _require(_dependencyMap[8], 'UIManager').AndroidSwipeRefreshLayout.Constants;
  } else {
    var RefreshLayoutConsts = {
      SIZE: {}
    };
  }

  var RefreshControl = createReactClass({
    displayName: 'RefreshControl',
    statics: {
      SIZE: RefreshLayoutConsts.SIZE
    },
    mixins: [NativeMethodsMixin],
    propTypes: _extends({}, ViewPropTypes, {
      onRefresh: PropTypes.func,
      refreshing: PropTypes.bool.isRequired,
      tintColor: ColorPropType,
      titleColor: ColorPropType,
      title: PropTypes.string,
      enabled: PropTypes.bool,
      colors: PropTypes.arrayOf(ColorPropType),
      progressBackgroundColor: ColorPropType,
      size: PropTypes.oneOf([RefreshLayoutConsts.SIZE.DEFAULT, RefreshLayoutConsts.SIZE.LARGE]),
      progressViewOffset: PropTypes.number
    }),
    _nativeRef: null,
    _lastNativeRefreshing: false,
    componentDidMount: function componentDidMount() {
      this._lastNativeRefreshing = this.props.refreshing;
    },
    componentDidUpdate: function componentDidUpdate(prevProps) {
      if (this.props.refreshing !== prevProps.refreshing) {
        this._lastNativeRefreshing = this.props.refreshing;
      } else if (this.props.refreshing !== this._lastNativeRefreshing) {
        this._nativeRef.setNativeProps({
          refreshing: this.props.refreshing
        });

        this._lastNativeRefreshing = this.props.refreshing;
      }
    },
    render: function render() {
      var _this = this;

      return React.createElement(NativeRefreshControl, _extends({}, this.props, {
        ref: function ref(_ref) {
          _this._nativeRef = _ref;
        },
        onRefresh: this._onRefresh,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 156
        }
      }));
    },
    _onRefresh: function _onRefresh() {
      this._lastNativeRefreshing = true;
      this.props.onRefresh && this.props.onRefresh();
      this.forceUpdate();
    }
  });

  if (Platform.OS === 'ios') {
    var NativeRefreshControl = requireNativeComponent('RCTRefreshControl', RefreshControl);
  } else if (Platform.OS === 'android') {
    var NativeRefreshControl = requireNativeComponent('AndroidSwipeRefreshLayout', RefreshControl);
  }

  module.exports = RefreshControl;
},404,[126,128,52,133,130,134,176,148,109],"RefreshControl");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require2(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index2 = _require2(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index3 = _interopRequireDefault(_index2);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _initialiseProps,
      _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Lists\\VirtualizedList.js",
      _class2,
      _temp3,
      _class3,
      _temp4;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    VirtualizedList: {
      displayName: "VirtualizedList"
    },
    CellRenderer: {
      displayName: "CellRenderer"
    },
    VirtualizedCellWrapper: {
      displayName: "VirtualizedCellWrapper"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index3.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Lists/VirtualizedList.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var Batchinator = _require2(_dependencyMap[2], 'Batchinator');

  var FillRateHelper = _require2(_dependencyMap[3], 'FillRateHelper');

  var PropTypes = _require2(_dependencyMap[4], 'prop-types');

  var React = _require2(_dependencyMap[5], 'React');

  var ReactNative = _require2(_dependencyMap[6], 'ReactNative');

  var RefreshControl = _require2(_dependencyMap[7], 'RefreshControl');

  var ScrollView = _require2(_dependencyMap[8], 'ScrollView');

  var StyleSheet = _require2(_dependencyMap[9], 'StyleSheet');

  var UIManager = _require2(_dependencyMap[10], 'UIManager');

  var View = _require2(_dependencyMap[11], 'View');

  var ViewabilityHelper = _require2(_dependencyMap[12], 'ViewabilityHelper');

  var flattenStyle = _require2(_dependencyMap[13], 'flattenStyle');

  var infoLog = _require2(_dependencyMap[14], 'infoLog');

  var invariant = _require2(_dependencyMap[15], 'fbjs/lib/invariant');

  var warning = _require2(_dependencyMap[16], 'fbjs/lib/warning');

  var _require = _require2(_dependencyMap[17], 'VirtualizeUtils'),
      computeWindowedRenderLimits = _require.computeWindowedRenderLimits;

  var _usedIndexForKey = false;

  var VirtualizedList = _wrapComponent("VirtualizedList")((_temp = _class = function (_React$PureComponent) {
    _inherits(VirtualizedList, _React$PureComponent);

    _createClass(VirtualizedList, [{
      key: "scrollToEnd",
      value: function scrollToEnd(params) {
        var animated = params ? params.animated : true;
        var veryLast = this.props.getItemCount(this.props.data) - 1;

        var frame = this._getFrameMetricsApprox(veryLast);

        var offset = Math.max(0, frame.offset + frame.length + this._footerLength - this._scrollMetrics.visibleLength);

        this._scrollRef.scrollTo(this.props.horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        var _props = this.props,
            data = _props.data,
            horizontal = _props.horizontal,
            getItemCount = _props.getItemCount,
            getItemLayout = _props.getItemLayout,
            onScrollToIndexFailed = _props.onScrollToIndexFailed;
        var animated = params.animated,
            index = params.index,
            viewOffset = params.viewOffset,
            viewPosition = params.viewPosition;
        invariant(index >= 0 && index < getItemCount(data), "scrollToIndex out of range: " + index + " vs " + (getItemCount(data) - 1));

        if (!getItemLayout && index > this._highestMeasuredFrameIndex) {
          invariant(!!onScrollToIndexFailed, 'scrollToIndex should be used in conjunction with getItemLayout or onScrollToIndexFailed, ' + 'otherwise there is no way to know the location of offscreen indices or handle failures.');
          onScrollToIndexFailed({
            averageItemLength: this._averageCellLength,
            highestMeasuredFrameIndex: this._highestMeasuredFrameIndex,
            index: index
          });
          return;
        }

        var frame = this._getFrameMetricsApprox(index);

        var offset = Math.max(0, frame.offset - (viewPosition || 0) * (this._scrollMetrics.visibleLength - frame.length)) - (viewOffset || 0);

        this._scrollRef.scrollTo(horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        var item = params.item;
        var _props2 = this.props,
            data = _props2.data,
            getItem = _props2.getItem,
            getItemCount = _props2.getItemCount;
        var itemCount = getItemCount(data);

        for (var _index = 0; _index < itemCount; _index++) {
          if (getItem(data, _index) === item) {
            this.scrollToIndex(_extends({}, params, {
              index: _index
            }));
            break;
          }
        }
      }
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        var animated = params.animated,
            offset = params.offset;

        this._scrollRef.scrollTo(this.props.horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        this._nestedChildLists.forEach(function (childList) {
          childList.ref && childList.ref.recordInteraction();
        });

        this._viewabilityTuples.forEach(function (t) {
          t.viewabilityHelper.recordInteraction();
        });

        this._updateViewableItems(this.props.data);
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        this._scrollRef.flashScrollIndicators();
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._scrollRef && this._scrollRef.getScrollResponder) {
          return this._scrollRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        if (this._scrollRef && this._scrollRef.getScrollableNode) {
          return this._scrollRef.getScrollableNode();
        } else {
          return ReactNative.findNodeHandle(this._scrollRef);
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._scrollRef) {
          this._scrollRef.setNativeProps(props);
        }
      }
    }, {
      key: "getChildContext",
      value: function getChildContext() {
        return {
          virtualizedList: {
            getScrollMetrics: this._getScrollMetrics,
            horizontal: this.props.horizontal,
            getOutermostParentListRef: this._getOutermostParentListRef,
            registerAsNestedChild: this._registerAsNestedChild,
            unregisterAsNestedChild: this._unregisterAsNestedChild
          }
        };
      }
    }, {
      key: "_getCellKey",
      value: function _getCellKey() {
        return this.context.virtualizedCell && this.context.virtualizedCell.cellKey || 'rootList';
      }
    }, {
      key: "hasMore",
      value: function hasMore() {
        return this._hasMore;
      }
    }]);

    function VirtualizedList(props, context) {
      _classCallCheck(this, VirtualizedList);

      var _this = _possibleConstructorReturn(this, (VirtualizedList.__proto__ || Object.getPrototypeOf(VirtualizedList)).call(this, props, context));

      _initialiseProps.call(_this);

      invariant(!props.onScroll || !props.onScroll.__isNative, 'Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent ' + 'to support native onScroll events with useNativeDriver');
      invariant(props.windowSize > 0, 'VirtualizedList: The windowSize prop must be present and set to a value greater than 0.');
      _this._fillRateHelper = new FillRateHelper(_this._getFrameMetrics);
      _this._updateCellsToRenderBatcher = new Batchinator(_this._updateCellsToRender, _this.props.updateCellsBatchingPeriod);

      if (_this.props.viewabilityConfigCallbackPairs) {
        _this._viewabilityTuples = _this.props.viewabilityConfigCallbackPairs.map(function (pair) {
          return {
            viewabilityHelper: new ViewabilityHelper(pair.viewabilityConfig),
            onViewableItemsChanged: pair.onViewableItemsChanged
          };
        });
      } else if (_this.props.onViewableItemsChanged) {
        _this._viewabilityTuples.push({
          viewabilityHelper: new ViewabilityHelper(_this.props.viewabilityConfig),
          onViewableItemsChanged: _this.props.onViewableItemsChanged
        });
      }

      var initialState = {
        first: _this.props.initialScrollIndex || 0,
        last: Math.min(_this.props.getItemCount(_this.props.data), (_this.props.initialScrollIndex || 0) + _this.props.initialNumToRender) - 1
      };

      if (_this._isNestedWithSameOrientation()) {
        var storedState = _this.context.virtualizedList.registerAsNestedChild({
          cellKey: _this._getCellKey(),
          key: _this.props.listKey || _this._getCellKey(),
          ref: _this
        });

        if (storedState) {
          initialState = storedState;
          _this.state = storedState;
          _this._frames = storedState.frames;
        }
      }

      _this.state = initialState;
      return _this;
    }

    _createClass(VirtualizedList, [{
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._isNestedWithSameOrientation()) {
          this.context.virtualizedList.unregisterAsNestedChild({
            key: this.props.listKey || this._getCellKey(),
            state: {
              first: this.state.first,
              last: this.state.last,
              frames: this._frames
            }
          });
        }

        this._updateViewableItems(null);

        this._updateCellsToRenderBatcher.dispose({
          abort: true
        });

        this._viewabilityTuples.forEach(function (tuple) {
          tuple.viewabilityHelper.dispose();
        });

        this._fillRateHelper.deactivateAndFlush();
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(newProps) {
        var data = newProps.data,
            extraData = newProps.extraData,
            getItemCount = newProps.getItemCount,
            maxToRenderPerBatch = newProps.maxToRenderPerBatch;
        this.setState({
          first: Math.max(0, Math.min(this.state.first, getItemCount(data) - 1 - maxToRenderPerBatch)),
          last: Math.max(0, Math.min(this.state.last, getItemCount(data) - 1))
        });

        if (data !== this.props.data || extraData !== this.props.extraData) {
          this._hasDataChangedSinceEndReached = true;

          this._viewabilityTuples.forEach(function (tuple) {
            tuple.viewabilityHelper.resetViewableIndices();
          });
        }
      }
    }, {
      key: "_pushCells",
      value: function _pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, first, last, inversionStyle) {
        var _this2 = this;

        var _props3 = this.props,
            CellRendererComponent = _props3.CellRendererComponent,
            ItemSeparatorComponent = _props3.ItemSeparatorComponent,
            data = _props3.data,
            getItem = _props3.getItem,
            getItemCount = _props3.getItemCount,
            horizontal = _props3.horizontal,
            keyExtractor = _props3.keyExtractor;
        var stickyOffset = this.props.ListHeaderComponent ? 1 : 0;
        var end = getItemCount(data) - 1;
        var prevCellKey = void 0;
        last = Math.min(end, last);

        var _loop = function _loop(ii) {
          var item = getItem(data, ii);
          var key = keyExtractor(item, ii);

          _this2._indicesToKeys.set(ii, key);

          if (stickyIndicesFromProps.has(ii + stickyOffset)) {
            stickyHeaderIndices.push(cells.length);
          }

          cells.push(React.createElement(CellRenderer, {
            CellRendererComponent: CellRendererComponent,
            ItemSeparatorComponent: ii < end ? ItemSeparatorComponent : undefined,
            cellKey: key,
            fillRateHelper: _this2._fillRateHelper,
            horizontal: horizontal,
            index: ii,
            inversionStyle: inversionStyle,
            item: item,
            key: key,
            prevCellKey: prevCellKey,
            onUpdateSeparators: _this2._onUpdateSeparators,
            onLayout: function onLayout(e) {
              return _this2._onCellLayout(e, key, ii);
            },
            onUnmount: _this2._onCellUnmount,
            parentProps: _this2.props,
            ref: function (_ref) {
              function ref(_x) {
                return _ref.apply(this, arguments);
              }

              ref.toString = function () {
                return _ref.toString();
              };

              return ref;
            }(function (ref) {
              _this2._cellRefs[key] = ref;
            }),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 668
            }
          }));
          prevCellKey = key;
        };

        for (var ii = first; ii <= last; ii++) {
          _loop(ii);
        }
      }
    }, {
      key: "_isVirtualizationDisabled",
      value: function _isVirtualizationDisabled() {
        return this.props.disableVirtualization;
      }
    }, {
      key: "_isNestedWithSameOrientation",
      value: function _isNestedWithSameOrientation() {
        var nestedContext = this.context.virtualizedList;
        return !!(nestedContext && !!nestedContext.horizontal === !!this.props.horizontal);
      }
    }, {
      key: "render",
      value: function render() {
        if (__DEV__) {
          var flatStyles = flattenStyle(this.props.contentContainerStyle);
          warning(flatStyles == null || flatStyles.flexWrap !== 'wrap', '`flexWrap: `wrap`` is not supported with the `VirtualizedList` components.' + 'Consider using `numColumns` with `FlatList` instead.');
        }

        var _props4 = this.props,
            ListEmptyComponent = _props4.ListEmptyComponent,
            ListFooterComponent = _props4.ListFooterComponent,
            ListHeaderComponent = _props4.ListHeaderComponent;
        var _props5 = this.props,
            data = _props5.data,
            horizontal = _props5.horizontal;

        var isVirtualizationDisabled = this._isVirtualizationDisabled();

        var inversionStyle = this.props.inverted ? this.props.horizontal ? styles.horizontallyInverted : styles.verticallyInverted : null;
        var cells = [];
        var stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);
        var stickyHeaderIndices = [];

        if (ListHeaderComponent) {
          if (stickyIndicesFromProps.has(0)) {
            stickyHeaderIndices.push(0);
          }

          var element = React.isValidElement(ListHeaderComponent) ? ListHeaderComponent : React.createElement(ListHeaderComponent, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 742
            }
          });
          cells.push(React.createElement(
            VirtualizedCellWrapper,
            {
              cellKey: this._getCellKey() + '-header',
              key: "$header",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 745
              }
            },
            React.createElement(
              View,
              {
                onLayout: this._onLayoutHeader,
                style: inversionStyle,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 748
                }
              },
              element
            )
          ));
        }

        var itemCount = this.props.getItemCount(data);

        if (itemCount > 0) {
          _usedIndexForKey = false;
          var spacerKey = !horizontal ? 'height' : 'width';
          var lastInitialIndex = this.props.initialScrollIndex ? -1 : this.props.initialNumToRender - 1;
          var _state = this.state,
              _first = _state.first,
              _last = _state.last;

          this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, 0, lastInitialIndex, inversionStyle);

          var firstAfterInitial = Math.max(lastInitialIndex + 1, _first);

          if (!isVirtualizationDisabled && _first > lastInitialIndex + 1) {
            var insertedStickySpacer = false;

            if (stickyIndicesFromProps.size > 0) {
              var stickyOffset = ListHeaderComponent ? 1 : 0;

              for (var ii = firstAfterInitial - 1; ii > lastInitialIndex; ii--) {
                if (stickyIndicesFromProps.has(ii + stickyOffset)) {
                  var initBlock = this._getFrameMetricsApprox(lastInitialIndex);

                  var stickyBlock = this._getFrameMetricsApprox(ii);

                  var leadSpace = stickyBlock.offset - (initBlock.offset + initBlock.length);
                  cells.push(React.createElement(View, {
                    key: "$sticky_lead",
                    style: _defineProperty({}, spacerKey, leadSpace),
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 783
                    }
                  }));

                  this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, ii, ii, inversionStyle);

                  var trailSpace = this._getFrameMetricsApprox(_first).offset - (stickyBlock.offset + stickyBlock.length);
                  cells.push(React.createElement(View, {
                    key: "$sticky_trail",
                    style: _defineProperty({}, spacerKey, trailSpace),
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 797
                    }
                  }));
                  insertedStickySpacer = true;
                  break;
                }
              }
            }

            if (!insertedStickySpacer) {
              var _initBlock = this._getFrameMetricsApprox(lastInitialIndex);

              var firstSpace = this._getFrameMetricsApprox(_first).offset - (_initBlock.offset + _initBlock.length);

              cells.push(React.createElement(View, {
                key: "$lead_spacer",
                style: _defineProperty({}, spacerKey, firstSpace),
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 810
                }
              }));
            }
          }

          this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, firstAfterInitial, _last, inversionStyle);

          if (!this._hasWarned.keys && _usedIndexForKey) {
            console.warn('VirtualizedList: missing keys for items, make sure to specify a key property on each ' + 'item or provide a custom keyExtractor.');
            this._hasWarned.keys = true;
          }

          if (!isVirtualizationDisabled && _last < itemCount - 1) {
            var lastFrame = this._getFrameMetricsApprox(_last);

            var end = this.props.getItemLayout ? itemCount - 1 : Math.min(itemCount - 1, this._highestMeasuredFrameIndex);

            var endFrame = this._getFrameMetricsApprox(end);

            var tailSpacerLength = endFrame.offset + endFrame.length - (lastFrame.offset + lastFrame.length);
            cells.push(React.createElement(View, {
              key: "$tail_spacer",
              style: _defineProperty({}, spacerKey, tailSpacerLength),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 843
              }
            }));
          }
        } else if (ListEmptyComponent) {
          var _element = React.isValidElement(ListEmptyComponent) ? ListEmptyComponent : React.createElement(ListEmptyComponent, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 851
            }
          });

          cells.push(React.createElement(
            View,
            {
              key: "$empty",
              onLayout: this._onLayoutEmpty,
              style: inversionStyle,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 854
              }
            },
            _element
          ));
        }

        if (ListFooterComponent) {
          var _element2 = React.isValidElement(ListFooterComponent) ? ListFooterComponent : React.createElement(ListFooterComponent, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 867
            }
          });

          cells.push(React.createElement(
            VirtualizedCellWrapper,
            {
              cellKey: this._getCellKey() + '-footer',
              key: "$footer",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 870
              }
            },
            React.createElement(
              View,
              {
                onLayout: this._onLayoutFooter,
                style: inversionStyle,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 873
                }
              },
              _element2
            )
          ));
        }

        var scrollProps = _extends({}, this.props, {
          onContentSizeChange: this._onContentSizeChange,
          onLayout: this._onLayout,
          onScroll: this._onScroll,
          onScrollBeginDrag: this._onScrollBeginDrag,
          onScrollEndDrag: this._onScrollEndDrag,
          onMomentumScrollEnd: this._onMomentumScrollEnd,
          scrollEventThrottle: this.props.scrollEventThrottle,
          invertStickyHeaders: this.props.inverted,
          stickyHeaderIndices: stickyHeaderIndices
        });

        if (inversionStyle) {
          scrollProps.style = [inversionStyle, this.props.style];
        }

        this._hasMore = this.state.last < this.props.getItemCount(this.props.data) - 1;
        var ret = React.cloneElement((this.props.renderScrollComponent || this._defaultRenderScrollComponent)(scrollProps), {
          ref: this._captureScrollRef
        }, cells);

        if (this.props.debug) {
          return React.createElement(
            View,
            {
              style: {
                flex: 1
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 909
              }
            },
            ret,
            this._renderDebugOverlay()
          );
        } else {
          return ret;
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        this._scheduleCellsToRenderUpdate();
      }
    }, {
      key: "_computeBlankness",
      value: function _computeBlankness() {
        this._fillRateHelper.computeBlankness(this.props, this.state, this._scrollMetrics);
      }
    }, {
      key: "_onCellLayout",
      value: function _onCellLayout(e, cellKey, index) {
        var layout = e.nativeEvent.layout;
        var next = {
          offset: this._selectOffset(layout),
          length: this._selectLength(layout),
          index: index,
          inLayout: true
        };
        var curr = this._frames[cellKey];

        if (!curr || next.offset !== curr.offset || next.length !== curr.length || index !== curr.index) {
          this._totalCellLength += next.length - (curr ? curr.length : 0);
          this._totalCellsMeasured += curr ? 0 : 1;
          this._averageCellLength = this._totalCellLength / this._totalCellsMeasured;
          this._frames[cellKey] = next;
          this._highestMeasuredFrameIndex = Math.max(this._highestMeasuredFrameIndex, index);

          this._scheduleCellsToRenderUpdate();
        } else {
          this._frames[cellKey].inLayout = true;
        }

        this._computeBlankness();
      }
    }, {
      key: "_measureLayoutRelativeToContainingList",
      value: function _measureLayoutRelativeToContainingList() {
        var _this3 = this;

        UIManager.measureLayout(ReactNative.findNodeHandle(this), ReactNative.findNodeHandle(this.context.virtualizedList.getOutermostParentListRef()), function (error) {
          console.warn("VirtualizedList: Encountered an error while measuring a list's" + ' offset from its containing VirtualizedList.');
        }, function (x, y, width, height) {
          _this3._offsetFromParentVirtualizedList = _this3._selectOffset({
            x: x,
            y: y
          });
          _this3._scrollMetrics.contentLength = _this3._selectLength({
            width: width,
            height: height
          });

          var scrollMetrics = _this3._convertParentScrollMetrics(_this3.context.virtualizedList.getScrollMetrics());

          _this3._scrollMetrics.visibleLength = scrollMetrics.visibleLength;
          _this3._scrollMetrics.offset = scrollMetrics.offset;
        });
      }
    }, {
      key: "_renderDebugOverlay",
      value: function _renderDebugOverlay() {
        var normalize = this._scrollMetrics.visibleLength / this._scrollMetrics.contentLength;
        var framesInLayout = [];
        var itemCount = this.props.getItemCount(this.props.data);

        for (var ii = 0; ii < itemCount; ii++) {
          var frame = this._getFrameMetricsApprox(ii);

          if (frame.inLayout) {
            framesInLayout.push(frame);
          }
        }

        var windowTop = this._getFrameMetricsApprox(this.state.first).offset;

        var frameLast = this._getFrameMetricsApprox(this.state.last);

        var windowLen = frameLast.offset + frameLast.length - windowTop;
        var visTop = this._scrollMetrics.offset;
        var visLen = this._scrollMetrics.visibleLength;
        var baseStyle = {
          position: 'absolute',
          top: 0,
          right: 0
        };
        return React.createElement(
          View,
          {
            style: _extends({}, baseStyle, {
              bottom: 0,
              width: 20,
              borderColor: 'blue',
              borderWidth: 1
            }),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 1110
            }
          },
          framesInLayout.map(function (f, ii) {
            return React.createElement(View, {
              key: 'f' + ii,
              style: _extends({}, baseStyle, {
                left: 0,
                top: f.offset * normalize,
                height: f.length * normalize,
                backgroundColor: 'orange'
              }),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 1119
              }
            });
          }),
          React.createElement(View, {
            style: _extends({}, baseStyle, {
              left: 0,
              top: windowTop * normalize,
              height: windowLen * normalize,
              borderColor: 'green',
              borderWidth: 2
            }),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 1130
            }
          }),
          React.createElement(View, {
            style: _extends({}, baseStyle, {
              left: 0,
              top: visTop * normalize,
              height: visLen * normalize,
              borderColor: 'red',
              borderWidth: 2
            }),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 1140
            }
          })
        );
      }
    }, {
      key: "_selectLength",
      value: function _selectLength(metrics) {
        return !this.props.horizontal ? metrics.height : metrics.width;
      }
    }, {
      key: "_selectOffset",
      value: function _selectOffset(metrics) {
        return !this.props.horizontal ? metrics.y : metrics.x;
      }
    }, {
      key: "_maybeCallOnEndReached",
      value: function _maybeCallOnEndReached() {
        var _props6 = this.props,
            data = _props6.data,
            getItemCount = _props6.getItemCount,
            onEndReached = _props6.onEndReached,
            onEndReachedThreshold = _props6.onEndReachedThreshold;
        var _scrollMetrics = this._scrollMetrics,
            contentLength = _scrollMetrics.contentLength,
            visibleLength = _scrollMetrics.visibleLength,
            offset = _scrollMetrics.offset;
        var distanceFromEnd = contentLength - visibleLength - offset;

        if (onEndReached && this.state.last === getItemCount(data) - 1 && distanceFromEnd < onEndReachedThreshold * visibleLength && (this._hasDataChangedSinceEndReached || this._scrollMetrics.contentLength !== this._sentEndForContentLength)) {
          this._hasDataChangedSinceEndReached = false;
          this._sentEndForContentLength = this._scrollMetrics.contentLength;
          onEndReached({
            distanceFromEnd: distanceFromEnd
          });
        }
      }
    }, {
      key: "_scheduleCellsToRenderUpdate",
      value: function _scheduleCellsToRenderUpdate() {
        var _state2 = this.state,
            first = _state2.first,
            last = _state2.last;
        var _scrollMetrics2 = this._scrollMetrics,
            offset = _scrollMetrics2.offset,
            visibleLength = _scrollMetrics2.visibleLength,
            velocity = _scrollMetrics2.velocity;
        var itemCount = this.props.getItemCount(this.props.data);
        var hiPri = false;

        if (first > 0 || last < itemCount - 1) {
          var distTop = offset - this._getFrameMetricsApprox(first).offset;

          var distBottom = this._getFrameMetricsApprox(last).offset - (offset + visibleLength);
          var scrollingThreshold = this.props.onEndReachedThreshold * visibleLength / 2;
          hiPri = Math.min(distTop, distBottom) < 0 || velocity < -2 && distTop < scrollingThreshold || velocity > 2 && distBottom < scrollingThreshold;
        }

        if (hiPri && this._averageCellLength) {
          this._updateCellsToRenderBatcher.dispose({
            abort: true
          });

          this._updateCellsToRender();

          return;
        } else {
          this._updateCellsToRenderBatcher.schedule();
        }
      }
    }, {
      key: "_updateViewableItems",
      value: function _updateViewableItems(data) {
        var _this4 = this;

        var getItemCount = this.props.getItemCount;

        this._viewabilityTuples.forEach(function (tuple) {
          tuple.viewabilityHelper.onUpdate(getItemCount(data), _this4._scrollMetrics.offset, _this4._scrollMetrics.visibleLength, _this4._getFrameMetrics, _this4._createViewToken, tuple.onViewableItemsChanged, _this4.state);
        });
      }
    }]);

    return VirtualizedList;
  }(React.PureComponent), _class.defaultProps = {
    disableVirtualization: false,
    horizontal: false,
    initialNumToRender: 10,
    keyExtractor: function keyExtractor(item, index) {
      if (item.key != null) {
        return item.key;
      }

      _usedIndexForKey = true;
      return String(index);
    },
    maxToRenderPerBatch: 10,
    onEndReachedThreshold: 2,
    scrollEventThrottle: 50,
    updateCellsBatchingPeriod: 50,
    windowSize: 21
  }, _class.contextTypes = {
    virtualizedCell: PropTypes.shape({
      cellKey: PropTypes.string
    }),
    virtualizedList: PropTypes.shape({
      getScrollMetrics: PropTypes.func,
      horizontal: PropTypes.bool,
      getOutermostParentListRef: PropTypes.func,
      registerAsNestedChild: PropTypes.func,
      unregisterAsNestedChild: PropTypes.func
    })
  }, _class.childContextTypes = {
    virtualizedList: PropTypes.shape({
      getScrollMetrics: PropTypes.func,
      horizontal: PropTypes.bool,
      getOutermostParentListRef: PropTypes.func,
      registerAsNestedChild: PropTypes.func,
      unregisterAsNestedChild: PropTypes.func
    })
  }, _initialiseProps = function _initialiseProps() {
    var _this5 = this;

    this._getScrollMetrics = function () {
      return _this5._scrollMetrics;
    };

    this._getOutermostParentListRef = function () {
      if (_this5._isNestedWithSameOrientation()) {
        return _this5.context.virtualizedList.getOutermostParentListRef();
      } else {
        return _this5;
      }
    };

    this._registerAsNestedChild = function (childList) {
      var childListsInCell = _this5._cellKeysToChildListKeys.get(childList.cellKey) || new Set();
      childListsInCell.add(childList.key);

      _this5._cellKeysToChildListKeys.set(childList.cellKey, childListsInCell);

      var existingChildData = _this5._nestedChildLists.get(childList.key);

      invariant(!(existingChildData && existingChildData.ref !== null), 'A VirtualizedList contains a cell which itself contains ' + 'more than one VirtualizedList of the same orientation as the parent ' + 'list. You must pass a unique listKey prop to each sibling list.');

      _this5._nestedChildLists.set(childList.key, {
        ref: childList.ref,
        state: null
      });

      if (_this5._hasInteracted) {
        childList.ref.recordInteraction();
      }

      return existingChildData && existingChildData.state;
    };

    this._unregisterAsNestedChild = function (childList) {
      _this5._nestedChildLists.set(childList.key, {
        ref: null,
        state: childList.state
      });
    };

    this._onUpdateSeparators = function (keys, newProps) {
      keys.forEach(function (key) {
        var ref = key != null && _this5._cellRefs[key];
        ref && ref.updateSeparatorProps(newProps);
      });
    };

    this._averageCellLength = 0;
    this._cellKeysToChildListKeys = new Map();
    this._cellRefs = {};
    this._frames = {};
    this._footerLength = 0;
    this._hasDataChangedSinceEndReached = true;
    this._hasInteracted = false;
    this._hasMore = false;
    this._hasWarned = {};
    this._highestMeasuredFrameIndex = 0;
    this._headerLength = 0;
    this._indicesToKeys = new Map();
    this._hasDoneInitialScroll = false;
    this._nestedChildLists = new Map();
    this._offsetFromParentVirtualizedList = 0;
    this._prevParentOffset = 0;
    this._scrollMetrics = {
      contentLength: 0,
      dOffset: 0,
      dt: 10,
      offset: 0,
      timestamp: 0,
      velocity: 0,
      visibleLength: 0
    };
    this._scrollRef = null;
    this._sentEndForContentLength = 0;
    this._totalCellLength = 0;
    this._totalCellsMeasured = 0;
    this._viewabilityTuples = [];

    this._captureScrollRef = function (ref) {
      _this5._scrollRef = ref;
    };

    this._defaultRenderScrollComponent = function (props) {
      if (_this5._isNestedWithSameOrientation()) {
        return React.createElement(View, _extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 974
          }
        }));
      } else if (props.onRefresh) {
        invariant(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify(props.refreshing) + '`');
        return React.createElement(ScrollView, _extends({}, props, {
          refreshControl: React.createElement(RefreshControl, {
            refreshing: props.refreshing,
            onRefresh: props.onRefresh,
            progressViewOffset: props.progressViewOffset,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 989
            }
          }),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 983
          }
        }));
      } else {
        return React.createElement(ScrollView, _extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 998
          }
        }));
      }
    };

    this._onCellUnmount = function (cellKey) {
      var curr = _this5._frames[cellKey];

      if (curr) {
        _this5._frames[cellKey] = _extends({}, curr, {
          inLayout: false
        });
      }
    };

    this._onLayout = function (e) {
      if (_this5._isNestedWithSameOrientation()) {
        _this5._measureLayoutRelativeToContainingList();
      } else {
        _this5._scrollMetrics.visibleLength = _this5._selectLength(e.nativeEvent.layout);
      }

      _this5.props.onLayout && _this5.props.onLayout(e);

      _this5._scheduleCellsToRenderUpdate();

      _this5._maybeCallOnEndReached();
    };

    this._onLayoutEmpty = function (e) {
      _this5.props.onLayout && _this5.props.onLayout(e);
    };

    this._onLayoutFooter = function (e) {
      _this5._footerLength = _this5._selectLength(e.nativeEvent.layout);
    };

    this._onLayoutHeader = function (e) {
      _this5._headerLength = _this5._selectLength(e.nativeEvent.layout);
    };

    this._onContentSizeChange = function (width, height) {
      if (width > 0 && height > 0 && _this5.props.initialScrollIndex != null && _this5.props.initialScrollIndex > 0 && !_this5._hasDoneInitialScroll) {
        _this5.scrollToIndex({
          animated: false,
          index: _this5.props.initialScrollIndex
        });

        _this5._hasDoneInitialScroll = true;
      }

      if (_this5.props.onContentSizeChange) {
        _this5.props.onContentSizeChange(width, height);
      }

      _this5._scrollMetrics.contentLength = _this5._selectLength({
        height: height,
        width: width
      });

      _this5._scheduleCellsToRenderUpdate();

      _this5._maybeCallOnEndReached();
    };

    this._convertParentScrollMetrics = function (metrics) {
      var offset = metrics.offset - _this5._offsetFromParentVirtualizedList;
      var visibleLength = metrics.visibleLength;
      var dOffset = offset - _this5._scrollMetrics.offset;
      var contentLength = _this5._scrollMetrics.contentLength;
      return {
        visibleLength: visibleLength,
        contentLength: contentLength,
        offset: offset,
        dOffset: dOffset
      };
    };

    this._onScroll = function (e) {
      _this5._nestedChildLists.forEach(function (childList) {
        childList.ref && childList.ref._onScroll(e);
      });

      if (_this5.props.onScroll) {
        _this5.props.onScroll(e);
      }

      var timestamp = e.timeStamp;

      var visibleLength = _this5._selectLength(e.nativeEvent.layoutMeasurement);

      var contentLength = _this5._selectLength(e.nativeEvent.contentSize);

      var offset = _this5._selectOffset(e.nativeEvent.contentOffset);

      var dOffset = offset - _this5._scrollMetrics.offset;

      if (_this5._isNestedWithSameOrientation()) {
        if (_this5._scrollMetrics.contentLength === 0) {
          return;
        }

        var _convertParentScrollM = _this5._convertParentScrollMetrics({
          visibleLength: visibleLength,
          offset: offset
        });

        visibleLength = _convertParentScrollM.visibleLength;
        contentLength = _convertParentScrollM.contentLength;
        offset = _convertParentScrollM.offset;
        dOffset = _convertParentScrollM.dOffset;
      }

      var dt = _this5._scrollMetrics.timestamp ? Math.max(1, timestamp - _this5._scrollMetrics.timestamp) : 1;
      var velocity = dOffset / dt;

      if (dt > 500 && _this5._scrollMetrics.dt > 500 && contentLength > 5 * visibleLength && !_this5._hasWarned.perf) {
        infoLog('VirtualizedList: You have a large list that is slow to update - make sure your ' + 'renderItem function renders components that follow React performance best practices ' + 'like PureComponent, shouldComponentUpdate, etc.', {
          dt: dt,
          prevDt: _this5._scrollMetrics.dt,
          contentLength: contentLength
        });
        _this5._hasWarned.perf = true;
      }

      _this5._scrollMetrics = {
        contentLength: contentLength,
        dt: dt,
        dOffset: dOffset,
        offset: offset,
        timestamp: timestamp,
        velocity: velocity,
        visibleLength: visibleLength
      };

      _this5._updateViewableItems(_this5.props.data);

      if (!_this5.props) {
        return;
      }

      _this5._maybeCallOnEndReached();

      if (velocity !== 0) {
        _this5._fillRateHelper.activate();
      }

      _this5._computeBlankness();

      _this5._scheduleCellsToRenderUpdate();
    };

    this._onScrollBeginDrag = function (e) {
      _this5._nestedChildLists.forEach(function (childList) {
        childList.ref && childList.ref._onScrollBeginDrag(e);
      });

      _this5._viewabilityTuples.forEach(function (tuple) {
        tuple.viewabilityHelper.recordInteraction();
      });

      _this5._hasInteracted = true;
      _this5.props.onScrollBeginDrag && _this5.props.onScrollBeginDrag(e);
    };

    this._onScrollEndDrag = function (e) {
      var velocity = e.nativeEvent.velocity;

      if (velocity) {
        _this5._scrollMetrics.velocity = _this5._selectOffset(velocity);
      }

      _this5._computeBlankness();

      _this5.props.onScrollEndDrag && _this5.props.onScrollEndDrag(e);
    };

    this._onMomentumScrollEnd = function (e) {
      _this5._scrollMetrics.velocity = 0;

      _this5._computeBlankness();

      _this5.props.onMomentumScrollEnd && _this5.props.onMomentumScrollEnd(e);
    };

    this._updateCellsToRender = function () {
      var _props7 = _this5.props,
          data = _props7.data,
          getItemCount = _props7.getItemCount,
          onEndReachedThreshold = _props7.onEndReachedThreshold;

      var isVirtualizationDisabled = _this5._isVirtualizationDisabled();

      _this5._updateViewableItems(data);

      if (!data) {
        return;
      }

      _this5.setState(function (state) {
        var newState = void 0;

        if (!isVirtualizationDisabled) {
          if (_this5._scrollMetrics.visibleLength) {
            if (!_this5.props.initialScrollIndex || _this5._scrollMetrics.offset) {
              newState = computeWindowedRenderLimits(_this5.props, state, _this5._getFrameMetricsApprox, _this5._scrollMetrics);
            }
          }
        } else {
          var _scrollMetrics3 = _this5._scrollMetrics,
              contentLength = _scrollMetrics3.contentLength,
              _offset = _scrollMetrics3.offset,
              visibleLength = _scrollMetrics3.visibleLength;

          var _distanceFromEnd = contentLength - visibleLength - _offset;

          var renderAhead = _distanceFromEnd < onEndReachedThreshold * visibleLength ? _this5.props.maxToRenderPerBatch : 0;
          newState = {
            first: 0,
            last: Math.min(state.last + renderAhead, getItemCount(data) - 1)
          };
        }

        if (newState && _this5._nestedChildLists.size > 0) {
          var newFirst = newState.first;
          var newLast = newState.last;

          for (var ii = newFirst; ii <= newLast; ii++) {
            var cellKeyForIndex = _this5._indicesToKeys.get(ii);

            var childListKeys = cellKeyForIndex && _this5._cellKeysToChildListKeys.get(cellKeyForIndex);

            if (!childListKeys) {
              continue;
            }

            var someChildHasMore = false;

            for (var _iterator = childListKeys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
              var _ref6;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref6 = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref6 = _i.value;
              }

              var childKey = _ref6;

              var childList = _this5._nestedChildLists.get(childKey);

              if (childList && childList.ref && childList.ref.hasMore()) {
                someChildHasMore = true;
                break;
              }
            }

            if (someChildHasMore) {
              newState.last = ii;
              break;
            }
          }
        }

        return newState;
      });
    };

    this._createViewToken = function (index, isViewable) {
      var _props8 = _this5.props,
          data = _props8.data,
          getItem = _props8.getItem,
          keyExtractor = _props8.keyExtractor;
      var item = getItem(data, index);
      return {
        index: index,
        item: item,
        key: keyExtractor(item, index),
        isViewable: isViewable
      };
    };

    this._getFrameMetricsApprox = function (index) {
      var frame = _this5._getFrameMetrics(index);

      if (frame && frame.index === index) {
        return frame;
      } else {
        var _getItemLayout = _this5.props.getItemLayout;
        invariant(!_getItemLayout, 'Should not have to estimate frames when a measurement metrics function is provided');
        return {
          length: _this5._averageCellLength,
          offset: _this5._averageCellLength * index
        };
      }
    };

    this._getFrameMetrics = function (index) {
      var _props9 = _this5.props,
          data = _props9.data,
          getItem = _props9.getItem,
          getItemCount = _props9.getItemCount,
          getItemLayout = _props9.getItemLayout,
          keyExtractor = _props9.keyExtractor;
      invariant(getItemCount(data) > index, 'Tried to get frame for out of range index ' + index);
      var item = getItem(data, index);

      var frame = item && _this5._frames[keyExtractor(item, index)];

      if (!frame || frame.index !== index) {
        if (getItemLayout) {
          frame = getItemLayout(data, index);

          if (__DEV__) {
            var frameType = PropTypes.shape({
              length: PropTypes.number.isRequired,
              offset: PropTypes.number.isRequired,
              index: PropTypes.number.isRequired
            }).isRequired;
            PropTypes.checkPropTypes({
              frame: frameType
            }, {
              frame: frame
            }, 'frame', 'VirtualizedList.getItemLayout');
          }
        }
      }

      return frame;
    };
  }, _temp));

  var CellRenderer = _wrapComponent("CellRenderer")((_temp3 = _class2 = function (_React$Component) {
    _inherits(CellRenderer, _React$Component);

    function CellRenderer() {
      var _ref7;

      var _temp2, _this6, _ret2;

      _classCallCheck(this, CellRenderer);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret2 = (_temp2 = (_this6 = _possibleConstructorReturn(this, (_ref7 = CellRenderer.__proto__ || Object.getPrototypeOf(CellRenderer)).call.apply(_ref7, [this].concat(args))), _this6), _this6.state = {
        separatorProps: {
          highlighted: false,
          leadingItem: _this6.props.item
        }
      }, _this6._separators = {
        highlight: function highlight() {
          var _this6$props = _this6.props,
              cellKey = _this6$props.cellKey,
              prevCellKey = _this6$props.prevCellKey;

          _this6.props.onUpdateSeparators([cellKey, prevCellKey], {
            highlighted: true
          });
        },
        unhighlight: function unhighlight() {
          var _this6$props2 = _this6.props,
              cellKey = _this6$props2.cellKey,
              prevCellKey = _this6$props2.prevCellKey;

          _this6.props.onUpdateSeparators([cellKey, prevCellKey], {
            highlighted: false
          });
        },
        updateProps: function updateProps(select, newProps) {
          var _this6$props3 = _this6.props,
              cellKey = _this6$props3.cellKey,
              prevCellKey = _this6$props3.prevCellKey;

          _this6.props.onUpdateSeparators([select === 'leading' ? prevCellKey : cellKey], newProps);
        }
      }, _temp2), _possibleConstructorReturn(_this6, _ret2);
    }

    _createClass(CellRenderer, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          virtualizedCell: {
            cellKey: this.props.cellKey
          }
        };
      }
    }, {
      key: "updateSeparatorProps",
      value: function updateSeparatorProps(newProps) {
        this.setState(function (state) {
          return {
            separatorProps: _extends({}, state.separatorProps, newProps)
          };
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.props.onUnmount(this.props.cellKey);
      }
    }, {
      key: "render",
      value: function render() {
        var _props10 = this.props,
            CellRendererComponent = _props10.CellRendererComponent,
            ItemSeparatorComponent = _props10.ItemSeparatorComponent,
            fillRateHelper = _props10.fillRateHelper,
            horizontal = _props10.horizontal,
            item = _props10.item,
            index = _props10.index,
            inversionStyle = _props10.inversionStyle,
            parentProps = _props10.parentProps;
        var renderItem = parentProps.renderItem,
            getItemLayout = parentProps.getItemLayout;
        invariant(renderItem, 'no renderItem!');
        var element = renderItem({
          item: item,
          index: index,
          separators: this._separators
        });
        var onLayout = getItemLayout && !parentProps.debug && !fillRateHelper.enabled() ? undefined : this.props.onLayout;
        var itemSeparator = ItemSeparatorComponent && React.createElement(ItemSeparatorComponent, _extends({}, this.state.separatorProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 1629
          }
        }));
        var cellStyle = inversionStyle ? horizontal ? [{
          flexDirection: 'row-reverse'
        }, inversionStyle] : [{
          flexDirection: 'column-reverse'
        }, inversionStyle] : horizontal ? [{
          flexDirection: 'row'
        }, inversionStyle] : inversionStyle;

        if (!CellRendererComponent) {
          return React.createElement(
            View,
            {
              style: cellStyle,
              onLayout: onLayout,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 1638
              }
            },
            element,
            itemSeparator
          );
        }

        return React.createElement(
          CellRendererComponent,
          _extends({}, this.props, {
            style: cellStyle,
            onLayout: onLayout,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 1645
            }
          }),
          element,
          itemSeparator
        );
      }
    }]);

    return CellRenderer;
  }(React.Component), _class2.childContextTypes = {
    virtualizedCell: PropTypes.shape({
      cellKey: PropTypes.string
    })
  }, _temp3));

  var VirtualizedCellWrapper = _wrapComponent("VirtualizedCellWrapper")((_temp4 = _class3 = function (_React$Component2) {
    _inherits(VirtualizedCellWrapper, _React$Component2);

    function VirtualizedCellWrapper() {
      _classCallCheck(this, VirtualizedCellWrapper);

      return _possibleConstructorReturn(this, (VirtualizedCellWrapper.__proto__ || Object.getPrototypeOf(VirtualizedCellWrapper)).apply(this, arguments));
    }

    _createClass(VirtualizedCellWrapper, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          virtualizedCell: {
            cellKey: this.props.cellKey
          }
        };
      }
    }, {
      key: "render",
      value: function render() {
        return this.props.children;
      }
    }]);

    return VirtualizedCellWrapper;
  }(React.Component), _class3.childContextTypes = {
    virtualizedCell: PropTypes.shape({
      cellKey: PropTypes.string
    })
  }, _temp4));

  var styles = StyleSheet.create({
    verticallyInverted: {
      transform: [{
        scaleY: -1
      }]
    },
    horizontallyInverted: {
      transform: [{
        scaleX: -1
      }]
    }
  });
  module.exports = VirtualizedList;
},405,[113,179,406,407,130,133,21,404,381,171,109,173,408,104,93,13,56,409],"VirtualizedList");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var InteractionManager = _require(_dependencyMap[0], 'InteractionManager');

  var Batchinator = function () {
    function Batchinator(callback, delayMS) {
      _classCallCheck(this, Batchinator);

      this._delay = delayMS;
      this._callback = callback;
    }

    _createClass(Batchinator, [{
      key: "dispose",
      value: function dispose() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
          abort: false
        };

        if (this._taskHandle) {
          this._taskHandle.cancel();

          if (!options.abort) {
            this._callback();
          }

          this._taskHandle = null;
        }
      }
    }, {
      key: "schedule",
      value: function schedule() {
        var _this = this;

        if (this._taskHandle) {
          return;
        }

        var timeoutHandle = setTimeout(function () {
          _this._taskHandle = InteractionManager.runAfterInteractions(function () {
            _this._taskHandle = null;

            _this._callback();
          });
        }, this._delay);
        this._taskHandle = {
          cancel: function cancel() {
            return clearTimeout(timeoutHandle);
          }
        };
      }
    }]);

    return Batchinator;
  }();

  module.exports = Batchinator;
},406,[360],"Batchinator");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var performanceNow = _require(_dependencyMap[0], 'fbjs/lib/performanceNow');

  var warning = _require(_dependencyMap[1], 'fbjs/lib/warning');

  var Info = function Info() {
    _classCallCheck(this, Info);

    this.any_blank_count = 0;
    this.any_blank_ms = 0;
    this.any_blank_speed_sum = 0;
    this.mostly_blank_count = 0;
    this.mostly_blank_ms = 0;
    this.pixels_blank = 0;
    this.pixels_sampled = 0;
    this.pixels_scrolled = 0;
    this.total_time_spent = 0;
    this.sample_count = 0;
  };

  var DEBUG = false;
  var _listeners = [];
  var _minSampleCount = 10;

  var _sampleRate = DEBUG ? 1 : null;

  var FillRateHelper = function () {
    _createClass(FillRateHelper, null, [{
      key: "addListener",
      value: function addListener(callback) {
        warning(_sampleRate !== null, 'Call `FillRateHelper.setSampleRate` before `addListener`.');

        _listeners.push(callback);

        return {
          remove: function remove() {
            _listeners = _listeners.filter(function (listener) {
              return callback !== listener;
            });
          }
        };
      }
    }, {
      key: "setSampleRate",
      value: function setSampleRate(sampleRate) {
        _sampleRate = sampleRate;
      }
    }, {
      key: "setMinSampleCount",
      value: function setMinSampleCount(minSampleCount) {
        _minSampleCount = minSampleCount;
      }
    }]);

    function FillRateHelper(getFrameMetrics) {
      _classCallCheck(this, FillRateHelper);

      this._anyBlankStartTime = null;
      this._enabled = false;
      this._info = new Info();
      this._mostlyBlankStartTime = null;
      this._samplesStartTime = null;
      this._getFrameMetrics = getFrameMetrics;
      this._enabled = (_sampleRate || 0) > Math.random();

      this._resetData();
    }

    _createClass(FillRateHelper, [{
      key: "activate",
      value: function activate() {
        if (this._enabled && this._samplesStartTime == null) {
          DEBUG && console.debug('FillRateHelper: activate');
          this._samplesStartTime = performanceNow();
        }
      }
    }, {
      key: "deactivateAndFlush",
      value: function deactivateAndFlush() {
        if (!this._enabled) {
          return;
        }

        var start = this._samplesStartTime;

        if (start == null) {
          DEBUG && console.debug('FillRateHelper: bail on deactivate with no start time');
          return;
        }

        if (this._info.sample_count < _minSampleCount) {
          this._resetData();

          return;
        }

        var total_time_spent = performanceNow() - start;

        var info = _extends({}, this._info, {
          total_time_spent: total_time_spent
        });

        if (DEBUG) {
          var derived = {
            avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,
            avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),
            avg_speed_when_any_blank: this._info.any_blank_speed_sum / this._info.any_blank_count,
            any_blank_per_min: this._info.any_blank_count / (total_time_spent / 1000 / 60),
            any_blank_time_frac: this._info.any_blank_ms / total_time_spent,
            mostly_blank_per_min: this._info.mostly_blank_count / (total_time_spent / 1000 / 60),
            mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent
          };

          for (var key in derived) {
            derived[key] = Math.round(1000 * derived[key]) / 1000;
          }

          console.debug('FillRateHelper deactivateAndFlush: ', {
            derived: derived,
            info: info
          });
        }

        _listeners.forEach(function (listener) {
          return listener(info);
        });

        this._resetData();
      }
    }, {
      key: "computeBlankness",
      value: function computeBlankness(props, state, scrollMetrics) {
        if (!this._enabled || props.getItemCount(props.data) === 0 || this._samplesStartTime == null) {
          return 0;
        }

        var dOffset = scrollMetrics.dOffset,
            offset = scrollMetrics.offset,
            velocity = scrollMetrics.velocity,
            visibleLength = scrollMetrics.visibleLength;
        this._info.sample_count++;
        this._info.pixels_sampled += Math.round(visibleLength);
        this._info.pixels_scrolled += Math.round(Math.abs(dOffset));
        var scrollSpeed = Math.round(Math.abs(velocity) * 1000);
        var now = performanceNow();

        if (this._anyBlankStartTime != null) {
          this._info.any_blank_ms += now - this._anyBlankStartTime;
        }

        this._anyBlankStartTime = null;

        if (this._mostlyBlankStartTime != null) {
          this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;
        }

        this._mostlyBlankStartTime = null;
        var blankTop = 0;
        var first = state.first;

        var firstFrame = this._getFrameMetrics(first);

        while (first <= state.last && (!firstFrame || !firstFrame.inLayout)) {
          firstFrame = this._getFrameMetrics(first);
          first++;
        }

        if (firstFrame && first > 0) {
          blankTop = Math.min(visibleLength, Math.max(0, firstFrame.offset - offset));
        }

        var blankBottom = 0;
        var last = state.last;

        var lastFrame = this._getFrameMetrics(last);

        while (last >= state.first && (!lastFrame || !lastFrame.inLayout)) {
          lastFrame = this._getFrameMetrics(last);
          last--;
        }

        if (lastFrame && last < props.getItemCount(props.data) - 1) {
          var bottomEdge = lastFrame.offset + lastFrame.length;
          blankBottom = Math.min(visibleLength, Math.max(0, offset + visibleLength - bottomEdge));
        }

        var pixels_blank = Math.round(blankTop + blankBottom);
        var blankness = pixels_blank / visibleLength;

        if (blankness > 0) {
          this._anyBlankStartTime = now;
          this._info.any_blank_speed_sum += scrollSpeed;
          this._info.any_blank_count++;
          this._info.pixels_blank += pixels_blank;

          if (blankness > 0.5) {
            this._mostlyBlankStartTime = now;
            this._info.mostly_blank_count++;
          }
        } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {
          this.deactivateAndFlush();
        }

        return blankness;
      }
    }, {
      key: "enabled",
      value: function enabled() {
        return this._enabled;
      }
    }, {
      key: "_resetData",
      value: function _resetData() {
        this._anyBlankStartTime = null;
        this._info = new Info();
        this._mostlyBlankStartTime = null;
        this._samplesStartTime = null;
      }
    }]);

    return FillRateHelper;
  }();

  module.exports = FillRateHelper;
},407,[53,56],"FillRateHelper");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var ViewabilityHelper = function () {
    function ViewabilityHelper() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        viewAreaCoveragePercentThreshold: 0
      };

      _classCallCheck(this, ViewabilityHelper);

      this._hasInteracted = false;
      this._timers = new Set();
      this._viewableIndices = [];
      this._viewableItems = new Map();
      this._config = config;
    }

    _createClass(ViewabilityHelper, [{
      key: "dispose",
      value: function dispose() {
        this._timers.forEach(clearTimeout);
      }
    }, {
      key: "computeViewableItems",
      value: function computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange) {
        var _config = this._config,
            itemVisiblePercentThreshold = _config.itemVisiblePercentThreshold,
            viewAreaCoveragePercentThreshold = _config.viewAreaCoveragePercentThreshold;
        var viewAreaMode = viewAreaCoveragePercentThreshold != null;
        var viewablePercentThreshold = viewAreaMode ? viewAreaCoveragePercentThreshold : itemVisiblePercentThreshold;
        invariant(viewablePercentThreshold != null && itemVisiblePercentThreshold != null !== (viewAreaCoveragePercentThreshold != null), 'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold');
        var viewableIndices = [];

        if (itemCount === 0) {
          return viewableIndices;
        }

        var firstVisible = -1;

        var _ref = renderRange || {
          first: 0,
          last: itemCount - 1
        },
            first = _ref.first,
            last = _ref.last;

        invariant(last < itemCount, 'Invalid render range ' + JSON.stringify({
          renderRange: renderRange,
          itemCount: itemCount
        }));

        for (var idx = first; idx <= last; idx++) {
          var metrics = getFrameMetrics(idx);

          if (!metrics) {
            continue;
          }

          var top = metrics.offset - scrollOffset;
          var bottom = top + metrics.length;

          if (top < viewportHeight && bottom > 0) {
            firstVisible = idx;

            if (_isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, metrics.length)) {
              viewableIndices.push(idx);
            }
          } else if (firstVisible >= 0) {
            break;
          }
        }

        return viewableIndices;
      }
    }, {
      key: "onUpdate",
      value: function onUpdate(itemCount, scrollOffset, viewportHeight, getFrameMetrics, createViewToken, onViewableItemsChanged, renderRange) {
        var _this = this;

        if (this._config.waitForInteraction && !this._hasInteracted || itemCount === 0 || !getFrameMetrics(0)) {
          return;
        }

        var viewableIndices = [];

        if (itemCount) {
          viewableIndices = this.computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange);
        }

        if (this._viewableIndices.length === viewableIndices.length && this._viewableIndices.every(function (v, ii) {
          return v === viewableIndices[ii];
        })) {
          return;
        }

        this._viewableIndices = viewableIndices;

        if (this._config.minimumViewTime) {
          var handle = setTimeout(function () {
            _this._timers.delete(handle);

            _this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);
          }, this._config.minimumViewTime);

          this._timers.add(handle);
        } else {
          this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);
        }
      }
    }, {
      key: "resetViewableIndices",
      value: function resetViewableIndices() {
        this._viewableIndices = [];
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        this._hasInteracted = true;
      }
    }, {
      key: "_onUpdateSync",
      value: function _onUpdateSync(viewableIndicesToCheck, onViewableItemsChanged, createViewToken) {
        var _this2 = this;

        viewableIndicesToCheck = viewableIndicesToCheck.filter(function (ii) {
          return _this2._viewableIndices.includes(ii);
        });
        var prevItems = this._viewableItems;
        var nextItems = new Map(viewableIndicesToCheck.map(function (ii) {
          var viewable = createViewToken(ii, true);
          return [viewable.key, viewable];
        }));
        var changed = [];

        for (var _iterator = nextItems, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref4;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref4 = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref4 = _i.value;
          }

          var _ref2 = _ref4;

          var _ref3 = _slicedToArray(_ref2, 2);

          var _key = _ref3[0];
          var viewable = _ref3[1];

          if (!prevItems.has(_key)) {
            changed.push(viewable);
          }
        }

        for (var _iterator2 = prevItems, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref7;

          if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref7 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref7 = _i2.value;
          }

          var _ref5 = _ref7;

          var _ref6 = _slicedToArray(_ref5, 2);

          var _key2 = _ref6[0];
          var _viewable = _ref6[1];

          if (!nextItems.has(_key2)) {
            changed.push(_extends({}, _viewable, {
              isViewable: false
            }));
          }
        }

        if (changed.length > 0) {
          this._viewableItems = nextItems;
          onViewableItemsChanged({
            viewableItems: Array.from(nextItems.values()),
            changed: changed,
            viewabilityConfig: this._config
          });
        }
      }
    }]);

    return ViewabilityHelper;
  }();

  function _isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, itemLength) {
    if (_isEntirelyVisible(top, bottom, viewportHeight)) {
      return true;
    } else {
      var pixels = _getPixelsVisible(top, bottom, viewportHeight);

      var percent = 100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);
      return percent >= viewablePercentThreshold;
    }
  }

  function _getPixelsVisible(top, bottom, viewportHeight) {
    var visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);
    return Math.max(0, visibleHeight);
  }

  function _isEntirelyVisible(top, bottom, viewportHeight) {
    return top >= 0 && bottom <= viewportHeight && bottom > top;
  }

  module.exports = ViewabilityHelper;
},408,[13],"ViewabilityHelper");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  function elementsThatOverlapOffsets(offsets, itemCount, getFrameMetrics) {
    var out = [];
    var outLength = 0;

    for (var ii = 0; ii < itemCount; ii++) {
      var frame = getFrameMetrics(ii);
      var trailingOffset = frame.offset + frame.length;

      for (var kk = 0; kk < offsets.length; kk++) {
        if (out[kk] == null && trailingOffset >= offsets[kk]) {
          out[kk] = ii;
          outLength++;

          if (kk === offsets.length - 1) {
            invariant(outLength === offsets.length, 'bad offsets input, should be in increasing order: %s', JSON.stringify(offsets));
            return out;
          }
        }
      }
    }

    return out;
  }

  function newRangeCount(prev, next) {
    return next.last - next.first + 1 - Math.max(0, 1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first));
  }

  function computeWindowedRenderLimits(props, prev, getFrameMetricsApprox, scrollMetrics) {
    var data = props.data,
        getItemCount = props.getItemCount,
        maxToRenderPerBatch = props.maxToRenderPerBatch,
        windowSize = props.windowSize;
    var itemCount = getItemCount(data);

    if (itemCount === 0) {
      return prev;
    }

    var offset = scrollMetrics.offset,
        velocity = scrollMetrics.velocity,
        visibleLength = scrollMetrics.visibleLength;
    var visibleBegin = Math.max(0, offset);
    var visibleEnd = visibleBegin + visibleLength;
    var overscanLength = (windowSize - 1) * visibleLength;
    var leadFactor = 0.5;
    var fillPreference = velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';
    var overscanBegin = Math.max(0, visibleBegin - (1 - leadFactor) * overscanLength);
    var overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);
    var lastItemOffset = getFrameMetricsApprox(itemCount - 1).offset;

    if (lastItemOffset < overscanBegin) {
      return {
        first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),
        last: itemCount - 1
      };
    }

    var _elementsThatOverlapO = elementsThatOverlapOffsets([overscanBegin, visibleBegin, visibleEnd, overscanEnd], props.getItemCount(props.data), getFrameMetricsApprox),
        _elementsThatOverlapO2 = _slicedToArray(_elementsThatOverlapO, 4),
        overscanFirst = _elementsThatOverlapO2[0],
        first = _elementsThatOverlapO2[1],
        last = _elementsThatOverlapO2[2],
        overscanLast = _elementsThatOverlapO2[3];

    overscanFirst = overscanFirst == null ? 0 : overscanFirst;
    first = first == null ? Math.max(0, overscanFirst) : first;
    overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;
    last = last == null ? Math.min(overscanLast, first + maxToRenderPerBatch - 1) : last;
    var visible = {
      first: first,
      last: last
    };
    var newCellCount = newRangeCount(prev, visible);

    while (true) {
      if (first <= overscanFirst && last >= overscanLast) {
        break;
      }

      var maxNewCells = newCellCount >= maxToRenderPerBatch;
      var firstWillAddMore = first <= prev.first || first > prev.last;
      var firstShouldIncrement = first > overscanFirst && (!maxNewCells || !firstWillAddMore);
      var lastWillAddMore = last >= prev.last || last < prev.first;
      var lastShouldIncrement = last < overscanLast && (!maxNewCells || !lastWillAddMore);

      if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {
        break;
      }

      if (firstShouldIncrement && !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)) {
        if (firstWillAddMore) {
          newCellCount++;
        }

        first--;
      }

      if (lastShouldIncrement && !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)) {
        if (lastWillAddMore) {
          newCellCount++;
        }

        last++;
      }
    }

    if (!(last >= first && first >= 0 && last < itemCount && first >= overscanFirst && last <= overscanLast && first <= visible.first && last >= visible.last)) {
      throw new Error('Bad window calculation ' + JSON.stringify({
        first: first,
        last: last,
        itemCount: itemCount,
        overscanFirst: overscanFirst,
        overscanLast: overscanLast,
        visible: visible
      }));
    }

    return {
      first: first,
      last: last
    };
  }

  var VirtualizeUtils = {
    computeWindowedRenderLimits: computeWindowedRenderLimits,
    elementsThatOverlapOffsets: elementsThatOverlapOffsets,
    newRangeCount: newRangeCount
  };
  module.exports = VirtualizeUtils;
},409,[13],"VirtualizeUtils");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Image\\ImageBackground.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    ImageBackground: {
      displayName: "ImageBackground"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Image/ImageBackground.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var Image = _require(_dependencyMap[2], 'Image');

  var React = _require(_dependencyMap[3], 'React');

  var StyleSheet = _require(_dependencyMap[4], 'StyleSheet');

  var View = _require(_dependencyMap[5], 'View');

  var ensureComponentIsNative = _require(_dependencyMap[6], 'ensureComponentIsNative');

  var ImageBackground = _wrapComponent("ImageBackground")(function (_React$Component) {
    _inherits(ImageBackground, _React$Component);

    function ImageBackground() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, ImageBackground);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ImageBackground.__proto__ || Object.getPrototypeOf(ImageBackground)).call.apply(_ref, [this].concat(args))), _this), _this._viewRef = null, _this._captureRef = function (ref) {
        _this._viewRef = ref;
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(ImageBackground, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {
        var viewRef = this._viewRef;

        if (viewRef) {
          ensureComponentIsNative(viewRef);
          viewRef.setNativeProps(props);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            children = _props.children,
            style = _props.style,
            imageStyle = _props.imageStyle,
            imageRef = _props.imageRef,
            props = _objectWithoutProperties(_props, ["children", "style", "imageStyle", "imageRef"]);

        return React.createElement(
          View,
          {
            style: style,
            ref: this._captureRef,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 68
            }
          },
          React.createElement(Image, _extends({}, props, {
            style: [StyleSheet.absoluteFill, {
              width: style.width,
              height: style.height
            }, imageStyle],
            ref: imageRef,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 69
            }
          })),
          children
        );
      }
    }]);

    return ImageBackground;
  }(React.Component));

  module.exports = ImageBackground;
},410,[113,179,380,133,171,173,411],"ImageBackground");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var ensureComponentIsNative = function ensureComponentIsNative(component) {
    invariant(component && typeof component.setNativeProps === 'function', 'Touchable child must either be native or forward setNativeProps to a ' + 'native component');
  };

  module.exports = ensureComponentIsNative;
},411,[13],"ensureComponentIsNative");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var RCTImageEditingManager = _require(_dependencyMap[0], 'NativeModules').ImageEditingManager;

  var ImageEditor = function () {
    function ImageEditor() {
      _classCallCheck(this, ImageEditor);
    }

    _createClass(ImageEditor, null, [{
      key: "cropImage",
      value: function cropImage(uri, cropData, success, failure) {
        RCTImageEditingManager.cropImage(uri, cropData, success, failure);
      }
    }]);

    return ImageEditor;
  }();

  module.exports = ImageEditor;
},412,[15],"ImageEditor");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var RCTImageStoreManager = _require(_dependencyMap[0], 'NativeModules').ImageStoreManager;

  var ImageStore = function () {
    function ImageStore() {
      _classCallCheck(this, ImageStore);
    }

    _createClass(ImageStore, null, [{
      key: "hasImageForTag",
      value: function hasImageForTag(uri, callback) {
        if (RCTImageStoreManager.hasImageForTag) {
          RCTImageStoreManager.hasImageForTag(uri, callback);
        } else {
          console.warn('hasImageForTag() not implemented');
        }
      }
    }, {
      key: "removeImageForTag",
      value: function removeImageForTag(uri) {
        if (RCTImageStoreManager.removeImageForTag) {
          RCTImageStoreManager.removeImageForTag(uri);
        } else {
          console.warn('removeImageForTag() not implemented');
        }
      }
    }, {
      key: "addImageFromBase64",
      value: function addImageFromBase64(base64ImageData, success, failure) {
        RCTImageStoreManager.addImageFromBase64(base64ImageData, success, failure);
      }
    }, {
      key: "getBase64ForTag",
      value: function getBase64ForTag(uri, success, failure) {
        RCTImageStoreManager.getBase64ForTag(uri, success, failure);
      }
    }]);

    return ImageStore;
  }();

  module.exports = ImageStore;
},413,[15],"ImageStore");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Components\\Keyboard\\KeyboardAvoidingView.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  var createReactClass = _require(_dependencyMap[0], 'create-react-class');

  var Keyboard = _require(_dependencyMap[1], 'Keyboard');

  var LayoutAnimation = _require(_dependencyMap[2], 'LayoutAnimation');

  var Platform = _require(_dependencyMap[3], 'Platform');

  var PropTypes = _require(_dependencyMap[4], 'prop-types');

  var React = _require(_dependencyMap[5], 'React');

  var TimerMixin = _require(_dependencyMap[6], 'react-timer-mixin');

  var View = _require(_dependencyMap[7], 'View');

  var ViewPropTypes = _require(_dependencyMap[8], 'ViewPropTypes');

  var viewRef = 'VIEW';
  var KeyboardAvoidingView = createReactClass({
    displayName: 'KeyboardAvoidingView',
    mixins: [TimerMixin],
    propTypes: _extends({}, ViewPropTypes, {
      behavior: PropTypes.oneOf(['height', 'position', 'padding']),
      contentContainerStyle: ViewPropTypes.style,
      keyboardVerticalOffset: PropTypes.number.isRequired,
      enabled: PropTypes.bool.isRequired
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        enabled: true,
        keyboardVerticalOffset: 0
      };
    },
    getInitialState: function getInitialState() {
      return {
        bottom: 0
      };
    },
    subscriptions: [],
    frame: null,
    _relativeKeyboardHeight: function _relativeKeyboardHeight(keyboardFrame) {
      var frame = this.frame;

      if (!frame || !keyboardFrame) {
        return 0;
      }

      var keyboardY = keyboardFrame.screenY - this.props.keyboardVerticalOffset;
      return Math.max(frame.y + frame.height - keyboardY, 0);
    },
    _onKeyboardChange: function _onKeyboardChange(event) {
      if (!event) {
        this.setState({
          bottom: 0
        });
        return;
      }

      var duration = event.duration,
          easing = event.easing,
          endCoordinates = event.endCoordinates;

      var height = this._relativeKeyboardHeight(endCoordinates);

      if (this.state.bottom === height) {
        return;
      }

      if (duration && easing) {
        LayoutAnimation.configureNext({
          duration: duration,
          update: {
            duration: duration,
            type: LayoutAnimation.Types[easing] || 'keyboard'
          }
        });
      }

      this.setState({
        bottom: height
      });
    },
    _onLayout: function _onLayout(event) {
      this.frame = event.nativeEvent.layout;
    },
    UNSAFE_componentWillUpdate: function UNSAFE_componentWillUpdate(nextProps, nextState, nextContext) {
      if (nextState.bottom === this.state.bottom && this.props.behavior === 'height' && nextProps.behavior === 'height') {
        nextState.bottom = 0;
      }
    },
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      if (Platform.OS === 'ios') {
        this.subscriptions = [Keyboard.addListener('keyboardWillChangeFrame', this._onKeyboardChange)];
      } else {
        this.subscriptions = [Keyboard.addListener('keyboardDidHide', this._onKeyboardChange), Keyboard.addListener('keyboardDidShow', this._onKeyboardChange)];
      }
    },
    componentWillUnmount: function componentWillUnmount() {
      this.subscriptions.forEach(function (sub) {
        return sub.remove();
      });
    },
    render: function render() {
      var _props = this.props,
          behavior = _props.behavior,
          children = _props.children,
          style = _props.style,
          props = _objectWithoutProperties(_props, ["behavior", "children", "style"]);

      var bottomHeight = this.props.enabled ? this.state.bottom : 0;

      switch (behavior) {
        case 'height':
          var heightStyle = void 0;

          if (this.frame) {
            heightStyle = {
              height: this.frame.height - bottomHeight,
              flex: 0
            };
          }

          return React.createElement(
            View,
            _extends({
              ref: viewRef,
              style: [style, heightStyle],
              onLayout: this._onLayout
            }, props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 178
              }
            }),
            children
          );

        case 'position':
          var positionStyle = {
            bottom: bottomHeight
          };
          var contentContainerStyle = this.props.contentContainerStyle;
          return React.createElement(
            View,
            _extends({
              ref: viewRef,
              style: style,
              onLayout: this._onLayout
            }, props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 188
              }
            }),
            React.createElement(
              View,
              {
                style: [contentContainerStyle, positionStyle],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 189
                }
              },
              children
            )
          );

        case 'padding':
          var paddingStyle = {
            paddingBottom: bottomHeight
          };
          return React.createElement(
            View,
            _extends({
              ref: viewRef,
              style: [style, paddingStyle],
              onLayout: this._onLayout
            }, props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 198
              }
            }),
            children
          );

        default:
          return React.createElement(
            View,
            _extends({
              ref: viewRef,
              onLayout: this._onLayout,
              style: style
            }, props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 205
              }
            }),
            children
          );
      }
    }
  });
  module.exports = KeyboardAvoidingView;
},414,[176,385,386,52,130,133,349,173,134],"KeyboardAvoidingView");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _require(_dependencyMap[0], 'UnimplementedView');
},415,[416],"MaskedViewIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Components\\UnimplementedViews\\UnimplementedView.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    UnimplementedView: {
      displayName: "UnimplementedView"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Components/UnimplementedViews/UnimplementedView.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var React = _require(_dependencyMap[2], 'React');

  var StyleSheet = _require(_dependencyMap[3], 'StyleSheet');

  var UnimplementedView = _wrapComponent("UnimplementedView")(function (_React$Component) {
    _inherits(UnimplementedView, _React$Component);

    function UnimplementedView() {
      _classCallCheck(this, UnimplementedView);

      return _possibleConstructorReturn(this, (UnimplementedView.__proto__ || Object.getPrototypeOf(UnimplementedView)).apply(this, arguments));
    }

    _createClass(UnimplementedView, [{
      key: "setNativeProps",
      value: function setNativeProps() {}
    }, {
      key: "render",
      value: function render() {
        var View = _require(_dependencyMap[4], 'View');

        return React.createElement(
          View,
          {
            style: [styles.unimplementedView, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 33
            }
          },
          this.props.children
        );
      }
    }]);

    return UnimplementedView;
  }(React.Component));

  var styles = StyleSheet.create({
    unimplementedView: __DEV__ ? {
      alignSelf: 'flex-start',
      borderColor: 'red',
      borderWidth: 1
    } : {}
  });
  module.exports = UnimplementedView;
},416,[113,179,133,171,173],"UnimplementedView");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Modal\\Modal.js",
      _container;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    Modal: {
      displayName: "Modal"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Modal/Modal.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var AppContainer = _require(_dependencyMap[2], 'AppContainer');

  var I18nManager = _require(_dependencyMap[3], 'I18nManager');

  var NativeEventEmitter = _require(_dependencyMap[4], 'NativeEventEmitter');

  var NativeModules = _require(_dependencyMap[5], 'NativeModules');

  var Platform = _require(_dependencyMap[6], 'Platform');

  var React = _require(_dependencyMap[7], 'React');

  var PropTypes = _require(_dependencyMap[8], 'prop-types');

  var StyleSheet = _require(_dependencyMap[9], 'StyleSheet');

  var View = _require(_dependencyMap[10], 'View');

  var deprecatedPropType = _require(_dependencyMap[11], 'deprecatedPropType');

  var requireNativeComponent = _require(_dependencyMap[12], 'requireNativeComponent');

  var RCTModalHostView = requireNativeComponent('RCTModalHostView', null);
  var ModalEventEmitter = Platform.OS === 'ios' && NativeModules.ModalManager ? new NativeEventEmitter(NativeModules.ModalManager) : null;
  var uniqueModalIdentifier = 0;

  var Modal = _wrapComponent("Modal")((_temp = _class = function (_React$Component) {
    _inherits(Modal, _React$Component);

    function Modal(props) {
      _classCallCheck(this, Modal);

      var _this = _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));

      Modal._confirmProps(props);

      _this._identifier = uniqueModalIdentifier++;
      return _this;
    }

    _createClass(Modal, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        if (ModalEventEmitter) {
          this._eventSubscription = ModalEventEmitter.addListener('modalDismissed', function (event) {
            if (event.modalID === _this2._identifier && _this2.props.onDismiss) {
              _this2.props.onDismiss();
            }
          });
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._eventSubscription) {
          this._eventSubscription.remove();
        }
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        Modal._confirmProps(nextProps);
      }
    }, {
      key: "render",
      value: function render() {
        if (this.props.visible === false) {
          return null;
        }

        var containerStyles = {
          backgroundColor: this.props.transparent ? 'transparent' : 'white'
        };
        var animationType = this.props.animationType;

        if (!animationType) {
          animationType = 'none';

          if (this.props.animated) {
            animationType = 'slide';
          }
        }

        var presentationStyle = this.props.presentationStyle;

        if (!presentationStyle) {
          presentationStyle = 'fullScreen';

          if (this.props.transparent) {
            presentationStyle = 'overFullScreen';
          }
        }

        var innerChildren = __DEV__ ? React.createElement(
          AppContainer,
          {
            rootTag: this.context.rootTag,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 191
            }
          },
          this.props.children
        ) : this.props.children;
        return React.createElement(
          RCTModalHostView,
          {
            animationType: animationType,
            presentationStyle: presentationStyle,
            transparent: this.props.transparent,
            hardwareAccelerated: this.props.hardwareAccelerated,
            onRequestClose: this.props.onRequestClose,
            onShow: this.props.onShow,
            identifier: this._identifier,
            style: styles.modal,
            onStartShouldSetResponder: this._shouldSetResponder,
            supportedOrientations: this.props.supportedOrientations,
            onOrientationChange: this.props.onOrientationChange,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 197
            }
          },
          React.createElement(
            View,
            {
              style: [styles.container, containerStyles],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 210
              }
            },
            innerChildren
          )
        );
      }
    }, {
      key: "_shouldSetResponder",
      value: function _shouldSetResponder() {
        return true;
      }
    }], [{
      key: "_confirmProps",
      value: function _confirmProps(props) {
        if (props.presentationStyle && props.presentationStyle !== 'overFullScreen' && props.transparent) {
          console.warn("Modal with '" + props.presentationStyle + "' presentation style and 'transparent' value is not supported.");
        }
      }
    }]);

    return Modal;
  }(React.Component), _class.propTypes = {
    animationType: PropTypes.oneOf(['none', 'slide', 'fade']),
    presentationStyle: PropTypes.oneOf(['fullScreen', 'pageSheet', 'formSheet', 'overFullScreen']),
    transparent: PropTypes.bool,
    hardwareAccelerated: PropTypes.bool,
    visible: PropTypes.bool,
    onRequestClose: Platform.isTVOS || Platform.OS === 'android' ? PropTypes.func.isRequired : PropTypes.func,
    onShow: PropTypes.func,
    onDismiss: PropTypes.func,
    animated: deprecatedPropType(PropTypes.bool, 'Use the `animationType` prop instead.'),
    supportedOrientations: PropTypes.arrayOf(PropTypes.oneOf(['portrait', 'portrait-upside-down', 'landscape', 'landscape-left', 'landscape-right'])),
    onOrientationChange: PropTypes.func
  }, _class.defaultProps = {
    visible: true,
    hardwareAccelerated: false
  }, _class.contextTypes = {
    rootTag: PropTypes.number
  }, _temp));

  var side = I18nManager.isRTL ? 'right' : 'left';
  var styles = StyleSheet.create({
    modal: {
      position: 'absolute'
    },
    container: (_container = {
      position: 'absolute'
    }, _defineProperty(_container, side, 0), _defineProperty(_container, "top", 0), _container)
  });
  module.exports = Modal;
},417,[113,179,418,437,69,15,52,133,130,171,173,146,148],"Modal");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp2,
      _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\ReactNative\\AppContainer.js";

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    AppContainer: {
      displayName: "AppContainer"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/ReactNative/AppContainer.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var EmitterSubscription = _require(_dependencyMap[2], 'EmitterSubscription');

  var PropTypes = _require(_dependencyMap[3], 'prop-types');

  var RCTDeviceEventEmitter = _require(_dependencyMap[4], 'RCTDeviceEventEmitter');

  var React = _require(_dependencyMap[5], 'React');

  var ReactNative = _require(_dependencyMap[6], 'ReactNative');

  var StyleSheet = _require(_dependencyMap[7], 'StyleSheet');

  var View = _require(_dependencyMap[8], 'View');

  var AppContainer = _wrapComponent("AppContainer")((_temp2 = _class = function (_React$Component) {
    _inherits(AppContainer, _React$Component);

    function AppContainer() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, AppContainer);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = AppContainer.__proto__ || Object.getPrototypeOf(AppContainer)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        inspector: null,
        mainKey: 1
      }, _this._subscription = null, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(AppContainer, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          rootTag: this.props.rootTag
        };
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        if (__DEV__) {
          if (!global.__RCTProfileIsProfiling) {
            this._subscription = RCTDeviceEventEmitter.addListener('toggleElementInspector', function () {
              var Inspector = _require(_dependencyMap[9], 'Inspector');

              var inspector = _this2.state.inspector ? null : React.createElement(Inspector, {
                inspectedViewTag: ReactNative.findNodeHandle(_this2._mainRef),
                onRequestRerenderApp: function onRequestRerenderApp(updateInspectedViewTag) {
                  _this2.setState(function (s) {
                    return {
                      mainKey: s.mainKey + 1
                    };
                  }, function () {
                    return updateInspectedViewTag(ReactNative.findNodeHandle(_this2._mainRef));
                  });
                },
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 66
                }
              });

              _this2.setState({
                inspector: inspector
              });
            });
          }
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._subscription) {
          this._subscription.remove();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var yellowBox = null;

        if (__DEV__) {
          if (!global.__RCTProfileIsProfiling) {
            var YellowBox = _require(_dependencyMap[10], 'YellowBox');

            yellowBox = React.createElement(YellowBox, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 97
              }
            });
          }
        }

        var innerView = React.createElement(
          View,
          {
            collapsable: !this.state.inspector,
            key: this.state.mainKey,
            pointerEvents: "box-none",
            style: styles.appContainer,
            ref: function ref(_ref2) {
              _this3._mainRef = _ref2;
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 102
            }
          },
          this.props.children
        );
        var Wrapper = this.props.WrapperComponent;

        if (Wrapper) {
          innerView = React.createElement(
            Wrapper,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 119
              }
            },
            innerView
          );
        }

        return React.createElement(
          View,
          {
            style: styles.appContainer,
            pointerEvents: "box-none",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 122
            }
          },
          innerView,
          yellowBox,
          this.state.inspector
        );
      }
    }]);

    return AppContainer;
  }(React.Component), _class.childContextTypes = {
    rootTag: PropTypes.number
  }, _temp2));

  var styles = StyleSheet.create({
    appContainer: {
      flex: 1
    }
  });
  module.exports = AppContainer;
},418,[113,179,65,130,70,133,21,171,173,419,435],"AppContainer");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _initialiseProps,
      _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Inspector\\Inspector.js";

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    Inspector: {
      displayName: "Inspector"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Inspector/Inspector.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var Dimensions = _require(_dependencyMap[2], 'Dimensions');

  var InspectorOverlay = _require(_dependencyMap[3], 'InspectorOverlay');

  var InspectorPanel = _require(_dependencyMap[4], 'InspectorPanel');

  var Platform = _require(_dependencyMap[5], 'Platform');

  var React = _require(_dependencyMap[6], 'React');

  var ReactNative = _require(_dependencyMap[7], 'ReactNative');

  var StyleSheet = _require(_dependencyMap[8], 'StyleSheet');

  var Touchable = _require(_dependencyMap[9], 'Touchable');

  var UIManager = _require(_dependencyMap[10], 'UIManager');

  var View = _require(_dependencyMap[11], 'View');

  var emptyObject = _require(_dependencyMap[12], 'fbjs/lib/emptyObject');

  var invariant = _require(_dependencyMap[13], 'fbjs/lib/invariant');

  var hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
  var renderer = findRenderer();
  hook.resolveRNStyle = _require(_dependencyMap[14], 'flattenStyle');

  function findRenderer() {
    var renderers = hook._renderers;
    var keys = Object.keys(renderers);
    invariant(keys.length === 1, 'Expected to find exactly one React Native renderer on DevTools hook.');
    return renderers[keys[0]];
  }

  var Inspector = _wrapComponent("Inspector")((_temp = _class = function (_React$Component) {
    _inherits(Inspector, _React$Component);

    function Inspector(props) {
      _classCallCheck(this, Inspector);

      var _this = _possibleConstructorReturn(this, (Inspector.__proto__ || Object.getPrototypeOf(Inspector)).call(this, props));

      _initialiseProps.call(_this);

      _this.state = {
        devtoolsAgent: null,
        hierarchy: null,
        panelPos: 'bottom',
        inspecting: true,
        perfing: false,
        inspected: null,
        selection: null,
        inspectedViewTag: _this.props.inspectedViewTag,
        networking: false
      };
      return _this;
    }

    _createClass(Inspector, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        hook.on('react-devtools', this.attachToDevtools);

        if (hook.reactDevtoolsAgent) {
          this.attachToDevtools(hook.reactDevtoolsAgent);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._subs) {
          this._subs.map(function (fn) {
            return fn();
          });
        }

        hook.off('react-devtools', this.attachToDevtools);
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(newProps) {
        this.setState({
          inspectedViewTag: newProps.inspectedViewTag
        });
      }
    }, {
      key: "setSelection",
      value: function setSelection(i) {
        var _this2 = this;

        var hierarchyItem = this.state.hierarchy[i];

        var _hierarchyItem$getIns = hierarchyItem.getInspectorData(ReactNative.findNodeHandle),
            measure = _hierarchyItem$getIns.measure,
            props = _hierarchyItem$getIns.props,
            source = _hierarchyItem$getIns.source;

        measure(function (x, y, width, height, left, top) {
          _this2.setState({
            inspected: {
              frame: {
                left: left,
                top: top,
                width: width,
                height: height
              },
              style: props.style,
              source: source
            },
            selection: i
          });
        });
      }
    }, {
      key: "onTouchViewTag",
      value: function onTouchViewTag(touchedViewTag, frame, pointerY) {
        var _renderer$getInspecto = renderer.getInspectorDataForViewTag(touchedViewTag),
            hierarchy = _renderer$getInspecto.hierarchy,
            props = _renderer$getInspecto.props,
            selection = _renderer$getInspecto.selection,
            source = _renderer$getInspecto.source;

        if (this.state.devtoolsAgent) {
          var offsetFromLeaf = hierarchy.length - 1 - selection;
          this.state.devtoolsAgent.selectFromDOMNode(touchedViewTag, true, offsetFromLeaf);
        }

        this.setState({
          panelPos: pointerY > Dimensions.get('window').height / 2 ? 'top' : 'bottom',
          selection: selection,
          hierarchy: hierarchy,
          inspected: {
            style: props.style,
            frame: frame,
            source: source
          }
        });
      }
    }, {
      key: "setPerfing",
      value: function setPerfing(val) {
        this.setState({
          perfing: val,
          inspecting: false,
          inspected: null,
          networking: false
        });
      }
    }, {
      key: "setInspecting",
      value: function setInspecting(val) {
        this.setState({
          inspecting: val,
          inspected: null
        });
      }
    }, {
      key: "setTouchTargeting",
      value: function setTouchTargeting(val) {
        var _this3 = this;

        Touchable.TOUCH_TARGET_DEBUG = val;
        this.props.onRequestRerenderApp(function (inspectedViewTag) {
          _this3.setState({
            inspectedViewTag: inspectedViewTag
          });
        });
      }
    }, {
      key: "setNetworking",
      value: function setNetworking(val) {
        this.setState({
          networking: val,
          perfing: false,
          inspecting: false,
          inspected: null
        });
      }
    }, {
      key: "render",
      value: function render() {
        var panelContainerStyle = this.state.panelPos === 'bottom' ? {
          bottom: 0
        } : {
          top: Platform.OS === 'ios' ? 20 : 0
        };
        return React.createElement(
          View,
          {
            style: styles.container,
            pointerEvents: "box-none",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 232
            }
          },
          this.state.inspecting && React.createElement(InspectorOverlay, {
            inspected: this.state.inspected,
            inspectedViewTag: this.state.inspectedViewTag,
            onTouchViewTag: this.onTouchViewTag.bind(this),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 234
            }
          }),
          React.createElement(
            View,
            {
              style: [styles.panelContainer, panelContainerStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 239
              }
            },
            React.createElement(InspectorPanel, {
              devtoolsIsOpen: !!this.state.devtoolsAgent,
              inspecting: this.state.inspecting,
              perfing: this.state.perfing,
              setPerfing: this.setPerfing.bind(this),
              setInspecting: this.setInspecting.bind(this),
              inspected: this.state.inspected,
              hierarchy: this.state.hierarchy,
              selection: this.state.selection,
              setSelection: this.setSelection.bind(this),
              touchTargeting: Touchable.TOUCH_TARGET_DEBUG,
              setTouchTargeting: this.setTouchTargeting.bind(this),
              networking: this.state.networking,
              setNetworking: this.setNetworking.bind(this),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 240
              }
            })
          )
        );
      }
    }]);

    return Inspector;
  }(React.Component), _initialiseProps = function _initialiseProps() {
    var _this4 = this;

    this.attachToDevtools = function (agent) {
      var _hideWait = null;
      var hlSub = agent.sub('highlight', function (_ref) {
        var node = _ref.node,
            name = _ref.name,
            props = _ref.props;
        clearTimeout(_hideWait);

        if (typeof node !== 'number') {
          node = ReactNative.findNodeHandle(node);
        }

        UIManager.measure(node, function (x, y, width, height, left, top) {
          _this4.setState({
            hierarchy: [],
            inspected: {
              frame: {
                left: left,
                top: top,
                width: width,
                height: height
              },
              style: props ? props.style : emptyObject
            }
          });
        });
      });
      var hideSub = agent.sub('hideHighlight', function () {
        if (_this4.state.inspected === null) {
          return;
        }

        _hideWait = setTimeout(function () {
          _this4.setState({
            inspected: null
          });
        }, 100);
      });
      _this4._subs = [hlSub, hideSub];
      agent.on('shutdown', function () {
        _this4.setState({
          devtoolsAgent: null
        });

        _this4._subs = null;
      });

      _this4.setState({
        devtoolsAgent: agent
      });
    };
  }, _temp));

  var styles = StyleSheet.create({
    container: {
      position: 'absolute',
      backgroundColor: 'transparent',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    panelContainer: {
      position: 'absolute',
      left: 0,
      right: 0
    }
  });
  module.exports = Inspector;
},419,[113,179,167,420,424,52,133,21,171,340,109,173,116,13,104],"Inspector");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp2,
      _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Inspector\\InspectorOverlay.js";

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    InspectorOverlay: {
      displayName: "InspectorOverlay"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Inspector/InspectorOverlay.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var Dimensions = _require(_dependencyMap[2], 'Dimensions');

  var ElementBox = _require(_dependencyMap[3], 'ElementBox');

  var PropTypes = _require(_dependencyMap[4], 'prop-types');

  var React = _require(_dependencyMap[5], 'React');

  var StyleSheet = _require(_dependencyMap[6], 'StyleSheet');

  var UIManager = _require(_dependencyMap[7], 'UIManager');

  var View = _require(_dependencyMap[8], 'View');

  var InspectorOverlay = _wrapComponent("InspectorOverlay")((_temp2 = _class = function (_React$Component) {
    _inherits(InspectorOverlay, _React$Component);

    function InspectorOverlay() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, InspectorOverlay);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = InspectorOverlay.__proto__ || Object.getPrototypeOf(InspectorOverlay)).call.apply(_ref, [this].concat(args))), _this), _this.findViewForTouchEvent = function (e) {
        var _e$nativeEvent$touche = e.nativeEvent.touches[0],
            locationX = _e$nativeEvent$touche.locationX,
            locationY = _e$nativeEvent$touche.locationY;
        UIManager.findSubviewIn(_this.props.inspectedViewTag, [locationX, locationY], function (nativeViewTag, left, top, width, height) {
          _this.props.onTouchViewTag(nativeViewTag, {
            left: left,
            top: top,
            width: width,
            height: height
          }, locationY);
        });
      }, _this.shouldSetResponser = function (e) {
        _this.findViewForTouchEvent(e);

        return true;
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(InspectorOverlay, [{
      key: "render",
      value: function render() {
        var content = null;

        if (this.props.inspected) {
          content = React.createElement(ElementBox, {
            frame: this.props.inspected.frame,
            style: this.props.inspected.style,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 62
            }
          });
        }

        return React.createElement(
          View,
          {
            onStartShouldSetResponder: this.shouldSetResponser,
            onResponderMove: this.findViewForTouchEvent,
            style: [styles.inspector, {
              height: Dimensions.get('window').height
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 66
            }
          },
          content
        );
      }
    }]);

    return InspectorOverlay;
  }(React.Component), _class.propTypes = {
    inspected: PropTypes.shape({
      frame: PropTypes.object,
      style: PropTypes.any
    }),
    inspectedViewTag: PropTypes.number,
    onTouchViewTag: PropTypes.func.isRequired
  }, _temp2));

  var styles = StyleSheet.create({
    inspector: {
      backgroundColor: 'transparent',
      position: 'absolute',
      left: 0,
      top: 0,
      right: 0
    }
  });
  module.exports = InspectorOverlay;
},420,[113,179,167,421,130,133,171,109,173],"InspectorOverlay");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Inspector\\ElementBox.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    ElementBox: {
      displayName: "ElementBox"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Inspector/ElementBox.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var React = _require(_dependencyMap[2], 'React');

  var View = _require(_dependencyMap[3], 'View');

  var StyleSheet = _require(_dependencyMap[4], 'StyleSheet');

  var BorderBox = _require(_dependencyMap[5], 'BorderBox');

  var resolveBoxStyle = _require(_dependencyMap[6], 'resolveBoxStyle');

  var flattenStyle = _require(_dependencyMap[7], 'flattenStyle');

  var ElementBox = _wrapComponent("ElementBox")(function (_React$Component) {
    _inherits(ElementBox, _React$Component);

    function ElementBox() {
      _classCallCheck(this, ElementBox);

      return _possibleConstructorReturn(this, (ElementBox.__proto__ || Object.getPrototypeOf(ElementBox)).apply(this, arguments));
    }

    _createClass(ElementBox, [{
      key: "render",
      value: function render() {
        var style = flattenStyle(this.props.style) || {};
        var margin = resolveBoxStyle('margin', style);
        var padding = resolveBoxStyle('padding', style);
        var frameStyle = this.props.frame;

        if (margin) {
          frameStyle = {
            top: frameStyle.top - margin.top,
            left: frameStyle.left - margin.left,
            height: frameStyle.height + margin.top + margin.bottom,
            width: frameStyle.width + margin.left + margin.right
          };
        }

        var contentStyle = {
          width: this.props.frame.width,
          height: this.props.frame.height
        };

        if (padding) {
          contentStyle = {
            width: contentStyle.width - padding.left - padding.right,
            height: contentStyle.height - padding.top - padding.bottom
          };
        }

        return React.createElement(
          View,
          {
            style: [styles.frame, frameStyle],
            pointerEvents: "none",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 47
            }
          },
          React.createElement(
            BorderBox,
            {
              box: margin,
              style: styles.margin,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 48
              }
            },
            React.createElement(
              BorderBox,
              {
                box: padding,
                style: styles.padding,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 49
                }
              },
              React.createElement(View, {
                style: [styles.content, contentStyle],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 50
                }
              })
            )
          )
        );
      }
    }]);

    return ElementBox;
  }(React.Component));

  var styles = StyleSheet.create({
    frame: {
      position: 'absolute'
    },
    content: {
      backgroundColor: 'rgba(200, 230, 255, 0.8)'
    },
    padding: {
      borderColor: 'rgba(77, 255, 0, 0.3)'
    },
    margin: {
      borderColor: 'rgba(255, 132, 0, 0.3)'
    }
  });
  module.exports = ElementBox;
},421,[113,179,133,173,171,422,423,104],"ElementBox");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Inspector\\BorderBox.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    BorderBox: {
      displayName: "BorderBox"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Inspector/BorderBox.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var React = _require(_dependencyMap[2], 'React');

  var View = _require(_dependencyMap[3], 'View');

  var BorderBox = _wrapComponent("BorderBox")(function (_React$Component) {
    _inherits(BorderBox, _React$Component);

    function BorderBox() {
      _classCallCheck(this, BorderBox);

      return _possibleConstructorReturn(this, (BorderBox.__proto__ || Object.getPrototypeOf(BorderBox)).apply(this, arguments));
    }

    _createClass(BorderBox, [{
      key: "render",
      value: function render() {
        var box = this.props.box;

        if (!box) {
          return this.props.children;
        }

        var style = {
          borderTopWidth: box.top,
          borderBottomWidth: box.bottom,
          borderLeftWidth: box.left,
          borderRightWidth: box.right
        };
        return React.createElement(
          View,
          {
            style: [style, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 30
            }
          },
          this.props.children
        );
      }
    }]);

    return BorderBox;
  }(React.Component));

  module.exports = BorderBox;
},422,[113,179,133,173],"BorderBox");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function resolveBoxStyle(prefix, style) {
    var res = {};
    var subs = ['top', 'left', 'bottom', 'right'];
    var set = false;
    subs.forEach(function (sub) {
      res[sub] = style[prefix] || 0;
    });

    if (style[prefix]) {
      set = true;
    }

    if (style[prefix + 'Vertical']) {
      res.top = res.bottom = style[prefix + 'Vertical'];
      set = true;
    }

    if (style[prefix + 'Horizontal']) {
      res.left = res.right = style[prefix + 'Horizontal'];
      set = true;
    }

    subs.forEach(function (sub) {
      var val = style[prefix + capFirst(sub)];

      if (val) {
        res[sub] = val;
        set = true;
      }
    });

    if (!set) {
      return;
    }

    return res;
  }

  function capFirst(text) {
    return text[0].toUpperCase() + text.slice(1);
  }

  module.exports = resolveBoxStyle;
},423,[],"resolveBoxStyle");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Inspector\\InspectorPanel.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    InspectorPanel: {
      displayName: "InspectorPanel"
    },
    Button: {
      displayName: "Button"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Inspector/InspectorPanel.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var ElementProperties = _require(_dependencyMap[2], 'ElementProperties');

  var NetworkOverlay = _require(_dependencyMap[3], 'NetworkOverlay');

  var PerformanceOverlay = _require(_dependencyMap[4], 'PerformanceOverlay');

  var React = _require(_dependencyMap[5], 'React');

  var PropTypes = _require(_dependencyMap[6], 'prop-types');

  var ScrollView = _require(_dependencyMap[7], 'ScrollView');

  var StyleSheet = _require(_dependencyMap[8], 'StyleSheet');

  var Text = _require(_dependencyMap[9], 'Text');

  var TouchableHighlight = _require(_dependencyMap[10], 'TouchableHighlight');

  var View = _require(_dependencyMap[11], 'View');

  var InspectorPanel = _wrapComponent("InspectorPanel")(function (_React$Component) {
    _inherits(InspectorPanel, _React$Component);

    function InspectorPanel() {
      _classCallCheck(this, InspectorPanel);

      return _possibleConstructorReturn(this, (InspectorPanel.__proto__ || Object.getPrototypeOf(InspectorPanel)).apply(this, arguments));
    }

    _createClass(InspectorPanel, [{
      key: "renderWaiting",
      value: function renderWaiting() {
        if (this.props.inspecting) {
          return React.createElement(
            Text,
            {
              style: styles.waitingText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 29
              }
            },
            "Tap something to inspect it"
          );
        }

        return React.createElement(
          Text,
          {
            style: styles.waitingText,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 34
            }
          },
          "Nothing is inspected"
        );
      }
    }, {
      key: "render",
      value: function render() {
        var contents = void 0;

        if (this.props.inspected) {
          contents = React.createElement(
            ScrollView,
            {
              style: styles.properties,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 41
              }
            },
            React.createElement(ElementProperties, {
              style: this.props.inspected.style,
              frame: this.props.inspected.frame,
              source: this.props.inspected.source,
              hierarchy: this.props.hierarchy,
              selection: this.props.selection,
              setSelection: this.props.setSelection,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 42
              }
            })
          );
        } else if (this.props.perfing) {
          contents = React.createElement(PerformanceOverlay, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 54
            }
          });
        } else if (this.props.networking) {
          contents = React.createElement(NetworkOverlay, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 58
            }
          });
        } else {
          contents = React.createElement(
            View,
            {
              style: styles.waiting,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 62
              }
            },
            this.renderWaiting()
          );
        }

        return React.createElement(
          View,
          {
            style: styles.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 68
            }
          },
          !this.props.devtoolsIsOpen && contents,
          React.createElement(
            View,
            {
              style: styles.buttonRow,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 70
              }
            },
            React.createElement(Button, {
              title: 'Inspect',
              pressed: this.props.inspecting,
              onClick: this.props.setInspecting,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 71
              }
            }),
            React.createElement(Button, {
              title: 'Perf',
              pressed: this.props.perfing,
              onClick: this.props.setPerfing,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 76
              }
            }),
            React.createElement(Button, {
              title: 'Network',
              pressed: this.props.networking,
              onClick: this.props.setNetworking,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 80
              }
            }),
            React.createElement(Button, {
              title: 'Touchables',
              pressed: this.props.touchTargeting,
              onClick: this.props.setTouchTargeting,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 84
              }
            })
          )
        );
      }
    }]);

    return InspectorPanel;
  }(React.Component));

  InspectorPanel.propTypes = {
    devtoolsIsOpen: PropTypes.bool,
    inspecting: PropTypes.bool,
    setInspecting: PropTypes.func,
    inspected: PropTypes.object,
    perfing: PropTypes.bool,
    setPerfing: PropTypes.func,
    touchTargeting: PropTypes.bool,
    setTouchTargeting: PropTypes.func,
    networking: PropTypes.bool,
    setNetworking: PropTypes.func
  };

  var Button = _wrapComponent("Button")(function (_React$Component2) {
    _inherits(Button, _React$Component2);

    function Button() {
      _classCallCheck(this, Button);

      return _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
    }

    _createClass(Button, [{
      key: "render",
      value: function render() {
        var _this3 = this;

        return React.createElement(
          TouchableHighlight,
          {
            onPress: function onPress() {
              return _this3.props.onClick(!_this3.props.pressed);
            },
            style: [styles.button, this.props.pressed && styles.buttonPressed],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 110
            }
          },
          React.createElement(
            Text,
            {
              style: styles.buttonText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 114
              }
            },
            this.props.title
          )
        );
      }
    }]);

    return Button;
  }(React.Component));

  var styles = StyleSheet.create({
    buttonRow: {
      flexDirection: 'row'
    },
    button: {
      backgroundColor: 'rgba(0, 0, 0, 0.3)',
      margin: 2,
      height: 30,
      justifyContent: 'center',
      alignItems: 'center'
    },
    buttonPressed: {
      backgroundColor: 'rgba(255, 255, 255, 0.3)'
    },
    buttonText: {
      textAlign: 'center',
      color: 'white',
      margin: 5
    },
    container: {
      backgroundColor: 'rgba(0, 0, 0, 0.7)'
    },
    properties: {
      height: 200
    },
    waiting: {
      height: 100
    },
    waitingText: {
      fontSize: 20,
      textAlign: 'center',
      marginVertical: 20,
      color: 'white'
    }
  });
  module.exports = InspectorPanel;
},424,[113,179,425,431,434,133,130,381,171,339,428,173],"InspectorPanel");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Inspector\\ElementProperties.js";

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    ElementProperties: {
      displayName: "ElementProperties"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Inspector/ElementProperties.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var BoxInspector = _require(_dependencyMap[2], 'BoxInspector');

  var PropTypes = _require(_dependencyMap[3], 'prop-types');

  var React = _require(_dependencyMap[4], 'React');

  var StyleInspector = _require(_dependencyMap[5], 'StyleInspector');

  var StyleSheet = _require(_dependencyMap[6], 'StyleSheet');

  var Text = _require(_dependencyMap[7], 'Text');

  var TouchableHighlight = _require(_dependencyMap[8], 'TouchableHighlight');

  var TouchableWithoutFeedback = _require(_dependencyMap[9], 'TouchableWithoutFeedback');

  var View = _require(_dependencyMap[10], 'View');

  var flattenStyle = _require(_dependencyMap[11], 'flattenStyle');

  var mapWithSeparator = _require(_dependencyMap[12], 'mapWithSeparator');

  var openFileInEditor = _require(_dependencyMap[13], 'openFileInEditor');

  var ElementProperties = _wrapComponent("ElementProperties")((_temp = _class = function (_React$Component) {
    _inherits(ElementProperties, _React$Component);

    function ElementProperties() {
      _classCallCheck(this, ElementProperties);

      return _possibleConstructorReturn(this, (ElementProperties.__proto__ || Object.getPrototypeOf(ElementProperties)).apply(this, arguments));
    }

    _createClass(ElementProperties, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var style = flattenStyle(this.props.style);
        var selection = this.props.selection;
        var openFileButton = void 0;
        var source = this.props.source;

        var _ref = source || {},
            fileName = _ref.fileName,
            lineNumber = _ref.lineNumber;

        if (fileName && lineNumber) {
          var parts = fileName.split('/');
          var fileNameShort = parts[parts.length - 1];
          openFileButton = React.createElement(
            TouchableHighlight,
            {
              style: styles.openButton,
              onPress: openFileInEditor.bind(null, fileName, lineNumber),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 62
              }
            },
            React.createElement(
              Text,
              {
                style: styles.openButtonTitle,
                numberOfLines: 1,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 65
                }
              },
              fileNameShort,
              ":",
              lineNumber
            )
          );
        }

        return React.createElement(
          TouchableWithoutFeedback,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 74
            }
          },
          React.createElement(
            View,
            {
              style: styles.info,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 75
              }
            },
            React.createElement(
              View,
              {
                style: styles.breadcrumb,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 76
                }
              },
              mapWithSeparator(this.props.hierarchy, function (hierarchyItem, i) {
                return React.createElement(
                  TouchableHighlight,
                  {
                    key: 'item-' + i,
                    style: [styles.breadItem, i === selection && styles.selected],
                    onPress: function onPress() {
                      return _this2.props.setSelection(i);
                    },
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 80
                    }
                  },
                  React.createElement(
                    Text,
                    {
                      style: styles.breadItemText,
                      __source: {
                        fileName: _jsxFileName,
                        lineNumber: 85
                      }
                    },
                    hierarchyItem.name
                  )
                );
              }, function (i) {
                return React.createElement(
                  Text,
                  {
                    key: 'sep-' + i,
                    style: styles.breadSep,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 91
                    }
                  },
                  "\u25B8"
                );
              })
            ),
            React.createElement(
              View,
              {
                style: styles.row,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 97
                }
              },
              React.createElement(
                View,
                {
                  style: styles.col,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 98
                  }
                },
                React.createElement(StyleInspector, {
                  style: style,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 99
                  }
                }),
                openFileButton
              ),
              React.createElement(BoxInspector, {
                style: style,
                frame: this.props.frame,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 104
                }
              })
            )
          )
        );
      }
    }]);

    return ElementProperties;
  }(React.Component), _class.propTypes = {
    hierarchy: PropTypes.array.isRequired,
    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.number]),
    source: PropTypes.shape({
      fileName: PropTypes.string,
      lineNumber: PropTypes.number
    })
  }, _temp));

  var styles = StyleSheet.create({
    breadSep: {
      fontSize: 8,
      color: 'white'
    },
    breadcrumb: {
      flexDirection: 'row',
      flexWrap: 'wrap',
      alignItems: 'flex-start',
      marginBottom: 5
    },
    selected: {
      borderColor: 'white',
      borderRadius: 5
    },
    breadItem: {
      borderWidth: 1,
      borderColor: 'transparent',
      marginHorizontal: 2
    },
    breadItemText: {
      fontSize: 10,
      color: 'white',
      marginHorizontal: 5
    },
    row: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-between'
    },
    col: {
      flex: 1
    },
    info: {
      padding: 10
    },
    openButton: {
      padding: 10,
      backgroundColor: '#000',
      marginVertical: 5,
      marginRight: 5,
      borderRadius: 2
    },
    openButtonTitle: {
      color: 'white',
      fontSize: 8
    }
  });
  module.exports = ElementProperties;
},425,[113,179,426,130,133,427,171,339,428,348,173,104,429,430],"ElementProperties");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Inspector\\BoxInspector.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    BoxInspector: {
      displayName: "BoxInspector"
    },
    BoxContainer: {
      displayName: "BoxContainer"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Inspector/BoxInspector.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var React = _require(_dependencyMap[2], 'React');

  var StyleSheet = _require(_dependencyMap[3], 'StyleSheet');

  var Text = _require(_dependencyMap[4], 'Text');

  var View = _require(_dependencyMap[5], 'View');

  var resolveBoxStyle = _require(_dependencyMap[6], 'resolveBoxStyle');

  var blank = {
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  };

  var BoxInspector = _wrapComponent("BoxInspector")(function (_React$Component) {
    _inherits(BoxInspector, _React$Component);

    function BoxInspector() {
      _classCallCheck(this, BoxInspector);

      return _possibleConstructorReturn(this, (BoxInspector.__proto__ || Object.getPrototypeOf(BoxInspector)).apply(this, arguments));
    }

    _createClass(BoxInspector, [{
      key: "render",
      value: function render() {
        var frame = this.props.frame;
        var style = this.props.style;
        var margin = style && resolveBoxStyle('margin', style) || blank;
        var padding = style && resolveBoxStyle('padding', style) || blank;
        return React.createElement(
          BoxContainer,
          {
            title: "margin",
            titleStyle: styles.marginLabel,
            box: margin,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 34
            }
          },
          React.createElement(
            BoxContainer,
            {
              title: "padding",
              box: padding,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 35
              }
            },
            React.createElement(
              View,
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 36
                }
              },
              React.createElement(
                Text,
                {
                  style: styles.innerText,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 37
                  }
                },
                "(",
                (frame.left || 0).toFixed(1),
                ", ",
                (frame.top || 0).toFixed(1),
                ")"
              ),
              React.createElement(
                Text,
                {
                  style: styles.innerText,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 40
                  }
                },
                (frame.width || 0).toFixed(1),
                " \xD7 ",
                (frame.height || 0).toFixed(1)
              )
            )
          )
        );
      }
    }]);

    return BoxInspector;
  }(React.Component));

  var BoxContainer = _wrapComponent("BoxContainer")(function (_React$Component2) {
    _inherits(BoxContainer, _React$Component2);

    function BoxContainer() {
      _classCallCheck(this, BoxContainer);

      return _possibleConstructorReturn(this, (BoxContainer.__proto__ || Object.getPrototypeOf(BoxContainer)).apply(this, arguments));
    }

    _createClass(BoxContainer, [{
      key: "render",
      value: function render() {
        var box = this.props.box;
        return React.createElement(
          View,
          {
            style: styles.box,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 54
            }
          },
          React.createElement(
            View,
            {
              style: styles.row,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 55
              }
            },
            React.createElement(
              Text,
              {
                style: [this.props.titleStyle, styles.label],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 58
                }
              },
              this.props.title
            ),
            React.createElement(
              Text,
              {
                style: styles.boxText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 59
                }
              },
              box.top
            )
          ),
          React.createElement(
            View,
            {
              style: styles.row,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 61
              }
            },
            React.createElement(
              Text,
              {
                style: styles.boxText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 62
                }
              },
              box.left
            ),
            this.props.children,
            React.createElement(
              Text,
              {
                style: styles.boxText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 64
                }
              },
              box.right
            )
          ),
          React.createElement(
            Text,
            {
              style: styles.boxText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 66
              }
            },
            box.bottom
          )
        );
      }
    }]);

    return BoxContainer;
  }(React.Component));

  var styles = StyleSheet.create({
    row: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-around'
    },
    marginLabel: {
      width: 60
    },
    label: {
      fontSize: 10,
      color: 'rgb(255,100,0)',
      marginLeft: 5,
      flex: 1,
      textAlign: 'left',
      top: -3
    },
    buffer: {
      fontSize: 10,
      color: 'yellow',
      flex: 1,
      textAlign: 'center'
    },
    innerText: {
      color: 'yellow',
      fontSize: 12,
      textAlign: 'center',
      width: 70
    },
    box: {
      borderWidth: 1,
      borderColor: 'grey'
    },
    boxText: {
      color: 'white',
      fontSize: 12,
      marginHorizontal: 3,
      marginVertical: 2,
      textAlign: 'center'
    }
  });
  module.exports = BoxInspector;
},426,[113,179,133,171,339,173,423],"BoxInspector");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Inspector\\StyleInspector.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    StyleInspector: {
      displayName: "StyleInspector"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Inspector/StyleInspector.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var React = _require(_dependencyMap[2], 'React');

  var StyleSheet = _require(_dependencyMap[3], 'StyleSheet');

  var Text = _require(_dependencyMap[4], 'Text');

  var View = _require(_dependencyMap[5], 'View');

  var StyleInspector = _wrapComponent("StyleInspector")(function (_React$Component) {
    _inherits(StyleInspector, _React$Component);

    function StyleInspector() {
      _classCallCheck(this, StyleInspector);

      return _possibleConstructorReturn(this, (StyleInspector.__proto__ || Object.getPrototypeOf(StyleInspector)).apply(this, arguments));
    }

    _createClass(StyleInspector, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        if (!this.props.style) {
          return React.createElement(
            Text,
            {
              style: styles.noStyle,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 22
              }
            },
            "No style"
          );
        }

        var names = Object.keys(this.props.style);
        return React.createElement(
          View,
          {
            style: styles.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 26
            }
          },
          React.createElement(
            View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 27
              }
            },
            names.map(function (name) {
              return React.createElement(
                Text,
                {
                  key: name,
                  style: styles.attr,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 28
                  }
                },
                name,
                ":"
              );
            })
          ),
          React.createElement(
            View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 31
              }
            },
            names.map(function (name) {
              var value = typeof _this2.props.style[name] === 'object' ? JSON.stringify(_this2.props.style[name]) : _this2.props.style[name];
              return React.createElement(
                Text,
                {
                  key: name,
                  style: styles.value,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 34
                  }
                },
                value
              );
            })
          )
        );
      }
    }]);

    return StyleInspector;
  }(React.Component));

  var styles = StyleSheet.create({
    container: {
      flexDirection: 'row'
    },
    row: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-around'
    },
    attr: {
      fontSize: 10,
      color: '#ccc'
    },
    value: {
      fontSize: 10,
      color: 'white',
      marginLeft: 10
    },
    noStyle: {
      color: 'white',
      fontSize: 10
    }
  });
  module.exports = StyleInspector;
},427,[113,179,133,171,339,173],"StyleInspector");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Components\\Touchable\\TouchableHighlight.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var NativeMethodsMixin = _require(_dependencyMap[1], 'NativeMethodsMixin');

  var PropTypes = _require(_dependencyMap[2], 'prop-types');

  var React = _require(_dependencyMap[3], 'React');

  var ReactNativeViewAttributes = _require(_dependencyMap[4], 'ReactNativeViewAttributes');

  var StyleSheet = _require(_dependencyMap[5], 'StyleSheet');

  var Touchable = _require(_dependencyMap[6], 'Touchable');

  var TouchableWithoutFeedback = _require(_dependencyMap[7], 'TouchableWithoutFeedback');

  var View = _require(_dependencyMap[8], 'View');

  var ViewPropTypes = _require(_dependencyMap[9], 'ViewPropTypes');

  var createReactClass = _require(_dependencyMap[10], 'create-react-class');

  var ensurePositiveDelayProps = _require(_dependencyMap[11], 'ensurePositiveDelayProps');

  var DEFAULT_PROPS = {
    activeOpacity: 0.85,
    delayPressOut: 100,
    underlayColor: 'black'
  };
  var PRESS_RETENTION_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var TouchableHighlight = createReactClass({
    displayName: 'TouchableHighlight',
    propTypes: _extends({}, TouchableWithoutFeedback.propTypes, {
      activeOpacity: PropTypes.number,
      underlayColor: ColorPropType,
      style: ViewPropTypes.style,
      onShowUnderlay: PropTypes.func,
      onHideUnderlay: PropTypes.func,
      hasTVPreferredFocus: PropTypes.bool,
      tvParallaxProperties: PropTypes.object
    }),
    mixins: [NativeMethodsMixin, Touchable.Mixin],
    getDefaultProps: function getDefaultProps() {
      return DEFAULT_PROPS;
    },
    getInitialState: function getInitialState() {
      this._isMounted = false;
      return _extends({}, this.touchableGetInitialState(), {
        extraChildStyle: null,
        extraUnderlayStyle: null
      });
    },
    componentDidMount: function componentDidMount() {
      this._isMounted = true;
      ensurePositiveDelayProps(this.props);
    },
    componentWillUnmount: function componentWillUnmount() {
      this._isMounted = false;
      clearTimeout(this._hideTimeout);
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      ensurePositiveDelayProps(nextProps);
    },
    viewConfig: {
      uiViewClassName: 'RCTView',
      validAttributes: ReactNativeViewAttributes.RCTView
    },
    touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
      clearTimeout(this._hideTimeout);
      this._hideTimeout = null;

      this._showUnderlay();

      this.props.onPressIn && this.props.onPressIn(e);
    },
    touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
      if (!this._hideTimeout) {
        this._hideUnderlay();
      }

      this.props.onPressOut && this.props.onPressOut(e);
    },
    touchableHandlePress: function touchableHandlePress(e) {
      clearTimeout(this._hideTimeout);

      this._showUnderlay();

      this._hideTimeout = setTimeout(this._hideUnderlay, this.props.delayPressOut);
      this.props.onPress && this.props.onPress(e);
    },
    touchableHandleLongPress: function touchableHandleLongPress(e) {
      this.props.onLongPress && this.props.onLongPress(e);
    },
    touchableGetPressRectOffset: function touchableGetPressRectOffset() {
      return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
    },
    touchableGetHitSlop: function touchableGetHitSlop() {
      return this.props.hitSlop;
    },
    touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
      return this.props.delayPressIn;
    },
    touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
      return this.props.delayLongPress;
    },
    touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
      return this.props.delayPressOut;
    },
    _showUnderlay: function _showUnderlay() {
      if (!this._isMounted || !this._hasPressHandler()) {
        return;
      }

      this.setState({
        extraChildStyle: {
          opacity: this.props.activeOpacity
        },
        extraUnderlayStyle: {
          backgroundColor: this.props.underlayColor
        }
      });
      this.props.onShowUnderlay && this.props.onShowUnderlay();
    },
    _hideUnderlay: function _hideUnderlay() {
      clearTimeout(this._hideTimeout);
      this._hideTimeout = null;

      if (this._hasPressHandler()) {
        this.setState({
          extraChildStyle: null,
          extraUnderlayStyle: null
        });
        this.props.onHideUnderlay && this.props.onHideUnderlay();
      }
    },
    _hasPressHandler: function _hasPressHandler() {
      return !!(this.props.onPress || this.props.onPressIn || this.props.onPressOut || this.props.onLongPress);
    },
    render: function render() {
      var child = React.Children.only(this.props.children);
      return React.createElement(
        View,
        {
          accessible: this.props.accessible !== false,
          accessibilityLabel: this.props.accessibilityLabel,
          accessibilityComponentType: this.props.accessibilityComponentType,
          accessibilityTraits: this.props.accessibilityTraits,
          style: StyleSheet.compose(this.props.style, this.state.extraUnderlayStyle),
          onLayout: this.props.onLayout,
          hitSlop: this.props.hitSlop,
          isTVSelectable: true,
          tvParallaxProperties: this.props.tvParallaxProperties,
          hasTVPreferredFocus: this.props.hasTVPreferredFocus,
          onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
          onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
          onResponderGrant: this.touchableHandleResponderGrant,
          onResponderMove: this.touchableHandleResponderMove,
          onResponderRelease: this.touchableHandleResponderRelease,
          onResponderTerminate: this.touchableHandleResponderTerminate,
          nativeID: this.props.nativeID,
          testID: this.props.testID,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 306
          }
        },
        React.cloneElement(child, {
          style: StyleSheet.compose(child.props.style, this.state.extraChildStyle)
        }),
        Touchable.renderDebugView({
          color: 'green',
          hitSlop: this.props.hitSlop
        })
      );
    }
  });
  module.exports = TouchableHighlight;
},428,[126,128,130,133,174,171,340,348,173,134,176,350],"TouchableHighlight");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function mapWithSeparator(items, itemRenderer, spacerRenderer) {
    var mapped = [];

    if (items.length > 0) {
      mapped.push(itemRenderer(items[0], 0, items));

      for (var ii = 1; ii < items.length; ii++) {
        mapped.push(spacerRenderer(ii - 1), itemRenderer(items[ii], ii, items));
      }
    }

    return mapped;
  }

  module.exports = mapWithSeparator;
},429,[],"mapWithSeparator");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var getDevServer = _require(_dependencyMap[0], 'getDevServer');

  function openFileInEditor(file, lineNumber) {
    fetch(getDevServer().url + 'open-stack-frame', {
      method: 'POST',
      body: JSON.stringify({
        file: file,
        lineNumber: lineNumber
      })
    });
  }

  module.exports = openFileInEditor;
},430,[36],"openFileInEditor");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Inspector\\NetworkOverlay.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    NetworkOverlay: {
      displayName: "NetworkOverlay"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Inspector/NetworkOverlay.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var ListView = _require(_dependencyMap[2], 'ListView');

  var React = _require(_dependencyMap[3], 'React');

  var ScrollView = _require(_dependencyMap[4], 'ScrollView');

  var StyleSheet = _require(_dependencyMap[5], 'StyleSheet');

  var Text = _require(_dependencyMap[6], 'Text');

  var TouchableHighlight = _require(_dependencyMap[7], 'TouchableHighlight');

  var View = _require(_dependencyMap[8], 'View');

  var WebSocketInterceptor = _require(_dependencyMap[9], 'WebSocketInterceptor');

  var XHRInterceptor = _require(_dependencyMap[10], 'XHRInterceptor');

  var LISTVIEW_CELL_HEIGHT = 15;
  var SEPARATOR_THICKNESS = 2;
  var nextXHRId = 0;

  var NetworkOverlay = _wrapComponent("NetworkOverlay")(function (_React$Component) {
    _inherits(NetworkOverlay, _React$Component);

    function NetworkOverlay(props) {
      _classCallCheck(this, NetworkOverlay);

      var _this = _possibleConstructorReturn(this, (NetworkOverlay.__proto__ || Object.getPrototypeOf(NetworkOverlay)).call(this, props));

      _this._requests = [];
      _this._detailViewItems = [];
      _this._listViewDataSource = new ListView.DataSource({
        rowHasChanged: function rowHasChanged(r1, r2) {
          return r1 !== r2;
        }
      });
      _this.state = {
        dataSource: _this._listViewDataSource.cloneWithRows([]),
        newDetailInfo: false,
        detailRowID: null
      };
      _this._listViewHighlighted = false;
      _this._listViewHeight = 0;
      _this._captureRequestListView = _this._captureRequestListView.bind(_this);
      _this._captureDetailScrollView = _this._captureDetailScrollView.bind(_this);
      _this._listViewOnLayout = _this._listViewOnLayout.bind(_this);
      _this._renderRow = _this._renderRow.bind(_this);
      _this._closeButtonClicked = _this._closeButtonClicked.bind(_this);
      _this._socketIdMap = {};
      _this._xhrIdMap = {};
      return _this;
    }

    _createClass(NetworkOverlay, [{
      key: "_enableXHRInterception",
      value: function _enableXHRInterception() {
        var _this2 = this;

        if (XHRInterceptor.isInterceptorEnabled()) {
          return;
        }

        XHRInterceptor.setOpenCallback(function (method, url, xhr) {
          xhr._index = nextXHRId++;
          var xhrIndex = _this2._requests.length;
          _this2._xhrIdMap[xhr._index] = xhrIndex;
          var _xhr = {
            'type': 'XMLHttpRequest',
            'method': method,
            'url': url
          };

          _this2._requests.push(_xhr);

          _this2._detailViewItems.push([]);

          _this2._genDetailViewItem(xhrIndex);

          _this2.setState({
            dataSource: _this2._listViewDataSource.cloneWithRows(_this2._requests)
          }, _this2._scrollToBottom());
        });
        XHRInterceptor.setRequestHeaderCallback(function (header, value, xhr) {
          var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);

          if (xhrIndex === -1) {
            return;
          }

          var networkInfo = _this2._requests[xhrIndex];

          if (!networkInfo.requestHeaders) {
            networkInfo.requestHeaders = {};
          }

          networkInfo.requestHeaders[header] = value;

          _this2._genDetailViewItem(xhrIndex);
        });
        XHRInterceptor.setSendCallback(function (data, xhr) {
          var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);

          if (xhrIndex === -1) {
            return;
          }

          _this2._requests[xhrIndex].dataSent = data;

          _this2._genDetailViewItem(xhrIndex);
        });
        XHRInterceptor.setHeaderReceivedCallback(function (type, size, responseHeaders, xhr) {
          var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);

          if (xhrIndex === -1) {
            return;
          }

          var networkInfo = _this2._requests[xhrIndex];
          networkInfo.responseContentType = type;
          networkInfo.responseSize = size;
          networkInfo.responseHeaders = responseHeaders;

          _this2._genDetailViewItem(xhrIndex);
        });
        XHRInterceptor.setResponseCallback(function (status, timeout, response, responseURL, responseType, xhr) {
          var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);

          if (xhrIndex === -1) {
            return;
          }

          var networkInfo = _this2._requests[xhrIndex];
          networkInfo.status = status;
          networkInfo.timeout = timeout;
          networkInfo.response = response;
          networkInfo.responseURL = responseURL;
          networkInfo.responseType = responseType;

          _this2._genDetailViewItem(xhrIndex);
        });
        XHRInterceptor.enableInterception();
      }
    }, {
      key: "_enableWebSocketInterception",
      value: function _enableWebSocketInterception() {
        var _this3 = this;

        if (WebSocketInterceptor.isInterceptorEnabled()) {
          return;
        }

        WebSocketInterceptor.setConnectCallback(function (url, protocols, options, socketId) {
          var socketIndex = _this3._requests.length;
          _this3._socketIdMap[socketId] = socketIndex;
          var _webSocket = {
            'type': 'WebSocket',
            'url': url,
            'protocols': protocols
          };

          _this3._requests.push(_webSocket);

          _this3._detailViewItems.push([]);

          _this3._genDetailViewItem(socketIndex);

          _this3.setState({
            dataSource: _this3._listViewDataSource.cloneWithRows(_this3._requests)
          }, _this3._scrollToBottom());
        });
        WebSocketInterceptor.setCloseCallback(function (statusCode, closeReason, socketId) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          if (statusCode !== null && closeReason !== null) {
            _this3._requests[socketIndex].status = statusCode;
            _this3._requests[socketIndex].closeReason = closeReason;
          }

          _this3._genDetailViewItem(socketIndex);
        });
        WebSocketInterceptor.setSendCallback(function (data, socketId) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          if (!_this3._requests[socketIndex].messages) {
            _this3._requests[socketIndex].messages = '';
          }

          _this3._requests[socketIndex].messages += 'Sent: ' + JSON.stringify(data) + '\n';

          _this3._genDetailViewItem(socketIndex);
        });
        WebSocketInterceptor.setOnMessageCallback(function (socketId, message) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          if (!_this3._requests[socketIndex].messages) {
            _this3._requests[socketIndex].messages = '';
          }

          _this3._requests[socketIndex].messages += 'Received: ' + JSON.stringify(message) + '\n';

          _this3._genDetailViewItem(socketIndex);
        });
        WebSocketInterceptor.setOnCloseCallback(function (socketId, message) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          _this3._requests[socketIndex].serverClose = message;

          _this3._genDetailViewItem(socketIndex);
        });
        WebSocketInterceptor.setOnErrorCallback(function (socketId, message) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          _this3._requests[socketIndex].serverError = message;

          _this3._genDetailViewItem(socketIndex);
        });
        WebSocketInterceptor.enableInterception();
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this._enableXHRInterception();

        this._enableWebSocketInterception();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        XHRInterceptor.disableInterception();
        WebSocketInterceptor.disableInterception();
      }
    }, {
      key: "_renderRow",
      value: function _renderRow(rowData, sectionID, rowID, highlightRow) {
        var _this4 = this;

        var urlCellViewStyle = styles.urlEvenCellView;
        var methodCellViewStyle = styles.methodEvenCellView;

        if (rowID % 2 === 1) {
          urlCellViewStyle = styles.urlOddCellView;
          methodCellViewStyle = styles.methodOddCellView;
        }

        return React.createElement(
          TouchableHighlight,
          {
            onPress: function onPress() {
              _this4._pressRow(rowID);

              highlightRow(sectionID, rowID);
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 300
            }
          },
          React.createElement(
            View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 304
              }
            },
            React.createElement(
              View,
              {
                style: styles.tableRow,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 305
                }
              },
              React.createElement(
                View,
                {
                  style: urlCellViewStyle,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 306
                  }
                },
                React.createElement(
                  Text,
                  {
                    style: styles.cellText,
                    numberOfLines: 1,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 307
                    }
                  },
                  rowData.url
                )
              ),
              React.createElement(
                View,
                {
                  style: methodCellViewStyle,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 311
                  }
                },
                React.createElement(
                  Text,
                  {
                    style: styles.cellText,
                    numberOfLines: 1,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 312
                    }
                  },
                  this._getTypeShortName(rowData.type)
                )
              )
            )
          )
        );
      }
    }, {
      key: "_renderSeperator",
      value: function _renderSeperator(sectionID, rowID, adjacentRowHighlighted) {
        return React.createElement(View, {
          key: sectionID + "-" + rowID,
          style: {
            height: adjacentRowHighlighted ? SEPARATOR_THICKNESS : 0,
            backgroundColor: adjacentRowHighlighted ? '#3B5998' : '#CCCCCC'
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 327
          }
        });
      }
    }, {
      key: "_scrollToBottom",
      value: function _scrollToBottom() {
        if (this._listView) {
          var scrollResponder = this._listView.getScrollResponder();

          if (scrollResponder) {
            var scrollY = Math.max(this._requests.length * LISTVIEW_CELL_HEIGHT + (this._listViewHighlighted ? 2 * SEPARATOR_THICKNESS : 0) - this._listViewHeight, 0);
            scrollResponder.scrollResponderScrollTo({
              x: 0,
              y: scrollY,
              animated: true
            });
          }
        }
      }
    }, {
      key: "_captureRequestListView",
      value: function _captureRequestListView(listRef) {
        this._listView = listRef;
      }
    }, {
      key: "_listViewOnLayout",
      value: function _listViewOnLayout(event) {
        var height = event.nativeEvent.layout.height;
        this._listViewHeight = height;
      }
    }, {
      key: "_pressRow",
      value: function _pressRow(rowID) {
        this._listViewHighlighted = true;
        this.setState({
          detailRowID: rowID
        }, this._scrollToTop());
      }
    }, {
      key: "_scrollToTop",
      value: function _scrollToTop() {
        if (this._scrollView) {
          this._scrollView.scrollTo({
            y: 0,
            animated: false
          });
        }
      }
    }, {
      key: "_captureDetailScrollView",
      value: function _captureDetailScrollView(scrollRef) {
        this._scrollView = scrollRef;
      }
    }, {
      key: "_closeButtonClicked",
      value: function _closeButtonClicked() {
        this.setState({
          detailRowID: null
        });
      }
    }, {
      key: "_getStringByValue",
      value: function _getStringByValue(value) {
        if (value === undefined) {
          return 'undefined';
        }

        if (typeof value === 'object') {
          return JSON.stringify(value);
        }

        if (typeof value === 'string' && value.length > 500) {
          return String(value).substr(0, 500).concat('\n***TRUNCATED TO 500 CHARACTERS***');
        }

        return value;
      }
    }, {
      key: "_getRequestIndexByXHRID",
      value: function _getRequestIndexByXHRID(index) {
        if (index === undefined) {
          return -1;
        }

        var xhrIndex = this._xhrIdMap[index];

        if (xhrIndex === undefined) {
          return -1;
        } else {
          return xhrIndex;
        }
      }
    }, {
      key: "_getTypeShortName",
      value: function _getTypeShortName(type) {
        if (type === 'XMLHttpRequest') {
          return 'XHR';
        } else if (type === 'WebSocket') {
          return 'WS';
        }

        return '';
      }
    }, {
      key: "_genDetailViewItem",
      value: function _genDetailViewItem(index) {
        this._detailViewItems[index] = [];
        var detailViewItem = this._detailViewItems[index];
        var requestItem = this._requests[index];

        for (var _key in requestItem) {
          detailViewItem.push(React.createElement(
            View,
            {
              style: styles.detailViewRow,
              key: _key,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 442
              }
            },
            React.createElement(
              Text,
              {
                style: [styles.detailViewText, styles.detailKeyCellView],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 443
                }
              },
              _key
            ),
            React.createElement(
              Text,
              {
                style: [styles.detailViewText, styles.detailValueCellView],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 446
                }
              },
              this._getStringByValue(requestItem[_key])
            )
          ));
        }

        if (this.state.detailRowID != null && Number(this.state.detailRowID) === index) {
          this.setState({
            newDetailInfo: true
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(
          View,
          {
            style: styles.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 461
            }
          },
          this.state.detailRowID != null && React.createElement(
            TouchableHighlight,
            {
              style: styles.closeButton,
              onPress: this._closeButtonClicked,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 463
              }
            },
            React.createElement(
              View,
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 466
                }
              },
              React.createElement(
                Text,
                {
                  style: styles.clostButtonText,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 467
                  }
                },
                "v"
              )
            )
          ),
          this.state.detailRowID != null && React.createElement(
            ScrollView,
            {
              style: styles.detailScrollView,
              ref: this._captureDetailScrollView,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 471
              }
            },
            this._detailViewItems[this.state.detailRowID]
          ),
          React.createElement(
            View,
            {
              style: styles.listViewTitle,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 476
              }
            },
            this._requests.length > 0 && React.createElement(
              View,
              {
                style: styles.tableRow,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 478
                }
              },
              React.createElement(
                View,
                {
                  style: styles.urlTitleCellView,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 479
                  }
                },
                React.createElement(
                  Text,
                  {
                    style: styles.cellText,
                    numberOfLines: 1,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 480
                    }
                  },
                  "URL"
                )
              ),
              React.createElement(
                View,
                {
                  style: styles.methodTitleCellView,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 482
                  }
                },
                React.createElement(
                  Text,
                  {
                    style: styles.cellText,
                    numberOfLines: 1,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 483
                    }
                  },
                  "Type"
                )
              )
            )
          ),
          React.createElement(ListView, {
            style: styles.listView,
            ref: this._captureRequestListView,
            dataSource: this.state.dataSource,
            renderRow: this._renderRow,
            enableEmptySections: true,
            renderSeparator: this._renderSeperator,
            onLayout: this._listViewOnLayout,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 487
            }
          })
        );
      }
    }]);

    return NetworkOverlay;
  }(React.Component));

  var styles = StyleSheet.create({
    container: {
      paddingTop: 10,
      paddingBottom: 10,
      paddingLeft: 5,
      paddingRight: 5
    },
    listViewTitle: {
      height: 20
    },
    listView: {
      flex: 1,
      height: 60
    },
    tableRow: {
      flexDirection: 'row',
      flex: 1
    },
    cellText: {
      color: 'white',
      fontSize: 12
    },
    methodTitleCellView: {
      height: 18,
      borderColor: '#DCD7CD',
      borderTopWidth: 1,
      borderBottomWidth: 1,
      borderRightWidth: 1,
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: '#444',
      flex: 1
    },
    urlTitleCellView: {
      height: 18,
      borderColor: '#DCD7CD',
      borderTopWidth: 1,
      borderBottomWidth: 1,
      borderLeftWidth: 1,
      borderRightWidth: 1,
      justifyContent: 'center',
      backgroundColor: '#444',
      flex: 5,
      paddingLeft: 3
    },
    methodOddCellView: {
      height: 15,
      borderColor: '#DCD7CD',
      borderRightWidth: 1,
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: '#000',
      flex: 1
    },
    urlOddCellView: {
      height: 15,
      borderColor: '#DCD7CD',
      borderLeftWidth: 1,
      borderRightWidth: 1,
      justifyContent: 'center',
      backgroundColor: '#000',
      flex: 5,
      paddingLeft: 3
    },
    methodEvenCellView: {
      height: 15,
      borderColor: '#DCD7CD',
      borderRightWidth: 1,
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: '#888',
      flex: 1
    },
    urlEvenCellView: {
      height: 15,
      borderColor: '#DCD7CD',
      borderLeftWidth: 1,
      borderRightWidth: 1,
      justifyContent: 'center',
      backgroundColor: '#888',
      flex: 5,
      paddingLeft: 3
    },
    detailScrollView: {
      flex: 1,
      height: 180,
      marginTop: 5,
      marginBottom: 5
    },
    detailKeyCellView: {
      flex: 1.3
    },
    detailValueCellView: {
      flex: 2
    },
    detailViewRow: {
      flexDirection: 'row',
      paddingHorizontal: 3
    },
    detailViewText: {
      color: 'white',
      fontSize: 11
    },
    clostButtonText: {
      color: 'white',
      fontSize: 10
    },
    closeButton: {
      marginTop: 5,
      backgroundColor: '#888',
      justifyContent: 'center',
      alignItems: 'center'
    }
  });
  module.exports = NetworkOverlay;
},431,[113,179,399,133,381,171,339,428,173,432,433],"NetworkOverlay");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var RCTWebSocketModule = _require(_dependencyMap[0], 'NativeModules').WebSocketModule;

  var NativeEventEmitter = _require(_dependencyMap[1], 'NativeEventEmitter');

  var base64 = _require(_dependencyMap[2], 'base64-js');

  var originalRCTWebSocketConnect = RCTWebSocketModule.connect;
  var originalRCTWebSocketSend = RCTWebSocketModule.send;
  var originalRCTWebSocketSendBinary = RCTWebSocketModule.sendBinary;
  var originalRCTWebSocketClose = RCTWebSocketModule.close;
  var eventEmitter = void 0;
  var subscriptions = void 0;
  var closeCallback = void 0;
  var sendCallback = void 0;
  var connectCallback = void 0;
  var onOpenCallback = void 0;
  var onMessageCallback = void 0;
  var onErrorCallback = void 0;
  var onCloseCallback = void 0;
  var _isInterceptorEnabled = false;
  var WebSocketInterceptor = {
    setCloseCallback: function setCloseCallback(callback) {
      closeCallback = callback;
    },
    setSendCallback: function setSendCallback(callback) {
      sendCallback = callback;
    },
    setConnectCallback: function setConnectCallback(callback) {
      connectCallback = callback;
    },
    setOnOpenCallback: function setOnOpenCallback(callback) {
      onOpenCallback = callback;
    },
    setOnMessageCallback: function setOnMessageCallback(callback) {
      onMessageCallback = callback;
    },
    setOnErrorCallback: function setOnErrorCallback(callback) {
      onErrorCallback = callback;
    },
    setOnCloseCallback: function setOnCloseCallback(callback) {
      onCloseCallback = callback;
    },
    isInterceptorEnabled: function isInterceptorEnabled() {
      return _isInterceptorEnabled;
    },
    _unregisterEvents: function _unregisterEvents() {
      subscriptions.forEach(function (e) {
        return e.remove();
      });
      subscriptions = [];
    },
    _registerEvents: function _registerEvents() {
      subscriptions = [eventEmitter.addListener('websocketMessage', function (ev) {
        if (onMessageCallback) {
          onMessageCallback(ev.id, ev.type === 'binary' ? WebSocketInterceptor._arrayBufferToString(ev.data) : ev.data);
        }
      }), eventEmitter.addListener('websocketOpen', function (ev) {
        if (onOpenCallback) {
          onOpenCallback(ev.id);
        }
      }), eventEmitter.addListener('websocketClosed', function (ev) {
        if (onCloseCallback) {
          onCloseCallback(ev.id, {
            code: ev.code,
            reason: ev.reason
          });
        }
      }), eventEmitter.addListener('websocketFailed', function (ev) {
        if (onErrorCallback) {
          onErrorCallback(ev.id, {
            message: ev.message
          });
        }
      })];
    },
    enableInterception: function enableInterception() {
      if (_isInterceptorEnabled) {
        return;
      }

      eventEmitter = new NativeEventEmitter(RCTWebSocketModule);

      WebSocketInterceptor._registerEvents();

      RCTWebSocketModule.connect = function (url, protocols, options, socketId) {
        if (connectCallback) {
          connectCallback(url, protocols, options, socketId);
        }

        originalRCTWebSocketConnect.apply(this, arguments);
      };

      RCTWebSocketModule.send = function (data, socketId) {
        if (sendCallback) {
          sendCallback(data, socketId);
        }

        originalRCTWebSocketSend.apply(this, arguments);
      };

      RCTWebSocketModule.sendBinary = function (data, socketId) {
        if (sendCallback) {
          sendCallback(WebSocketInterceptor._arrayBufferToString(data), socketId);
        }

        originalRCTWebSocketSendBinary.apply(this, arguments);
      };

      RCTWebSocketModule.close = function () {
        if (closeCallback) {
          if (arguments.length === 3) {
            closeCallback(arguments[0], arguments[1], arguments[2]);
          } else {
            closeCallback(null, null, arguments[0]);
          }
        }

        originalRCTWebSocketClose.apply(this, arguments);
      };

      _isInterceptorEnabled = true;
    },
    _arrayBufferToString: function _arrayBufferToString(data) {
      var value = base64.toByteArray(data).buffer;

      if (value === undefined || value === null) {
        return '(no value)';
      }

      if (typeof ArrayBuffer !== 'undefined' && typeof Uint8Array !== 'undefined' && value instanceof ArrayBuffer) {
        return "ArrayBuffer {" + String(Array.from(new Uint8Array(value))) + "}";
      }

      return value;
    },
    disableInterception: function disableInterception() {
      if (!_isInterceptorEnabled) {
        return;
      }

      _isInterceptorEnabled = false;
      RCTWebSocketModule.send = originalRCTWebSocketSend;
      RCTWebSocketModule.sendBinary = originalRCTWebSocketSendBinary;
      RCTWebSocketModule.close = originalRCTWebSocketClose;
      RCTWebSocketModule.connect = originalRCTWebSocketConnect;
      connectCallback = null;
      closeCallback = null;
      sendCallback = null;
      onOpenCallback = null;
      onMessageCallback = null;
      onCloseCallback = null;
      onErrorCallback = null;

      WebSocketInterceptor._unregisterEvents();
    }
  };
  module.exports = WebSocketInterceptor;
},432,[15,69,73],"WebSocketInterceptor");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var XMLHttpRequest = _require(_dependencyMap[0], 'XMLHttpRequest');

  var originalXHROpen = XMLHttpRequest.prototype.open;
  var originalXHRSend = XMLHttpRequest.prototype.send;
  var originalXHRSetRequestHeader = XMLHttpRequest.prototype.setRequestHeader;
  var openCallback;
  var sendCallback;
  var requestHeaderCallback;
  var headerReceivedCallback;
  var responseCallback;
  var _isInterceptorEnabled = false;
  var XHRInterceptor = {
    setOpenCallback: function setOpenCallback(callback) {
      openCallback = callback;
    },
    setSendCallback: function setSendCallback(callback) {
      sendCallback = callback;
    },
    setHeaderReceivedCallback: function setHeaderReceivedCallback(callback) {
      headerReceivedCallback = callback;
    },
    setResponseCallback: function setResponseCallback(callback) {
      responseCallback = callback;
    },
    setRequestHeaderCallback: function setRequestHeaderCallback(callback) {
      requestHeaderCallback = callback;
    },
    isInterceptorEnabled: function isInterceptorEnabled() {
      return _isInterceptorEnabled;
    },
    enableInterception: function enableInterception() {
      if (_isInterceptorEnabled) {
        return;
      }

      XMLHttpRequest.prototype.open = function (method, url) {
        if (openCallback) {
          openCallback(method, url, this);
        }

        originalXHROpen.apply(this, arguments);
      };

      XMLHttpRequest.prototype.setRequestHeader = function (header, value) {
        if (requestHeaderCallback) {
          requestHeaderCallback(header, value, this);
        }

        originalXHRSetRequestHeader.apply(this, arguments);
      };

      XMLHttpRequest.prototype.send = function (data) {
        var _this = this;

        if (sendCallback) {
          sendCallback(data, this);
        }

        if (this.addEventListener) {
          this.addEventListener('readystatechange', function () {
            if (!_isInterceptorEnabled) {
              return;
            }

            if (_this.readyState === _this.HEADERS_RECEIVED) {
              var contentTypeString = _this.getResponseHeader('Content-Type');

              var contentLengthString = _this.getResponseHeader('Content-Length');

              var responseContentType = void 0,
                  responseSize = void 0;

              if (contentTypeString) {
                responseContentType = contentTypeString.split(';')[0];
              }

              if (contentLengthString) {
                responseSize = parseInt(contentLengthString, 10);
              }

              if (headerReceivedCallback) {
                headerReceivedCallback(responseContentType, responseSize, _this.getAllResponseHeaders(), _this);
              }
            }

            if (_this.readyState === _this.DONE) {
              if (responseCallback) {
                responseCallback(_this.status, _this.timeout, _this.response, _this.responseURL, _this.responseType, _this);
              }
            }
          }, false);
        }

        originalXHRSend.apply(this, arguments);
      };

      _isInterceptorEnabled = true;
    },
    disableInterception: function disableInterception() {
      if (!_isInterceptorEnabled) {
        return;
      }

      _isInterceptorEnabled = false;
      XMLHttpRequest.prototype.send = originalXHRSend;
      XMLHttpRequest.prototype.open = originalXHROpen;
      XMLHttpRequest.prototype.setRequestHeader = originalXHRSetRequestHeader;
      responseCallback = null;
      openCallback = null;
      sendCallback = null;
      headerReceivedCallback = null;
      requestHeaderCallback = null;
    }
  };
  module.exports = XHRInterceptor;
},433,[58],"XHRInterceptor");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Inspector\\PerformanceOverlay.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    PerformanceOverlay: {
      displayName: "PerformanceOverlay"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Inspector/PerformanceOverlay.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var PerformanceLogger = _require(_dependencyMap[2], 'PerformanceLogger');

  var React = _require(_dependencyMap[3], 'React');

  var StyleSheet = _require(_dependencyMap[4], 'StyleSheet');

  var Text = _require(_dependencyMap[5], 'Text');

  var View = _require(_dependencyMap[6], 'View');

  var PerformanceOverlay = _wrapComponent("PerformanceOverlay")(function (_React$Component) {
    _inherits(PerformanceOverlay, _React$Component);

    function PerformanceOverlay() {
      _classCallCheck(this, PerformanceOverlay);

      return _possibleConstructorReturn(this, (PerformanceOverlay.__proto__ || Object.getPrototypeOf(PerformanceOverlay)).apply(this, arguments));
    }

    _createClass(PerformanceOverlay, [{
      key: "render",
      value: function render() {
        var perfLogs = PerformanceLogger.getTimespans();
        var items = [];

        for (var key in perfLogs) {
          if (perfLogs[key].totalTime) {
            var unit = key === 'BundleSize' ? 'b' : 'ms';
            items.push(React.createElement(
              View,
              {
                style: styles.row,
                key: key,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 29
                }
              },
              React.createElement(
                Text,
                {
                  style: [styles.text, styles.label],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 30
                  }
                },
                key
              ),
              React.createElement(
                Text,
                {
                  style: [styles.text, styles.totalTime],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 31
                  }
                },
                perfLogs[key].totalTime + unit
              )
            ));
          }
        }

        return React.createElement(
          View,
          {
            style: styles.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 40
            }
          },
          items
        );
      }
    }]);

    return PerformanceOverlay;
  }(React.Component));

  var styles = StyleSheet.create({
    container: {
      height: 100,
      paddingTop: 10
    },
    label: {
      flex: 1
    },
    row: {
      flexDirection: 'row',
      paddingHorizontal: 10
    },
    text: {
      color: 'white',
      fontSize: 12
    },
    totalTime: {
      paddingRight: 100
    }
  });
  module.exports = PerformanceOverlay;
},434,[113,179,92,133,171,339,173],"PerformanceOverlay");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\ReactNative\\YellowBox.js";

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  var _components = {
    YellowBox: {
      displayName: "YellowBox"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/ReactNative/YellowBox.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var EventEmitter = _require(_dependencyMap[2], 'EventEmitter');

  var Platform = _require(_dependencyMap[3], 'Platform');

  var React = _require(_dependencyMap[4], 'React');

  var SafeAreaView = _require(_dependencyMap[5], 'SafeAreaView');

  var StyleSheet = _require(_dependencyMap[6], 'StyleSheet');

  var RCTLog = _require(_dependencyMap[7], 'RCTLog');

  var infoLog = _require(_dependencyMap[8], 'infoLog');

  var openFileInEditor = _require(_dependencyMap[9], 'openFileInEditor');

  var parseErrorStack = _require(_dependencyMap[10], 'parseErrorStack');

  var stringifySafe = _require(_dependencyMap[11], 'stringifySafe');

  var symbolicateStackTrace = _require(_dependencyMap[12], 'symbolicateStackTrace');

  var _warningEmitter = new EventEmitter();

  var _warningMap = new Map();

  var IGNORED_WARNINGS = [];

  if (__DEV__) {
    var _console = console,
        error = _console.error,
        warn = _console.warn;

    console.error = function () {
      error.apply(console, arguments);

      if (typeof arguments[0] === 'string' && arguments[0].startsWith('Warning: ')) {
        updateWarningMap.apply(null, arguments);
      }
    };

    console.warn = function () {
      warn.apply(console, arguments);
      updateWarningMap.apply(null, arguments);
    };

    if (Platform.isTesting) {
      console.disableYellowBox = true;
    }

    RCTLog.setWarningHandler(function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      updateWarningMap.apply(null, args);
    });
  }

  function sprintf(format) {
    for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    var index = 0;
    return format.replace(/%s/g, function (match) {
      return args[index++];
    });
  }

  function updateWarningMap() {
    if (console.disableYellowBox) {
      return;
    }

    var warning = void 0;

    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    if (typeof args[0] === 'string') {
      var format = args[0],
          formatArgs = args.slice(1);
      var argCount = (format.match(/%s/g) || []).length;
      warning = [sprintf.apply(undefined, [format].concat(_toConsumableArray(formatArgs.slice(0, argCount).map(stringifySafe))))].concat(_toConsumableArray(formatArgs.slice(argCount).map(stringifySafe))).join(' ');
    } else {
      warning = args.map(stringifySafe).join(' ');
    }

    if (warning.startsWith('(ADVICE)')) {
      return;
    }

    var warningInfo = _warningMap.get(warning);

    if (warningInfo) {
      warningInfo.count += 1;
    } else {
      var _error = new Error();

      _error.framesToPop = 2;

      _warningMap.set(warning, {
        count: 1,
        stacktrace: parseErrorStack(_error),
        symbolicated: false
      });
    }

    _warningEmitter.emit('warning', _warningMap);
  }

  function ensureSymbolicatedWarning(warning) {
    var prevWarningInfo = _warningMap.get(warning);

    if (!prevWarningInfo || prevWarningInfo.symbolicated) {
      return;
    }

    prevWarningInfo.symbolicated = true;
    symbolicateStackTrace(prevWarningInfo.stacktrace).then(function (stack) {
      var nextWarningInfo = _warningMap.get(warning);

      if (nextWarningInfo) {
        nextWarningInfo.stacktrace = stack;

        _warningEmitter.emit('warning', _warningMap);
      }
    }, function (error) {
      var nextWarningInfo = _warningMap.get(warning);

      if (nextWarningInfo) {
        infoLog('Failed to symbolicate warning, "%s":', warning, error);

        _warningEmitter.emit('warning', _warningMap);
      }
    });
  }

  function isWarningIgnored(warning) {
    var isIgnored = IGNORED_WARNINGS.some(function (ignoredWarning) {
      return warning.startsWith(ignoredWarning);
    });

    if (isIgnored) {
      return true;
    }

    return Array.isArray(console.ignoredYellowBox) && console.ignoredYellowBox.some(function (ignorePrefix) {
      return warning.startsWith(String(ignorePrefix));
    });
  }

  var WarningRow = function WarningRow(_ref) {
    var count = _ref.count,
        warning = _ref.warning,
        onPress = _ref.onPress;

    var Text = _require(_dependencyMap[13], 'Text');

    var TouchableHighlight = _require(_dependencyMap[14], 'TouchableHighlight');

    var View = _require(_dependencyMap[15], 'View');

    var countText = count > 1 ? React.createElement(
      Text,
      {
        style: styles.listRowCount,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 197
        }
      },
      '(' + count + ') '
    ) : null;
    return React.createElement(
      View,
      {
        style: styles.listRow,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 201
        }
      },
      React.createElement(
        TouchableHighlight,
        {
          activeOpacity: 0.5,
          onPress: onPress,
          style: styles.listRowContent,
          underlayColor: "transparent",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 202
          }
        },
        React.createElement(
          Text,
          {
            style: styles.listRowText,
            numberOfLines: 2,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 207
            }
          },
          countText,
          warning
        )
      )
    );
  };

  var StackRow = function StackRow(_ref2) {
    var frame = _ref2.frame;

    var Text = _require(_dependencyMap[13], 'Text');

    var TouchableHighlight = _require(_dependencyMap[14], 'TouchableHighlight');

    var file = frame.file,
        lineNumber = frame.lineNumber;
    var fileName = void 0;

    if (file) {
      var fileParts = file.split('/');
      fileName = fileParts[fileParts.length - 1];
    } else {
      fileName = '<unknown file>';
    }

    return React.createElement(
      TouchableHighlight,
      {
        activeOpacity: 0.5,
        style: styles.openInEditorButton,
        underlayColor: "transparent",
        onPress: openFileInEditor.bind(null, file, lineNumber),
        __source: {
          fileName: _jsxFileName,
          lineNumber: 230
        }
      },
      React.createElement(
        Text,
        {
          style: styles.inspectorCountText,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 235
          }
        },
        fileName,
        ":",
        lineNumber
      )
    );
  };

  var WarningInspector = function WarningInspector(_ref3) {
    var warningInfo = _ref3.warningInfo,
        warning = _ref3.warning,
        stacktraceVisible = _ref3.stacktraceVisible,
        onDismiss = _ref3.onDismiss,
        onDismissAll = _ref3.onDismissAll,
        onMinimize = _ref3.onMinimize,
        toggleStacktrace = _ref3.toggleStacktrace;

    var ScrollView = _require(_dependencyMap[16], 'ScrollView');

    var Text = _require(_dependencyMap[13], 'Text');

    var TouchableHighlight = _require(_dependencyMap[14], 'TouchableHighlight');

    var View = _require(_dependencyMap[15], 'View');

    var _ref4 = warningInfo || {},
        count = _ref4.count,
        stacktrace = _ref4.stacktrace;

    var countSentence = 'Warning encountered ' + count + ' time' + (count - 1 ? 's' : '') + '.';
    var stacktraceList = void 0;

    if (stacktraceVisible && stacktrace) {
      stacktraceList = React.createElement(
        View,
        {
          style: styles.stacktraceList,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 263
          }
        },
        stacktrace.map(function (frame, ii) {
          return React.createElement(StackRow, {
            frame: frame,
            key: ii,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 264
            }
          });
        })
      );
    }

    return React.createElement(
      View,
      {
        style: styles.inspector,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 270
        }
      },
      React.createElement(
        SafeAreaView,
        {
          style: styles.safeArea,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 271
          }
        },
        React.createElement(
          View,
          {
            style: styles.inspectorCount,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 272
            }
          },
          React.createElement(
            Text,
            {
              style: styles.inspectorCountText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 273
              }
            },
            countSentence
          ),
          React.createElement(
            TouchableHighlight,
            {
              onPress: toggleStacktrace,
              underlayColor: "transparent",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 274
              }
            },
            React.createElement(
              Text,
              {
                style: styles.inspectorButtonText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 277
                }
              },
              stacktraceVisible ? "\u25BC" : "\u25B6",
              " Stacktrace"
            )
          )
        ),
        React.createElement(
          ScrollView,
          {
            style: styles.inspectorWarning,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 282
            }
          },
          stacktraceList,
          React.createElement(
            Text,
            {
              style: styles.inspectorWarningText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 284
              }
            },
            warning
          )
        ),
        React.createElement(
          View,
          {
            style: styles.inspectorButtons,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 286
            }
          },
          React.createElement(
            TouchableHighlight,
            {
              activeOpacity: 0.5,
              onPress: onMinimize,
              style: styles.inspectorButton,
              underlayColor: "transparent",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 287
              }
            },
            React.createElement(
              Text,
              {
                style: styles.inspectorButtonText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 292
                }
              },
              "Minimize"
            )
          ),
          React.createElement(
            TouchableHighlight,
            {
              activeOpacity: 0.5,
              onPress: onDismiss,
              style: styles.inspectorButton,
              underlayColor: "transparent",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 294
              }
            },
            React.createElement(
              Text,
              {
                style: styles.inspectorButtonText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 299
                }
              },
              "Dismiss"
            )
          ),
          React.createElement(
            TouchableHighlight,
            {
              activeOpacity: 0.5,
              onPress: onDismissAll,
              style: styles.inspectorButton,
              underlayColor: "transparent",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 301
              }
            },
            React.createElement(
              Text,
              {
                style: styles.inspectorButtonText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 306
                }
              },
              "Dismiss All"
            )
          )
        )
      )
    );
  };

  var YellowBox = _wrapComponent("YellowBox")(function (_React$Component) {
    _inherits(YellowBox, _React$Component);

    function YellowBox(props, context) {
      _classCallCheck(this, YellowBox);

      var _this = _possibleConstructorReturn(this, (YellowBox.__proto__ || Object.getPrototypeOf(YellowBox)).call(this, props, context));

      _this.state = {
        inspecting: null,
        stacktraceVisible: false,
        warningMap: _warningMap
      };

      _this.dismissWarning = function (warning) {
        var _this$state = _this.state,
            inspecting = _this$state.inspecting,
            warningMap = _this$state.warningMap;

        if (warning) {
          warningMap.delete(warning);
        } else {
          warningMap.clear();
        }

        _this.setState({
          inspecting: warning && inspecting !== warning ? inspecting : null,
          warningMap: warningMap
        });
      };

      return _this;
    }

    _createClass(YellowBox, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        var scheduled = null;
        this._listener = _warningEmitter.addListener('warning', function (warningMap) {
          scheduled = scheduled || setImmediate(function () {
            scheduled = null;

            _this2.setState({
              warningMap: warningMap
            });
          });
        });
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        var inspecting = this.state.inspecting;

        if (inspecting != null) {
          ensureSymbolicatedWarning(inspecting);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._listener) {
          this._listener.remove();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        if (console.disableYellowBox || this.state.warningMap.size === 0) {
          return null;
        }

        var ScrollView = _require(_dependencyMap[16], 'ScrollView');

        var View = _require(_dependencyMap[15], 'View');

        var _state = this.state,
            inspecting = _state.inspecting,
            stacktraceVisible = _state.stacktraceVisible;
        var inspector = inspecting !== null ? React.createElement(WarningInspector, {
          warningInfo: this.state.warningMap.get(inspecting),
          warning: inspecting,
          stacktraceVisible: stacktraceVisible,
          onDismiss: function onDismiss() {
            return _this3.dismissWarning(inspecting);
          },
          onDismissAll: function onDismissAll() {
            return _this3.dismissWarning(null);
          },
          onMinimize: function onMinimize() {
            return _this3.setState({
              inspecting: null
            });
          },
          toggleStacktrace: function toggleStacktrace() {
            return _this3.setState({
              stacktraceVisible: !stacktraceVisible
            });
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 393
          }
        }) : null;
        var rows = [];
        this.state.warningMap.forEach(function (warningInfo, warning) {
          if (!isWarningIgnored(warning)) {
            rows.push(React.createElement(WarningRow, {
              key: warning,
              count: warningInfo.count,
              warning: warning,
              onPress: function onPress() {
                return _this3.setState({
                  inspecting: warning
                });
              },
              onDismiss: function onDismiss() {
                return _this3.dismissWarning(warning);
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 410
              }
            }));
          }
        });
        var listStyle = [styles.list, {
          height: Math.min(rows.length, 4.4) * (rowGutter + rowHeight)
        }];
        return React.createElement(
          View,
          {
            style: inspector ? styles.fullScreen : listStyle,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 427
            }
          },
          React.createElement(
            ScrollView,
            {
              style: listStyle,
              scrollsToTop: false,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 428
              }
            },
            rows
          ),
          inspector
        );
      }
    }], [{
      key: "ignoreWarnings",
      value: function ignoreWarnings(warnings) {
        warnings.forEach(function (warning) {
          if (IGNORED_WARNINGS.indexOf(warning) === -1) {
            IGNORED_WARNINGS.push(warning);
          }
        });
      }
    }]);

    return YellowBox;
  }(React.Component));

  var backgroundColor = function backgroundColor(opacity) {
    return 'rgba(250, 186, 48, ' + opacity + ')';
  };

  var textColor = 'white';
  var rowGutter = 1;
  var rowHeight = 46;
  var elevation = Platform.OS === 'android' ? Number.MAX_SAFE_INTEGER : undefined;
  var styles = StyleSheet.create({
    fullScreen: {
      height: '100%',
      width: '100%',
      elevation: elevation,
      position: 'absolute'
    },
    inspector: {
      backgroundColor: backgroundColor(0.95),
      height: '100%',
      paddingTop: 5,
      elevation: elevation
    },
    inspectorButtons: {
      flexDirection: 'row'
    },
    inspectorButton: {
      flex: 1,
      paddingVertical: 22,
      backgroundColor: backgroundColor(1)
    },
    safeArea: {
      flex: 1
    },
    stacktraceList: {
      paddingBottom: 5
    },
    inspectorButtonText: {
      color: textColor,
      fontSize: 14,
      opacity: 0.8,
      textAlign: 'center'
    },
    openInEditorButton: {
      paddingTop: 5,
      paddingBottom: 5
    },
    inspectorCount: {
      padding: 15,
      paddingBottom: 0,
      flexDirection: 'row',
      justifyContent: 'space-between'
    },
    inspectorCountText: {
      color: textColor,
      fontSize: 14
    },
    inspectorWarning: {
      flex: 1,
      paddingHorizontal: 15
    },
    inspectorWarningText: {
      color: textColor,
      fontSize: 16,
      fontWeight: '600'
    },
    list: {
      backgroundColor: 'transparent',
      position: 'absolute',
      left: 0,
      right: 0,
      bottom: 0,
      elevation: elevation
    },
    listRow: {
      backgroundColor: backgroundColor(0.95),
      height: rowHeight,
      marginTop: rowGutter
    },
    listRowContent: {
      flex: 1
    },
    listRowCount: {
      color: 'rgba(255, 255, 255, 0.5)'
    },
    listRowText: {
      color: textColor,
      position: 'absolute',
      left: 0,
      top: Platform.OS === 'android' ? 5 : 7,
      marginLeft: 15,
      marginRight: 15
    }
  });
  module.exports = YellowBox;
},435,[113,179,67,52,133,436,171,90,93,430,32,39,35,339,428,173,381],"YellowBox");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _require(_dependencyMap[0], 'View');
},436,[173],"SafeAreaView");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var I18nManager = _require(_dependencyMap[0], 'NativeModules').I18nManager || {
    isRTL: false,
    doLeftAndRightSwapInRTL: true,
    allowRTL: function allowRTL() {},
    forceRTL: function forceRTL() {},
    swapLeftAndRightInRTL: function swapLeftAndRightInRTL() {}
  };
  module.exports = I18nManager;
},437,[15],"I18nManager");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _require(_dependencyMap[0], 'UnimplementedView');
},438,[416],"NavigatorIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _class2,
      _temp2,
      _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Components\\Picker\\Picker.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    PickerItem: {
      displayName: "PickerItem"
    },
    Picker: {
      displayName: "Picker"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Components/Picker/Picker.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var ColorPropType = _require(_dependencyMap[2], 'ColorPropType');

  var PickerIOS = _require(_dependencyMap[3], 'PickerIOS');

  var PickerAndroid = _require(_dependencyMap[4], 'PickerAndroid');

  var Platform = _require(_dependencyMap[5], 'Platform');

  var React = _require(_dependencyMap[6], 'React');

  var PropTypes = _require(_dependencyMap[7], 'prop-types');

  var StyleSheetPropType = _require(_dependencyMap[8], 'StyleSheetPropType');

  var TextStylePropTypes = _require(_dependencyMap[9], 'TextStylePropTypes');

  var UnimplementedView = _require(_dependencyMap[10], 'UnimplementedView');

  var ViewPropTypes = _require(_dependencyMap[11], 'ViewPropTypes');

  var ViewStylePropTypes = _require(_dependencyMap[12], 'ViewStylePropTypes');

  var itemStylePropType = StyleSheetPropType(TextStylePropTypes);
  var pickerStyleType = StyleSheetPropType(_extends({}, ViewStylePropTypes, {
    color: ColorPropType
  }));
  var MODE_DIALOG = 'dialog';
  var MODE_DROPDOWN = 'dropdown';

  var PickerItem = _wrapComponent("PickerItem")((_temp = _class = function (_React$Component) {
    _inherits(PickerItem, _React$Component);

    function PickerItem() {
      _classCallCheck(this, PickerItem);

      return _possibleConstructorReturn(this, (PickerItem.__proto__ || Object.getPrototypeOf(PickerItem)).apply(this, arguments));
    }

    _createClass(PickerItem, [{
      key: "render",
      value: function render() {
        throw null;
      }
    }]);

    return PickerItem;
  }(React.Component), _class.propTypes = {
    label: PropTypes.string.isRequired,
    value: PropTypes.any,
    color: ColorPropType,
    testID: PropTypes.string
  }, _temp));

  var Picker = _wrapComponent("Picker")((_temp2 = _class2 = function (_React$Component2) {
    _inherits(Picker, _React$Component2);

    function Picker() {
      _classCallCheck(this, Picker);

      return _possibleConstructorReturn(this, (Picker.__proto__ || Object.getPrototypeOf(Picker)).apply(this, arguments));
    }

    _createClass(Picker, [{
      key: "render",
      value: function render() {
        if (Platform.OS === 'ios') {
          return React.createElement(
            PickerIOS,
            _extends({}, this.props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 157
              }
            }),
            this.props.children
          );
        } else if (Platform.OS === 'android') {
          return React.createElement(
            PickerAndroid,
            _extends({}, this.props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 160
              }
            }),
            this.props.children
          );
        } else {
          return React.createElement(UnimplementedView, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 162
            }
          });
        }
      }
    }]);

    return Picker;
  }(React.Component), _class2.MODE_DIALOG = MODE_DIALOG, _class2.MODE_DROPDOWN = MODE_DROPDOWN, _class2.Item = PickerItem, _class2.defaultProps = {
    mode: MODE_DIALOG
  }, _class2.propTypes = _extends({}, ViewPropTypes, {
    style: pickerStyleType,
    selectedValue: PropTypes.any,
    onValueChange: PropTypes.func,
    enabled: PropTypes.bool,
    mode: PropTypes.oneOf(['dialog', 'dropdown']),
    itemStyle: itemStylePropType,
    prompt: PropTypes.string,
    testID: PropTypes.string
  }), _temp2));

  module.exports = Picker;
},439,[113,179,126,440,441,52,133,130,141,154,416,134,142],"Picker");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _require(_dependencyMap[0], 'UnimplementedView');
},440,[416],"PickerIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _initialiseProps,
      _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Components\\Picker\\PickerAndroid.android.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    PickerAndroid: {
      displayName: "PickerAndroid"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Components/Picker/PickerAndroid.android.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var ColorPropType = _require(_dependencyMap[2], 'ColorPropType');

  var React = _require(_dependencyMap[3], 'React');

  var ReactPropTypes = _require(_dependencyMap[4], 'prop-types');

  var StyleSheet = _require(_dependencyMap[5], 'StyleSheet');

  var StyleSheetPropType = _require(_dependencyMap[6], 'StyleSheetPropType');

  var ViewPropTypes = _require(_dependencyMap[7], 'ViewPropTypes');

  var ViewStylePropTypes = _require(_dependencyMap[8], 'ViewStylePropTypes');

  var processColor = _require(_dependencyMap[9], 'processColor');

  var requireNativeComponent = _require(_dependencyMap[10], 'requireNativeComponent');

  var REF_PICKER = 'picker';
  var MODE_DROPDOWN = 'dropdown';
  var pickerStyleType = StyleSheetPropType(_extends({}, ViewStylePropTypes, {
    color: ColorPropType
  }));

  var PickerAndroid = _wrapComponent("PickerAndroid")((_temp = _class = function (_React$Component) {
    _inherits(PickerAndroid, _React$Component);

    function PickerAndroid(props, context) {
      _classCallCheck(this, PickerAndroid);

      var _this = _possibleConstructorReturn(this, (PickerAndroid.__proto__ || Object.getPrototypeOf(PickerAndroid)).call(this, props, context));

      _initialiseProps.call(_this);

      var state = _this._stateFromProps(props);

      _this.state = _extends({}, state, {
        initialSelectedIndex: state.selectedIndex
      });
      return _this;
    }

    _createClass(PickerAndroid, [{
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        this.setState(this._stateFromProps(nextProps));
      }
    }, {
      key: "render",
      value: function render() {
        var Picker = this.props.mode === MODE_DROPDOWN ? DropdownPicker : DialogPicker;
        var nativeProps = {
          enabled: this.props.enabled,
          items: this.state.items,
          mode: this.props.mode,
          onSelect: this._onChange,
          prompt: this.props.prompt,
          selected: this.state.initialSelectedIndex,
          testID: this.props.testID,
          style: [styles.pickerAndroid, this.props.style],
          accessibilityLabel: this.props.accessibilityLabel
        };
        return React.createElement(Picker, _extends({
          ref: REF_PICKER
        }, nativeProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 107
          }
        }));
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this._lastNativePosition = this.state.initialSelectedIndex;
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        if (this.refs[REF_PICKER] && this.state.selectedIndex !== this._lastNativePosition) {
          this.refs[REF_PICKER].setNativeProps({
            selected: this.state.selectedIndex
          });
          this._lastNativePosition = this.state.selectedIndex;
        }
      }
    }]);

    return PickerAndroid;
  }(React.Component), _class.propTypes = _extends({}, ViewPropTypes, {
    style: pickerStyleType,
    selectedValue: ReactPropTypes.any,
    enabled: ReactPropTypes.bool,
    mode: ReactPropTypes.oneOf(['dialog', 'dropdown']),
    onValueChange: ReactPropTypes.func,
    prompt: ReactPropTypes.string,
    testID: ReactPropTypes.string
  }), _initialiseProps = function _initialiseProps() {
    var _this2 = this;

    this._stateFromProps = function (props) {
      var selectedIndex = 0;
      var items = React.Children.map(props.children, function (child, index) {
        if (child.props.value === props.selectedValue) {
          selectedIndex = index;
        }

        var childProps = {
          value: child.props.value,
          label: child.props.label
        };

        if (child.props.color) {
          childProps.color = processColor(child.props.color);
        }

        return childProps;
      });
      return {
        selectedIndex: selectedIndex,
        items: items
      };
    };

    this._onChange = function (event) {
      if (_this2.props.onValueChange) {
        var position = event.nativeEvent.position;

        if (position >= 0) {
          var children = React.Children.toArray(_this2.props.children);
          var value = children[position].props.value;

          _this2.props.onValueChange(value, position);
        } else {
          _this2.props.onValueChange(null, position);
        }
      }

      _this2._lastNativePosition = event.nativeEvent.position;

      _this2.forceUpdate();
    };
  }, _temp));

  var styles = StyleSheet.create({
    pickerAndroid: {
      height: 50
    }
  });
  var cfg = {
    nativeOnly: {
      items: true,
      selected: true
    }
  };
  var DropdownPicker = requireNativeComponent('AndroidDropdownPicker', PickerAndroid, cfg);
  var DialogPicker = requireNativeComponent('AndroidDialogPicker', PickerAndroid, cfg);
  module.exports = PickerAndroid;
},441,[113,179,126,133,130,171,141,134,142,155,148],"PickerAndroid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Components\\ProgressViewIOS\\ProgressViewIOS.android.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    DummyProgressViewIOS: {
      displayName: "DummyProgressViewIOS"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Components/ProgressViewIOS/ProgressViewIOS.android.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var React = _require(_dependencyMap[2], 'React');

  var StyleSheet = _require(_dependencyMap[3], 'StyleSheet');

  var Text = _require(_dependencyMap[4], 'Text');

  var View = _require(_dependencyMap[5], 'View');

  var DummyProgressViewIOS = _wrapComponent("DummyProgressViewIOS")(function (_React$Component) {
    _inherits(DummyProgressViewIOS, _React$Component);

    function DummyProgressViewIOS() {
      _classCallCheck(this, DummyProgressViewIOS);

      return _possibleConstructorReturn(this, (DummyProgressViewIOS.__proto__ || Object.getPrototypeOf(DummyProgressViewIOS)).apply(this, arguments));
    }

    _createClass(DummyProgressViewIOS, [{
      key: "render",
      value: function render() {
        return React.createElement(
          View,
          {
            style: [styles.dummy, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 23
            }
          },
          React.createElement(
            Text,
            {
              style: styles.text,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 24
              }
            },
            "ProgressViewIOS is not supported on this platform!"
          )
        );
      }
    }]);

    return DummyProgressViewIOS;
  }(React.Component));

  var styles = StyleSheet.create({
    dummy: {
      width: 120,
      height: 20,
      backgroundColor: '#ffbcbc',
      borderWidth: 1,
      borderColor: 'red',
      alignItems: 'center',
      justifyContent: 'center'
    },
    text: {
      color: '#333333',
      margin: 5,
      fontSize: 10
    }
  });
  module.exports = DummyProgressViewIOS;
},442,[113,179,133,171,339,173],"ProgressViewIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp2,
      _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Lists\\SectionList.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    SectionList: {
      displayName: "SectionList"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Lists/SectionList.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var MetroListView = _require(_dependencyMap[2], 'MetroListView');

  var Platform = _require(_dependencyMap[3], 'Platform');

  var React = _require(_dependencyMap[4], 'React');

  var ScrollView = _require(_dependencyMap[5], 'ScrollView');

  var VirtualizedSectionList = _require(_dependencyMap[6], 'VirtualizedSectionList');

  var defaultProps = _extends({}, VirtualizedSectionList.defaultProps, {
    stickySectionHeadersEnabled: Platform.OS === 'ios'
  });

  var SectionList = _wrapComponent("SectionList")((_temp2 = _class = function (_React$PureComponent) {
    _inherits(SectionList, _React$PureComponent);

    function SectionList() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, SectionList);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SectionList.__proto__ || Object.getPrototypeOf(SectionList)).call.apply(_ref, [this].concat(args))), _this), _this._captureRef = function (ref) {
        _this._wrapperListRef = ref;
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(SectionList, [{
      key: "scrollToLocation",
      value: function scrollToLocation(params) {
        this._wrapperListRef.scrollToLocation(params);
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        listRef && listRef.recordInteraction();
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        listRef && listRef.flashScrollIndicators();
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        if (listRef) {
          return listRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        if (listRef) {
          return listRef.getScrollableNode();
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        if (listRef) {
          listRef.setNativeProps(props);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var List = this.props.legacyImplementation ? MetroListView : VirtualizedSectionList;
        return React.createElement(List, _extends({}, this.props, {
          ref: this._captureRef,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 331
          }
        }));
      }
    }]);

    return SectionList;
  }(React.PureComponent), _class.defaultProps = defaultProps, _temp2));

  module.exports = SectionList;
},443,[113,179,398,52,133,381,444],"SectionList");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Lists\\VirtualizedSectionList.js";

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    VirtualizedSectionList: {
      displayName: "VirtualizedSectionList"
    },
    ItemWithSeparator: {
      displayName: "ItemWithSeparator"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Lists/VirtualizedSectionList.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var React = _require(_dependencyMap[2], 'React');

  var View = _require(_dependencyMap[3], 'View');

  var VirtualizedList = _require(_dependencyMap[4], 'VirtualizedList');

  var invariant = _require(_dependencyMap[5], 'fbjs/lib/invariant');

  var VirtualizedSectionList = _wrapComponent("VirtualizedSectionList")((_temp = _class = function (_React$PureComponent) {
    _inherits(VirtualizedSectionList, _React$PureComponent);

    _createClass(VirtualizedSectionList, [{
      key: "scrollToLocation",
      value: function scrollToLocation(params) {
        var index = params.itemIndex + 1;

        for (var ii = 0; ii < params.sectionIndex; ii++) {
          index += this.props.sections[ii].data.length + 2;
        }

        var toIndexParams = _extends({}, params, {
          index: index
        });

        this._listRef.scrollToIndex(toIndexParams);
      }
    }, {
      key: "getListRef",
      value: function getListRef() {
        return this._listRef;
      }
    }, {
      key: "_subExtractor",
      value: function _subExtractor(index) {
        var itemIndex = index;
        var defaultKeyExtractor = this.props.keyExtractor;

        for (var ii = 0; ii < this.props.sections.length; ii++) {
          var _section = this.props.sections[ii];

          var _key = _section.key || String(ii);

          itemIndex -= 1;

          if (itemIndex >= _section.data.length + 1) {
            itemIndex -= _section.data.length + 1;
          } else if (itemIndex === -1) {
            return {
              section: _section,
              key: _key + ':header',
              index: null,
              header: true,
              trailingSection: this.props.sections[ii + 1]
            };
          } else if (itemIndex === _section.data.length) {
            return {
              section: _section,
              key: _key + ':footer',
              index: null,
              header: false,
              trailingSection: this.props.sections[ii + 1]
            };
          } else {
            var _keyExtractor = _section.keyExtractor || defaultKeyExtractor;

            return {
              section: _section,
              key: _key + ':' + _keyExtractor(_section.data[itemIndex], itemIndex),
              index: itemIndex,
              leadingItem: _section.data[itemIndex - 1],
              leadingSection: this.props.sections[ii - 1],
              trailingItem: _section.data[itemIndex + 1],
              trailingSection: this.props.sections[ii + 1]
            };
          }
        }
      }
    }, {
      key: "_getSeparatorComponent",
      value: function _getSeparatorComponent(index, info) {
        info = info || this._subExtractor(index);

        if (!info) {
          return null;
        }

        var ItemSeparatorComponent = info.section.ItemSeparatorComponent || this.props.ItemSeparatorComponent;
        var SectionSeparatorComponent = this.props.SectionSeparatorComponent;
        var isLastItemInList = index === this.state.childProps.getItemCount() - 1;
        var isLastItemInSection = info.index === info.section.data.length - 1;

        if (SectionSeparatorComponent && isLastItemInSection) {
          return SectionSeparatorComponent;
        }

        if (ItemSeparatorComponent && !isLastItemInSection && !isLastItemInList) {
          return ItemSeparatorComponent;
        }

        return null;
      }
    }, {
      key: "_computeState",
      value: function _computeState(props) {
        var offset = props.ListHeaderComponent ? 1 : 0;
        var stickyHeaderIndices = [];
        var itemCount = props.sections.reduce(function (v, section) {
          stickyHeaderIndices.push(v + offset);
          return v + section.data.length + 2;
        }, 0);
        return {
          childProps: _extends({}, props, {
            renderItem: this._renderItem,
            ItemSeparatorComponent: undefined,
            data: props.sections,
            getItemCount: function getItemCount() {
              return itemCount;
            },
            getItem: getItem,
            keyExtractor: this._keyExtractor,
            onViewableItemsChanged: props.onViewableItemsChanged ? this._onViewableItemsChanged : undefined,
            stickyHeaderIndices: props.stickySectionHeadersEnabled ? stickyHeaderIndices : undefined
          })
        };
      }
    }]);

    function VirtualizedSectionList(props, context) {
      _classCallCheck(this, VirtualizedSectionList);

      var _this = _possibleConstructorReturn(this, (VirtualizedSectionList.__proto__ || Object.getPrototypeOf(VirtualizedSectionList)).call(this, props, context));

      _this._keyExtractor = function (item, index) {
        var info = _this._subExtractor(index);

        return info && info.key || String(index);
      };

      _this._convertViewable = function (viewable) {
        invariant(viewable.index != null, 'Received a broken ViewToken');

        var info = _this._subExtractor(viewable.index);

        if (!info) {
          return null;
        }

        var keyExtractor = info.section.keyExtractor || _this.props.keyExtractor;
        return _extends({}, viewable, {
          index: info.index,
          key: keyExtractor(viewable.item, info.index),
          section: info.section
        });
      };

      _this._onViewableItemsChanged = function (_ref) {
        var viewableItems = _ref.viewableItems,
            changed = _ref.changed;

        if (_this.props.onViewableItemsChanged) {
          _this.props.onViewableItemsChanged({
            viewableItems: viewableItems.map(_this._convertViewable, _this).filter(Boolean),
            changed: changed.map(_this._convertViewable, _this).filter(Boolean)
          });
        }
      };

      _this._renderItem = function (_ref2) {
        var item = _ref2.item,
            index = _ref2.index;

        var info = _this._subExtractor(index);

        if (!info) {
          return null;
        }

        var infoIndex = info.index;

        if (infoIndex == null) {
          var _section2 = info.section;

          if (info.header === true) {
            var _renderSectionHeader = _this.props.renderSectionHeader;
            return _renderSectionHeader ? _renderSectionHeader({
              section: _section2
            }) : null;
          } else {
            var _renderSectionFooter = _this.props.renderSectionFooter;
            return _renderSectionFooter ? _renderSectionFooter({
              section: _section2
            }) : null;
          }
        } else {
          var _renderItem = info.section.renderItem || _this.props.renderItem;

          var _SeparatorComponent = _this._getSeparatorComponent(index, info);

          invariant(_renderItem, 'no renderItem!');
          return React.createElement(ItemWithSeparator, {
            SeparatorComponent: _SeparatorComponent,
            LeadingSeparatorComponent: infoIndex === 0 ? _this.props.SectionSeparatorComponent : undefined,
            cellKey: info.key,
            index: infoIndex,
            item: item,
            leadingItem: info.leadingItem,
            leadingSection: info.leadingSection,
            onUpdateSeparator: _this._onUpdateSeparator,
            prevCellKey: (_this._subExtractor(index - 1) || {}).key,
            ref: function ref(_ref3) {
              _this._cellRefs[info.key] = _ref3;
            },
            renderItem: _renderItem,
            section: info.section,
            trailingItem: info.trailingItem,
            trailingSection: info.trailingSection,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 281
            }
          });
        }
      };

      _this._onUpdateSeparator = function (key, newProps) {
        var ref = _this._cellRefs[key];
        ref && ref.updateSeparatorProps(newProps);
      };

      _this._cellRefs = {};

      _this._captureRef = function (ref) {
        _this._listRef = ref;
      };

      _this.state = _this._computeState(props);
      return _this;
    }

    _createClass(VirtualizedSectionList, [{
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        this.setState(this._computeState(nextProps));
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(VirtualizedList, _extends({}, this.state.childProps, {
          ref: this._captureRef,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 370
          }
        }));
      }
    }]);

    return VirtualizedSectionList;
  }(React.PureComponent), _class.defaultProps = _extends({}, VirtualizedList.defaultProps, {
    data: []
  }), _temp));

  var ItemWithSeparator = _wrapComponent("ItemWithSeparator")(function (_React$Component) {
    _inherits(ItemWithSeparator, _React$Component);

    function ItemWithSeparator() {
      var _ref4;

      var _temp2, _this2, _ret;

      _classCallCheck(this, ItemWithSeparator);

      for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return _ret = (_temp2 = (_this2 = _possibleConstructorReturn(this, (_ref4 = ItemWithSeparator.__proto__ || Object.getPrototypeOf(ItemWithSeparator)).call.apply(_ref4, [this].concat(args))), _this2), _this2.state = {
        separatorProps: {
          highlighted: false,
          leadingItem: _this2.props.item,
          leadingSection: _this2.props.leadingSection,
          section: _this2.props.section,
          trailingItem: _this2.props.trailingItem,
          trailingSection: _this2.props.trailingSection
        },
        leadingSeparatorProps: {
          highlighted: false,
          leadingItem: _this2.props.leadingItem,
          leadingSection: _this2.props.leadingSection,
          section: _this2.props.section,
          trailingItem: _this2.props.item,
          trailingSection: _this2.props.trailingSection
        }
      }, _this2._separators = {
        highlight: function highlight() {
          ['leading', 'trailing'].forEach(function (s) {
            return _this2._separators.updateProps(s, {
              highlighted: true
            });
          });
        },
        unhighlight: function unhighlight() {
          ['leading', 'trailing'].forEach(function (s) {
            return _this2._separators.updateProps(s, {
              highlighted: false
            });
          });
        },
        updateProps: function updateProps(select, newProps) {
          var _this2$props = _this2.props,
              LeadingSeparatorComponent = _this2$props.LeadingSeparatorComponent,
              cellKey = _this2$props.cellKey,
              prevCellKey = _this2$props.prevCellKey;

          if (select === 'leading' && LeadingSeparatorComponent) {
            _this2.setState(function (state) {
              return {
                leadingSeparatorProps: _extends({}, state.leadingSeparatorProps, newProps)
              };
            });
          } else {
            _this2.props.onUpdateSeparator(select === 'leading' && prevCellKey || cellKey, newProps);
          }
        }
      }, _temp2), _possibleConstructorReturn(_this2, _ret);
    }

    _createClass(ItemWithSeparator, [{
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(props) {
        var _this3 = this;

        this.setState(function (state) {
          return {
            separatorProps: _extends({}, _this3.state.separatorProps, {
              leadingItem: props.item,
              leadingSection: props.leadingSection,
              section: props.section,
              trailingItem: props.trailingItem,
              trailingSection: props.trailingSection
            }),
            leadingSeparatorProps: _extends({}, _this3.state.leadingSeparatorProps, {
              leadingItem: props.leadingItem,
              leadingSection: props.leadingSection,
              section: props.section,
              trailingItem: props.item,
              trailingSection: props.trailingSection
            })
          };
        });
      }
    }, {
      key: "updateSeparatorProps",
      value: function updateSeparatorProps(newProps) {
        this.setState(function (state) {
          return {
            separatorProps: _extends({}, state.separatorProps, newProps)
          };
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            LeadingSeparatorComponent = _props.LeadingSeparatorComponent,
            SeparatorComponent = _props.SeparatorComponent,
            item = _props.item,
            index = _props.index,
            section = _props.section;
        var element = this.props.renderItem({
          item: item,
          index: index,
          section: section,
          separators: this._separators
        });
        var leadingSeparator = LeadingSeparatorComponent && React.createElement(LeadingSeparatorComponent, _extends({}, this.state.leadingSeparatorProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 491
          }
        }));
        var separator = SeparatorComponent && React.createElement(SeparatorComponent, _extends({}, this.state.separatorProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 494
          }
        }));
        return leadingSeparator || separator ? React.createElement(
          View,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 497
            }
          },
          leadingSeparator,
          element,
          separator
        ) : element;
      }
    }]);

    return ItemWithSeparator;
  }(React.Component));

  function getItem(sections, index) {
    if (!sections) {
      return null;
    }

    var itemIdx = index - 1;

    for (var ii = 0; ii < sections.length; ii++) {
      if (itemIdx === -1 || itemIdx === sections[ii].data.length) {
        return sections[ii];
      } else if (itemIdx < sections[ii].data.length) {
        return sections[ii].data[itemIdx];
      } else {
        itemIdx -= sections[ii].data.length + 2;
      }
    }

    return null;
  }

  module.exports = VirtualizedSectionList;
},444,[113,179,133,173,405,13],"VirtualizedSectionList");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Components\\SegmentedControlIOS\\SegmentedControlIOS.android.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    DummySegmentedControlIOS: {
      displayName: "DummySegmentedControlIOS"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Components/SegmentedControlIOS/SegmentedControlIOS.android.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var React = _require(_dependencyMap[2], 'React');

  var StyleSheet = _require(_dependencyMap[3], 'StyleSheet');

  var Text = _require(_dependencyMap[4], 'Text');

  var View = _require(_dependencyMap[5], 'View');

  var DummySegmentedControlIOS = _wrapComponent("DummySegmentedControlIOS")(function (_React$Component) {
    _inherits(DummySegmentedControlIOS, _React$Component);

    function DummySegmentedControlIOS() {
      _classCallCheck(this, DummySegmentedControlIOS);

      return _possibleConstructorReturn(this, (DummySegmentedControlIOS.__proto__ || Object.getPrototypeOf(DummySegmentedControlIOS)).apply(this, arguments));
    }

    _createClass(DummySegmentedControlIOS, [{
      key: "render",
      value: function render() {
        return React.createElement(
          View,
          {
            style: [styles.dummy, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 23
            }
          },
          React.createElement(
            Text,
            {
              style: styles.text,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 24
              }
            },
            "SegmentedControlIOS is not supported on this platform!"
          )
        );
      }
    }]);

    return DummySegmentedControlIOS;
  }(React.Component));

  var styles = StyleSheet.create({
    dummy: {
      width: 120,
      height: 50,
      backgroundColor: '#ffbcbc',
      borderWidth: 1,
      borderColor: 'red',
      alignItems: 'center',
      justifyContent: 'center'
    },
    text: {
      color: '#333333',
      margin: 5,
      fontSize: 10
    }
  });
  module.exports = DummySegmentedControlIOS;
},445,[113,179,133,171,339,173],"SegmentedControlIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Components\\Slider\\Slider.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  var Image = _require(_dependencyMap[0], 'Image');

  var ColorPropType = _require(_dependencyMap[1], 'ColorPropType');

  var NativeMethodsMixin = _require(_dependencyMap[2], 'NativeMethodsMixin');

  var ReactNativeViewAttributes = _require(_dependencyMap[3], 'ReactNativeViewAttributes');

  var Platform = _require(_dependencyMap[4], 'Platform');

  var React = _require(_dependencyMap[5], 'React');

  var PropTypes = _require(_dependencyMap[6], 'prop-types');

  var StyleSheet = _require(_dependencyMap[7], 'StyleSheet');

  var ViewPropTypes = _require(_dependencyMap[8], 'ViewPropTypes');

  var createReactClass = _require(_dependencyMap[9], 'create-react-class');

  var requireNativeComponent = _require(_dependencyMap[10], 'requireNativeComponent');

  var Slider = createReactClass({
    displayName: 'Slider',
    mixins: [NativeMethodsMixin],
    propTypes: _extends({}, ViewPropTypes, {
      style: ViewPropTypes.style,
      value: PropTypes.number,
      step: PropTypes.number,
      minimumValue: PropTypes.number,
      maximumValue: PropTypes.number,
      minimumTrackTintColor: ColorPropType,
      maximumTrackTintColor: ColorPropType,
      disabled: PropTypes.bool,
      trackImage: Image.propTypes.source,
      minimumTrackImage: Image.propTypes.source,
      maximumTrackImage: Image.propTypes.source,
      thumbImage: Image.propTypes.source,
      thumbTintColor: ColorPropType,
      onValueChange: PropTypes.func,
      onSlidingComplete: PropTypes.func,
      testID: PropTypes.string
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        disabled: false,
        value: 0,
        minimumValue: 0,
        maximumValue: 1,
        step: 0
      };
    },
    viewConfig: {
      uiViewClassName: 'RCTSlider',
      validAttributes: _extends({}, ReactNativeViewAttributes.RCTView, {
        value: true
      })
    },
    render: function render() {
      var _props = this.props,
          style = _props.style,
          onValueChange = _props.onValueChange,
          onSlidingComplete = _props.onSlidingComplete,
          props = _objectWithoutProperties(_props, ["style", "onValueChange", "onSlidingComplete"]);

      props.style = [styles.slider, style];

      props.onValueChange = onValueChange && function (event) {
        var userEvent = true;

        if (Platform.OS === 'android') {
          userEvent = event.nativeEvent.fromUser;
        }

        onValueChange && userEvent && onValueChange(event.nativeEvent.value);
      };

      props.onChange = props.onValueChange;

      props.onSlidingComplete = onSlidingComplete && function (event) {
        onSlidingComplete && onSlidingComplete(event.nativeEvent.value);
      };

      return React.createElement(RCTSlider, _extends({}, props, {
        enabled: !this.props.disabled,
        onStartShouldSetResponder: function onStartShouldSetResponder() {
          return true;
        },
        onResponderTerminationRequest: function onResponderTerminationRequest() {
          return false;
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 248
        }
      }));
    }
  });
  var styles = void 0;

  if (Platform.OS === 'ios') {
    styles = StyleSheet.create({
      slider: {
        height: 40
      }
    });
  } else {
    styles = StyleSheet.create({
      slider: {}
    });
  }

  var options = {};

  if (Platform.OS === 'android') {
    options = {
      nativeOnly: {
        enabled: true
      }
    };
  }

  var RCTSlider = requireNativeComponent('RCTSlider', Slider, options);
  module.exports = Slider;
},446,[380,126,128,174,52,133,130,171,134,176,148],"Slider");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _require(_dependencyMap[0], 'UnimplementedView');
},447,[416],"SnapshotViewIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Components\\Switch\\Switch.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var NativeMethodsMixin = _require(_dependencyMap[1], 'NativeMethodsMixin');

  var Platform = _require(_dependencyMap[2], 'Platform');

  var React = _require(_dependencyMap[3], 'React');

  var PropTypes = _require(_dependencyMap[4], 'prop-types');

  var StyleSheet = _require(_dependencyMap[5], 'StyleSheet');

  var ViewPropTypes = _require(_dependencyMap[6], 'ViewPropTypes');

  var createReactClass = _require(_dependencyMap[7], 'create-react-class');

  var requireNativeComponent = _require(_dependencyMap[8], 'requireNativeComponent');

  var Switch = createReactClass({
    displayName: 'Switch',
    propTypes: _extends({}, ViewPropTypes, {
      value: PropTypes.bool,
      disabled: PropTypes.bool,
      onValueChange: PropTypes.func,
      testID: PropTypes.string,
      tintColor: ColorPropType,
      onTintColor: ColorPropType,
      thumbTintColor: ColorPropType
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        value: false,
        disabled: false
      };
    },
    mixins: [NativeMethodsMixin],
    _rctSwitch: {},
    _onChange: function _onChange(event) {
      if (Platform.OS === 'android') {
        this._rctSwitch.setNativeProps({
          on: this.props.value
        });
      } else {
        this._rctSwitch.setNativeProps({
          value: this.props.value
        });
      }

      this.props.onChange && this.props.onChange(event);
      this.props.onValueChange && this.props.onValueChange(event.nativeEvent.value);
    },
    render: function render() {
      var _this = this;

      var props = _extends({}, this.props);

      props.onStartShouldSetResponder = function () {
        return true;
      };

      props.onResponderTerminationRequest = function () {
        return false;
      };

      if (Platform.OS === 'android') {
        props.enabled = !this.props.disabled;
        props.on = this.props.value;
        props.style = this.props.style;
        props.trackTintColor = this.props.value ? this.props.onTintColor : this.props.tintColor;
      } else if (Platform.OS === 'ios') {
        props.style = [styles.rctSwitchIOS, this.props.style];
      }

      return React.createElement(RCTSwitch, _extends({}, props, {
        ref: function ref(_ref) {
          _this._rctSwitch = _ref;
        },
        onChange: this._onChange,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 115
        }
      }));
    }
  });
  var styles = StyleSheet.create({
    rctSwitchIOS: {
      height: 31,
      width: 51
    }
  });

  if (Platform.OS === 'android') {
    var RCTSwitch = requireNativeComponent('AndroidSwitch', Switch, {
      nativeOnly: {
        onChange: true,
        on: true,
        enabled: true,
        trackTintColor: true
      }
    });
  } else {
    var RCTSwitch = requireNativeComponent('RCTSwitch', Switch, {
      nativeOnly: {
        onChange: true
      }
    });
  }

  module.exports = Switch;
},448,[126,128,52,133,130,171,134,176,148],"Switch");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Experimental\\SwipeableRow\\SwipeableFlatList.js";

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    SwipeableFlatList: {
      displayName: "SwipeableFlatList"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableFlatList.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var PropTypes = _require(_dependencyMap[2], 'prop-types');

  var React = _require(_dependencyMap[3], 'React');

  var SwipeableRow = _require(_dependencyMap[4], 'SwipeableRow');

  var FlatList = _require(_dependencyMap[5], 'FlatList');

  var SwipeableFlatList = _wrapComponent("SwipeableFlatList")((_temp = _class = function (_React$Component) {
    _inherits(SwipeableFlatList, _React$Component);

    function SwipeableFlatList(props, context) {
      _classCallCheck(this, SwipeableFlatList);

      var _this = _possibleConstructorReturn(this, (SwipeableFlatList.__proto__ || Object.getPrototypeOf(SwipeableFlatList)).call(this, props, context));

      _this._flatListRef = null;
      _this._shouldBounceFirstRowOnMount = false;

      _this._onScroll = function (e) {
        if (_this.state.openRowKey) {
          _this.setState({
            openRowKey: null
          });
        }

        _this.props.onScroll && _this.props.onScroll(e);
      };

      _this._renderItem = function (info) {
        var slideoutView = _this.props.renderQuickActions(info);

        var key = _this.props.keyExtractor(info.item, info.index);

        if (!slideoutView) {
          return _this.props.renderItem(info);
        }

        var shouldBounceOnMount = false;

        if (_this._shouldBounceFirstRowOnMount) {
          _this._shouldBounceFirstRowOnMount = false;
          shouldBounceOnMount = true;
        }

        return React.createElement(
          SwipeableRow,
          {
            slideoutView: slideoutView,
            isOpen: key === _this.state.openRowKey,
            maxSwipeDistance: _this._getMaxSwipeDistance(info),
            onOpen: function onOpen() {
              return _this._onOpen(key);
            },
            onClose: function onClose() {
              return _this._onClose(key);
            },
            shouldBounceOnMount: shouldBounceOnMount,
            onSwipeEnd: _this._setListViewScrollable,
            onSwipeStart: _this._setListViewNotScrollable,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 137
            }
          },
          _this.props.renderItem(info)
        );
      };

      _this._setListViewScrollable = function () {
        _this._setListViewScrollableTo(true);
      };

      _this._setListViewNotScrollable = function () {
        _this._setListViewScrollableTo(false);
      };

      _this.state = {
        openRowKey: null
      };
      _this._shouldBounceFirstRowOnMount = _this.props.bounceFirstRowOnMount;
      return _this;
    }

    _createClass(SwipeableFlatList, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return React.createElement(FlatList, _extends({}, this.props, {
          ref: function ref(_ref) {
            _this2._flatListRef = _ref;
          },
          onScroll: this._onScroll,
          renderItem: this._renderItem,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 99
          }
        }));
      }
    }, {
      key: "_getMaxSwipeDistance",
      value: function _getMaxSwipeDistance(info) {
        if (typeof this.props.maxSwipeDistance === 'function') {
          return this.props.maxSwipeDistance(info);
        }

        return this.props.maxSwipeDistance;
      }
    }, {
      key: "_setListViewScrollableTo",
      value: function _setListViewScrollableTo(value) {
        if (this._flatListRef) {
          this._flatListRef.setNativeProps({
            scrollEnabled: value
          });
        }
      }
    }, {
      key: "_onOpen",
      value: function _onOpen(key) {
        this.setState({
          openRowKey: key
        });
      }
    }, {
      key: "_onClose",
      value: function _onClose(key) {
        this.setState({
          openRowKey: null
        });
      }
    }]);

    return SwipeableFlatList;
  }(React.Component), _class.propTypes = _extends({}, FlatList.propTypes, {
    bounceFirstRowOnMount: PropTypes.bool.isRequired,
    maxSwipeDistance: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,
    renderQuickActions: PropTypes.func.isRequired
  }), _class.defaultProps = _extends({}, FlatList.defaultProps, {
    bounceFirstRowOnMount: true,
    renderQuickActions: function renderQuickActions() {
      return null;
    }
  }), _temp));

  module.exports = SwipeableFlatList;
},449,[113,179,130,133,450,397],"SwipeableFlatList");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Experimental\\SwipeableRow\\SwipeableRow.js";

  var Animated = _require(_dependencyMap[0], 'Animated');

  var I18nManager = _require(_dependencyMap[1], 'I18nManager');

  var PanResponder = _require(_dependencyMap[2], 'PanResponder');

  var React = _require(_dependencyMap[3], 'React');

  var PropTypes = _require(_dependencyMap[4], 'prop-types');

  var StyleSheet = _require(_dependencyMap[5], 'StyleSheet');

  var TimerMixin = _require(_dependencyMap[6], 'react-timer-mixin');

  var View = _require(_dependencyMap[7], 'View');

  var createReactClass = _require(_dependencyMap[8], 'create-react-class');

  var emptyFunction = _require(_dependencyMap[9], 'fbjs/lib/emptyFunction');

  var IS_RTL = I18nManager.isRTL;
  var CLOSED_LEFT_POSITION = 0;
  var HORIZONTAL_SWIPE_DISTANCE_THRESHOLD = 10;
  var HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD = 0.3;
  var SLOW_SPEED_SWIPE_FACTOR = 4;
  var SWIPE_DURATION = 300;
  var ON_MOUNT_BOUNCE_DELAY = 700;
  var ON_MOUNT_BOUNCE_DURATION = 400;
  var RIGHT_SWIPE_BOUNCE_BACK_DISTANCE = 30;
  var RIGHT_SWIPE_BOUNCE_BACK_DURATION = 300;
  var RIGHT_SWIPE_THRESHOLD = 30 * SLOW_SPEED_SWIPE_FACTOR;
  var SwipeableRow = createReactClass({
    displayName: 'SwipeableRow',
    _panResponder: {},
    _previousLeft: CLOSED_LEFT_POSITION,
    mixins: [TimerMixin],
    propTypes: {
      children: PropTypes.any,
      isOpen: PropTypes.bool,
      preventSwipeRight: PropTypes.bool,
      maxSwipeDistance: PropTypes.number.isRequired,
      onOpen: PropTypes.func.isRequired,
      onClose: PropTypes.func.isRequired,
      onSwipeEnd: PropTypes.func.isRequired,
      onSwipeStart: PropTypes.func.isRequired,
      shouldBounceOnMount: PropTypes.bool,
      slideoutView: PropTypes.node.isRequired,
      swipeThreshold: PropTypes.number.isRequired
    },
    getInitialState: function getInitialState() {
      return {
        currentLeft: new Animated.Value(this._previousLeft),
        isSwipeableViewRendered: false,
        rowHeight: null
      };
    },
    getDefaultProps: function getDefaultProps() {
      return {
        isOpen: false,
        preventSwipeRight: false,
        maxSwipeDistance: 0,
        onOpen: emptyFunction,
        onClose: emptyFunction,
        onSwipeEnd: emptyFunction,
        onSwipeStart: emptyFunction,
        swipeThreshold: 30
      };
    },
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      this._panResponder = PanResponder.create({
        onMoveShouldSetPanResponderCapture: this._handleMoveShouldSetPanResponderCapture,
        onPanResponderGrant: this._handlePanResponderGrant,
        onPanResponderMove: this._handlePanResponderMove,
        onPanResponderRelease: this._handlePanResponderEnd,
        onPanResponderTerminationRequest: this._onPanResponderTerminationRequest,
        onPanResponderTerminate: this._handlePanResponderEnd,
        onShouldBlockNativeResponder: function onShouldBlockNativeResponder(event, gestureState) {
          return false;
        }
      });
    },
    componentDidMount: function componentDidMount() {
      var _this = this;

      if (this.props.shouldBounceOnMount) {
        this.setTimeout(function () {
          _this._animateBounceBack(ON_MOUNT_BOUNCE_DURATION);
        }, ON_MOUNT_BOUNCE_DELAY);
      }
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (this.props.isOpen && !nextProps.isOpen) {
        this._animateToClosedPosition();
      }
    },
    render: function render() {
      var slideOutView = void 0;

      if (this.state.isSwipeableViewRendered && this.state.rowHeight) {
        slideOutView = React.createElement(
          View,
          {
            style: [styles.slideOutContainer, {
              height: this.state.rowHeight
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 167
            }
          },
          this.props.slideoutView
        );
      }

      var swipeableView = React.createElement(
        Animated.View,
        {
          onLayout: this._onSwipeableViewLayout,
          style: {
            transform: [{
              translateX: this.state.currentLeft
            }]
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 178
          }
        },
        this.props.children
      );
      return React.createElement(
        View,
        _extends({}, this._panResponder.panHandlers, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 186
          }
        }),
        slideOutView,
        swipeableView
      );
    },
    close: function close() {
      this.props.onClose();

      this._animateToClosedPosition();
    },
    _onSwipeableViewLayout: function _onSwipeableViewLayout(event) {
      this.setState({
        isSwipeableViewRendered: true,
        rowHeight: event.nativeEvent.layout.height
      });
    },
    _handleMoveShouldSetPanResponderCapture: function _handleMoveShouldSetPanResponderCapture(event, gestureState) {
      return gestureState.dy < 10 && this._isValidSwipe(gestureState);
    },
    _handlePanResponderGrant: function _handlePanResponderGrant(event, gestureState) {},
    _handlePanResponderMove: function _handlePanResponderMove(event, gestureState) {
      if (this._isSwipingExcessivelyRightFromClosedPosition(gestureState)) {
        return;
      }

      this.props.onSwipeStart();

      if (this._isSwipingRightFromClosed(gestureState)) {
        this._swipeSlowSpeed(gestureState);
      } else {
        this._swipeFullSpeed(gestureState);
      }
    },
    _isSwipingRightFromClosed: function _isSwipingRightFromClosed(gestureState) {
      var gestureStateDx = IS_RTL ? -gestureState.dx : gestureState.dx;
      return this._previousLeft === CLOSED_LEFT_POSITION && gestureStateDx > 0;
    },
    _swipeFullSpeed: function _swipeFullSpeed(gestureState) {
      this.state.currentLeft.setValue(this._previousLeft + gestureState.dx);
    },
    _swipeSlowSpeed: function _swipeSlowSpeed(gestureState) {
      this.state.currentLeft.setValue(this._previousLeft + gestureState.dx / SLOW_SPEED_SWIPE_FACTOR);
    },
    _isSwipingExcessivelyRightFromClosedPosition: function _isSwipingExcessivelyRightFromClosedPosition(gestureState) {
      var gestureStateDx = IS_RTL ? -gestureState.dx : gestureState.dx;
      return this._isSwipingRightFromClosed(gestureState) && gestureStateDx > RIGHT_SWIPE_THRESHOLD;
    },
    _onPanResponderTerminationRequest: function _onPanResponderTerminationRequest(event, gestureState) {
      return false;
    },
    _animateTo: function _animateTo(toValue) {
      var _this2 = this;

      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SWIPE_DURATION;
      var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : emptyFunction;
      Animated.timing(this.state.currentLeft, {
        duration: duration,
        toValue: toValue,
        useNativeDriver: true
      }).start(function () {
        _this2._previousLeft = toValue;
        callback();
      });
    },
    _animateToOpenPosition: function _animateToOpenPosition() {
      var maxSwipeDistance = IS_RTL ? -this.props.maxSwipeDistance : this.props.maxSwipeDistance;

      this._animateTo(-maxSwipeDistance);
    },
    _animateToOpenPositionWith: function _animateToOpenPositionWith(speed, distMoved) {
      speed = speed > HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD ? speed : HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD;
      var duration = Math.abs((this.props.maxSwipeDistance - Math.abs(distMoved)) / speed);
      var maxSwipeDistance = IS_RTL ? -this.props.maxSwipeDistance : this.props.maxSwipeDistance;

      this._animateTo(-maxSwipeDistance, duration);
    },
    _animateToClosedPosition: function _animateToClosedPosition() {
      var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SWIPE_DURATION;

      this._animateTo(CLOSED_LEFT_POSITION, duration);
    },
    _animateToClosedPositionDuringBounce: function _animateToClosedPositionDuringBounce() {
      this._animateToClosedPosition(RIGHT_SWIPE_BOUNCE_BACK_DURATION);
    },
    _animateBounceBack: function _animateBounceBack(duration) {
      var swipeBounceBackDistance = IS_RTL ? -RIGHT_SWIPE_BOUNCE_BACK_DISTANCE : RIGHT_SWIPE_BOUNCE_BACK_DISTANCE;

      this._animateTo(-swipeBounceBackDistance, duration, this._animateToClosedPositionDuringBounce);
    },
    _isValidSwipe: function _isValidSwipe(gestureState) {
      if (this.props.preventSwipeRight && this._previousLeft === CLOSED_LEFT_POSITION && gestureState.dx > 0) {
        return false;
      }

      return Math.abs(gestureState.dx) > HORIZONTAL_SWIPE_DISTANCE_THRESHOLD;
    },
    _shouldAnimateRemainder: function _shouldAnimateRemainder(gestureState) {
      return Math.abs(gestureState.dx) > this.props.swipeThreshold || gestureState.vx > HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD;
    },
    _handlePanResponderEnd: function _handlePanResponderEnd(event, gestureState) {
      var horizontalDistance = IS_RTL ? -gestureState.dx : gestureState.dx;

      if (this._isSwipingRightFromClosed(gestureState)) {
        this.props.onOpen();

        this._animateBounceBack(RIGHT_SWIPE_BOUNCE_BACK_DURATION);
      } else if (this._shouldAnimateRemainder(gestureState)) {
        if (horizontalDistance < 0) {
          this.props.onOpen();

          this._animateToOpenPositionWith(gestureState.vx, horizontalDistance);
        } else {
          this.props.onClose();

          this._animateToClosedPosition();
        }
      } else {
        if (this._previousLeft === CLOSED_LEFT_POSITION) {
          this._animateToClosedPosition();
        } else {
          this._animateToOpenPosition();
        }
      }

      this.props.onSwipeEnd();
    }
  });
  var styles = StyleSheet.create({
    slideOutContainer: {
      bottom: 0,
      left: 0,
      position: 'absolute',
      right: 0,
      top: 0
    }
  });
  module.exports = SwipeableRow;
},450,[352,437,451,133,130,171,349,173,176,57],"SwipeableRow");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var InteractionManager = _require(_dependencyMap[0], './InteractionManager');

  var TouchHistoryMath = _require(_dependencyMap[1], 'TouchHistoryMath');

  var currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;
  var currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;
  var previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;
  var previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;
  var currentCentroidX = TouchHistoryMath.currentCentroidX;
  var currentCentroidY = TouchHistoryMath.currentCentroidY;
  var PanResponder = {
    _initializeGestureState: function _initializeGestureState(gestureState) {
      gestureState.moveX = 0;
      gestureState.moveY = 0;
      gestureState.x0 = 0;
      gestureState.y0 = 0;
      gestureState.dx = 0;
      gestureState.dy = 0;
      gestureState.vx = 0;
      gestureState.vy = 0;
      gestureState.numberActiveTouches = 0;
      gestureState._accountsForMovesUpTo = 0;
    },
    _updateGestureStateOnMove: function _updateGestureStateOnMove(gestureState, touchHistory) {
      gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
      gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
      gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
      var movedAfter = gestureState._accountsForMovesUpTo;
      var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
      var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
      var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
      var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
      var nextDX = gestureState.dx + (x - prevX);
      var nextDY = gestureState.dy + (y - prevY);
      var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;
      gestureState.vx = (nextDX - gestureState.dx) / dt;
      gestureState.vy = (nextDY - gestureState.dy) / dt;
      gestureState.dx = nextDX;
      gestureState.dy = nextDY;
      gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;
    },
    create: function create(config) {
      var interactionState = {
        handle: null
      };
      var gestureState = {
        stateID: Math.random()
      };

      PanResponder._initializeGestureState(gestureState);

      var panHandlers = {
        onStartShouldSetResponder: function onStartShouldSetResponder(e) {
          return config.onStartShouldSetPanResponder === undefined ? false : config.onStartShouldSetPanResponder(e, gestureState);
        },
        onMoveShouldSetResponder: function onMoveShouldSetResponder(e) {
          return config.onMoveShouldSetPanResponder === undefined ? false : config.onMoveShouldSetPanResponder(e, gestureState);
        },
        onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(e) {
          if (e.nativeEvent.touches.length === 1) {
            PanResponder._initializeGestureState(gestureState);
          }

          gestureState.numberActiveTouches = e.touchHistory.numberActiveTouches;
          return config.onStartShouldSetPanResponderCapture !== undefined ? config.onStartShouldSetPanResponderCapture(e, gestureState) : false;
        },
        onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(e) {
          var touchHistory = e.touchHistory;

          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
            return false;
          }

          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);

          return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(e, gestureState) : false;
        },
        onResponderGrant: function onResponderGrant(e) {
          if (!interactionState.handle) {
            interactionState.handle = InteractionManager.createInteractionHandle();
          }

          gestureState.x0 = currentCentroidX(e.touchHistory);
          gestureState.y0 = currentCentroidY(e.touchHistory);
          gestureState.dx = 0;
          gestureState.dy = 0;

          if (config.onPanResponderGrant) {
            config.onPanResponderGrant(e, gestureState);
          }

          return config.onShouldBlockNativeResponder === undefined ? true : config.onShouldBlockNativeResponder();
        },
        onResponderReject: function onResponderReject(e) {
          clearInteractionHandle(interactionState, config.onPanResponderReject, e, gestureState);
        },
        onResponderRelease: function onResponderRelease(e) {
          clearInteractionHandle(interactionState, config.onPanResponderRelease, e, gestureState);

          PanResponder._initializeGestureState(gestureState);
        },
        onResponderStart: function onResponderStart(e) {
          var touchHistory = e.touchHistory;
          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;

          if (config.onPanResponderStart) {
            config.onPanResponderStart(e, gestureState);
          }
        },
        onResponderMove: function onResponderMove(e) {
          var touchHistory = e.touchHistory;

          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
            return;
          }

          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);

          if (config.onPanResponderMove) {
            config.onPanResponderMove(e, gestureState);
          }
        },
        onResponderEnd: function onResponderEnd(e) {
          var touchHistory = e.touchHistory;
          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
          clearInteractionHandle(interactionState, config.onPanResponderEnd, e, gestureState);
        },
        onResponderTerminate: function onResponderTerminate(e) {
          clearInteractionHandle(interactionState, config.onPanResponderTerminate, e, gestureState);

          PanResponder._initializeGestureState(gestureState);
        },
        onResponderTerminationRequest: function onResponderTerminationRequest(e) {
          return config.onPanResponderTerminationRequest === undefined ? true : config.onPanResponderTerminationRequest(e, gestureState);
        }
      };
      return {
        panHandlers: panHandlers,
        getInteractionHandle: function getInteractionHandle() {
          return interactionState.handle;
        }
      };
    }
  };

  function clearInteractionHandle(interactionState, callback, event, gestureState) {
    if (interactionState.handle) {
      InteractionManager.clearInteractionHandle(interactionState.handle);
      interactionState.handle = null;
    }

    if (callback) {
      callback(event, gestureState);
    }
  }

  module.exports = PanResponder;
},451,[360,452],"PanResponder");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.TouchHistoryMath;
},452,[21],"TouchHistoryMath");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Experimental\\SwipeableRow\\SwipeableListView.js";

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    SwipeableListView: {
      displayName: "SwipeableListView"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableListView.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var ListView = _require(_dependencyMap[2], 'ListView');

  var PropTypes = _require(_dependencyMap[3], 'prop-types');

  var React = _require(_dependencyMap[4], 'React');

  var SwipeableListViewDataSource = _require(_dependencyMap[5], 'SwipeableListViewDataSource');

  var SwipeableRow = _require(_dependencyMap[6], 'SwipeableRow');

  var SwipeableListView = _wrapComponent("SwipeableListView")((_temp = _class = function (_React$Component) {
    _inherits(SwipeableListView, _React$Component);

    _createClass(SwipeableListView, null, [{
      key: "getNewDataSource",
      value: function getNewDataSource() {
        return new SwipeableListViewDataSource({
          getRowData: function getRowData(data, sectionID, rowID) {
            return data[sectionID][rowID];
          },
          getSectionHeaderData: function getSectionHeaderData(data, sectionID) {
            return data[sectionID];
          },
          rowHasChanged: function rowHasChanged(row1, row2) {
            return row1 !== row2;
          },
          sectionHeaderHasChanged: function sectionHeaderHasChanged(s1, s2) {
            return s1 !== s2;
          }
        });
      }
    }]);

    function SwipeableListView(props, context) {
      _classCallCheck(this, SwipeableListView);

      var _this = _possibleConstructorReturn(this, (SwipeableListView.__proto__ || Object.getPrototypeOf(SwipeableListView)).call(this, props, context));

      _this._listViewRef = null;
      _this._shouldBounceFirstRowOnMount = false;

      _this._onScroll = function (e) {
        if (_this.props.dataSource.getOpenRowID()) {
          _this.setState({
            dataSource: _this.state.dataSource.setOpenRowID(null)
          });
        }

        _this.props.onScroll && _this.props.onScroll(e);
      };

      _this._renderRow = function (rowData, sectionID, rowID) {
        var slideoutView = _this.props.renderQuickActions(rowData, sectionID, rowID);

        if (!slideoutView) {
          return _this.props.renderRow(rowData, sectionID, rowID);
        }

        var shouldBounceOnMount = false;

        if (_this._shouldBounceFirstRowOnMount) {
          _this._shouldBounceFirstRowOnMount = false;
          shouldBounceOnMount = rowID === _this.props.dataSource.getFirstRowID();
        }

        return React.createElement(
          SwipeableRow,
          {
            slideoutView: slideoutView,
            isOpen: rowData.id === _this.props.dataSource.getOpenRowID(),
            maxSwipeDistance: _this._getMaxSwipeDistance(rowData, sectionID, rowID),
            key: rowID,
            onOpen: function onOpen() {
              return _this._onOpen(rowData.id);
            },
            onClose: function onClose() {
              return _this._onClose(rowData.id);
            },
            onSwipeEnd: function onSwipeEnd() {
              return _this._setListViewScrollable(true);
            },
            onSwipeStart: function onSwipeStart() {
              return _this._setListViewScrollable(false);
            },
            shouldBounceOnMount: shouldBounceOnMount,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 185
            }
          },
          _this.props.renderRow(rowData, sectionID, rowID)
        );
      };

      _this._shouldBounceFirstRowOnMount = _this.props.bounceFirstRowOnMount;
      _this.state = {
        dataSource: _this.props.dataSource
      };
      return _this;
    }

    _createClass(SwipeableListView, [{
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        if (this.state.dataSource.getDataSource() !== nextProps.dataSource.getDataSource()) {
          this.setState({
            dataSource: nextProps.dataSource
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return React.createElement(ListView, _extends({}, this.props, {
          ref: function ref(_ref) {
            _this2._listViewRef = _ref;
          },
          dataSource: this.state.dataSource.getDataSource(),
          onScroll: this._onScroll,
          renderRow: this._renderRow,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 118
          }
        }));
      }
    }, {
      key: "_setListViewScrollable",
      value: function _setListViewScrollable(value) {
        if (this._listViewRef && typeof this._listViewRef.setNativeProps === 'function') {
          this._listViewRef.setNativeProps({
            scrollEnabled: value
          });
        }
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._listViewRef && typeof this._listViewRef.getScrollResponder === 'function') {
          return this._listViewRef.getScrollResponder();
        }
      }
    }, {
      key: "_getMaxSwipeDistance",
      value: function _getMaxSwipeDistance(rowData, sectionID, rowID) {
        if (typeof this.props.maxSwipeDistance === 'function') {
          return this.props.maxSwipeDistance(rowData, sectionID, rowID);
        }

        return this.props.maxSwipeDistance;
      }
    }, {
      key: "_onOpen",
      value: function _onOpen(rowID) {
        this.setState({
          dataSource: this.state.dataSource.setOpenRowID(rowID)
        });
      }
    }, {
      key: "_onClose",
      value: function _onClose(rowID) {
        this.setState({
          dataSource: this.state.dataSource.setOpenRowID(null)
        });
      }
    }]);

    return SwipeableListView;
  }(React.Component), _class.propTypes = {
    bounceFirstRowOnMount: PropTypes.bool.isRequired,
    dataSource: PropTypes.instanceOf(SwipeableListViewDataSource).isRequired,
    maxSwipeDistance: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,
    renderRow: PropTypes.func.isRequired,
    renderQuickActions: PropTypes.func.isRequired
  }, _class.defaultProps = {
    bounceFirstRowOnMount: false,
    renderQuickActions: function renderQuickActions() {
      return null;
    }
  }, _temp));

  module.exports = SwipeableListView;
},453,[113,179,399,130,133,454,450],"SwipeableListView");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var ListViewDataSource = _require(_dependencyMap[0], 'ListViewDataSource');

  var SwipeableListViewDataSource = function () {
    function SwipeableListViewDataSource(params) {
      var _this = this;

      _classCallCheck(this, SwipeableListViewDataSource);

      this._dataSource = new ListViewDataSource({
        getRowData: params.getRowData,
        getSectionHeaderData: params.getSectionHeaderData,
        rowHasChanged: function rowHasChanged(row1, row2) {
          return row1.id !== _this._previousOpenRowID && row2.id === _this._openRowID || row1.id === _this._previousOpenRowID && row2.id !== _this._openRowID || params.rowHasChanged(row1, row2);
        },
        sectionHeaderHasChanged: params.sectionHeaderHasChanged
      });
    }

    _createClass(SwipeableListViewDataSource, [{
      key: "cloneWithRowsAndSections",
      value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {
        this._dataSource = this._dataSource.cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities);
        this._dataBlob = dataBlob;
        this.rowIdentities = this._dataSource.rowIdentities;
        this.sectionIdentities = this._dataSource.sectionIdentities;
        return this;
      }
    }, {
      key: "getDataSource",
      value: function getDataSource() {
        return this._dataSource;
      }
    }, {
      key: "getOpenRowID",
      value: function getOpenRowID() {
        return this._openRowID;
      }
    }, {
      key: "getFirstRowID",
      value: function getFirstRowID() {
        if (this.rowIdentities) {
          return this.rowIdentities[0] && this.rowIdentities[0][0];
        }

        return Object.keys(this._dataBlob)[0];
      }
    }, {
      key: "getLastRowID",
      value: function getLastRowID() {
        if (this.rowIdentities && this.rowIdentities.length) {
          var lastSection = this.rowIdentities[this.rowIdentities.length - 1];

          if (lastSection && lastSection.length) {
            return lastSection[lastSection.length - 1];
          }
        }

        return Object.keys(this._dataBlob)[this._dataBlob.length - 1];
      }
    }, {
      key: "setOpenRowID",
      value: function setOpenRowID(rowID) {
        this._previousOpenRowID = this._openRowID;
        this._openRowID = rowID;
        this._dataSource = this._dataSource.cloneWithRowsAndSections(this._dataBlob, this.sectionIdentities, this.rowIdentities);
        return this;
      }
    }]);

    return SwipeableListViewDataSource;
  }();

  module.exports = SwipeableListViewDataSource;
},454,[400],"SwipeableListViewDataSource");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Components\\TabBarIOS\\TabBarIOS.android.js";

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    DummyTabBarIOS: {
      displayName: "DummyTabBarIOS"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Components/TabBarIOS/TabBarIOS.android.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var React = _require(_dependencyMap[2], 'React');

  var StyleSheet = _require(_dependencyMap[3], 'StyleSheet');

  var TabBarItemIOS = _require(_dependencyMap[4], 'TabBarItemIOS');

  var View = _require(_dependencyMap[5], 'View');

  var DummyTabBarIOS = _wrapComponent("DummyTabBarIOS")((_temp = _class = function (_React$Component) {
    _inherits(DummyTabBarIOS, _React$Component);

    function DummyTabBarIOS() {
      _classCallCheck(this, DummyTabBarIOS);

      return _possibleConstructorReturn(this, (DummyTabBarIOS.__proto__ || Object.getPrototypeOf(DummyTabBarIOS)).apply(this, arguments));
    }

    _createClass(DummyTabBarIOS, [{
      key: "render",
      value: function render() {
        return React.createElement(
          View,
          {
            style: [this.props.style, styles.tabGroup],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 25
            }
          },
          this.props.children
        );
      }
    }]);

    return DummyTabBarIOS;
  }(React.Component), _class.Item = TabBarItemIOS, _temp));

  var styles = StyleSheet.create({
    tabGroup: {
      flex: 1
    }
  });
  module.exports = DummyTabBarIOS;
},455,[113,179,133,171,456,173],"TabBarIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Components\\TabBarIOS\\TabBarItemIOS.android.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    DummyTab: {
      displayName: "DummyTab"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Components/TabBarIOS/TabBarItemIOS.android.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var React = _require(_dependencyMap[2], 'React');

  var View = _require(_dependencyMap[3], 'View');

  var StyleSheet = _require(_dependencyMap[4], 'StyleSheet');

  var DummyTab = _wrapComponent("DummyTab")(function (_React$Component) {
    _inherits(DummyTab, _React$Component);

    function DummyTab() {
      _classCallCheck(this, DummyTab);

      return _possibleConstructorReturn(this, (DummyTab.__proto__ || Object.getPrototypeOf(DummyTab)).apply(this, arguments));
    }

    _createClass(DummyTab, [{
      key: "render",
      value: function render() {
        if (!this.props.selected) {
          return React.createElement(View, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 21
            }
          });
        }

        return React.createElement(
          View,
          {
            style: [this.props.style, styles.tab],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 24
            }
          },
          this.props.children
        );
      }
    }]);

    return DummyTab;
  }(React.Component));

  var styles = StyleSheet.create({
    tab: {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      borderColor: 'red',
      borderWidth: 1
    }
  });
  module.exports = DummyTab;
},456,[113,179,133,173,171],"TabBarItemIOS");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Components\\TextInput\\TextInput.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var ColorPropType = _require2(_dependencyMap[0], 'ColorPropType');

  var DocumentSelectionState = _require2(_dependencyMap[1], 'DocumentSelectionState');

  var EventEmitter = _require2(_dependencyMap[2], 'EventEmitter');

  var NativeMethodsMixin = _require2(_dependencyMap[3], 'NativeMethodsMixin');

  var Platform = _require2(_dependencyMap[4], 'Platform');

  var React = _require2(_dependencyMap[5], 'React');

  var createReactClass = _require2(_dependencyMap[6], 'create-react-class');

  var PropTypes = _require2(_dependencyMap[7], 'prop-types');

  var ReactNative = _require2(_dependencyMap[8], 'ReactNative');

  var StyleSheet = _require2(_dependencyMap[9], 'StyleSheet');

  var Text = _require2(_dependencyMap[10], 'Text');

  var TextInputState = _require2(_dependencyMap[11], 'TextInputState');

  var TimerMixin = _require2(_dependencyMap[12], 'react-timer-mixin');

  var TouchableWithoutFeedback = _require2(_dependencyMap[13], 'TouchableWithoutFeedback');

  var UIManager = _require2(_dependencyMap[14], 'UIManager');

  var ViewPropTypes = _require2(_dependencyMap[15], 'ViewPropTypes');

  var _require = _require2(_dependencyMap[16], 'ViewContext'),
      ViewContextTypes = _require.ViewContextTypes;

  var emptyFunction = _require2(_dependencyMap[17], 'fbjs/lib/emptyFunction');

  var invariant = _require2(_dependencyMap[18], 'fbjs/lib/invariant');

  var requireNativeComponent = _require2(_dependencyMap[19], 'requireNativeComponent');

  var warning = _require2(_dependencyMap[20], 'fbjs/lib/warning');

  var onlyMultiline = {
    onTextInput: true,
    children: true
  };

  if (Platform.OS === 'android') {
    var AndroidTextInput = requireNativeComponent('AndroidTextInput', null);
  } else if (Platform.OS === 'ios') {
    var RCTMultilineTextInputView = requireNativeComponent('RCTMultilineTextInputView', null);
    var RCTSinglelineTextInputView = requireNativeComponent('RCTSinglelineTextInputView', null);
  }

  var DataDetectorTypes = ['phoneNumber', 'link', 'address', 'calendarEvent', 'none', 'all'];
  var TextInput = createReactClass({
    displayName: 'TextInput',
    statics: {
      State: TextInputState
    },
    propTypes: _extends({}, ViewPropTypes, {
      autoCapitalize: PropTypes.oneOf(['none', 'sentences', 'words', 'characters']),
      autoCorrect: PropTypes.bool,
      spellCheck: PropTypes.bool,
      autoFocus: PropTypes.bool,
      allowFontScaling: PropTypes.bool,
      editable: PropTypes.bool,
      keyboardType: PropTypes.oneOf(['default', 'email-address', 'numeric', 'phone-pad', 'ascii-capable', 'numbers-and-punctuation', 'url', 'number-pad', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search', 'visible-password']),
      keyboardAppearance: PropTypes.oneOf(['default', 'light', 'dark']),
      returnKeyType: PropTypes.oneOf(['done', 'go', 'next', 'search', 'send', 'none', 'previous', 'default', 'emergency-call', 'google', 'join', 'route', 'yahoo']),
      returnKeyLabel: PropTypes.string,
      maxLength: PropTypes.number,
      numberOfLines: PropTypes.number,
      disableFullscreenUI: PropTypes.bool,
      enablesReturnKeyAutomatically: PropTypes.bool,
      multiline: PropTypes.bool,
      textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),
      onBlur: PropTypes.func,
      onFocus: PropTypes.func,
      onChange: PropTypes.func,
      onChangeText: PropTypes.func,
      onContentSizeChange: PropTypes.func,
      onEndEditing: PropTypes.func,
      onSelectionChange: PropTypes.func,
      onSubmitEditing: PropTypes.func,
      onKeyPress: PropTypes.func,
      onLayout: PropTypes.func,
      onScroll: PropTypes.func,
      placeholder: PropTypes.string,
      placeholderTextColor: ColorPropType,
      secureTextEntry: PropTypes.bool,
      selectionColor: ColorPropType,
      selectionState: PropTypes.instanceOf(DocumentSelectionState),
      selection: PropTypes.shape({
        start: PropTypes.number.isRequired,
        end: PropTypes.number
      }),
      value: PropTypes.string,
      defaultValue: PropTypes.string,
      clearButtonMode: PropTypes.oneOf(['never', 'while-editing', 'unless-editing', 'always']),
      clearTextOnFocus: PropTypes.bool,
      selectTextOnFocus: PropTypes.bool,
      blurOnSubmit: PropTypes.bool,
      style: Text.propTypes.style,
      underlineColorAndroid: ColorPropType,
      inlineImageLeft: PropTypes.string,
      inlineImagePadding: PropTypes.number,
      dataDetectorTypes: PropTypes.oneOfType([PropTypes.oneOf(DataDetectorTypes), PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes))]),
      caretHidden: PropTypes.bool
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        allowFontScaling: true
      };
    },
    mixins: [NativeMethodsMixin, TimerMixin],
    isFocused: function isFocused() {
      return TextInputState.currentlyFocusedField() === ReactNative.findNodeHandle(this._inputRef);
    },
    _inputRef: undefined,
    _focusSubscription: undefined,
    _lastNativeText: undefined,
    _lastNativeSelection: undefined,
    componentDidMount: function componentDidMount() {
      var _this = this;

      this._lastNativeText = this.props.value;

      if (!this.context.focusEmitter) {
        if (this.props.autoFocus) {
          this.requestAnimationFrame(this.focus);
        }

        return;
      }

      this._focusSubscription = this.context.focusEmitter.addListener('focus', function (el) {
        if (_this === el) {
          _this.requestAnimationFrame(_this.focus);
        } else if (_this.isFocused()) {
          _this.blur();
        }
      });

      if (this.props.autoFocus) {
        this.context.onFocusRequested(this);
      }
    },
    componentWillUnmount: function componentWillUnmount() {
      this._focusSubscription && this._focusSubscription.remove();

      if (this.isFocused()) {
        this.blur();
      }
    },
    getChildContext: function getChildContext() {
      return {
        isInAParentText: true
      };
    },
    childContextTypes: ViewContextTypes,
    contextTypes: _extends({}, ViewContextTypes, {
      onFocusRequested: PropTypes.func,
      focusEmitter: PropTypes.instanceOf(EventEmitter)
    }),
    clear: function clear() {
      this.setNativeProps({
        text: ''
      });
    },
    render: function render() {
      if (Platform.OS === 'ios') {
        return UIManager.RCTVirtualText ? this._renderIOS() : this._renderIOSLegacy();
      } else if (Platform.OS === 'android') {
        return this._renderAndroid();
      }
    },
    _getText: function _getText() {
      return typeof this.props.value === 'string' ? this.props.value : typeof this.props.defaultValue === 'string' ? this.props.defaultValue : '';
    },
    _setNativeRef: function _setNativeRef(ref) {
      this._inputRef = ref;
    },
    _renderIOSLegacy: function _renderIOSLegacy() {
      var textContainer;

      var props = _extends({}, this.props);

      props.style = [this.props.style];

      if (props.selection && props.selection.end == null) {
        props.selection = {
          start: props.selection.start,
          end: props.selection.start
        };
      }

      if (!props.multiline) {
        if (__DEV__) {
          for (var propKey in onlyMultiline) {
            if (props[propKey]) {
              var error = new Error('TextInput prop `' + propKey + '` is only supported with multiline.');
              warning(false, '%s', error.stack);
            }
          }
        }

        textContainer = React.createElement(RCTSinglelineTextInputView, _extends({
          ref: this._setNativeRef
        }, props, {
          onFocus: this._onFocus,
          onBlur: this._onBlur,
          onChange: this._onChange,
          onSelectionChange: this._onSelectionChange,
          onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
          text: this._getText(),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 725
          }
        }));
      } else {
        var children = props.children;
        var childCount = 0;
        React.Children.forEach(children, function () {
          return ++childCount;
        });
        invariant(!(props.value && childCount), 'Cannot specify both value and children.');

        if (childCount >= 1) {
          children = React.createElement(
            Text,
            {
              style: props.style,
              allowFontScaling: props.allowFontScaling,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 746
              }
            },
            children
          );
        }

        if (props.inputView) {
          children = [children, props.inputView];
        }

        props.style.unshift(styles.multilineInput);
        textContainer = React.createElement(RCTMultilineTextInputView, _extends({
          ref: this._setNativeRef
        }, props, {
          children: children,
          onFocus: this._onFocus,
          onBlur: this._onBlur,
          onChange: this._onChange,
          onContentSizeChange: this.props.onContentSizeChange,
          onSelectionChange: this._onSelectionChange,
          onTextInput: this._onTextInput,
          onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
          text: this._getText(),
          dataDetectorTypes: this.props.dataDetectorTypes,
          onScroll: this._onScroll,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 756
          }
        }));
      }

      return React.createElement(
        TouchableWithoutFeedback,
        {
          onLayout: props.onLayout,
          onPress: this._onPress,
          rejectResponderTermination: true,
          accessible: props.accessible,
          accessibilityLabel: props.accessibilityLabel,
          accessibilityTraits: props.accessibilityTraits,
          nativeID: this.props.nativeID,
          testID: props.testID,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 775
          }
        },
        textContainer
      );
    },
    _renderIOS: function _renderIOS() {
      var props = _extends({}, this.props);

      props.style = [this.props.style];

      if (props.selection && props.selection.end == null) {
        props.selection = {
          start: props.selection.start,
          end: props.selection.start
        };
      }

      var RCTTextInputView = props.multiline ? RCTMultilineTextInputView : RCTSinglelineTextInputView;

      if (props.multiline) {
        props.style.unshift(styles.multilineInput);
      }

      var textContainer = React.createElement(RCTTextInputView, _extends({
        ref: this._setNativeRef
      }, props, {
        onFocus: this._onFocus,
        onBlur: this._onBlur,
        onChange: this._onChange,
        onContentSizeChange: this.props.onContentSizeChange,
        onSelectionChange: this._onSelectionChange,
        onTextInput: this._onTextInput,
        onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
        text: this._getText(),
        dataDetectorTypes: this.props.dataDetectorTypes,
        onScroll: this._onScroll,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 809
        }
      }));
      return React.createElement(
        TouchableWithoutFeedback,
        {
          onLayout: props.onLayout,
          onPress: this._onPress,
          rejectResponderTermination: true,
          accessible: props.accessible,
          accessibilityLabel: props.accessibilityLabel,
          accessibilityTraits: props.accessibilityTraits,
          nativeID: this.props.nativeID,
          testID: props.testID,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 826
          }
        },
        textContainer
      );
    },
    _renderAndroid: function _renderAndroid() {
      var props = _extends({}, this.props);

      props.style = [this.props.style];
      props.autoCapitalize = UIManager.AndroidTextInput.Constants.AutoCapitalizationType[props.autoCapitalize || 'sentences'];
      var children = this.props.children;
      var childCount = 0;
      React.Children.forEach(children, function () {
        return ++childCount;
      });
      invariant(!(this.props.value && childCount), 'Cannot specify both value and children.');

      if (childCount > 1) {
        children = React.createElement(
          Text,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 858
            }
          },
          children
        );
      }

      if (props.selection && props.selection.end == null) {
        props.selection = {
          start: props.selection.start,
          end: props.selection.start
        };
      }

      var textContainer = React.createElement(AndroidTextInput, _extends({
        ref: this._setNativeRef
      }, props, {
        mostRecentEventCount: 0,
        onFocus: this._onFocus,
        onBlur: this._onBlur,
        onChange: this._onChange,
        onSelectionChange: this._onSelectionChange,
        onTextInput: this._onTextInput,
        text: this._getText(),
        children: children,
        disableFullscreenUI: this.props.disableFullscreenUI,
        textBreakStrategy: this.props.textBreakStrategy,
        onScroll: this._onScroll,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 869
        }
      }));
      return React.createElement(
        TouchableWithoutFeedback,
        {
          onLayout: this._onLayout,
          onPress: this._onPress,
          accessible: this.props.accessible,
          accessibilityLabel: this.props.accessibilityLabel,
          accessibilityComponentType: this.props.accessibilityComponentType,
          nativeID: this.props.nativeID,
          testID: this.props.testID,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 887
          }
        },
        textContainer
      );
    },
    _onFocus: function _onFocus(event) {
      if (this.props.onFocus) {
        this.props.onFocus(event);
      }

      if (this.props.selectionState) {
        this.props.selectionState.focus();
      }
    },
    _onPress: function _onPress(event) {
      if (this.props.editable || this.props.editable === undefined) {
        this.focus();
      }
    },
    _onChange: function _onChange(event) {
      if (this._inputRef) {
        this._inputRef.setNativeProps({
          mostRecentEventCount: event.nativeEvent.eventCount
        });
      }

      var text = event.nativeEvent.text;
      this.props.onChange && this.props.onChange(event);
      this.props.onChangeText && this.props.onChangeText(text);

      if (!this._inputRef) {
        return;
      }

      this._lastNativeText = text;
      this.forceUpdate();
    },
    _onSelectionChange: function _onSelectionChange(event) {
      this.props.onSelectionChange && this.props.onSelectionChange(event);

      if (!this._inputRef) {
        return;
      }

      this._lastNativeSelection = event.nativeEvent.selection;

      if (this.props.selection || this.props.selectionState) {
        this.forceUpdate();
      }
    },
    componentDidUpdate: function componentDidUpdate() {
      var nativeProps = {};

      if (this._lastNativeText !== this.props.value && typeof this.props.value === 'string') {
        nativeProps.text = this.props.value;
      }

      var selection = this.props.selection;

      if (this._lastNativeSelection && selection && (this._lastNativeSelection.start !== selection.start || this._lastNativeSelection.end !== selection.end)) {
        nativeProps.selection = this.props.selection;
      }

      if (Object.keys(nativeProps).length > 0 && this._inputRef) {
        this._inputRef.setNativeProps(nativeProps);
      }

      if (this.props.selectionState && selection) {
        this.props.selectionState.update(selection.start, selection.end);
      }
    },
    _onBlur: function _onBlur(event) {
      this.blur();

      if (this.props.onBlur) {
        this.props.onBlur(event);
      }

      if (this.props.selectionState) {
        this.props.selectionState.blur();
      }
    },
    _onTextInput: function _onTextInput(event) {
      this.props.onTextInput && this.props.onTextInput(event);
    },
    _onScroll: function _onScroll(event) {
      this.props.onScroll && this.props.onScroll(event);
    }
  });
  var styles = StyleSheet.create({
    multilineInput: {
      paddingTop: 5
    }
  });
  module.exports = TextInput;
},457,[126,458,67,128,52,133,176,130,21,171,339,111,349,348,109,134,175,57,13,148,56],"TextInput");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var mixInEventEmitter = _require(_dependencyMap[0], 'mixInEventEmitter');

  var DocumentSelectionState = function () {
    function DocumentSelectionState(anchor, focus) {
      _classCallCheck(this, DocumentSelectionState);

      this._anchorOffset = anchor;
      this._focusOffset = focus;
      this._hasFocus = false;
    }

    _createClass(DocumentSelectionState, [{
      key: "update",
      value: function update(anchor, focus) {
        if (this._anchorOffset !== anchor || this._focusOffset !== focus) {
          this._anchorOffset = anchor;
          this._focusOffset = focus;
          this.emit('update');
        }
      }
    }, {
      key: "constrainLength",
      value: function constrainLength(maxLength) {
        this.update(Math.min(this._anchorOffset, maxLength), Math.min(this._focusOffset, maxLength));
      }
    }, {
      key: "focus",
      value: function focus() {
        if (!this._hasFocus) {
          this._hasFocus = true;
          this.emit('focus');
        }
      }
    }, {
      key: "blur",
      value: function blur() {
        if (this._hasFocus) {
          this._hasFocus = false;
          this.emit('blur');
        }
      }
    }, {
      key: "hasFocus",
      value: function hasFocus() {
        return this._hasFocus;
      }
    }, {
      key: "isCollapsed",
      value: function isCollapsed() {
        return this._anchorOffset === this._focusOffset;
      }
    }, {
      key: "isBackward",
      value: function isBackward() {
        return this._anchorOffset > this._focusOffset;
      }
    }, {
      key: "getAnchorOffset",
      value: function getAnchorOffset() {
        return this._hasFocus ? this._anchorOffset : null;
      }
    }, {
      key: "getFocusOffset",
      value: function getFocusOffset() {
        return this._hasFocus ? this._focusOffset : null;
      }
    }, {
      key: "getStartOffset",
      value: function getStartOffset() {
        return this._hasFocus ? Math.min(this._anchorOffset, this._focusOffset) : null;
      }
    }, {
      key: "getEndOffset",
      value: function getEndOffset() {
        return this._hasFocus ? Math.max(this._anchorOffset, this._focusOffset) : null;
      }
    }, {
      key: "overlaps",
      value: function overlaps(start, end) {
        return this.hasFocus() && this.getStartOffset() <= end && start <= this.getEndOffset();
      }
    }]);

    return DocumentSelectionState;
  }();

  mixInEventEmitter(DocumentSelectionState, {
    'blur': true,
    'focus': true,
    'update': true
  });
  module.exports = DocumentSelectionState;
},458,[459],"DocumentSelectionState");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var EventEmitter = _require(_dependencyMap[0], 'EventEmitter');

  var EventEmitterWithHolding = _require(_dependencyMap[1], 'EventEmitterWithHolding');

  var EventHolder = _require(_dependencyMap[2], 'EventHolder');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var keyOf = _require(_dependencyMap[4], 'fbjs/lib/keyOf');

  var TYPES_KEY = keyOf({
    __types: true
  });

  function mixInEventEmitter(cls, types) {
    invariant(types, 'Must supply set of valid event types');
    var target = cls.prototype || cls;
    invariant(!target.__eventEmitter, 'An active emitter is already mixed in');
    var ctor = cls.constructor;

    if (ctor) {
      invariant(ctor === Object || ctor === Function, 'Mix EventEmitter into a class, not an instance');
    }

    if (target.hasOwnProperty(TYPES_KEY)) {
      _extends(target.__types, types);
    } else if (target.__types) {
      target.__types = _extends({}, target.__types, types);
    } else {
      target.__types = types;
    }

    _extends(target, EventEmitterMixin);
  }

  var EventEmitterMixin = {
    emit: function emit(eventType, a, b, c, d, e, _) {
      return this.__getEventEmitter().emit(eventType, a, b, c, d, e, _);
    },
    emitAndHold: function emitAndHold(eventType, a, b, c, d, e, _) {
      return this.__getEventEmitter().emitAndHold(eventType, a, b, c, d, e, _);
    },
    addListener: function addListener(eventType, listener, context) {
      return this.__getEventEmitter().addListener(eventType, listener, context);
    },
    once: function once(eventType, listener, context) {
      return this.__getEventEmitter().once(eventType, listener, context);
    },
    addRetroactiveListener: function addRetroactiveListener(eventType, listener, context) {
      return this.__getEventEmitter().addRetroactiveListener(eventType, listener, context);
    },
    addListenerMap: function addListenerMap(listenerMap, context) {
      return this.__getEventEmitter().addListenerMap(listenerMap, context);
    },
    addRetroactiveListenerMap: function addRetroactiveListenerMap(listenerMap, context) {
      return this.__getEventEmitter().addListenerMap(listenerMap, context);
    },
    removeAllListeners: function removeAllListeners() {
      this.__getEventEmitter().removeAllListeners();
    },
    removeCurrentListener: function removeCurrentListener() {
      this.__getEventEmitter().removeCurrentListener();
    },
    releaseHeldEventType: function releaseHeldEventType(eventType) {
      this.__getEventEmitter().releaseHeldEventType(eventType);
    },
    __getEventEmitter: function __getEventEmitter() {
      if (!this.__eventEmitter) {
        var emitter = new EventEmitter();

        if (__DEV__) {
          var EventValidator = _require(_dependencyMap[5], 'EventValidator');

          emitter = EventValidator.addValidation(emitter, this.__types);
        }

        var holder = new EventHolder();
        this.__eventEmitter = new EventEmitterWithHolding(emitter, holder);
      }

      return this.__eventEmitter;
    }
  };
  module.exports = mixInEventEmitter;
},459,[67,460,461,13,462,463],"mixInEventEmitter");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var EventEmitterWithHolding = function () {
    function EventEmitterWithHolding(emitter, holder) {
      _classCallCheck(this, EventEmitterWithHolding);

      this._emitter = emitter;
      this._eventHolder = holder;
      this._currentEventToken = null;
      this._emittingHeldEvents = false;
    }

    _createClass(EventEmitterWithHolding, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        return this._emitter.addListener(eventType, listener, context);
      }
    }, {
      key: "once",
      value: function once(eventType, listener, context) {
        return this._emitter.once(eventType, listener, context);
      }
    }, {
      key: "addRetroactiveListener",
      value: function addRetroactiveListener(eventType, listener, context) {
        var subscription = this._emitter.addListener(eventType, listener, context);

        this._emittingHeldEvents = true;

        this._eventHolder.emitToListener(eventType, listener, context);

        this._emittingHeldEvents = false;
        return subscription;
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        this._emitter.removeAllListeners(eventType);
      }
    }, {
      key: "removeCurrentListener",
      value: function removeCurrentListener() {
        this._emitter.removeCurrentListener();
      }
    }, {
      key: "listeners",
      value: function listeners(eventType) {
        return this._emitter.listeners(eventType);
      }
    }, {
      key: "emit",
      value: function emit(eventType) {
        var _emitter;

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        (_emitter = this._emitter).emit.apply(_emitter, [eventType].concat(_toConsumableArray(args)));
      }
    }, {
      key: "emitAndHold",
      value: function emitAndHold(eventType) {
        var _eventHolder, _emitter2;

        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }

        this._currentEventToken = (_eventHolder = this._eventHolder).holdEvent.apply(_eventHolder, [eventType].concat(_toConsumableArray(args)));

        (_emitter2 = this._emitter).emit.apply(_emitter2, [eventType].concat(_toConsumableArray(args)));

        this._currentEventToken = null;
      }
    }, {
      key: "releaseCurrentEvent",
      value: function releaseCurrentEvent() {
        if (this._currentEventToken) {
          this._eventHolder.releaseEvent(this._currentEventToken);
        } else if (this._emittingHeldEvents) {
          this._eventHolder.releaseCurrentEvent();
        }
      }
    }, {
      key: "releaseHeldEventType",
      value: function releaseHeldEventType(eventType) {
        this._eventHolder.releaseEventType(eventType);
      }
    }]);

    return EventEmitterWithHolding;
  }();

  module.exports = EventEmitterWithHolding;
},460,[],"EventEmitterWithHolding");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var EventHolder = function () {
    function EventHolder() {
      _classCallCheck(this, EventHolder);

      this._heldEvents = {};
      this._currentEventKey = null;
    }

    _createClass(EventHolder, [{
      key: "holdEvent",
      value: function holdEvent(eventType) {
        this._heldEvents[eventType] = this._heldEvents[eventType] || [];
        var eventsOfType = this._heldEvents[eventType];
        var key = {
          eventType: eventType,
          index: eventsOfType.length
        };

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        eventsOfType.push(args);
        return key;
      }
    }, {
      key: "emitToListener",
      value: function emitToListener(eventType, listener, context) {
        var _this = this;

        var eventsOfType = this._heldEvents[eventType];

        if (!eventsOfType) {
          return;
        }

        var origEventKey = this._currentEventKey;
        eventsOfType.forEach(function (eventHeld, index) {
          if (!eventHeld) {
            return;
          }

          _this._currentEventKey = {
            eventType: eventType,
            index: index
          };
          listener.apply(context, eventHeld);
        });
        this._currentEventKey = origEventKey;
      }
    }, {
      key: "releaseCurrentEvent",
      value: function releaseCurrentEvent() {
        invariant(this._currentEventKey !== null, 'Not in an emitting cycle; there is no current event');
        this._currentEventKey && this.releaseEvent(this._currentEventKey);
      }
    }, {
      key: "releaseEvent",
      value: function releaseEvent(token) {
        delete this._heldEvents[token.eventType][token.index];
      }
    }, {
      key: "releaseEventType",
      value: function releaseEventType(type) {
        this._heldEvents[type] = [];
      }
    }]);

    return EventHolder;
  }();

  module.exports = EventHolder;
},461,[13],"EventHolder");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var keyOf = function keyOf(oneKeyObj) {
    var key;

    for (key in oneKeyObj) {
      if (!oneKeyObj.hasOwnProperty(key)) {
        continue;
      }

      return key;
    }

    return null;
  };

  module.exports = keyOf;
},462,[],"node_modules\\fbjs\\lib\\keyOf.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var EventValidator = {
    addValidation: function addValidation(emitter, types) {
      var eventTypes = Object.keys(types);
      var emitterWithValidation = Object.create(emitter);

      _extends(emitterWithValidation, {
        emit: function emit(type, a, b, c, d, e, _) {
          assertAllowsEventType(type, eventTypes);
          return emitter.emit.call(this, type, a, b, c, d, e, _);
        }
      });

      return emitterWithValidation;
    }
  };

  function assertAllowsEventType(type, allowedTypes) {
    if (allowedTypes.indexOf(type) === -1) {
      throw new TypeError(errorMessageFor(type, allowedTypes));
    }
  }

  function errorMessageFor(type, allowedTypes) {
    var message = 'Unknown event type "' + type + '". ';

    if (__DEV__) {
      message += recommendationFor(type, allowedTypes);
    }

    message += 'Known event types: ' + allowedTypes.join(', ') + '.';
    return message;
  }

  if (__DEV__) {
    var recommendationFor = function recommendationFor(type, allowedTypes) {
      var closestTypeRecommendation = closestTypeFor(type, allowedTypes);

      if (isCloseEnough(closestTypeRecommendation, type)) {
        return 'Did you mean "' + closestTypeRecommendation.type + '"? ';
      } else {
        return '';
      }
    };

    var closestTypeFor = function closestTypeFor(type, allowedTypes) {
      var typeRecommendations = allowedTypes.map(typeRecommendationFor.bind(this, type));
      return typeRecommendations.sort(recommendationSort)[0];
    };

    var typeRecommendationFor = function typeRecommendationFor(type, recommendedType) {
      return {
        type: recommendedType,
        distance: damerauLevenshteinDistance(type, recommendedType)
      };
    };

    var recommendationSort = function recommendationSort(recommendationA, recommendationB) {
      if (recommendationA.distance < recommendationB.distance) {
        return -1;
      } else if (recommendationA.distance > recommendationB.distance) {
        return 1;
      } else {
        return 0;
      }
    };

    var isCloseEnough = function isCloseEnough(closestType, actualType) {
      return closestType.distance / actualType.length < 0.334;
    };

    var damerauLevenshteinDistance = function damerauLevenshteinDistance(a, b) {
      var i = void 0,
          j = void 0;
      var d = [];

      for (i = 0; i <= a.length; i++) {
        d[i] = [i];
      }

      for (j = 1; j <= b.length; j++) {
        d[0][j] = j;
      }

      for (i = 1; i <= a.length; i++) {
        for (j = 1; j <= b.length; j++) {
          var cost = a.charAt(i - 1) === b.charAt(j - 1) ? 0 : 1;
          d[i][j] = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);

          if (i > 1 && j > 1 && a.charAt(i - 1) === b.charAt(j - 2) && a.charAt(i - 2) === b.charAt(j - 1)) {
            d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);
          }
        }
      }

      return d[a.length][b.length];
    };
  }

  module.exports = EventValidator;
},463,[],"EventValidator");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Components\\ToolbarAndroid\\ToolbarAndroid.android.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var Image = _require(_dependencyMap[0], 'Image');

  var NativeMethodsMixin = _require(_dependencyMap[1], 'NativeMethodsMixin');

  var React = _require(_dependencyMap[2], 'React');

  var PropTypes = _require(_dependencyMap[3], 'prop-types');

  var ReactNativeViewAttributes = _require(_dependencyMap[4], 'ReactNativeViewAttributes');

  var UIManager = _require(_dependencyMap[5], 'UIManager');

  var ViewPropTypes = _require(_dependencyMap[6], 'ViewPropTypes');

  var ColorPropType = _require(_dependencyMap[7], 'ColorPropType');

  var createReactClass = _require(_dependencyMap[8], 'create-react-class');

  var requireNativeComponent = _require(_dependencyMap[9], 'requireNativeComponent');

  var resolveAssetSource = _require(_dependencyMap[10], 'resolveAssetSource');

  var optionalImageSource = PropTypes.oneOfType([Image.propTypes.source, PropTypes.oneOf([])]);
  var ToolbarAndroid = createReactClass({
    displayName: 'ToolbarAndroid',
    mixins: [NativeMethodsMixin],
    propTypes: _extends({}, ViewPropTypes, {
      actions: PropTypes.arrayOf(PropTypes.shape({
        title: PropTypes.string.isRequired,
        icon: optionalImageSource,
        show: PropTypes.oneOf(['always', 'ifRoom', 'never']),
        showWithText: PropTypes.bool
      })),
      logo: optionalImageSource,
      navIcon: optionalImageSource,
      onActionSelected: PropTypes.func,
      onIconClicked: PropTypes.func,
      overflowIcon: optionalImageSource,
      subtitle: PropTypes.string,
      subtitleColor: ColorPropType,
      title: PropTypes.string,
      titleColor: ColorPropType,
      contentInsetStart: PropTypes.number,
      contentInsetEnd: PropTypes.number,
      rtl: PropTypes.bool,
      testID: PropTypes.string
    }),
    render: function render() {
      var nativeProps = _extends({}, this.props);

      if (this.props.logo) {
        nativeProps.logo = resolveAssetSource(this.props.logo);
      }

      if (this.props.navIcon) {
        nativeProps.navIcon = resolveAssetSource(this.props.navIcon);
      }

      if (this.props.overflowIcon) {
        nativeProps.overflowIcon = resolveAssetSource(this.props.overflowIcon);
      }

      if (this.props.actions) {
        var nativeActions = [];

        for (var i = 0; i < this.props.actions.length; i++) {
          var action = _extends({}, this.props.actions[i]);

          if (action.icon) {
            action.icon = resolveAssetSource(action.icon);
          }

          if (action.show) {
            action.show = UIManager.ToolbarAndroid.Constants.ShowAsAction[action.show];
          }

          nativeActions.push(action);
        }

        nativeProps.nativeActions = nativeActions;
      }

      return React.createElement(NativeToolbar, _extends({
        onSelect: this._onSelect
      }, nativeProps, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 196
        }
      }));
    },
    _onSelect: function _onSelect(event) {
      var position = event.nativeEvent.position;

      if (position === -1) {
        this.props.onIconClicked && this.props.onIconClicked();
      } else {
        this.props.onActionSelected && this.props.onActionSelected(position);
      }
    }
  });
  var NativeToolbar = requireNativeComponent('ToolbarAndroid', ToolbarAndroid, {
    nativeOnly: {
      nativeActions: true
    }
  });
  module.exports = ToolbarAndroid;
},464,[380,128,133,130,174,109,134,126,176,148,163],"ToolbarAndroid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp2,
      _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Components\\ViewPager\\ViewPagerAndroid.android.js";

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    ViewPagerAndroid: {
      displayName: "ViewPagerAndroid"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Components/ViewPager/ViewPagerAndroid.android.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var React = _require(_dependencyMap[2], 'React');

  var PropTypes = _require(_dependencyMap[3], 'prop-types');

  var ReactNative = _require(_dependencyMap[4], 'ReactNative');

  var UIManager = _require(_dependencyMap[5], 'UIManager');

  var ViewPropTypes = _require(_dependencyMap[6], 'ViewPropTypes');

  var dismissKeyboard = _require(_dependencyMap[7], 'dismissKeyboard');

  var requireNativeComponent = _require(_dependencyMap[8], 'requireNativeComponent');

  var VIEWPAGER_REF = 'viewPager';

  var ViewPagerAndroid = _wrapComponent("ViewPagerAndroid")((_temp2 = _class = function (_React$Component) {
    _inherits(ViewPagerAndroid, _React$Component);

    function ViewPagerAndroid() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, ViewPagerAndroid);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ViewPagerAndroid.__proto__ || Object.getPrototypeOf(ViewPagerAndroid)).call.apply(_ref, [this].concat(args))), _this), _this.getInnerViewNode = function () {
        return _this.refs[VIEWPAGER_REF].getInnerViewNode();
      }, _this._childrenWithOverridenStyle = function () {
        return React.Children.map(_this.props.children, function (child) {
          if (!child) {
            return null;
          }

          var newProps = _extends({}, child.props, {
            style: [child.props.style, {
              position: 'absolute',
              left: 0,
              top: 0,
              right: 0,
              bottom: 0,
              width: undefined,
              height: undefined
            }],
            collapsable: false
          });

          if (child.type && child.type.displayName && child.type.displayName !== 'RCTView' && child.type.displayName !== 'View') {
            console.warn('Each ViewPager child must be a <View>. Was ' + child.type.displayName);
          }

          return React.createElement(child.type, newProps);
        });
      }, _this._onPageScroll = function (e) {
        if (_this.props.onPageScroll) {
          _this.props.onPageScroll(e);
        }

        if (_this.props.keyboardDismissMode === 'on-drag') {
          dismissKeyboard();
        }
      }, _this._onPageScrollStateChanged = function (e) {
        if (_this.props.onPageScrollStateChanged) {
          _this.props.onPageScrollStateChanged(e.nativeEvent.pageScrollState);
        }
      }, _this._onPageSelected = function (e) {
        if (_this.props.onPageSelected) {
          _this.props.onPageSelected(e);
        }
      }, _this.setPage = function (selectedPage) {
        UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(_this), UIManager.AndroidViewPager.Commands.setPage, [selectedPage]);
      }, _this.setPageWithoutAnimation = function (selectedPage) {
        UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(_this), UIManager.AndroidViewPager.Commands.setPageWithoutAnimation, [selectedPage]);
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(ViewPagerAndroid, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.props.initialPage != null) {
          this.setPageWithoutAnimation(this.props.initialPage);
        }
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(NativeAndroidViewPager, _extends({}, this.props, {
          ref: VIEWPAGER_REF,
          style: this.props.style,
          onPageScroll: this._onPageScroll,
          onPageScrollStateChanged: this._onPageScrollStateChanged,
          onPageSelected: this._onPageSelected,
          children: this._childrenWithOverridenStyle(),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 238
          }
        }));
      }
    }]);

    return ViewPagerAndroid;
  }(React.Component), _class.propTypes = _extends({}, ViewPropTypes, {
    initialPage: PropTypes.number,
    onPageScroll: PropTypes.func,
    onPageScrollStateChanged: PropTypes.func,
    onPageSelected: PropTypes.func,
    pageMargin: PropTypes.number,
    keyboardDismissMode: PropTypes.oneOf(['none', 'on-drag']),
    scrollEnabled: PropTypes.bool,
    peekEnabled: PropTypes.bool
  }), _temp2));

  var NativeAndroidViewPager = requireNativeComponent('AndroidViewPager', ViewPagerAndroid);
  module.exports = ViewPagerAndroid;
},465,[113,179,133,130,21,109,134,387,148],"ViewPagerAndroid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\Components\\WebView\\WebView.android.js",
      _class,
      _temp2;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    WebView: {
      displayName: "WebView"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/node_modules/react-native/Libraries/Components/WebView/WebView.android.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var EdgeInsetsPropType = _require(_dependencyMap[2], 'EdgeInsetsPropType');

  var ActivityIndicator = _require(_dependencyMap[3], 'ActivityIndicator');

  var React = _require(_dependencyMap[4], 'React');

  var PropTypes = _require(_dependencyMap[5], 'prop-types');

  var ReactNative = _require(_dependencyMap[6], 'ReactNative');

  var StyleSheet = _require(_dependencyMap[7], 'StyleSheet');

  var UIManager = _require(_dependencyMap[8], 'UIManager');

  var View = _require(_dependencyMap[9], 'View');

  var ViewPropTypes = _require(_dependencyMap[10], 'ViewPropTypes');

  var deprecatedPropType = _require(_dependencyMap[11], 'deprecatedPropType');

  var keyMirror = _require(_dependencyMap[12], 'fbjs/lib/keyMirror');

  var requireNativeComponent = _require(_dependencyMap[13], 'requireNativeComponent');

  var resolveAssetSource = _require(_dependencyMap[14], 'resolveAssetSource');

  var RCT_WEBVIEW_REF = 'webview';
  var WebViewState = keyMirror({
    IDLE: null,
    LOADING: null,
    ERROR: null
  });

  var defaultRenderLoading = function defaultRenderLoading() {
    return React.createElement(
      View,
      {
        style: styles.loadingView,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 37
        }
      },
      React.createElement(ActivityIndicator, {
        style: styles.loadingProgressBar,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 38
        }
      })
    );
  };

  var WebView = _wrapComponent("WebView")((_temp2 = _class = function (_React$Component) {
    _inherits(WebView, _React$Component);

    function WebView() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, WebView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = WebView.__proto__ || Object.getPrototypeOf(WebView)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        viewState: WebViewState.IDLE,
        lastErrorEvent: null,
        startInLoadingState: true
      }, _this.goForward = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.goForward, null);
      }, _this.goBack = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.goBack, null);
      }, _this.reload = function () {
        _this.setState({
          viewState: WebViewState.LOADING
        });

        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.reload, null);
      }, _this.stopLoading = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.stopLoading, null);
      }, _this.postMessage = function (data) {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.postMessage, [String(data)]);
      }, _this.injectJavaScript = function (data) {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.injectJavaScript, [data]);
      }, _this.updateNavigationState = function (event) {
        if (_this.props.onNavigationStateChange) {
          _this.props.onNavigationStateChange(event.nativeEvent);
        }
      }, _this.getWebViewHandle = function () {
        return ReactNative.findNodeHandle(_this.refs[RCT_WEBVIEW_REF]);
      }, _this.onLoadingStart = function (event) {
        var onLoadStart = _this.props.onLoadStart;
        onLoadStart && onLoadStart(event);

        _this.updateNavigationState(event);
      }, _this.onLoadingError = function (event) {
        event.persist();
        var _this$props = _this.props,
            onError = _this$props.onError,
            onLoadEnd = _this$props.onLoadEnd;
        onError && onError(event);
        onLoadEnd && onLoadEnd(event);
        console.warn('Encountered an error loading page', event.nativeEvent);

        _this.setState({
          lastErrorEvent: event.nativeEvent,
          viewState: WebViewState.ERROR
        });
      }, _this.onLoadingFinish = function (event) {
        var _this$props2 = _this.props,
            onLoad = _this$props2.onLoad,
            onLoadEnd = _this$props2.onLoadEnd;
        onLoad && onLoad(event);
        onLoadEnd && onLoadEnd(event);

        _this.setState({
          viewState: WebViewState.IDLE
        });

        _this.updateNavigationState(event);
      }, _this.onMessage = function (event) {
        var onMessage = _this.props.onMessage;
        onMessage && onMessage(event);
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(WebView, [{
      key: "UNSAFE_componentWillMount",
      value: function UNSAFE_componentWillMount() {
        if (this.props.startInLoadingState) {
          this.setState({
            viewState: WebViewState.LOADING
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var otherView = null;

        if (this.state.viewState === WebViewState.LOADING) {
          otherView = (this.props.renderLoading || defaultRenderLoading)();
        } else if (this.state.viewState === WebViewState.ERROR) {
          var errorEvent = this.state.lastErrorEvent;
          otherView = this.props.renderError && this.props.renderError(errorEvent.domain, errorEvent.code, errorEvent.description);
        } else if (this.state.viewState !== WebViewState.IDLE) {
          console.error('RCTWebView invalid state encountered: ' + this.state.loading);
        }

        var webViewStyles = [styles.container, this.props.style];

        if (this.state.viewState === WebViewState.LOADING || this.state.viewState === WebViewState.ERROR) {
          webViewStyles.push(styles.hidden);
        }

        var source = this.props.source || {};

        if (this.props.html) {
          source.html = this.props.html;
        } else if (this.props.url) {
          source.uri = this.props.url;
        }

        if (source.method === 'POST' && source.headers) {
          console.warn('WebView: `source.headers` is not supported when using POST.');
        } else if (source.method === 'GET' && source.body) {
          console.warn('WebView: `source.body` is not supported when using GET.');
        }

        var nativeConfig = this.props.nativeConfig || {};
        var NativeWebView = nativeConfig.component || RCTWebView;
        var webView = React.createElement(NativeWebView, _extends({
          ref: RCT_WEBVIEW_REF,
          key: "webViewKey",
          style: webViewStyles,
          source: resolveAssetSource(source),
          scalesPageToFit: this.props.scalesPageToFit,
          injectedJavaScript: this.props.injectedJavaScript,
          userAgent: this.props.userAgent,
          javaScriptEnabled: this.props.javaScriptEnabled,
          thirdPartyCookiesEnabled: this.props.thirdPartyCookiesEnabled,
          domStorageEnabled: this.props.domStorageEnabled,
          messagingEnabled: typeof this.props.onMessage === 'function',
          onMessage: this.onMessage,
          contentInset: this.props.contentInset,
          automaticallyAdjustContentInsets: this.props.automaticallyAdjustContentInsets,
          onContentSizeChange: this.props.onContentSizeChange,
          onLoadingStart: this.onLoadingStart,
          onLoadingFinish: this.onLoadingFinish,
          onLoadingError: this.onLoadingError,
          testID: this.props.testID,
          mediaPlaybackRequiresUserAction: this.props.mediaPlaybackRequiresUserAction,
          allowUniversalAccessFromFileURLs: this.props.allowUniversalAccessFromFileURLs,
          mixedContentMode: this.props.mixedContentMode,
          saveFormDataDisabled: this.props.saveFormDataDisabled,
          urlPrefixesForDefaultIntent: this.props.urlPrefixesForDefaultIntent
        }, nativeConfig.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 296
          }
        }));
        return React.createElement(
          View,
          {
            style: styles.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 325
            }
          },
          webView,
          otherView
        );
      }
    }], [{
      key: "extraNativeComponentConfig",
      get: function get() {
        return {
          nativeOnly: {
            messagingEnabled: PropTypes.bool
          }
        };
      }
    }]);

    return WebView;
  }(React.Component), _class.propTypes = _extends({}, ViewPropTypes, {
    renderError: PropTypes.func,
    renderLoading: PropTypes.func,
    onLoad: PropTypes.func,
    onLoadEnd: PropTypes.func,
    onLoadStart: PropTypes.func,
    onError: PropTypes.func,
    automaticallyAdjustContentInsets: PropTypes.bool,
    contentInset: EdgeInsetsPropType,
    onNavigationStateChange: PropTypes.func,
    onMessage: PropTypes.func,
    onContentSizeChange: PropTypes.func,
    startInLoadingState: PropTypes.bool,
    style: ViewPropTypes.style,
    html: deprecatedPropType(PropTypes.string, 'Use the `source` prop instead.'),
    url: deprecatedPropType(PropTypes.string, 'Use the `source` prop instead.'),
    source: PropTypes.oneOfType([PropTypes.shape({
      uri: PropTypes.string,
      method: PropTypes.oneOf(['GET', 'POST']),
      headers: PropTypes.object,
      body: PropTypes.string
    }), PropTypes.shape({
      html: PropTypes.string,
      baseUrl: PropTypes.string
    }), PropTypes.number]),
    javaScriptEnabled: PropTypes.bool,
    thirdPartyCookiesEnabled: PropTypes.bool,
    domStorageEnabled: PropTypes.bool,
    injectedJavaScript: PropTypes.string,
    scalesPageToFit: PropTypes.bool,
    userAgent: PropTypes.string,
    testID: PropTypes.string,
    mediaPlaybackRequiresUserAction: PropTypes.bool,
    allowUniversalAccessFromFileURLs: PropTypes.bool,
    injectJavaScript: PropTypes.func,
    mixedContentMode: PropTypes.oneOf(['never', 'always', 'compatibility']),
    saveFormDataDisabled: PropTypes.bool,
    nativeConfig: PropTypes.shape({
      component: PropTypes.any,
      props: PropTypes.object,
      viewManager: PropTypes.object
    }),
    urlPrefixesForDefaultIntent: PropTypes.arrayOf(PropTypes.string)
  }), _class.defaultProps = {
    javaScriptEnabled: true,
    thirdPartyCookiesEnabled: true,
    scalesPageToFit: true,
    saveFormDataDisabled: false
  }, _temp2));

  var RCTWebView = requireNativeComponent('RCTWebView', WebView, WebView.extraNativeComponentConfig);
  var styles = StyleSheet.create({
    container: {
      flex: 1
    },
    hidden: {
      height: 0,
      flex: 0
    },
    loadingView: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center'
    },
    loadingProgressBar: {
      height: 20
    }
  });
  module.exports = WebView;
},466,[113,179,135,125,133,130,21,171,109,173,134,146,153,148,163],"WebView");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var RCTActionSheetManager = _require(_dependencyMap[0], 'NativeModules').ActionSheetManager;

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  var processColor = _require(_dependencyMap[2], 'processColor');

  var ActionSheetIOS = {
    showActionSheetWithOptions: function showActionSheetWithOptions(options, callback) {
      invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
      invariant(typeof callback === 'function', 'Must provide a valid callback');
      RCTActionSheetManager.showActionSheetWithOptions(_extends({}, options, {
        tintColor: processColor(options.tintColor)
      }), callback);
    },
    showShareActionSheetWithOptions: function showShareActionSheetWithOptions(options, failureCallback, successCallback) {
      invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
      invariant(typeof failureCallback === 'function', 'Must provide a valid failureCallback');
      invariant(typeof successCallback === 'function', 'Must provide a valid successCallback');
      RCTActionSheetManager.showShareActionSheetWithOptions(_extends({}, options, {
        tintColor: processColor(options.tintColor)
      }), failureCallback, successCallback);
    }
  };
  module.exports = ActionSheetIOS;
},467,[15,13,155],"ActionSheetIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var BatchedBridge = _require(_dependencyMap[0], 'BatchedBridge');

  var BugReporting = _require(_dependencyMap[1], 'BugReporting');

  var NativeModules = _require(_dependencyMap[2], 'NativeModules');

  var ReactNative = _require(_dependencyMap[3], 'ReactNative');

  var SceneTracker = _require(_dependencyMap[4], 'SceneTracker');

  var infoLog = _require(_dependencyMap[5], 'infoLog');

  var invariant = _require(_dependencyMap[6], 'fbjs/lib/invariant');

  var renderApplication = _require(_dependencyMap[7], 'renderApplication');

  var runnables = {};
  var runCount = 1;
  var sections = {};
  var tasks = new Map();

  var componentProviderInstrumentationHook = function componentProviderInstrumentationHook(component) {
    return component();
  };

  var wrapperComponentProvider = void 0;
  var AppRegistry = {
    setWrapperComponentProvider: function setWrapperComponentProvider(provider) {
      wrapperComponentProvider = provider;
    },
    registerConfig: function registerConfig(config) {
      config.forEach(function (appConfig) {
        if (appConfig.run) {
          AppRegistry.registerRunnable(appConfig.appKey, appConfig.run);
        } else {
          invariant(appConfig.component != null, 'AppRegistry.registerConfig(...): Every config is expected to set ' + 'either `run` or `component`, but `%s` has neither.', appConfig.appKey);
          AppRegistry.registerComponent(appConfig.appKey, appConfig.component, appConfig.section);
        }
      });
    },
    registerComponent: function registerComponent(appKey, componentProvider, section) {
      runnables[appKey] = {
        componentProvider: componentProvider,
        run: function run(appParameters) {
          return renderApplication(componentProviderInstrumentationHook(componentProvider), appParameters.initialProps, appParameters.rootTag, wrapperComponentProvider && wrapperComponentProvider(appParameters));
        }
      };

      if (section) {
        sections[appKey] = runnables[appKey];
      }

      return appKey;
    },
    registerRunnable: function registerRunnable(appKey, run) {
      runnables[appKey] = {
        run: run
      };
      return appKey;
    },
    registerSection: function registerSection(appKey, component) {
      AppRegistry.registerComponent(appKey, component, true);
    },
    getAppKeys: function getAppKeys() {
      return Object.keys(runnables);
    },
    getSectionKeys: function getSectionKeys() {
      return Object.keys(sections);
    },
    getSections: function getSections() {
      return _extends({}, sections);
    },
    getRunnable: function getRunnable(appKey) {
      return runnables[appKey];
    },
    getRegistry: function getRegistry() {
      return {
        sections: AppRegistry.getSectionKeys(),
        runnables: _extends({}, runnables)
      };
    },
    setComponentProviderInstrumentationHook: function setComponentProviderInstrumentationHook(hook) {
      componentProviderInstrumentationHook = hook;
    },
    runApplication: function runApplication(appKey, appParameters) {
      var msg = 'Running application "' + appKey + '" with appParams: ' + JSON.stringify(appParameters) + '. ' + '__DEV__ === ' + String(__DEV__) + ', development-level warning are ' + (__DEV__ ? 'ON' : 'OFF') + ', performance optimizations are ' + (__DEV__ ? 'OFF' : 'ON');
      infoLog(msg);
      BugReporting.addSource('AppRegistry.runApplication' + runCount++, function () {
        return msg;
      });
      invariant(runnables[appKey] && runnables[appKey].run, 'Application ' + appKey + ' has not been registered.\n\n' + "Hint: This error often happens when you're running the packager " + '(local dev server) from a wrong folder. For example you have ' + 'multiple apps and the packager is still running for the app you ' + 'were working on before.\nIf this is the case, simply kill the old ' + 'packager instance (e.g. close the packager terminal window) ' + 'and start the packager in the correct app folder (e.g. cd into app ' + "folder and run 'npm start').\n\n" + 'This error can also happen due to a require() error during ' + 'initialization or failure to call AppRegistry.registerComponent.\n\n');
      SceneTracker.setActiveScene({
        name: appKey
      });
      runnables[appKey].run(appParameters);
    },
    unmountApplicationComponentAtRootTag: function unmountApplicationComponentAtRootTag(rootTag) {
      ReactNative.unmountComponentAtNodeAndRemoveContainer(rootTag);
    },
    registerHeadlessTask: function registerHeadlessTask(taskKey, task) {
      if (tasks.has(taskKey)) {
        console.warn("registerHeadlessTask called multiple times for same key '" + taskKey + "'");
      }

      tasks.set(taskKey, task);
    },
    startHeadlessTask: function startHeadlessTask(taskId, taskKey, data) {
      var taskProvider = tasks.get(taskKey);

      if (!taskProvider) {
        throw new Error("No task registered for key " + taskKey);
      }

      taskProvider()(data).then(function () {
        return NativeModules.HeadlessJsTaskSupport.notifyTaskFinished(taskId);
      }).catch(function (reason) {
        console.error(reason);
        NativeModules.HeadlessJsTaskSupport.notifyTaskFinished(taskId);
      });
    }
  };
  BatchedBridge.registerCallableModule('AppRegistry', AppRegistry);
  module.exports = AppRegistry;
},468,[16,469,15,21,471,93,13,472],"AppRegistry");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var RCTDeviceEventEmitter = _require(_dependencyMap[0], 'RCTDeviceEventEmitter');

  var Map = _require(_dependencyMap[1], 'Map');

  var infoLog = _require(_dependencyMap[2], 'infoLog');

  function defaultExtras() {
    BugReporting.addFileSource('react_hierarchy.txt', function () {
      return _require(_dependencyMap[3], 'dumpReactTree')();
    });
  }

  var BugReporting = function () {
    function BugReporting() {
      _classCallCheck(this, BugReporting);
    }

    _createClass(BugReporting, null, [{
      key: "_maybeInit",
      value: function _maybeInit() {
        if (!BugReporting._subscription) {
          BugReporting._subscription = RCTDeviceEventEmitter.addListener('collectBugExtraData', BugReporting.collectExtraData, null);
          defaultExtras();
        }

        if (!BugReporting._redboxSubscription) {
          BugReporting._redboxSubscription = RCTDeviceEventEmitter.addListener('collectRedBoxExtraData', BugReporting.collectExtraData, null);
        }
      }
    }, {
      key: "addSource",
      value: function addSource(key, callback) {
        return this._addSource(key, callback, BugReporting._extraSources);
      }
    }, {
      key: "addFileSource",
      value: function addFileSource(key, callback) {
        return this._addSource(key, callback, BugReporting._fileSources);
      }
    }, {
      key: "_addSource",
      value: function _addSource(key, callback, source) {
        BugReporting._maybeInit();

        if (source.has(key)) {
          console.warn("BugReporting.add* called multiple times for same key '" + key + "'");
        }

        source.set(key, callback);
        return {
          remove: function remove() {
            source.delete(key);
          }
        };
      }
    }, {
      key: "collectExtraData",
      value: function collectExtraData() {
        var extraData = {};

        for (var _iterator = BugReporting._extraSources, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref3;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref3 = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref3 = _i.value;
          }

          var _ref = _ref3;

          var _ref2 = _slicedToArray(_ref, 2);

          var _key = _ref2[0];
          var callback = _ref2[1];
          extraData[_key] = callback();
        }

        var fileData = {};

        for (var _iterator2 = BugReporting._fileSources, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref6;

          if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref6 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref6 = _i2.value;
          }

          var _ref4 = _ref6;

          var _ref5 = _slicedToArray(_ref4, 2);

          var _key2 = _ref5[0];
          var _callback = _ref5[1];
          fileData[_key2] = _callback();
        }

        infoLog('BugReporting extraData:', extraData);

        var BugReportingNativeModule = _require(_dependencyMap[4], 'NativeModules').BugReporting;

        BugReportingNativeModule && BugReportingNativeModule.setExtraData && BugReportingNativeModule.setExtraData(extraData, fileData);

        var RedBoxNativeModule = _require(_dependencyMap[4], 'NativeModules').RedBox;

        RedBoxNativeModule && RedBoxNativeModule.setExtraData && RedBoxNativeModule.setExtraData(extraData, 'From BugReporting.js');
        return {
          extras: extraData,
          files: fileData
        };
      }
    }]);

    return BugReporting;
  }();

  BugReporting._extraSources = new Map();
  BugReporting._fileSources = new Map();
  BugReporting._subscription = null;
  BugReporting._redboxSubscription = null;
  module.exports = BugReporting;
},469,[70,26,93,470,15],"BugReporting");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function dumpReactTree() {
    try {
      return getReactTree();
    } catch (e) {
      return 'Failed to dump react tree: ' + e;
    }
  }

  function getReactTree() {
    return 'React tree dumps have been temporarily disabled while React is ' + 'upgraded to Fiber.';
  }

  module.exports = dumpReactTree;
},470,[],"dumpReactTree");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _listeners = [];
  var _activeScene = {
    name: 'default'
  };
  var SceneTracker = {
    setActiveScene: function setActiveScene(scene) {
      _activeScene = scene;

      _listeners.forEach(function (listener) {
        return listener(_activeScene);
      });
    },
    getActiveScene: function getActiveScene() {
      return _activeScene;
    },
    addActiveSceneChangedListener: function addActiveSceneChangedListener(callback) {
      _listeners.push(callback);

      return {
        remove: function remove() {
          _listeners = _listeners.filter(function (listener) {
            return callback !== listener;
          });
        }
      };
    }
  };
  module.exports = SceneTracker;
},471,[],"SceneTracker");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\node_modules\\react-native\\Libraries\\ReactNative\\renderApplication.js";

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AppContainer = _require(_dependencyMap[0], 'AppContainer');

  var React = _require(_dependencyMap[1], 'React');

  var ReactNative = _require(_dependencyMap[2], 'ReactNative');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  _require(_dependencyMap[4], 'BackHandler');

  function renderApplication(RootComponent, initialProps, rootTag, WrapperComponent) {
    invariant(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);
    var renderable = React.createElement(
      AppContainer,
      {
        rootTag: rootTag,
        WrapperComponent: WrapperComponent,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 34
        }
      },
      React.createElement(RootComponent, _extends({}, initialProps, {
        rootTag: rootTag,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 35
        }
      }))
    );

    if (RootComponent.prototype != null && RootComponent.prototype.unstable_isAsyncReactComponent === true) {
      var AppContainerAsyncWrapper = function (_React$unstable_Async) {
        _inherits(AppContainerAsyncWrapper, _React$unstable_Async);

        function AppContainerAsyncWrapper() {
          _classCallCheck(this, AppContainerAsyncWrapper);

          return _possibleConstructorReturn(this, (AppContainerAsyncWrapper.__proto__ || Object.getPrototypeOf(AppContainerAsyncWrapper)).apply(this, arguments));
        }

        _createClass(AppContainerAsyncWrapper, [{
          key: "render",
          value: function render() {
            return this.props.children;
          }
        }]);

        return AppContainerAsyncWrapper;
      }(React.unstable_AsyncComponent);

      renderable = React.createElement(
        AppContainerAsyncWrapper,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 54
          }
        },
        renderable
      );
    }

    ReactNative.render(renderable, rootTag);
  }

  module.exports = renderApplication;
},472,[418,133,21,13,473],"renderApplication");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var DeviceEventManager = _require(_dependencyMap[0], 'NativeModules').DeviceEventManager;

  var RCTDeviceEventEmitter = _require(_dependencyMap[1], 'RCTDeviceEventEmitter');

  var DEVICE_BACK_EVENT = 'hardwareBackPress';

  var _backPressSubscriptions = new Set();

  RCTDeviceEventEmitter.addListener(DEVICE_BACK_EVENT, function () {
    var invokeDefault = true;
    var subscriptions = Array.from(_backPressSubscriptions.values()).reverse();

    for (var i = 0; i < subscriptions.length; ++i) {
      if (subscriptions[i]()) {
        invokeDefault = false;
        break;
      }
    }

    if (invokeDefault) {
      BackHandler.exitApp();
    }
  });
  var BackHandler = {
    exitApp: function exitApp() {
      DeviceEventManager.invokeDefaultBackPressHandler();
    },
    addEventListener: function addEventListener(eventName, handler) {
      _backPressSubscriptions.add(handler);

      return {
        remove: function remove() {
          return BackHandler.removeEventListener(eventName, handler);
        }
      };
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      _backPressSubscriptions.delete(handler);
    }
  };
  module.exports = BackHandler;
},473,[15,70],"BackHandler");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var NativeModules = _require(_dependencyMap[0], 'NativeModules');

  var RCTAsyncStorage = NativeModules.AsyncRocksDBStorage || NativeModules.AsyncSQLiteDBStorage || NativeModules.AsyncLocalStorage;
  var AsyncStorage = {
    _getRequests: [],
    _getKeys: [],
    _immediate: null,
    getItem: function getItem(key, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiGet([key], function (errors, result) {
          var value = result && result[0] && result[0][1] ? result[0][1] : null;
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0], value);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(value);
          }
        });
      });
    },
    setItem: function setItem(key, value, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiSet([[key, value]], function (errors) {
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0]);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(null);
          }
        });
      });
    },
    removeItem: function removeItem(key, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiRemove([key], function (errors) {
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0]);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(null);
          }
        });
      });
    },
    mergeItem: function mergeItem(key, value, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiMerge([[key, value]], function (errors) {
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0]);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(null);
          }
        });
      });
    },
    clear: function clear(callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.clear(function (error) {
          callback && callback(convertError(error));

          if (error && convertError(error)) {
            reject(convertError(error));
          } else {
            resolve(null);
          }
        });
      });
    },
    getAllKeys: function getAllKeys(callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.getAllKeys(function (error, keys) {
          callback && callback(convertError(error), keys);

          if (error) {
            reject(convertError(error));
          } else {
            resolve(keys);
          }
        });
      });
    },
    flushGetRequests: function flushGetRequests() {
      var getRequests = this._getRequests;
      var getKeys = this._getKeys;
      this._getRequests = [];
      this._getKeys = [];
      RCTAsyncStorage.multiGet(getKeys, function (errors, result) {
        var map = {};
        result && result.forEach(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              key = _ref2[0],
              value = _ref2[1];

          map[key] = value;
          return value;
        });
        var reqLength = getRequests.length;

        for (var i = 0; i < reqLength; i++) {
          var request = getRequests[i];
          var requestKeys = request.keys;
          var requestResult = requestKeys.map(function (key) {
            return [key, map[key]];
          });
          request.callback && request.callback(null, requestResult);
          request.resolve && request.resolve(requestResult);
        }
      });
    },
    multiGet: function multiGet(keys, callback) {
      var _this = this;

      if (!this._immediate) {
        this._immediate = setImmediate(function () {
          _this._immediate = null;

          _this.flushGetRequests();
        });
      }

      var getRequest = {
        keys: keys,
        callback: callback,
        keyIndex: this._getKeys.length,
        resolve: null,
        reject: null
      };
      var promiseResult = new Promise(function (resolve, reject) {
        getRequest.resolve = resolve;
        getRequest.reject = reject;
      });

      this._getRequests.push(getRequest);

      keys.forEach(function (key) {
        if (_this._getKeys.indexOf(key) === -1) {
          _this._getKeys.push(key);
        }
      });
      return promiseResult;
    },
    multiSet: function multiSet(keyValuePairs, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiSet(keyValuePairs, function (errors) {
          var error = convertErrors(errors);
          callback && callback(error);

          if (error) {
            reject(error);
          } else {
            resolve(null);
          }
        });
      });
    },
    multiRemove: function multiRemove(keys, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiRemove(keys, function (errors) {
          var error = convertErrors(errors);
          callback && callback(error);

          if (error) {
            reject(error);
          } else {
            resolve(null);
          }
        });
      });
    },
    multiMerge: function multiMerge(keyValuePairs, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiMerge(keyValuePairs, function (errors) {
          var error = convertErrors(errors);
          callback && callback(error);

          if (error) {
            reject(error);
          } else {
            resolve(null);
          }
        });
      });
    }
  };

  if (!RCTAsyncStorage.multiMerge) {
    delete AsyncStorage.mergeItem;
    delete AsyncStorage.multiMerge;
  }

  function convertErrors(errs) {
    if (!errs) {
      return null;
    }

    return (Array.isArray(errs) ? errs : [errs]).map(function (e) {
      return convertError(e);
    });
  }

  function convertError(error) {
    if (!error) {
      return null;
    }

    var out = new Error(error.message);
    out.key = error.key;
    return out;
  }

  module.exports = AsyncStorage;
},474,[15],"AsyncStorage");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var BackHandler = _require(_dependencyMap[0], 'BackHandler');

  var warning = _require(_dependencyMap[1], 'fbjs/lib/warning');

  var BackAndroid = {
    exitApp: function exitApp() {
      warning(false, 'BackAndroid is deprecated.  Please use BackHandler instead.');
      BackHandler.exitApp();
    },
    addEventListener: function addEventListener(eventName, handler) {
      warning(false, 'BackAndroid is deprecated.  Please use BackHandler instead.');
      return BackHandler.addEventListener(eventName, handler);
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      warning(false, 'BackAndroid is deprecated.  Please use BackHandler instead.');
      BackHandler.removeEventListener(eventName, handler);
    }
  };
  module.exports = BackAndroid;
},475,[473,56],"BackAndroid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var PropTypes = _require(_dependencyMap[0], 'prop-types');

  var checkPropTypes = PropTypes.checkPropTypes;

  var RCTCameraRollManager = _require(_dependencyMap[1], 'NativeModules').CameraRollManager;

  var createStrictShapeTypeChecker = _require(_dependencyMap[2], 'createStrictShapeTypeChecker');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var GROUP_TYPES_OPTIONS = {
    Album: 'Album',
    All: 'All',
    Event: 'Event',
    Faces: 'Faces',
    Library: 'Library',
    PhotoStream: 'PhotoStream',
    SavedPhotos: 'SavedPhotos'
  };
  var ASSET_TYPE_OPTIONS = {
    All: 'All',
    Videos: 'Videos',
    Photos: 'Photos'
  };
  var getPhotosParamChecker = createStrictShapeTypeChecker({
    first: PropTypes.number.isRequired,
    after: PropTypes.string,
    groupTypes: PropTypes.oneOf(Object.keys(GROUP_TYPES_OPTIONS)),
    groupName: PropTypes.string,
    assetType: PropTypes.oneOf(Object.keys(ASSET_TYPE_OPTIONS)),
    mimeTypes: PropTypes.arrayOf(PropTypes.string)
  });
  var getPhotosReturnChecker = createStrictShapeTypeChecker({
    edges: PropTypes.arrayOf(createStrictShapeTypeChecker({
      node: createStrictShapeTypeChecker({
        type: PropTypes.string.isRequired,
        group_name: PropTypes.string.isRequired,
        image: createStrictShapeTypeChecker({
          uri: PropTypes.string.isRequired,
          height: PropTypes.number.isRequired,
          width: PropTypes.number.isRequired,
          isStored: PropTypes.bool,
          playableDuration: PropTypes.number.isRequired
        }).isRequired,
        timestamp: PropTypes.number.isRequired,
        location: createStrictShapeTypeChecker({
          latitude: PropTypes.number,
          longitude: PropTypes.number,
          altitude: PropTypes.number,
          heading: PropTypes.number,
          speed: PropTypes.number
        })
      }).isRequired
    })).isRequired,
    page_info: createStrictShapeTypeChecker({
      has_next_page: PropTypes.bool.isRequired,
      start_cursor: PropTypes.string,
      end_cursor: PropTypes.string
    }).isRequired
  });

  var CameraRoll = function () {
    function CameraRoll() {
      _classCallCheck(this, CameraRoll);
    }

    _createClass(CameraRoll, null, [{
      key: "saveImageWithTag",
      value: function saveImageWithTag(tag) {
        console.warn('`CameraRoll.saveImageWithTag()` is deprecated. Use `CameraRoll.saveToCameraRoll()` instead.');
        return this.saveToCameraRoll(tag, 'photo');
      }
    }, {
      key: "deletePhotos",
      value: function deletePhotos(photos) {
        return RCTCameraRollManager.deletePhotos(photos);
      }
    }, {
      key: "saveToCameraRoll",
      value: function saveToCameraRoll(tag, type) {
        invariant(typeof tag === 'string', 'CameraRoll.saveToCameraRoll must be a valid string.');
        invariant(type === 'photo' || type === 'video' || type === undefined, "The second argument to saveToCameraRoll must be 'photo' or 'video'. You passed " + (type || 'unknown'));
        var mediaType = 'photo';

        if (type) {
          mediaType = type;
        } else if (['mov', 'mp4'].indexOf(tag.split('.').slice(-1)[0]) >= 0) {
          mediaType = 'video';
        }

        return RCTCameraRollManager.saveToCameraRoll(tag, mediaType);
      }
    }, {
      key: "getPhotos",
      value: function getPhotos(params) {
        if (__DEV__) {
          checkPropTypes({
            params: getPhotosParamChecker
          }, {
            params: params
          }, 'params', 'CameraRoll.getPhotos');
        }

        if (arguments.length > 1) {
          console.warn('CameraRoll.getPhotos(tag, success, error) is deprecated.  Use the returned Promise instead');
          var successCallback = arguments[1];

          if (__DEV__) {
            var callback = arguments[1];

            successCallback = function successCallback(response) {
              checkPropTypes({
                response: getPhotosReturnChecker
              }, {
                response: response
              }, 'response', 'CameraRoll.getPhotos callback');
              callback(response);
            };
          }

          var errorCallback = arguments[2] || function () {};

          RCTCameraRollManager.getPhotos(params).then(successCallback, errorCallback);
        }

        return RCTCameraRollManager.getPhotos(params);
      }
    }]);

    return CameraRoll;
  }();

  CameraRoll.GroupTypesOptions = GROUP_TYPES_OPTIONS;
  CameraRoll.AssetTypeOptions = ASSET_TYPE_OPTIONS;
  module.exports = CameraRoll;
},476,[130,15,136,13],"CameraRoll");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Clipboard = _require(_dependencyMap[0], 'NativeModules').Clipboard;

  module.exports = {
    getString: function getString() {
      return Clipboard.getString();
    },
    setString: function setString(content) {
      Clipboard.setString(content);
    }
  };
},477,[15],"Clipboard");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var DatePickerModule = _require(_dependencyMap[0], 'NativeModules').DatePickerAndroid;

  function _toMillis(options, key) {
    var dateVal = options[key];

    if (typeof dateVal === 'object' && typeof dateVal.getMonth === 'function') {
      options[key] = dateVal.getTime();
    }
  }

  var DatePickerAndroid = function () {
    function DatePickerAndroid() {
      _classCallCheck(this, DatePickerAndroid);
    }

    _createClass(DatePickerAndroid, null, [{
      key: "open",
      value: function open(options) {
        var optionsMs;
        return regeneratorRuntime.async(function open$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                optionsMs = options;

                if (optionsMs) {
                  _toMillis(options, 'date');

                  _toMillis(options, 'minDate');

                  _toMillis(options, 'maxDate');
                }

                return _context.abrupt("return", DatePickerModule.open(options));

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "dateSetAction",
      get: function get() {
        return 'dateSetAction';
      }
    }, {
      key: "dismissedAction",
      get: function get() {
        return 'dismissedAction';
      }
    }]);

    return DatePickerAndroid;
  }();

  module.exports = DatePickerAndroid;
},478,[15],"DatePickerAndroid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var RCTImagePicker = _require(_dependencyMap[0], 'NativeModules').ImagePickerIOS;

  var ImagePickerIOS = {
    canRecordVideos: function canRecordVideos(callback) {
      return RCTImagePicker.canRecordVideos(callback);
    },
    canUseCamera: function canUseCamera(callback) {
      return RCTImagePicker.canUseCamera(callback);
    },
    openCameraDialog: function openCameraDialog(config, successCallback, cancelCallback) {
      config = _extends({
        videoMode: false
      }, config);
      return RCTImagePicker.openCameraDialog(config, successCallback, cancelCallback);
    },
    openSelectDialog: function openSelectDialog(config, successCallback, cancelCallback) {
      config = _extends({
        showImages: true,
        showVideos: false
      }, config);
      return RCTImagePicker.openSelectDialog(config, successCallback, cancelCallback);
    }
  };
  module.exports = ImagePickerIOS;
},479,[15],"ImagePickerIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var NativeEventEmitter = _require(_dependencyMap[0], 'NativeEventEmitter');

  var NativeModules = _require(_dependencyMap[1], 'NativeModules');

  var Platform = _require(_dependencyMap[2], 'Platform');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var LinkingManager = Platform.OS === 'android' ? NativeModules.IntentAndroid : NativeModules.LinkingManager;

  var Linking = function (_NativeEventEmitter) {
    _inherits(Linking, _NativeEventEmitter);

    function Linking() {
      _classCallCheck(this, Linking);

      return _possibleConstructorReturn(this, (Linking.__proto__ || Object.getPrototypeOf(Linking)).call(this, LinkingManager));
    }

    _createClass(Linking, [{
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        this.addListener(type, handler);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        this.removeListener(type, handler);
      }
    }, {
      key: "openURL",
      value: function openURL(url) {
        this._validateURL(url);

        return LinkingManager.openURL(url);
      }
    }, {
      key: "canOpenURL",
      value: function canOpenURL(url) {
        this._validateURL(url);

        return LinkingManager.canOpenURL(url);
      }
    }, {
      key: "getInitialURL",
      value: function getInitialURL() {
        return LinkingManager.getInitialURL();
      }
    }, {
      key: "_validateURL",
      value: function _validateURL(url) {
        invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);
        invariant(url, 'Invalid URL: cannot be empty');
      }
    }]);

    return Linking;
  }(NativeEventEmitter);

  module.exports = new Linking();
},480,[69,15,52,13],"Linking");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Map = _require(_dependencyMap[0], 'Map');

  var NativeEventEmitter = _require(_dependencyMap[1], 'NativeEventEmitter');

  var NativeModules = _require(_dependencyMap[2], 'NativeModules');

  var Platform = _require(_dependencyMap[3], 'Platform');

  var RCTNetInfo = NativeModules.NetInfo;
  var NetInfoEventEmitter = new NativeEventEmitter(RCTNetInfo);
  var DEVICE_CONNECTIVITY_EVENT = 'networkStatusDidChange';

  var _subscriptions = new Map();

  var _isConnectedDeprecated = void 0;

  if (Platform.OS === 'ios') {
    _isConnectedDeprecated = function _isConnectedDeprecated(reachability) {
      return reachability !== 'none' && reachability !== 'unknown';
    };
  } else if (Platform.OS === 'android') {
    _isConnectedDeprecated = function _isConnectedDeprecated(connectionType) {
      return connectionType !== 'NONE' && connectionType !== 'UNKNOWN';
    };
  }

  function _isConnected(connection) {
    return connection.type !== 'none' && connection.type !== 'unknown';
  }

  var _isConnectedSubscriptions = new Map();

  var NetInfo = {
    addEventListener: function addEventListener(eventName, handler) {
      var listener = void 0;

      if (eventName === 'connectionChange') {
        listener = NetInfoEventEmitter.addListener(DEVICE_CONNECTIVITY_EVENT, function (appStateData) {
          handler({
            type: appStateData.connectionType,
            effectiveType: appStateData.effectiveConnectionType
          });
        });
      } else if (eventName === 'change') {
        console.warn('NetInfo\'s "change" event is deprecated. Listen to the "connectionChange" event instead.');
        listener = NetInfoEventEmitter.addListener(DEVICE_CONNECTIVITY_EVENT, function (appStateData) {
          handler(appStateData.network_info);
        });
      } else {
        console.warn('Trying to subscribe to unknown event: "' + eventName + '"');
        return {
          remove: function remove() {}
        };
      }

      _subscriptions.set(handler, listener);

      return {
        remove: function remove() {
          return NetInfo.removeEventListener(eventName, handler);
        }
      };
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      var listener = _subscriptions.get(handler);

      if (!listener) {
        return;
      }

      listener.remove();

      _subscriptions.delete(handler);
    },
    fetch: function fetch() {
      console.warn('NetInfo.fetch() is deprecated. Use NetInfo.getConnectionInfo() instead.');
      return RCTNetInfo.getCurrentConnectivity().then(function (resp) {
        return resp.network_info;
      });
    },
    getConnectionInfo: function getConnectionInfo() {
      return RCTNetInfo.getCurrentConnectivity().then(function (resp) {
        return {
          type: resp.connectionType,
          effectiveType: resp.effectiveConnectionType
        };
      });
    },
    isConnected: {
      addEventListener: function addEventListener(eventName, handler) {
        var listener = function listener(connection) {
          if (eventName === 'change') {
            handler(_isConnectedDeprecated(connection));
          } else if (eventName === 'connectionChange') {
            handler(_isConnected(connection));
          }
        };

        _isConnectedSubscriptions.set(handler, listener);

        NetInfo.addEventListener(eventName, listener);
        return {
          remove: function remove() {
            return NetInfo.isConnected.removeEventListener(eventName, handler);
          }
        };
      },
      removeEventListener: function removeEventListener(eventName, handler) {
        var listener = _isConnectedSubscriptions.get(handler);

        NetInfo.removeEventListener(eventName, listener);

        _isConnectedSubscriptions.delete(handler);
      },
      fetch: function fetch() {
        return NetInfo.getConnectionInfo().then(_isConnected);
      }
    },
    isConnectionExpensive: function isConnectionExpensive() {
      return Platform.OS === 'android' ? RCTNetInfo.isConnectionMetered() : Promise.reject(new Error('Currently not supported on iOS'));
    }
  };
  module.exports = NetInfo;
},481,[26,69,15,52],"NetInfo");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var NativeEventEmitter = _require(_dependencyMap[0], 'NativeEventEmitter');

  var RCTPushNotificationManager = _require(_dependencyMap[1], 'NativeModules').PushNotificationManager;

  var invariant = _require(_dependencyMap[2], 'fbjs/lib/invariant');

  var PushNotificationEmitter = new NativeEventEmitter(RCTPushNotificationManager);

  var _notifHandlers = new Map();

  var DEVICE_NOTIF_EVENT = 'remoteNotificationReceived';
  var NOTIF_REGISTER_EVENT = 'remoteNotificationsRegistered';
  var NOTIF_REGISTRATION_ERROR_EVENT = 'remoteNotificationRegistrationError';
  var DEVICE_LOCAL_NOTIF_EVENT = 'localNotificationReceived';

  var PushNotificationIOS = function () {
    _createClass(PushNotificationIOS, null, [{
      key: "presentLocalNotification",
      value: function presentLocalNotification(details) {
        RCTPushNotificationManager.presentLocalNotification(details);
      }
    }, {
      key: "scheduleLocalNotification",
      value: function scheduleLocalNotification(details) {
        RCTPushNotificationManager.scheduleLocalNotification(details);
      }
    }, {
      key: "cancelAllLocalNotifications",
      value: function cancelAllLocalNotifications() {
        RCTPushNotificationManager.cancelAllLocalNotifications();
      }
    }, {
      key: "removeAllDeliveredNotifications",
      value: function removeAllDeliveredNotifications() {
        RCTPushNotificationManager.removeAllDeliveredNotifications();
      }
    }, {
      key: "getDeliveredNotifications",
      value: function getDeliveredNotifications(callback) {
        RCTPushNotificationManager.getDeliveredNotifications(callback);
      }
    }, {
      key: "removeDeliveredNotifications",
      value: function removeDeliveredNotifications(identifiers) {
        RCTPushNotificationManager.removeDeliveredNotifications(identifiers);
      }
    }, {
      key: "setApplicationIconBadgeNumber",
      value: function setApplicationIconBadgeNumber(number) {
        RCTPushNotificationManager.setApplicationIconBadgeNumber(number);
      }
    }, {
      key: "getApplicationIconBadgeNumber",
      value: function getApplicationIconBadgeNumber(callback) {
        RCTPushNotificationManager.getApplicationIconBadgeNumber(callback);
      }
    }, {
      key: "cancelLocalNotifications",
      value: function cancelLocalNotifications(userInfo) {
        RCTPushNotificationManager.cancelLocalNotifications(userInfo);
      }
    }, {
      key: "getScheduledLocalNotifications",
      value: function getScheduledLocalNotifications(callback) {
        RCTPushNotificationManager.getScheduledLocalNotifications(callback);
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        invariant(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');
        var listener;

        if (type === 'notification') {
          listener = PushNotificationEmitter.addListener(DEVICE_NOTIF_EVENT, function (notifData) {
            handler(new PushNotificationIOS(notifData));
          });
        } else if (type === 'localNotification') {
          listener = PushNotificationEmitter.addListener(DEVICE_LOCAL_NOTIF_EVENT, function (notifData) {
            handler(new PushNotificationIOS(notifData));
          });
        } else if (type === 'register') {
          listener = PushNotificationEmitter.addListener(NOTIF_REGISTER_EVENT, function (registrationInfo) {
            handler(registrationInfo.deviceToken);
          });
        } else if (type === 'registrationError') {
          listener = PushNotificationEmitter.addListener(NOTIF_REGISTRATION_ERROR_EVENT, function (errorInfo) {
            handler(errorInfo);
          });
        }

        _notifHandlers.set(type, listener);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        invariant(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');

        var listener = _notifHandlers.get(type);

        if (!listener) {
          return;
        }

        listener.remove();

        _notifHandlers.delete(type);
      }
    }, {
      key: "requestPermissions",
      value: function requestPermissions(permissions) {
        var requestedPermissions = {};

        if (permissions) {
          requestedPermissions = {
            alert: !!permissions.alert,
            badge: !!permissions.badge,
            sound: !!permissions.sound
          };
        } else {
          requestedPermissions = {
            alert: true,
            badge: true,
            sound: true
          };
        }

        return RCTPushNotificationManager.requestPermissions(requestedPermissions);
      }
    }, {
      key: "abandonPermissions",
      value: function abandonPermissions() {
        RCTPushNotificationManager.abandonPermissions();
      }
    }, {
      key: "checkPermissions",
      value: function checkPermissions(callback) {
        invariant(typeof callback === 'function', 'Must provide a valid callback');
        RCTPushNotificationManager.checkPermissions(callback);
      }
    }, {
      key: "getInitialNotification",
      value: function getInitialNotification() {
        return RCTPushNotificationManager.getInitialNotification().then(function (notification) {
          return notification && new PushNotificationIOS(notification);
        });
      }
    }]);

    function PushNotificationIOS(nativeNotif) {
      var _this = this;

      _classCallCheck(this, PushNotificationIOS);

      this._data = {};
      this._remoteNotificationCompleteCallbackCalled = false;
      this._isRemote = nativeNotif.remote;

      if (this._isRemote) {
        this._notificationId = nativeNotif.notificationId;
      }

      if (nativeNotif.remote) {
        Object.keys(nativeNotif).forEach(function (notifKey) {
          var notifVal = nativeNotif[notifKey];

          if (notifKey === 'aps') {
            _this._alert = notifVal.alert;
            _this._sound = notifVal.sound;
            _this._badgeCount = notifVal.badge;
            _this._category = notifVal.category;
            _this._contentAvailable = notifVal['content-available'];
            _this._threadID = notifVal['thread-id'];
          } else {
            _this._data[notifKey] = notifVal;
          }
        });
      } else {
        this._badgeCount = nativeNotif.applicationIconBadgeNumber;
        this._sound = nativeNotif.soundName;
        this._alert = nativeNotif.alertBody;
        this._data = nativeNotif.userInfo;
        this._category = nativeNotif.category;
      }
    }

    _createClass(PushNotificationIOS, [{
      key: "finish",
      value: function finish(fetchResult) {
        if (!this._isRemote || !this._notificationId || this._remoteNotificationCompleteCallbackCalled) {
          return;
        }

        this._remoteNotificationCompleteCallbackCalled = true;
        RCTPushNotificationManager.onFinishRemoteNotification(this._notificationId, fetchResult);
      }
    }, {
      key: "getMessage",
      value: function getMessage() {
        return this._alert;
      }
    }, {
      key: "getSound",
      value: function getSound() {
        return this._sound;
      }
    }, {
      key: "getCategory",
      value: function getCategory() {
        return this._category;
      }
    }, {
      key: "getAlert",
      value: function getAlert() {
        return this._alert;
      }
    }, {
      key: "getContentAvailable",
      value: function getContentAvailable() {
        return this._contentAvailable;
      }
    }, {
      key: "getBadgeCount",
      value: function getBadgeCount() {
        return this._badgeCount;
      }
    }, {
      key: "getData",
      value: function getData() {
        return this._data;
      }
    }, {
      key: "getThreadID",
      value: function getThreadID() {
        return this._threadID;
      }
    }]);

    return PushNotificationIOS;
  }();

  PushNotificationIOS.FetchResult = {
    NewData: 'UIBackgroundFetchResultNewData',
    NoData: 'UIBackgroundFetchResultNoData',
    ResultFailed: 'UIBackgroundFetchResultFailed'
  };
  module.exports = PushNotificationIOS;
},482,[69,15,13],"PushNotificationIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Settings = {
    get: function get(key) {
      console.warn('Settings is not yet supported on Android');
      return null;
    },
    set: function set(settings) {
      console.warn('Settings is not yet supported on Android');
    },
    watchKeys: function watchKeys(keys, callback) {
      console.warn('Settings is not yet supported on Android');
      return -1;
    },
    clearWatch: function clearWatch(watchId) {
      console.warn('Settings is not yet supported on Android');
    }
  };
  module.exports = Settings;
},483,[],"Settings");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var Platform = _require2(_dependencyMap[0], 'Platform');

  var invariant = _require2(_dependencyMap[1], 'fbjs/lib/invariant');

  var processColor = _require2(_dependencyMap[2], 'processColor');

  var _require = _require2(_dependencyMap[3], 'NativeModules'),
      ActionSheetManager = _require.ActionSheetManager,
      ShareModule = _require.ShareModule;

  var Share = function () {
    function Share() {
      _classCallCheck(this, Share);
    }

    _createClass(Share, null, [{
      key: "share",
      value: function share(content) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        invariant(typeof content === 'object' && content !== null, 'Content to share must be a valid object');
        invariant(typeof content.url === 'string' || typeof content.message === 'string', 'At least one of URL and message is required');
        invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');

        if (Platform.OS === 'android') {
          invariant(!content.title || typeof content.title === 'string', 'Invalid title: title should be a string.');
          return ShareModule.share(content, options.dialogTitle);
        } else if (Platform.OS === 'ios') {
          return new Promise(function (resolve, reject) {
            ActionSheetManager.showShareActionSheetWithOptions(_extends({}, content, options, {
              tintColor: processColor(options.tintColor)
            }), function (error) {
              return reject(error);
            }, function (success, activityType) {
              if (success) {
                resolve({
                  'action': 'sharedAction',
                  'activityType': activityType
                });
              } else {
                resolve({
                  'action': 'dismissedAction'
                });
              }
            });
          });
        } else {
          return Promise.reject(new Error('Unsupported platform'));
        }
      }
    }, {
      key: "sharedAction",
      get: function get() {
        return 'sharedAction';
      }
    }, {
      key: "dismissedAction",
      get: function get() {
        return 'dismissedAction';
      }
    }]);

    return Share;
  }();

  module.exports = Share;
},484,[52,13,155,15],"Share");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeEventEmitter = _require(_dependencyMap[0], 'NativeEventEmitter');

  module.exports = new NativeEventEmitter('StatusBarManager');
},485,[69],"StatusBarIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var TimePickerModule = _require(_dependencyMap[0], 'NativeModules').TimePickerAndroid;

  var TimePickerAndroid = function () {
    function TimePickerAndroid() {
      _classCallCheck(this, TimePickerAndroid);
    }

    _createClass(TimePickerAndroid, null, [{
      key: "open",
      value: function open(options) {
        return regeneratorRuntime.async(function open$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", TimePickerModule.open(options));

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "timeSetAction",
      get: function get() {
        return 'timeSetAction';
      }
    }, {
      key: "dismissedAction",
      get: function get() {
        return 'dismissedAction';
      }
    }]);

    return TimePickerAndroid;
  }();

  module.exports = TimePickerAndroid;
},486,[15],"TimePickerAndroid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var RCTVibration = _require(_dependencyMap[0], 'NativeModules').Vibration;

  var Platform = _require(_dependencyMap[1], 'Platform');

  var _vibrating = false;
  var _id = 0;

  function vibrateByPattern(pattern) {
    var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (_vibrating) {
      return;
    }

    _vibrating = true;

    if (pattern[0] === 0) {
      RCTVibration.vibrate();
      pattern = pattern.slice(1);
    }

    if (pattern.length === 0) {
      _vibrating = false;
      return;
    }

    setTimeout(function () {
      return vibrateScheduler(++_id, pattern, repeat, 1);
    }, pattern[0]);
  }

  function vibrateScheduler(id, pattern, repeat, nextIndex) {
    if (!_vibrating || id !== _id) {
      return;
    }

    RCTVibration.vibrate();

    if (nextIndex >= pattern.length) {
      if (repeat) {
        nextIndex = 0;
      } else {
        _vibrating = false;
        return;
      }
    }

    setTimeout(function () {
      return vibrateScheduler(id, pattern, repeat, nextIndex + 1);
    }, pattern[nextIndex]);
  }

  var Vibration = {
    vibrate: function vibrate() {
      var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 400;
      var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (Platform.OS === 'android') {
        if (typeof pattern === 'number') {
          RCTVibration.vibrate(pattern);
        } else if (Array.isArray(pattern)) {
          RCTVibration.vibrateByPattern(pattern, repeat ? 0 : -1);
        } else {
          throw new Error('Vibration pattern should be a number or array');
        }
      } else {
        if (_vibrating) {
          return;
        }

        if (typeof pattern === 'number') {
          RCTVibration.vibrate();
        } else if (Array.isArray(pattern)) {
          vibrateByPattern(pattern, repeat);
        } else {
          throw new Error('Vibration pattern should be a number or array');
        }
      }
    },
    cancel: function cancel() {
      if (Platform.OS === 'ios') {
        _vibrating = false;
      } else {
        RCTVibration.cancel();
      }
    }
  };
  module.exports = Vibration;
},487,[15,52],"Vibration");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var warning = _require(_dependencyMap[0], 'fbjs/lib/warning');

  var VibrationIOS = {
    vibrate: function vibrate() {
      warning('VibrationIOS is not supported on this platform!');
    }
  };
  module.exports = VibrationIOS;
},488,[56],"VibrationIOS");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.takeSnapshot;
},489,[21],"takeSnapshot");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./node_modules/react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\App.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _Common = _require(_dependencyMap[3], "./src/Component/Common");

  var _firebaseApp = _require(_dependencyMap[4], "./src/Component/firebaseApp");

  var _LoginForm = _require(_dependencyMap[5], "./src/Component/LoginForm");

  var _LoginForm2 = _interopRequireDefault(_LoginForm);

  var _ProfileForm = _require(_dependencyMap[6], "./src/Component/ProfileForm");

  var _ProfileForm2 = _interopRequireDefault(_ProfileForm);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    App: {
      displayName: "App"
    }
  };

  var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "d:/Demo/React/ReactAuth/auth/App.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var App = _wrapComponent("App")(function (_Component) {
    _inherits(App, _Component);

    function App() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, App);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = App.__proto__ || Object.getPrototypeOf(App)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        loggedIn: null
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(App, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        var _this2 = this;

        _firebaseApp.firebaseApp.auth().onAuthStateChanged(function (user) {
          if (user) {
            _this2.setState({
              loggedIn: true
            });
          } else {
            _this2.setState({
              loggedIn: false
            });
          }
        });
      }
    }, {
      key: "renderContent",
      value: function renderContent() {
        switch (this.state.loggedIn) {
          case true:
            return _react3.default.createElement(_ProfileForm2.default, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 33
              }
            });

          case false:
            return _react3.default.createElement(_LoginForm2.default, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 36
              }
            });

          default:
            return _react3.default.createElement(_Common.Spinner, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 38
              }
            });
        }
      }
    }, {
      key: "render",
      value: function render() {
        return _react3.default.createElement(
          _reactNative.View,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 44
            }
          },
          _react3.default.createElement(_Common.Header, {
            headerText: "Authentication",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 45
            }
          }),
          this.renderContent()
        );
      }
    }]);

    return App;
  }(_react2.Component));

  exports.default = App;
},490,[113,179,12,491,498,647,648],"App.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _Button = _require(_dependencyMap[0], "./Button");

  Object.keys(_Button).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _Button[key];
      }
    });
  });

  var _Card = _require(_dependencyMap[1], "./Card");

  Object.keys(_Card).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _Card[key];
      }
    });
  });

  var _CardSection = _require(_dependencyMap[2], "./CardSection");

  Object.keys(_CardSection).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _CardSection[key];
      }
    });
  });

  var _header = _require(_dependencyMap[3], "./header");

  Object.keys(_header).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _header[key];
      }
    });
  });

  var _Input = _require(_dependencyMap[4], "./Input");

  Object.keys(_Input).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _Input[key];
      }
    });
  });

  var _Spinner = _require(_dependencyMap[5], "./Spinner");

  Object.keys(_Spinner).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _Spinner[key];
      }
    });
  });
},491,[492,493,494,495,496,497],"src\\Component\\Common\\index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.Button = undefined;
    var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\src\\Component\\Common\\Button.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var Button = function Button(_ref) {
        var onPress = _ref.onPress,
            children = _ref.children;
        var buttonStyle = styles.buttonStyle,
            textStyle = styles.textStyle;
        return _react2.default.createElement(
            _reactNative.TouchableOpacity,
            {
                onPress: onPress,
                style: buttonStyle,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 7
                }
            },
            _react2.default.createElement(
                _reactNative.Text,
                {
                    style: textStyle,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 8
                    }
                },
                " ",
                children
            )
        );
    };

    var styles = {
        buttonStyle: {
            flex: 1,
            alignSelf: 'stretch',
            backgroundColor: '#fff',
            borderWidth: 1,
            borderColor: '#007aff',
            marginLeft: 5,
            marginRight: 5
        },
        textStyle: {
            alignSelf: 'center',
            color: '#007aff',
            fontSize: 16,
            fontWeight: '600',
            paddingTop: 10,
            paddingBottom: 10
        }
    };
    exports.Button = Button;
},492,[113,12],"src\\Component\\Common\\Button.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.Card = undefined;
    var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\src\\Component\\Common\\Card.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var Card = function Card(props) {
        return _react2.default.createElement(
            _reactNative.View,
            {
                style: styles.containerStyle,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 5
                }
            },
            props.children
        );
    };

    var styles = {
        containerStyle: {
            borderWidth: 1,
            borderRadius: 2,
            borderColor: '#ddd',
            borderBottomWidth: 0,
            shadowOffset: {
                width: 0,
                height: 2
            },
            shadowOpacity: 0.1,
            shadowRadius: 2,
            elevation: 1,
            marginLeft: 5,
            marginRight: 5,
            marginTop: 10
        }
    };
    exports.Card = Card;
},493,[113,12],"src\\Component\\Common\\Card.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.CardSection = undefined;
    var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\src\\Component\\Common\\CardSection.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var CardSection = function CardSection(props) {
        return _react2.default.createElement(
            _reactNative.View,
            {
                style: style.containerStyle,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 5
                }
            },
            props.children
        );
    };

    var style = {
        containerStyle: {
            borderBottomWidth: 1,
            padding: 5,
            backgroundColor: '#fff',
            justifyContent: 'flex-start',
            flexDirection: 'row',
            borderColor: '#ddd',
            position: 'relative'
        }
    };
    exports.CardSection = CardSection;
},494,[113,12],"src\\Component\\Common\\CardSection.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.Header = undefined;
    var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\src\\Component\\Common\\header.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var Header = function Header(props) {
        var textStyle = styles.textStyle,
            viewStyle = styles.viewStyle;
        return _react2.default.createElement(
            _reactNative.View,
            {
                style: viewStyle,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 8
                }
            },
            _react2.default.createElement(
                _reactNative.Text,
                {
                    style: textStyle,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 9
                    }
                },
                props.headerText
            )
        );
    };

    var styles = {
        viewStyle: {
            backgroundColor: '#F8F8F8',
            justifyContent: 'center',
            alignItems: 'center',
            height: 60,
            paddingTop: 15
        },
        textStyle: {
            fontSize: 20
        }
    };
    exports.Header = Header;
},495,[113,12],"src\\Component\\Common\\header.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.Input = undefined;
    var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\src\\Component\\Common\\Input.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var Input = function Input(_ref) {
        var label = _ref.label,
            value = _ref.value,
            onChangeText = _ref.onChangeText,
            placeholder = _ref.placeholder,
            secureTextEntry = _ref.secureTextEntry;
        var inputStyle = styles.inputStyle,
            labelStyle = styles.labelStyle,
            containerStyle = styles.containerStyle;
        return _react2.default.createElement(
            _reactNative.View,
            {
                style: containerStyle,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 9
                }
            },
            _react2.default.createElement(
                _reactNative.Text,
                {
                    style: labelStyle,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 10
                    }
                },
                label
            ),
            _react2.default.createElement(_reactNative.TextInput, {
                secureTextEntry: secureTextEntry,
                placeholder: placeholder,
                autoCorrect: false,
                value: value,
                onChangeText: onChangeText,
                style: inputStyle,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 13
                }
            })
        );
    };

    var styles = {
        inputStyle: {
            color: '#000',
            paddingRight: 5,
            paddingLeft: 5,
            fontSize: 18,
            lineHeight: 23,
            flex: 2
        },
        labelStyle: {
            fontSize: 20,
            paddingLeft: 20,
            flex: 1
        },
        containerStyle: {
            height: 40,
            flex: 1,
            flexDirection: 'row',
            alignItems: 'center'
        }
    };
    exports.Input = Input;
},496,[113,12],"src\\Component\\Common\\Input.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.Spinner = undefined;
    var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\src\\Component\\Common\\Spinner.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var Spinner = function Spinner(_ref) {
        var size = _ref.size;
        return _react2.default.createElement(
            _reactNative.View,
            {
                style: styles.spinnerStyle,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 6
                }
            },
            _react2.default.createElement(_reactNative.ActivityIndicator, {
                size: size || 'large',
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 7
                }
            })
        );
    };

    var styles = {
        spinnerStyle: {
            flex: 1,
            justifyContent: 'center',
            alignItems: 'center'
        }
    };
    exports.Spinner = Spinner;
},497,[113,12],"src\\Component\\Common\\Spinner.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.firebaseApp = undefined;

  var _firebase = _require(_dependencyMap[0], "firebase");

  var firebase = _interopRequireWildcard(_firebase);

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  var config = {
    apiKey: 'AIzaSyBEjbFIvUD3zkxjI-6dY1LIEb9yM1z6gZw',
    authDomain: 'firstfirebase-60dcc.firebaseapp.com',
    databaseURL: 'https://firstfirebase-60dcc.firebaseio.com',
    projectId: 'firstfirebase-60dcc',
    storageBucket: 'firstfirebase-60dcc.appspot.com',
    messagingSenderId: '1089831089269'
  };
  var firebaseApp = exports.firebaseApp = firebase.initializeApp(config);
},498,[499],"src\\Component\\firebaseApp.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var firebase = _require(_dependencyMap[0], './app');

  _require(_dependencyMap[1], './auth');

  _require(_dependencyMap[2], './database');

  _require(_dependencyMap[3], './storage');

  var AsyncStorage = _require(_dependencyMap[4], 'react-native').AsyncStorage;

  firebase.INTERNAL.extendNamespace({
    INTERNAL: {
      reactNative: {
        AsyncStorage: AsyncStorage
      }
    }
  });
  module.exports = firebase;
},499,[500,526,528,613,12],"node_modules\\firebase\\index.react-native.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  _require(_dependencyMap[0], '@firebase/polyfill');

  module.exports = _require(_dependencyMap[1], '@firebase/app').default;
},500,[501,506],"node_modules\\firebase\\app\\index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  _require(_dependencyMap[0], "./src/polyfills/promise");

  _require(_dependencyMap[1], "./src/shims/Array");

  _require(_dependencyMap[2], "./src/shims/String");
},501,[502,504,505],"node_modules\\@firebase\\polyfill\\dist\\cjs\\index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var __global = function () {
        if (typeof global !== 'undefined') {
            return global;
        }

        if (typeof window !== 'undefined') {
            return window;
        }

        if (typeof self !== 'undefined') {
            return self;
        }

        throw new Error('unable to locate global object');
    }();

    if (typeof Promise === 'undefined') {
        __global['Promise'] = Promise = _require(_dependencyMap[0], 'promise-polyfill');
    }
},502,[503],"node_modules\\@firebase\\polyfill\\dist\\cjs\\src\\polyfills\\promise.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var setTimeoutFunc = setTimeout;

  function noop() {}

  function bind(fn, thisArg) {
    return function () {
      fn.apply(thisArg, arguments);
    };
  }

  function Promise(fn) {
    if (!(this instanceof Promise)) throw new TypeError('Promises must be constructed via new');
    if (typeof fn !== 'function') throw new TypeError('not a function');
    this._state = 0;
    this._handled = false;
    this._value = undefined;
    this._deferreds = [];
    doResolve(fn, this);
  }

  function handle(self, deferred) {
    while (self._state === 3) {
      self = self._value;
    }

    if (self._state === 0) {
      self._deferreds.push(deferred);

      return;
    }

    self._handled = true;

    Promise._immediateFn(function () {
      var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;

      if (cb === null) {
        (self._state === 1 ? resolve : reject)(deferred.promise, self._value);
        return;
      }

      var ret;

      try {
        ret = cb(self._value);
      } catch (e) {
        reject(deferred.promise, e);
        return;
      }

      resolve(deferred.promise, ret);
    });
  }

  function resolve(self, newValue) {
    try {
      if (newValue === self) throw new TypeError('A promise cannot be resolved with itself.');

      if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
        var then = newValue.then;

        if (newValue instanceof Promise) {
          self._state = 3;
          self._value = newValue;
          finale(self);
          return;
        } else if (typeof then === 'function') {
          doResolve(bind(then, newValue), self);
          return;
        }
      }

      self._state = 1;
      self._value = newValue;
      finale(self);
    } catch (e) {
      reject(self, e);
    }
  }

  function reject(self, newValue) {
    self._state = 2;
    self._value = newValue;
    finale(self);
  }

  function finale(self) {
    if (self._state === 2 && self._deferreds.length === 0) {
      Promise._immediateFn(function () {
        if (!self._handled) {
          Promise._unhandledRejectionFn(self._value);
        }
      });
    }

    for (var i = 0, len = self._deferreds.length; i < len; i++) {
      handle(self, self._deferreds[i]);
    }

    self._deferreds = null;
  }

  function Handler(onFulfilled, onRejected, promise) {
    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
    this.promise = promise;
  }

  function doResolve(fn, self) {
    var done = false;

    try {
      fn(function (value) {
        if (done) return;
        done = true;
        resolve(self, value);
      }, function (reason) {
        if (done) return;
        done = true;
        reject(self, reason);
      });
    } catch (ex) {
      if (done) return;
      done = true;
      reject(self, ex);
    }
  }

  Promise.prototype['catch'] = function (onRejected) {
    return this.then(null, onRejected);
  };

  Promise.prototype.then = function (onFulfilled, onRejected) {
    var prom = new this.constructor(noop);
    handle(this, new Handler(onFulfilled, onRejected, prom));
    return prom;
  };

  Promise.prototype['finally'] = function (callback) {
    var constructor = this.constructor;
    return this.then(function (value) {
      return constructor.resolve(callback()).then(function () {
        return value;
      });
    }, function (reason) {
      return constructor.resolve(callback()).then(function () {
        return constructor.reject(reason);
      });
    });
  };

  Promise.all = function (arr) {
    return new Promise(function (resolve, reject) {
      if (!arr || typeof arr.length === 'undefined') throw new TypeError('Promise.all accepts an array');
      var args = Array.prototype.slice.call(arr);
      if (args.length === 0) return resolve([]);
      var remaining = args.length;

      function res(i, val) {
        try {
          if (val && (typeof val === 'object' || typeof val === 'function')) {
            var then = val.then;

            if (typeof then === 'function') {
              then.call(val, function (val) {
                res(i, val);
              }, reject);
              return;
            }
          }

          args[i] = val;

          if (--remaining === 0) {
            resolve(args);
          }
        } catch (ex) {
          reject(ex);
        }
      }

      for (var i = 0; i < args.length; i++) {
        res(i, args[i]);
      }
    });
  };

  Promise.resolve = function (value) {
    if (value && typeof value === 'object' && value.constructor === Promise) {
      return value;
    }

    return new Promise(function (resolve) {
      resolve(value);
    });
  };

  Promise.reject = function (value) {
    return new Promise(function (resolve, reject) {
      reject(value);
    });
  };

  Promise.race = function (values) {
    return new Promise(function (resolve, reject) {
      for (var i = 0, len = values.length; i < len; i++) {
        values[i].then(resolve, reject);
      }
    });
  };

  Promise._immediateFn = typeof setImmediate === 'function' && function (fn) {
    setImmediate(fn);
  } || function (fn) {
    setTimeoutFunc(fn, 0);
  };

  Promise._unhandledRejectionFn = function _unhandledRejectionFn(err) {
    if (typeof console !== 'undefined' && console) {
      console.warn('Possible Unhandled Promise Rejection:', err);
    }
  };

  module.exports = Promise;
},503,[],"node_modules\\promise-polyfill\\lib\\index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    if (!Array.prototype.find) {
        Object.defineProperty(Array.prototype, 'find', {
            value: function value(predicate) {
                if (this == null) {
                    throw new TypeError('"this" is null or not defined');
                }

                var o = Object(this);
                var len = o.length >>> 0;

                if (typeof predicate !== 'function') {
                    throw new TypeError('predicate must be a function');
                }

                var thisArg = arguments[1];
                var k = 0;

                while (k < len) {
                    var kValue = o[k];

                    if (predicate.call(thisArg, kValue, k, o)) {
                        return kValue;
                    }

                    k++;
                }

                return undefined;
            }
        });
    }

    if (!Array.prototype.findIndex) {
        Object.defineProperty(Array.prototype, 'findIndex', {
            value: function value(predicate) {
                if (this == null) {
                    throw new TypeError('"this" is null or not defined');
                }

                var o = Object(this);
                var len = o.length >>> 0;

                if (typeof predicate !== 'function') {
                    throw new TypeError('predicate must be a function');
                }

                var thisArg = arguments[1];
                var k = 0;

                while (k < len) {
                    var kValue = o[k];

                    if (predicate.call(thisArg, kValue, k, o)) {
                        return k;
                    }

                    k++;
                }

                return -1;
            }
        });
    }
},504,[],"node_modules\\@firebase\\polyfill\\dist\\cjs\\src\\shims\\Array.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  if (!String.prototype.startsWith) {
    String.prototype.startsWith = function (search, pos) {
      return this.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    };
  }
},505,[],"node_modules\\@firebase\\polyfill\\dist\\cjs\\src\\shims\\String.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var firebaseApp_1 = _require(_dependencyMap[0], "./src/firebaseApp");

  exports.firebase = firebaseApp_1.createFirebaseNamespace();
  exports.default = exports.firebase;
},506,[507],"node_modules\\@firebase\\app\\dist\\cjs\\index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "@firebase/util");

    var contains = function contains(obj, key) {
        return Object.prototype.hasOwnProperty.call(obj, key);
    };

    var DEFAULT_ENTRY_NAME = '[DEFAULT]';
    var tokenListeners = [];

    var FirebaseAppImpl = function () {
        function FirebaseAppImpl(options, name, firebase_) {
            this.firebase_ = firebase_;
            this.isDeleted_ = false;
            this.services_ = {};
            this.name_ = name;
            this.options_ = util_1.deepCopy(options);
            this.INTERNAL = {
                getUid: function getUid() {
                    return null;
                },
                getToken: function getToken() {
                    return Promise.resolve(null);
                },
                addAuthTokenListener: function addAuthTokenListener(callback) {
                    tokenListeners.push(callback);
                    setTimeout(function () {
                        return callback(null);
                    }, 0);
                },
                removeAuthTokenListener: function removeAuthTokenListener(callback) {
                    tokenListeners = tokenListeners.filter(function (listener) {
                        return listener !== callback;
                    });
                }
            };
        }

        Object.defineProperty(FirebaseAppImpl.prototype, "name", {
            get: function get() {
                this.checkDestroyed_();
                return this.name_;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FirebaseAppImpl.prototype, "options", {
            get: function get() {
                this.checkDestroyed_();
                return this.options_;
            },
            enumerable: true,
            configurable: true
        });

        FirebaseAppImpl.prototype.delete = function () {
            var _this = this;

            return new Promise(function (resolve) {
                _this.checkDestroyed_();

                resolve();
            }).then(function () {
                _this.firebase_.INTERNAL.removeApp(_this.name_);

                var services = [];
                Object.keys(_this.services_).forEach(function (serviceKey) {
                    Object.keys(_this.services_[serviceKey]).forEach(function (instanceKey) {
                        services.push(_this.services_[serviceKey][instanceKey]);
                    });
                });
                return Promise.all(services.map(function (service) {
                    return service.INTERNAL.delete();
                }));
            }).then(function () {
                _this.isDeleted_ = true;
                _this.services_ = {};
            });
        };

        FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {
            if (instanceIdentifier === void 0) {
                instanceIdentifier = DEFAULT_ENTRY_NAME;
            }

            this.checkDestroyed_();

            if (!this.services_[name]) {
                this.services_[name] = {};
            }

            if (!this.services_[name][instanceIdentifier]) {
                var instanceSpecifier = instanceIdentifier !== DEFAULT_ENTRY_NAME ? instanceIdentifier : undefined;
                var service = this.firebase_.INTERNAL.factories[name](this, this.extendApp.bind(this), instanceSpecifier);
                this.services_[name][instanceIdentifier] = service;
            }

            return this.services_[name][instanceIdentifier];
        };

        FirebaseAppImpl.prototype.extendApp = function (props) {
            var _this = this;

            util_1.deepExtend(this, props);

            if (props.INTERNAL && props.INTERNAL.addAuthTokenListener) {
                tokenListeners.forEach(function (listener) {
                    _this.INTERNAL.addAuthTokenListener(listener);
                });
                tokenListeners = [];
            }
        };

        FirebaseAppImpl.prototype.checkDestroyed_ = function () {
            if (this.isDeleted_) {
                error('app-deleted', {
                    name: this.name_
                });
            }
        };

        return FirebaseAppImpl;
    }();

    FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options || FirebaseAppImpl.prototype.delete || console.log('dc');

    function createFirebaseNamespace() {
        var apps_ = {};
        var factories = {};
        var appHooks = {};
        var namespace = {
            __esModule: true,
            initializeApp: initializeApp,
            app: app,
            apps: null,
            Promise: Promise,
            SDK_VERSION: '4.10.1',
            INTERNAL: {
                registerService: registerService,
                createFirebaseNamespace: createFirebaseNamespace,
                extendNamespace: extendNamespace,
                createSubscribe: util_1.createSubscribe,
                ErrorFactory: util_1.ErrorFactory,
                removeApp: removeApp,
                factories: factories,
                useAsService: useAsService,
                Promise: Promise,
                deepExtend: util_1.deepExtend
            }
        };
        util_1.patchProperty(namespace, 'default', namespace);
        Object.defineProperty(namespace, 'apps', {
            get: getApps
        });

        function removeApp(name) {
            var app = apps_[name];
            callAppHooks(app, 'delete');
            delete apps_[name];
        }

        function app(name) {
            name = name || DEFAULT_ENTRY_NAME;

            if (!contains(apps_, name)) {
                error('no-app', {
                    name: name
                });
            }

            return apps_[name];
        }

        util_1.patchProperty(app, 'App', FirebaseAppImpl);

        function initializeApp(options, name) {
            if (name === undefined) {
                name = DEFAULT_ENTRY_NAME;
            } else {
                if (typeof name !== 'string' || name === '') {
                    error('bad-app-name', {
                        name: name + ''
                    });
                }
            }

            if (contains(apps_, name)) {
                error('duplicate-app', {
                    name: name
                });
            }

            var app = new FirebaseAppImpl(options, name, namespace);
            apps_[name] = app;
            callAppHooks(app, 'create');
            return app;
        }

        function getApps() {
            return Object.keys(apps_).map(function (name) {
                return apps_[name];
            });
        }

        function registerService(name, createService, serviceProperties, appHook, allowMultipleInstances) {
            if (factories[name]) {
                error('duplicate-service', {
                    name: name
                });
            }

            factories[name] = createService;

            if (appHook) {
                appHooks[name] = appHook;
                getApps().forEach(function (app) {
                    appHook('create', app);
                });
            }

            var serviceNamespace = function serviceNamespace(appArg) {
                if (appArg === void 0) {
                    appArg = app();
                }

                if (typeof appArg[name] !== 'function') {
                    error('invalid-app-argument', {
                        name: name
                    });
                }

                return appArg[name]();
            };

            if (serviceProperties !== undefined) {
                util_1.deepExtend(serviceNamespace, serviceProperties);
            }

            namespace[name] = serviceNamespace;

            FirebaseAppImpl.prototype[name] = function () {
                var args = [];

                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }

                var serviceFxn = this._getService.bind(this, name);

                return serviceFxn.apply(this, allowMultipleInstances ? args : []);
            };

            return serviceNamespace;
        }

        function extendNamespace(props) {
            util_1.deepExtend(namespace, props);
        }

        function callAppHooks(app, eventName) {
            Object.keys(factories).forEach(function (serviceName) {
                var factoryName = useAsService(app, serviceName);

                if (factoryName === null) {
                    return;
                }

                if (appHooks[factoryName]) {
                    appHooks[factoryName](eventName, app);
                }
            });
        }

        function useAsService(app, name) {
            if (name === 'serverAuth') {
                return null;
            }

            var useService = name;
            var options = app.options;
            return useService;
        }

        return namespace;
    }

    exports.createFirebaseNamespace = createFirebaseNamespace;

    function error(code, args) {
        throw appErrors.create(code, args);
    }

    var errors = {
        'no-app': "No Firebase App '{$name}' has been created - " + 'call Firebase App.initializeApp()',
        'bad-app-name': "Illegal App name: '{$name}",
        'duplicate-app': "Firebase App named '{$name}' already exists",
        'app-deleted': "Firebase App named '{$name}' already deleted",
        'duplicate-service': "Firebase service named '{$name}' already registered",
        'sa-not-supported': 'Initializing the Firebase SDK with a service ' + 'account is only allowed in a Node.js environment. On client ' + 'devices, you should instead initialize the SDK with an api key and ' + 'auth domain',
        'invalid-app-argument': 'firebase.{$name}() takes either no argument or a ' + 'Firebase App instance.'
    };
    var appErrors = new util_1.ErrorFactory('app', 'Firebase', errors);
},507,[508],"node_modules\\@firebase\\app\\dist\\cjs\\src\\firebaseApp.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var assert_1 = _require(_dependencyMap[0], "./src/assert");

  exports.assert = assert_1.assert;
  exports.assertionError = assert_1.assertionError;

  var crypt_1 = _require(_dependencyMap[1], "./src/crypt");

  exports.base64 = crypt_1.base64;
  exports.base64Decode = crypt_1.base64Decode;
  exports.base64Encode = crypt_1.base64Encode;

  var constants_1 = _require(_dependencyMap[2], "./src/constants");

  exports.CONSTANTS = constants_1.CONSTANTS;

  var deepCopy_1 = _require(_dependencyMap[3], "./src/deepCopy");

  exports.deepCopy = deepCopy_1.deepCopy;
  exports.deepExtend = deepCopy_1.deepExtend;
  exports.patchProperty = deepCopy_1.patchProperty;

  var deferred_1 = _require(_dependencyMap[4], "./src/deferred");

  exports.Deferred = deferred_1.Deferred;

  var environment_1 = _require(_dependencyMap[5], "./src/environment");

  exports.getUA = environment_1.getUA;
  exports.isMobileCordova = environment_1.isMobileCordova;
  exports.isNodeSdk = environment_1.isNodeSdk;
  exports.isReactNative = environment_1.isReactNative;

  var errors_1 = _require(_dependencyMap[6], "./src/errors");

  exports.ErrorFactory = errors_1.ErrorFactory;
  exports.FirebaseError = errors_1.FirebaseError;
  exports.patchCapture = errors_1.patchCapture;

  var json_1 = _require(_dependencyMap[7], "./src/json");

  exports.jsonEval = json_1.jsonEval;
  exports.stringify = json_1.stringify;

  var jwt_1 = _require(_dependencyMap[8], "./src/jwt");

  exports.decode = jwt_1.decode;
  exports.isAdmin = jwt_1.isAdmin;
  exports.issuedAtTime = jwt_1.issuedAtTime;
  exports.isValidFormat = jwt_1.isValidFormat;
  exports.isValidTimestamp = jwt_1.isValidTimestamp;

  var obj_1 = _require(_dependencyMap[9], "./src/obj");

  exports.clone = obj_1.clone;
  exports.contains = obj_1.contains;
  exports.every = obj_1.every;
  exports.extend = obj_1.extend;
  exports.findKey = obj_1.findKey;
  exports.findValue = obj_1.findValue;
  exports.forEach = obj_1.forEach;
  exports.getAnyKey = obj_1.getAnyKey;
  exports.getCount = obj_1.getCount;
  exports.getValues = obj_1.getValues;
  exports.isEmpty = obj_1.isEmpty;
  exports.isNonNullObject = obj_1.isNonNullObject;
  exports.map = obj_1.map;
  exports.safeGet = obj_1.safeGet;

  var query_1 = _require(_dependencyMap[10], "./src/query");

  exports.querystring = query_1.querystring;
  exports.querystringDecode = query_1.querystringDecode;

  var sha1_1 = _require(_dependencyMap[11], "./src/sha1");

  exports.Sha1 = sha1_1.Sha1;

  var subscribe_1 = _require(_dependencyMap[12], "./src/subscribe");

  exports.async = subscribe_1.async;
  exports.createSubscribe = subscribe_1.createSubscribe;

  var validation_1 = _require(_dependencyMap[13], "./src/validation");

  exports.errorPrefix = validation_1.errorPrefix;
  exports.validateArgCount = validation_1.validateArgCount;
  exports.validateCallback = validation_1.validateCallback;
  exports.validateContextObject = validation_1.validateContextObject;
  exports.validateNamespace = validation_1.validateNamespace;

  var utf8_1 = _require(_dependencyMap[14], "./src/utf8");

  exports.stringLength = utf8_1.stringLength;
  exports.stringToByteArray = utf8_1.stringToByteArray;
},508,[509,511,510,512,513,514,515,516,517,518,519,520,523,524,525],"node_modules\\@firebase\\util\\dist\\cjs\\index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var constants_1 = _require(_dependencyMap[0], "./constants");

  exports.assert = function (assertion, message) {
    if (!assertion) {
      throw exports.assertionError(message);
    }
  };

  exports.assertionError = function (message) {
    return new Error('Firebase Database (' + constants_1.CONSTANTS.SDK_VERSION + ') INTERNAL ASSERT FAILED: ' + message);
  };
},509,[510],"node_modules\\@firebase\\util\\dist\\cjs\\src\\assert.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CONSTANTS = {
    NODE_CLIENT: false,
    NODE_ADMIN: false,
    SDK_VERSION: '${JSCORE_VERSION}'
  };
},510,[],"node_modules\\@firebase\\util\\dist\\cjs\\src\\constants.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var stringToByteArray = function stringToByteArray(str) {
        var out = [],
            p = 0;

        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);

            if (c < 128) {
                out[p++] = c;
            } else if (c < 2048) {
                out[p++] = c >> 6 | 192;
                out[p++] = c & 63 | 128;
            } else if ((c & 0xfc00) == 0xd800 && i + 1 < str.length && (str.charCodeAt(i + 1) & 0xfc00) == 0xdc00) {
                c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
                out[p++] = c >> 18 | 240;
                out[p++] = c >> 12 & 63 | 128;
                out[p++] = c >> 6 & 63 | 128;
                out[p++] = c & 63 | 128;
            } else {
                out[p++] = c >> 12 | 224;
                out[p++] = c >> 6 & 63 | 128;
                out[p++] = c & 63 | 128;
            }
        }

        return out;
    };

    var byteArrayToString = function byteArrayToString(bytes) {
        var out = [],
            pos = 0,
            c = 0;

        while (pos < bytes.length) {
            var c1 = bytes[pos++];

            if (c1 < 128) {
                out[c++] = String.fromCharCode(c1);
            } else if (c1 > 191 && c1 < 224) {
                var c2 = bytes[pos++];
                out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
            } else if (c1 > 239 && c1 < 365) {
                var c2 = bytes[pos++];
                var c3 = bytes[pos++];
                var c4 = bytes[pos++];
                var u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 0x10000;
                out[c++] = String.fromCharCode(0xd800 + (u >> 10));
                out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
            } else {
                var c2 = bytes[pos++];
                var c3 = bytes[pos++];
                out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
            }
        }

        return out.join('');
    };

    exports.base64 = {
        byteToCharMap_: null,
        charToByteMap_: null,
        byteToCharMapWebSafe_: null,
        charToByteMapWebSafe_: null,
        ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',

        get ENCODED_VALS() {
            return this.ENCODED_VALS_BASE + '+/=';
        },

        get ENCODED_VALS_WEBSAFE() {
            return this.ENCODED_VALS_BASE + '-_.';
        },

        HAS_NATIVE_SUPPORT: typeof atob === 'function',
        encodeByteArray: function encodeByteArray(input, opt_webSafe) {
            if (!Array.isArray(input)) {
                throw Error('encodeByteArray takes an array as a parameter');
            }

            this.init_();
            var byteToCharMap = opt_webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;
            var output = [];

            for (var i = 0; i < input.length; i += 3) {
                var byte1 = input[i];
                var haveByte2 = i + 1 < input.length;
                var byte2 = haveByte2 ? input[i + 1] : 0;
                var haveByte3 = i + 2 < input.length;
                var byte3 = haveByte3 ? input[i + 2] : 0;
                var outByte1 = byte1 >> 2;
                var outByte2 = (byte1 & 0x03) << 4 | byte2 >> 4;
                var outByte3 = (byte2 & 0x0f) << 2 | byte3 >> 6;
                var outByte4 = byte3 & 0x3f;

                if (!haveByte3) {
                    outByte4 = 64;

                    if (!haveByte2) {
                        outByte3 = 64;
                    }
                }

                output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
            }

            return output.join('');
        },
        encodeString: function encodeString(input, opt_webSafe) {
            if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {
                return btoa(input);
            }

            return this.encodeByteArray(stringToByteArray(input), opt_webSafe);
        },
        decodeString: function decodeString(input, opt_webSafe) {
            if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {
                return atob(input);
            }

            return byteArrayToString(this.decodeStringToByteArray(input, opt_webSafe));
        },
        decodeStringToByteArray: function decodeStringToByteArray(input, opt_webSafe) {
            this.init_();
            var charToByteMap = opt_webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;
            var output = [];

            for (var i = 0; i < input.length;) {
                var byte1 = charToByteMap[input.charAt(i++)];
                var haveByte2 = i < input.length;
                var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
                ++i;
                var haveByte3 = i < input.length;
                var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
                ++i;
                var haveByte4 = i < input.length;
                var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
                ++i;

                if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
                    throw Error();
                }

                var outByte1 = byte1 << 2 | byte2 >> 4;
                output.push(outByte1);

                if (byte3 != 64) {
                    var outByte2 = byte2 << 4 & 0xf0 | byte3 >> 2;
                    output.push(outByte2);

                    if (byte4 != 64) {
                        var outByte3 = byte3 << 6 & 0xc0 | byte4;
                        output.push(outByte3);
                    }
                }
            }

            return output;
        },
        init_: function init_() {
            if (!this.byteToCharMap_) {
                this.byteToCharMap_ = {};
                this.charToByteMap_ = {};
                this.byteToCharMapWebSafe_ = {};
                this.charToByteMapWebSafe_ = {};

                for (var i = 0; i < this.ENCODED_VALS.length; i++) {
                    this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
                    this.charToByteMap_[this.byteToCharMap_[i]] = i;
                    this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
                    this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;

                    if (i >= this.ENCODED_VALS_BASE.length) {
                        this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
                        this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
                    }
                }
            }
        }
    };

    exports.base64Encode = function (str) {
        var utf8Bytes = stringToByteArray(str);
        return exports.base64.encodeByteArray(utf8Bytes, true);
    };

    exports.base64Decode = function (str) {
        try {
            return exports.base64.decodeString(str, true);
        } catch (e) {
            console.error('base64Decode failed: ', e);
        }

        return null;
    };
},511,[],"node_modules\\@firebase\\util\\dist\\cjs\\src\\crypt.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    function deepCopy(value) {
        return deepExtend(undefined, value);
    }

    exports.deepCopy = deepCopy;

    function deepExtend(target, source) {
        if (!(source instanceof Object)) {
            return source;
        }

        switch (source.constructor) {
            case Date:
                var dateValue = source;
                return new Date(dateValue.getTime());

            case Object:
                if (target === undefined) {
                    target = {};
                }

                break;

            case Array:
                target = [];
                break;

            default:
                return source;
        }

        for (var prop in source) {
            if (!source.hasOwnProperty(prop)) {
                continue;
            }

            target[prop] = deepExtend(target[prop], source[prop]);
        }

        return target;
    }

    exports.deepExtend = deepExtend;

    function patchProperty(obj, prop, value) {
        obj[prop] = value;
    }

    exports.patchProperty = patchProperty;
},512,[],"node_modules\\@firebase\\util\\dist\\cjs\\src\\deepCopy.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var Deferred = function () {
        function Deferred() {
            var _this = this;

            this.promise = new Promise(function (resolve, reject) {
                _this.resolve = resolve;
                _this.reject = reject;
            });
        }

        Deferred.prototype.wrapCallback = function (callback) {
            var _this = this;

            return function (error, value) {
                if (error) {
                    _this.reject(error);
                } else {
                    _this.resolve(value);
                }

                if (typeof callback === 'function') {
                    _this.promise.catch(function () {});

                    if (callback.length === 1) {
                        callback(error);
                    } else {
                        callback(error, value);
                    }
                }
            };
        };

        return Deferred;
    }();

    exports.Deferred = Deferred;
},513,[],"node_modules\\@firebase\\util\\dist\\cjs\\src\\deferred.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var constants_1 = _require(_dependencyMap[0], "./constants");

    exports.getUA = function () {
        if (typeof navigator !== 'undefined' && typeof navigator['userAgent'] === 'string') {
            return navigator['userAgent'];
        } else {
            return '';
        }
    };

    exports.isMobileCordova = function () {
        return typeof window !== 'undefined' && !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(exports.getUA());
    };

    exports.isReactNative = function () {
        return typeof navigator === 'object' && navigator['product'] === 'ReactNative';
    };

    exports.isNodeSdk = function () {
        return constants_1.CONSTANTS.NODE_CLIENT === true || constants_1.CONSTANTS.NODE_ADMIN === true;
    };
},514,[510],"node_modules\\@firebase\\util\\dist\\cjs\\src\\environment.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var ERROR_NAME = 'FirebaseError';
    var captureStackTrace = Error.captureStackTrace;

    function patchCapture(captureFake) {
        var result = captureStackTrace;
        captureStackTrace = captureFake;
        return result;
    }

    exports.patchCapture = patchCapture;

    var FirebaseError = function () {
        function FirebaseError(code, message) {
            this.code = code;
            this.message = message;
            var stack;

            if (captureStackTrace) {
                captureStackTrace(this, ErrorFactory.prototype.create);
            } else {
                var err_1 = Error.apply(this, arguments);
                this.name = ERROR_NAME;
                Object.defineProperty(this, 'stack', {
                    get: function get() {
                        return err_1.stack;
                    }
                });
            }
        }

        return FirebaseError;
    }();

    exports.FirebaseError = FirebaseError;
    FirebaseError.prototype = Object.create(Error.prototype);
    FirebaseError.prototype.constructor = FirebaseError;
    FirebaseError.prototype.name = ERROR_NAME;

    var ErrorFactory = function () {
        function ErrorFactory(service, serviceName, errors) {
            this.service = service;
            this.serviceName = serviceName;
            this.errors = errors;
            this.pattern = /\{\$([^}]+)}/g;
        }

        ErrorFactory.prototype.create = function (code, data) {
            if (data === undefined) {
                data = {};
            }

            var template = this.errors[code];
            var fullCode = this.service + '/' + code;
            var message;

            if (template === undefined) {
                message = 'Error';
            } else {
                message = template.replace(this.pattern, function (match, key) {
                    var value = data[key];
                    return value !== undefined ? value.toString() : '<' + key + '?>';
                });
            }

            message = this.serviceName + ': ' + message + ' (' + fullCode + ').';
            var err = new FirebaseError(fullCode, message);

            for (var prop in data) {
                if (!data.hasOwnProperty(prop) || prop.slice(-1) === '_') {
                    continue;
                }

                err[prop] = data[prop];
            }

            return err;
        };

        return ErrorFactory;
    }();

    exports.ErrorFactory = ErrorFactory;
},515,[],"node_modules\\@firebase\\util\\dist\\cjs\\src\\errors.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function jsonEval(str) {
    return JSON.parse(str);
  }

  exports.jsonEval = jsonEval;

  function stringify(data) {
    return JSON.stringify(data);
  }

  exports.stringify = stringify;
},516,[],"node_modules\\@firebase\\util\\dist\\cjs\\src\\json.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var crypt_1 = _require(_dependencyMap[0], "./crypt");

    var json_1 = _require(_dependencyMap[1], "./json");

    exports.decode = function (token) {
        var header = {},
            claims = {},
            data = {},
            signature = '';

        try {
            var parts = token.split('.');
            header = json_1.jsonEval(crypt_1.base64Decode(parts[0]) || '');
            claims = json_1.jsonEval(crypt_1.base64Decode(parts[1]) || '');
            signature = parts[2];
            data = claims['d'] || {};
            delete claims['d'];
        } catch (e) {}

        return {
            header: header,
            claims: claims,
            data: data,
            signature: signature
        };
    };

    exports.isValidTimestamp = function (token) {
        var claims = exports.decode(token).claims,
            now = Math.floor(new Date().getTime() / 1000),
            validSince,
            validUntil;

        if (typeof claims === 'object') {
            if (claims.hasOwnProperty('nbf')) {
                validSince = claims['nbf'];
            } else if (claims.hasOwnProperty('iat')) {
                validSince = claims['iat'];
            }

            if (claims.hasOwnProperty('exp')) {
                validUntil = claims['exp'];
            } else {
                validUntil = validSince + 86400;
            }
        }

        return now && validSince && validUntil && now >= validSince && now <= validUntil;
    };

    exports.issuedAtTime = function (token) {
        var claims = exports.decode(token).claims;

        if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {
            return claims['iat'];
        }

        return null;
    };

    exports.isValidFormat = function (token) {
        var decoded = exports.decode(token),
            claims = decoded.claims;
        return !!decoded.signature && !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');
    };

    exports.isAdmin = function (token) {
        var claims = exports.decode(token).claims;
        return typeof claims === 'object' && claims['admin'] === true;
    };
},517,[511,516],"node_modules\\@firebase\\util\\dist\\cjs\\src\\jwt.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.contains = function (obj, key) {
        return Object.prototype.hasOwnProperty.call(obj, key);
    };

    exports.safeGet = function (obj, key) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) return obj[key];
    };

    exports.forEach = function (obj, fn) {
        for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
                fn(key, obj[key]);
            }
        }
    };

    exports.extend = function (objTo, objFrom) {
        exports.forEach(objFrom, function (key, value) {
            objTo[key] = value;
        });
        return objTo;
    };

    exports.clone = function (obj) {
        return exports.extend({}, obj);
    };

    exports.isNonNullObject = function (obj) {
        return typeof obj === 'object' && obj !== null;
    };

    exports.isEmpty = function (obj) {
        for (var key in obj) {
            return false;
        }

        return true;
    };

    exports.getCount = function (obj) {
        var rv = 0;

        for (var key in obj) {
            rv++;
        }

        return rv;
    };

    exports.map = function (obj, f, opt_obj) {
        var res = {};

        for (var key in obj) {
            res[key] = f.call(opt_obj, obj[key], key, obj);
        }

        return res;
    };

    exports.findKey = function (obj, fn, opt_this) {
        for (var key in obj) {
            if (fn.call(opt_this, obj[key], key, obj)) {
                return key;
            }
        }

        return undefined;
    };

    exports.findValue = function (obj, fn, opt_this) {
        var key = exports.findKey(obj, fn, opt_this);
        return key && obj[key];
    };

    exports.getAnyKey = function (obj) {
        for (var key in obj) {
            return key;
        }
    };

    exports.getValues = function (obj) {
        var res = [];
        var i = 0;

        for (var key in obj) {
            res[i++] = obj[key];
        }

        return res;
    };

    exports.every = function (obj, fn) {
        for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
                if (!fn(key, obj[key])) {
                    return false;
                }
            }
        }

        return true;
    };
},518,[],"node_modules\\@firebase\\util\\dist\\cjs\\src\\obj.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var obj_1 = _require(_dependencyMap[0], "./obj");

    exports.querystring = function (querystringParams) {
        var params = [];
        obj_1.forEach(querystringParams, function (key, value) {
            if (Array.isArray(value)) {
                value.forEach(function (arrayVal) {
                    params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
                });
            } else {
                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
            }
        });
        return params.length ? '&' + params.join('&') : '';
    };

    exports.querystringDecode = function (querystring) {
        var obj = {};
        var tokens = querystring.replace(/^\?/, '').split('&');
        tokens.forEach(function (token) {
            if (token) {
                var key = token.split('=');
                obj[key[0]] = key[1];
            }
        });
        return obj;
    };
},519,[518],"node_modules\\@firebase\\util\\dist\\cjs\\src\\query.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var tslib_1 = _require(_dependencyMap[0], "tslib");

    var hash_1 = _require(_dependencyMap[1], "./hash");

    var Sha1 = function (_super) {
        tslib_1.__extends(Sha1, _super);

        function Sha1() {
            var _this = _super.call(this) || this;

            _this.chain_ = [];
            _this.buf_ = [];
            _this.W_ = [];
            _this.pad_ = [];
            _this.inbuf_ = 0;
            _this.total_ = 0;
            _this.blockSize = 512 / 8;
            _this.pad_[0] = 128;

            for (var i = 1; i < _this.blockSize; ++i) {
                _this.pad_[i] = 0;
            }

            _this.reset();

            return _this;
        }

        Sha1.prototype.reset = function () {
            this.chain_[0] = 0x67452301;
            this.chain_[1] = 0xefcdab89;
            this.chain_[2] = 0x98badcfe;
            this.chain_[3] = 0x10325476;
            this.chain_[4] = 0xc3d2e1f0;
            this.inbuf_ = 0;
            this.total_ = 0;
        };

        Sha1.prototype.compress_ = function (buf, opt_offset) {
            if (!opt_offset) {
                opt_offset = 0;
            }

            var W = this.W_;

            if (typeof buf === 'string') {
                for (var i = 0; i < 16; i++) {
                    W[i] = buf.charCodeAt(opt_offset) << 24 | buf.charCodeAt(opt_offset + 1) << 16 | buf.charCodeAt(opt_offset + 2) << 8 | buf.charCodeAt(opt_offset + 3);
                    opt_offset += 4;
                }
            } else {
                for (var i = 0; i < 16; i++) {
                    W[i] = buf[opt_offset] << 24 | buf[opt_offset + 1] << 16 | buf[opt_offset + 2] << 8 | buf[opt_offset + 3];
                    opt_offset += 4;
                }
            }

            for (var i = 16; i < 80; i++) {
                var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
                W[i] = (t << 1 | t >>> 31) & 0xffffffff;
            }

            var a = this.chain_[0];
            var b = this.chain_[1];
            var c = this.chain_[2];
            var d = this.chain_[3];
            var e = this.chain_[4];
            var f, k;

            for (var i = 0; i < 80; i++) {
                if (i < 40) {
                    if (i < 20) {
                        f = d ^ b & (c ^ d);
                        k = 0x5a827999;
                    } else {
                        f = b ^ c ^ d;
                        k = 0x6ed9eba1;
                    }
                } else {
                    if (i < 60) {
                        f = b & c | d & (b | c);
                        k = 0x8f1bbcdc;
                    } else {
                        f = b ^ c ^ d;
                        k = 0xca62c1d6;
                    }
                }

                var t = (a << 5 | a >>> 27) + f + e + k + W[i] & 0xffffffff;
                e = d;
                d = c;
                c = (b << 30 | b >>> 2) & 0xffffffff;
                b = a;
                a = t;
            }

            this.chain_[0] = this.chain_[0] + a & 0xffffffff;
            this.chain_[1] = this.chain_[1] + b & 0xffffffff;
            this.chain_[2] = this.chain_[2] + c & 0xffffffff;
            this.chain_[3] = this.chain_[3] + d & 0xffffffff;
            this.chain_[4] = this.chain_[4] + e & 0xffffffff;
        };

        Sha1.prototype.update = function (bytes, opt_length) {
            if (bytes == null) {
                return;
            }

            if (opt_length === undefined) {
                opt_length = bytes.length;
            }

            var lengthMinusBlock = opt_length - this.blockSize;
            var n = 0;
            var buf = this.buf_;
            var inbuf = this.inbuf_;

            while (n < opt_length) {
                if (inbuf == 0) {
                    while (n <= lengthMinusBlock) {
                        this.compress_(bytes, n);
                        n += this.blockSize;
                    }
                }

                if (typeof bytes === 'string') {
                    while (n < opt_length) {
                        buf[inbuf] = bytes.charCodeAt(n);
                        ++inbuf;
                        ++n;

                        if (inbuf == this.blockSize) {
                            this.compress_(buf);
                            inbuf = 0;
                            break;
                        }
                    }
                } else {
                    while (n < opt_length) {
                        buf[inbuf] = bytes[n];
                        ++inbuf;
                        ++n;

                        if (inbuf == this.blockSize) {
                            this.compress_(buf);
                            inbuf = 0;
                            break;
                        }
                    }
                }
            }

            this.inbuf_ = inbuf;
            this.total_ += opt_length;
        };

        Sha1.prototype.digest = function () {
            var digest = [];
            var totalBits = this.total_ * 8;

            if (this.inbuf_ < 56) {
                this.update(this.pad_, 56 - this.inbuf_);
            } else {
                this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
            }

            for (var i = this.blockSize - 1; i >= 56; i--) {
                this.buf_[i] = totalBits & 255;
                totalBits /= 256;
            }

            this.compress_(this.buf_);
            var n = 0;

            for (var i = 0; i < 5; i++) {
                for (var j = 24; j >= 0; j -= 8) {
                    digest[n] = this.chain_[i] >> j & 255;
                    ++n;
                }
            }

            return digest;
        };

        return Sha1;
    }(hash_1.Hash);

    exports.Sha1 = Sha1;
},520,[521,522],"node_modules\\@firebase\\util\\dist\\cjs\\src\\sha1.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var __extends;

    var __assign;

    var __rest;

    var __decorate;

    var __param;

    var __metadata;

    var __awaiter;

    var __generator;

    var __exportStar;

    var __values;

    var __read;

    var __spread;

    var _await;

    var __asyncGenerator;

    var __asyncDelegator;

    var __asyncValues;

    var __makeTemplateObject;

    var __importStar;

    var __importDefault;

    (function (factory) {
        var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};

        if (typeof define === "function" && define.amd) {
            define("tslib", ["exports"], function (exports) {
                factory(createExporter(root, createExporter(exports)));
            });
        } else if (typeof module === "object" && typeof module.exports === "object") {
            factory(createExporter(root, createExporter(module.exports)));
        } else {
            factory(createExporter(root));
        }

        function createExporter(exports, previous) {
            if (exports !== root) {
                if (typeof Object.create === "function") {
                    Object.defineProperty(exports, "__esModule", {
                        value: true
                    });
                } else {
                    exports.__esModule = true;
                }
            }

            return function (id, v) {
                return exports[id] = previous ? previous(id, v) : v;
            };
        }
    })(function (exporter) {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (b.hasOwnProperty(p)) d[p] = b[p];
            }
        };

        __extends = function __extends(d, b) {
            extendStatics(d, b);

            function __() {
                this.constructor = d;
            }

            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };

        __assign = Object.assign || function (t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];

                for (var p in s) {
                    if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
            }

            return t;
        };

        __rest = function __rest(s, e) {
            var t = {};

            for (var p in s) {
                if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
            }

            if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];
            }
            return t;
        };

        __decorate = function __decorate(decorators, target, key, desc) {
            var c = arguments.length,
                r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                d;
            if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
                if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
            }
            return c > 3 && r && Object.defineProperty(target, key, r), r;
        };

        __param = function __param(paramIndex, decorator) {
            return function (target, key) {
                decorator(target, key, paramIndex);
            };
        };

        __metadata = function __metadata(metadataKey, metadataValue) {
            if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
        };

        __awaiter = function __awaiter(thisArg, _arguments, P, generator) {
            return new (P || (P = Promise))(function (resolve, reject) {
                function fulfilled(value) {
                    try {
                        step(generator.next(value));
                    } catch (e) {
                        reject(e);
                    }
                }

                function rejected(value) {
                    try {
                        step(generator["throw"](value));
                    } catch (e) {
                        reject(e);
                    }
                }

                function step(result) {
                    result.done ? resolve(result.value) : new P(function (resolve) {
                        resolve(result.value);
                    }).then(fulfilled, rejected);
                }

                step((generator = generator.apply(thisArg, _arguments || [])).next());
            });
        };

        __generator = function __generator(thisArg, body) {
            var _ = {
                label: 0,
                sent: function sent() {
                    if (t[0] & 1) throw t[1];
                    return t[1];
                },
                trys: [],
                ops: []
            },
                f,
                y,
                t,
                g;
            return g = {
                next: verb(0),
                "throw": verb(1),
                "return": verb(2)
            }, typeof Symbol === "function" && (g[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] = function () {
                return this;
            }), g;

            function verb(n) {
                return function (v) {
                    return step([n, v]);
                };
            }

            function step(op) {
                if (f) throw new TypeError("Generator is already executing.");

                while (_) {
                    try {
                        if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
                        if (y = 0, t) op = [0, t.value];

                        switch (op[0]) {
                            case 0:
                            case 1:
                                t = op;
                                break;

                            case 4:
                                _.label++;
                                return {
                                    value: op[1],
                                    done: false
                                };

                            case 5:
                                _.label++;
                                y = op[1];
                                op = [0];
                                continue;

                            case 7:
                                op = _.ops.pop();

                                _.trys.pop();

                                continue;

                            default:
                                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                    _ = 0;
                                    continue;
                                }

                                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                                    _.label = op[1];
                                    break;
                                }

                                if (op[0] === 6 && _.label < t[1]) {
                                    _.label = t[1];
                                    t = op;
                                    break;
                                }

                                if (t && _.label < t[2]) {
                                    _.label = t[2];

                                    _.ops.push(op);

                                    break;
                                }

                                if (t[2]) _.ops.pop();

                                _.trys.pop();

                                continue;
                        }

                        op = body.call(thisArg, _);
                    } catch (e) {
                        op = [6, e];
                        y = 0;
                    } finally {
                        f = t = 0;
                    }
                }

                if (op[0] & 5) throw op[1];
                return {
                    value: op[0] ? op[1] : void 0,
                    done: true
                };
            }
        };

        __exportStar = function __exportStar(m, exports) {
            for (var p in m) {
                if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
        };

        __values = function __values(o) {
            var m = typeof Symbol === "function" && o[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"],
                i = 0;
            if (m) return m.call(o);
            return {
                next: function next() {
                    if (o && i >= o.length) o = void 0;
                    return {
                        value: o && o[i++],
                        done: !o
                    };
                }
            };
        };

        __read = function __read(o, n) {
            var m = typeof Symbol === "function" && o[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"];
            if (!m) return o;
            var i = m.call(o),
                r,
                ar = [],
                e;

            try {
                while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
                    ar.push(r.value);
                }
            } catch (error) {
                e = {
                    error: error
                };
            } finally {
                try {
                    if (r && !r.done && (m = i["return"])) m.call(i);
                } finally {
                    if (e) throw e.error;
                }
            }

            return ar;
        };

        __spread = function __spread() {
            for (var ar = [], i = 0; i < arguments.length; i++) {
                ar = ar.concat(__read(arguments[i]));
            }

            return ar;
        };

        _await = function __await(v) {
            return this instanceof _await ? (this.v = v, this) : new _await(v);
        };

        __asyncGenerator = function __asyncGenerator(thisArg, _arguments, generator) {
            if (!(typeof Symbol === "function" ? Symbol.asyncIterator : "@@asyncIterator")) throw new TypeError("Symbol.asyncIterator is not defined.");
            var g = generator.apply(thisArg, _arguments || []),
                i,
                q = [];
            return i = {}, verb("next"), verb("throw"), verb("return"), i[typeof Symbol === "function" ? Symbol.asyncIterator : "@@asyncIterator"] = function () {
                return this;
            }, i;

            function verb(n) {
                if (g[n]) i[n] = function (v) {
                    return new Promise(function (a, b) {
                        q.push([n, v, a, b]) > 1 || resume(n, v);
                    });
                };
            }

            function resume(n, v) {
                try {
                    step(g[n](v));
                } catch (e) {
                    settle(q[0][3], e);
                }
            }

            function step(r) {
                r.value instanceof _await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
            }

            function fulfill(value) {
                resume("next", value);
            }

            function reject(value) {
                resume("throw", value);
            }

            function settle(f, v) {
                if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
            }
        };

        __asyncDelegator = function __asyncDelegator(o) {
            var i, p;
            return i = {}, verb("next"), verb("throw", function (e) {
                throw e;
            }), verb("return"), i[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] = function () {
                return this;
            }, i;

            function verb(n, f) {
                if (o[n]) i[n] = function (v) {
                    return (p = !p) ? {
                        value: _await(o[n](v)),
                        done: n === "return"
                    } : f ? f(v) : v;
                };
            }
        };

        __asyncValues = function __asyncValues(o) {
            if (!(typeof Symbol === "function" ? Symbol.asyncIterator : "@@asyncIterator")) throw new TypeError("Symbol.asyncIterator is not defined.");
            var m = o[typeof Symbol === "function" ? Symbol.asyncIterator : "@@asyncIterator"];
            return m ? m.call(o) : typeof __values === "function" ? __values(o) : o[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();
        };

        __makeTemplateObject = function __makeTemplateObject(cooked, raw) {
            if (Object.defineProperty) {
                Object.defineProperty(cooked, "raw", {
                    value: raw
                });
            } else {
                cooked.raw = raw;
            }

            return cooked;
        };

        __importStar = function __importStar(mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) {
                if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
            }
            result["default"] = mod;
            return result;
        };

        __importDefault = function __importDefault(mod) {
            return mod && mod.__esModule ? mod : {
                "default": mod
            };
        };

        exporter("__extends", __extends);
        exporter("__assign", __assign);
        exporter("__rest", __rest);
        exporter("__decorate", __decorate);
        exporter("__param", __param);
        exporter("__metadata", __metadata);
        exporter("__awaiter", __awaiter);
        exporter("__generator", __generator);
        exporter("__exportStar", __exportStar);
        exporter("__values", __values);
        exporter("__read", __read);
        exporter("__spread", __spread);
        exporter("__await", _await);
        exporter("__asyncGenerator", __asyncGenerator);
        exporter("__asyncDelegator", __asyncDelegator);
        exporter("__asyncValues", __asyncValues);
        exporter("__makeTemplateObject", __makeTemplateObject);
        exporter("__importStar", __importStar);
        exporter("__importDefault", __importDefault);
    });
},521,[],"node_modules\\tslib\\tslib.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var Hash = function () {
    function Hash() {
      this.blockSize = -1;
    }

    return Hash;
  }();

  exports.Hash = Hash;
},522,[],"node_modules\\@firebase\\util\\dist\\cjs\\src\\hash.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    function createSubscribe(executor, onNoObservers) {
        var proxy = new ObserverProxy(executor, onNoObservers);
        return proxy.subscribe.bind(proxy);
    }

    exports.createSubscribe = createSubscribe;

    var ObserverProxy = function () {
        function ObserverProxy(executor, onNoObservers) {
            var _this = this;

            this.observers = [];
            this.unsubscribes = [];
            this.observerCount = 0;
            this.task = Promise.resolve();
            this.finalized = false;
            this.onNoObservers = onNoObservers;
            this.task.then(function () {
                executor(_this);
            }).catch(function (e) {
                _this.error(e);
            });
        }

        ObserverProxy.prototype.next = function (value) {
            this.forEachObserver(function (observer) {
                observer.next(value);
            });
        };

        ObserverProxy.prototype.error = function (error) {
            this.forEachObserver(function (observer) {
                observer.error(error);
            });
            this.close(error);
        };

        ObserverProxy.prototype.complete = function () {
            this.forEachObserver(function (observer) {
                observer.complete();
            });
            this.close();
        };

        ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {
            var _this = this;

            var observer;

            if (nextOrObserver === undefined && error === undefined && complete === undefined) {
                throw new Error('Missing Observer.');
            }

            if (implementsAnyMethods(nextOrObserver, ['next', 'error', 'complete'])) {
                observer = nextOrObserver;
            } else {
                observer = {
                    next: nextOrObserver,
                    error: error,
                    complete: complete
                };
            }

            if (observer.next === undefined) {
                observer.next = noop;
            }

            if (observer.error === undefined) {
                observer.error = noop;
            }

            if (observer.complete === undefined) {
                observer.complete = noop;
            }

            var unsub = this.unsubscribeOne.bind(this, this.observers.length);

            if (this.finalized) {
                this.task.then(function () {
                    try {
                        if (_this.finalError) {
                            observer.error(_this.finalError);
                        } else {
                            observer.complete();
                        }
                    } catch (e) {}

                    return;
                });
            }

            this.observers.push(observer);
            return unsub;
        };

        ObserverProxy.prototype.unsubscribeOne = function (i) {
            if (this.observers === undefined || this.observers[i] === undefined) {
                return;
            }

            delete this.observers[i];
            this.observerCount -= 1;

            if (this.observerCount === 0 && this.onNoObservers !== undefined) {
                this.onNoObservers(this);
            }
        };

        ObserverProxy.prototype.forEachObserver = function (fn) {
            if (this.finalized) {
                return;
            }

            for (var i = 0; i < this.observers.length; i++) {
                this.sendOne(i, fn);
            }
        };

        ObserverProxy.prototype.sendOne = function (i, fn) {
            var _this = this;

            this.task.then(function () {
                if (_this.observers !== undefined && _this.observers[i] !== undefined) {
                    try {
                        fn(_this.observers[i]);
                    } catch (e) {
                        if (typeof console !== 'undefined' && console.error) {
                            console.error(e);
                        }
                    }
                }
            });
        };

        ObserverProxy.prototype.close = function (err) {
            var _this = this;

            if (this.finalized) {
                return;
            }

            this.finalized = true;

            if (err !== undefined) {
                this.finalError = err;
            }

            this.task.then(function () {
                _this.observers = undefined;
                _this.onNoObservers = undefined;
            });
        };

        return ObserverProxy;
    }();

    function async(fn, onError) {
        return function () {
            var args = [];

            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }

            Promise.resolve(true).then(function () {
                fn.apply(void 0, args);
            }).catch(function (error) {
                if (onError) {
                    onError(error);
                }
            });
        };
    }

    exports.async = async;

    function implementsAnyMethods(obj, methods) {
        if (typeof obj !== 'object' || obj === null) {
            return false;
        }

        for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
            var method = methods_1[_i];

            if (method in obj && typeof obj[method] === 'function') {
                return true;
            }
        }

        return false;
    }

    function noop() {}
},523,[],"node_modules\\@firebase\\util\\dist\\cjs\\src\\subscribe.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.validateArgCount = function (fnName, minCount, maxCount, argCount) {
        var argError;

        if (argCount < minCount) {
            argError = 'at least ' + minCount;
        } else if (argCount > maxCount) {
            argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;
        }

        if (argError) {
            var error = fnName + ' failed: Was called with ' + argCount + (argCount === 1 ? ' argument.' : ' arguments.') + ' Expects ' + argError + '.';
            throw new Error(error);
        }
    };

    function errorPrefix(fnName, argumentNumber, optional) {
        var argName = '';

        switch (argumentNumber) {
            case 1:
                argName = optional ? 'first' : 'First';
                break;

            case 2:
                argName = optional ? 'second' : 'Second';
                break;

            case 3:
                argName = optional ? 'third' : 'Third';
                break;

            case 4:
                argName = optional ? 'fourth' : 'Fourth';
                break;

            default:
                throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');
        }

        var error = fnName + ' failed: ';
        error += argName + ' argument ';
        return error;
    }

    exports.errorPrefix = errorPrefix;

    function validateNamespace(fnName, argumentNumber, namespace, optional) {
        if (optional && !namespace) return;

        if (typeof namespace !== 'string') {
            throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid firebase namespace.');
        }
    }

    exports.validateNamespace = validateNamespace;

    function validateCallback(fnName, argumentNumber, callback, optional) {
        if (optional && !callback) return;
        if (typeof callback !== 'function') throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid function.');
    }

    exports.validateCallback = validateCallback;

    function validateContextObject(fnName, argumentNumber, context, optional) {
        if (optional && !context) return;
        if (typeof context !== 'object' || context === null) throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid context object.');
    }

    exports.validateContextObject = validateContextObject;
},524,[],"node_modules\\@firebase\\util\\dist\\cjs\\src\\validation.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var assert_1 = _require(_dependencyMap[0], "./assert");

    exports.stringToByteArray = function (str) {
        var out = [],
            p = 0;

        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);

            if (c >= 0xd800 && c <= 0xdbff) {
                var high = c - 0xd800;
                i++;
                assert_1.assert(i < str.length, 'Surrogate pair missing trail surrogate.');
                var low = str.charCodeAt(i) - 0xdc00;
                c = 0x10000 + (high << 10) + low;
            }

            if (c < 128) {
                out[p++] = c;
            } else if (c < 2048) {
                out[p++] = c >> 6 | 192;
                out[p++] = c & 63 | 128;
            } else if (c < 65536) {
                out[p++] = c >> 12 | 224;
                out[p++] = c >> 6 & 63 | 128;
                out[p++] = c & 63 | 128;
            } else {
                out[p++] = c >> 18 | 240;
                out[p++] = c >> 12 & 63 | 128;
                out[p++] = c >> 6 & 63 | 128;
                out[p++] = c & 63 | 128;
            }
        }

        return out;
    };

    exports.stringLength = function (str) {
        var p = 0;

        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);

            if (c < 128) {
                p++;
            } else if (c < 2048) {
                p += 2;
            } else if (c >= 0xd800 && c <= 0xdbff) {
                p += 4;
                i++;
            } else {
                p += 3;
            }
        }

        return p;
    };
},525,[509],"node_modules\\@firebase\\util\\dist\\cjs\\src\\utf8.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  _require(_dependencyMap[0], '@firebase/auth');
},526,[527],"node_modules\\firebase\\auth\\index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  (function () {
    var firebase = _require(_dependencyMap[0], '@firebase/app').default;

    var g,
        aa = aa || {},
        k = this;

    function l(a) {
      return "string" == typeof a;
    }

    function ba(a) {
      return "boolean" == typeof a;
    }

    function ca() {}

    function da(a) {
      var b = typeof a;
      if ("object" == b) {
        if (a) {
          if (a instanceof Array) return "array";
          if (a instanceof Object) return b;
          var c = Object.prototype.toString.call(a);
          if ("[object Window]" == c) return "object";
          if ("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) return "array";
          if ("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) return "function";
        } else return "null";
      } else if ("function" == b && "undefined" == typeof a.call) return "object";
      return b;
    }

    function ea(a) {
      return null === a;
    }

    function fa(a) {
      return "array" == da(a);
    }

    function ha(a) {
      var b = da(a);
      return "array" == b || "object" == b && "number" == typeof a.length;
    }

    function n(a) {
      return "function" == da(a);
    }

    function q(a) {
      var b = typeof a;
      return "object" == b && null != a || "function" == b;
    }

    var ia = "closure_uid_" + (1E9 * Math.random() >>> 0),
        ja = 0;

    function ka(a, b, c) {
      return a.call.apply(a.bind, arguments);
    }

    function la(a, b, c) {
      if (!a) throw Error();

      if (2 < arguments.length) {
        var d = Array.prototype.slice.call(arguments, 2);
        return function () {
          var c = Array.prototype.slice.call(arguments);
          Array.prototype.unshift.apply(c, d);
          return a.apply(b, c);
        };
      }

      return function () {
        return a.apply(b, arguments);
      };
    }

    function r(a, b, c) {
      Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? r = ka : r = la;
      return r.apply(null, arguments);
    }

    function ma(a, b) {
      var c = Array.prototype.slice.call(arguments, 1);
      return function () {
        var b = c.slice();
        b.push.apply(b, arguments);
        return a.apply(this, b);
      };
    }

    var na = Date.now || function () {
      return +new Date();
    };

    function t(a, b) {
      function c() {}

      c.prototype = b.prototype;
      a.lb = b.prototype;
      a.prototype = new c();
      a.prototype.constructor = a;

      a.$c = function (a, c, f) {
        for (var d = Array(arguments.length - 2), e = 2; e < arguments.length; e++) {
          d[e - 2] = arguments[e];
        }

        return b.prototype[c].apply(a, d);
      };
    }

    ;

    function oa(a) {
      a.prototype.then = a.prototype.then;
      a.prototype.$goog_Thenable = !0;
    }

    function pa(a) {
      if (!a) return !1;

      try {
        return !!a.$goog_Thenable;
      } catch (b) {
        return !1;
      }
    }

    ;

    function u(a) {
      if (Error.captureStackTrace) Error.captureStackTrace(this, u);else {
        var b = Error().stack;
        b && (this.stack = b);
      }
      a && (this.message = String(a));
    }

    t(u, Error);
    u.prototype.name = "CustomError";

    function qa(a, b) {
      a = a.split("%s");

      for (var c = "", d = a.length - 1, e = 0; e < d; e++) {
        c += a[e] + (e < b.length ? b[e] : "%s");
      }

      u.call(this, c + a[d]);
    }

    t(qa, u);
    qa.prototype.name = "AssertionError";

    function ra(a, b) {
      throw new qa("Failure" + (a ? ": " + a : ""), Array.prototype.slice.call(arguments, 1));
    }

    ;

    function sa(a, b) {
      this.c = a;
      this.f = b;
      this.b = 0;
      this.a = null;
    }

    sa.prototype.get = function () {
      if (0 < this.b) {
        this.b--;
        var a = this.a;
        this.a = a.next;
        a.next = null;
      } else a = this.c();

      return a;
    };

    function ta(a, b) {
      a.f(b);
      100 > a.b && (a.b++, b.next = a.a, a.a = b);
    }

    ;

    function ua() {
      this.b = this.a = null;
    }

    var wa = new sa(function () {
      return new va();
    }, function (a) {
      a.reset();
    });

    ua.prototype.add = function (a, b) {
      var c = wa.get();
      c.set(a, b);
      this.b ? this.b.next = c : this.a = c;
      this.b = c;
    };

    function xa() {
      var a = ya,
          b = null;
      a.a && (b = a.a, a.a = a.a.next, a.a || (a.b = null), b.next = null);
      return b;
    }

    function va() {
      this.next = this.b = this.a = null;
    }

    va.prototype.set = function (a, b) {
      this.a = a;
      this.b = b;
      this.next = null;
    };

    va.prototype.reset = function () {
      this.next = this.b = this.a = null;
    };

    var za = Array.prototype.indexOf ? function (a, b) {
      return Array.prototype.indexOf.call(a, b, void 0);
    } : function (a, b) {
      if (l(a)) return l(b) && 1 == b.length ? a.indexOf(b, 0) : -1;

      for (var c = 0; c < a.length; c++) {
        if (c in a && a[c] === b) return c;
      }

      return -1;
    },
        v = Array.prototype.forEach ? function (a, b, c) {
      Array.prototype.forEach.call(a, b, c);
    } : function (a, b, c) {
      for (var d = a.length, e = l(a) ? a.split("") : a, f = 0; f < d; f++) {
        f in e && b.call(c, e[f], f, a);
      }
    };

    function Aa(a, b) {
      var c = a.length,
          d = l(a) ? a.split("") : a;

      for (--c; 0 <= c; --c) {
        c in d && b.call(void 0, d[c], c, a);
      }
    }

    var Ba = Array.prototype.map ? function (a, b) {
      return Array.prototype.map.call(a, b, void 0);
    } : function (a, b) {
      for (var c = a.length, d = Array(c), e = l(a) ? a.split("") : a, f = 0; f < c; f++) {
        f in e && (d[f] = b.call(void 0, e[f], f, a));
      }

      return d;
    },
        Ca = Array.prototype.some ? function (a, b) {
      return Array.prototype.some.call(a, b, void 0);
    } : function (a, b) {
      for (var c = a.length, d = l(a) ? a.split("") : a, e = 0; e < c; e++) {
        if (e in d && b.call(void 0, d[e], e, a)) return !0;
      }

      return !1;
    };

    function Da(a) {
      a: {
        var b = Ea;

        for (var c = a.length, d = l(a) ? a.split("") : a, e = 0; e < c; e++) {
          if (e in d && b.call(void 0, d[e], e, a)) {
            b = e;
            break a;
          }
        }

        b = -1;
      }

      return 0 > b ? null : l(a) ? a.charAt(b) : a[b];
    }

    function Fa(a, b) {
      return 0 <= za(a, b);
    }

    function Ga(a, b) {
      b = za(a, b);
      var c;
      (c = 0 <= b) && Array.prototype.splice.call(a, b, 1);
      return c;
    }

    function Ha(a, b) {
      var c = 0;
      Aa(a, function (d, e) {
        b.call(void 0, d, e, a) && 1 == Array.prototype.splice.call(a, e, 1).length && c++;
      });
    }

    function Ia(a) {
      return Array.prototype.concat.apply([], arguments);
    }

    function Ja(a) {
      var b = a.length;

      if (0 < b) {
        for (var c = Array(b), d = 0; d < b; d++) {
          c[d] = a[d];
        }

        return c;
      }

      return [];
    }

    ;

    function Ka(a, b) {
      for (var c = a.split("%s"), d = "", e = Array.prototype.slice.call(arguments, 1); e.length && 1 < c.length;) {
        d += c.shift() + e.shift();
      }

      return d + c.join("%s");
    }

    var La = String.prototype.trim ? function (a) {
      return a.trim();
    } : function (a) {
      return (/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]
      );
    };

    function Ma(a) {
      if (!Na.test(a)) return a;
      -1 != a.indexOf("&") && (a = a.replace(Oa, "&amp;"));
      -1 != a.indexOf("<") && (a = a.replace(Pa, "&lt;"));
      -1 != a.indexOf(">") && (a = a.replace(Qa, "&gt;"));
      -1 != a.indexOf('"') && (a = a.replace(Ra, "&quot;"));
      -1 != a.indexOf("'") && (a = a.replace(Sa, "&#39;"));
      -1 != a.indexOf("\x00") && (a = a.replace(Ta, "&#0;"));
      return a;
    }

    var Oa = /&/g,
        Pa = /</g,
        Qa = />/g,
        Ra = /"/g,
        Sa = /'/g,
        Ta = /\x00/g,
        Na = /[\x00&<>"']/;

    function w(a, b) {
      return -1 != a.indexOf(b);
    }

    function Ua(a, b) {
      return a < b ? -1 : a > b ? 1 : 0;
    }

    ;
    var Va;

    a: {
      var Wa = k.navigator;

      if (Wa) {
        var Xa = Wa.userAgent;

        if (Xa) {
          Va = Xa;
          break a;
        }
      }

      Va = "";
    }

    function x(a) {
      return w(Va, a);
    }

    ;

    function Ya(a, b) {
      for (var c in a) {
        b.call(void 0, a[c], c, a);
      }
    }

    function Za(a) {
      for (var b in a) {
        return !1;
      }

      return !0;
    }

    function $a(a) {
      var b = {},
          c;

      for (c in a) {
        b[c] = a[c];
      }

      return b;
    }

    var ab = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");

    function bb(a, b) {
      for (var c, d, e = 1; e < arguments.length; e++) {
        d = arguments[e];

        for (c in d) {
          a[c] = d[c];
        }

        for (var f = 0; f < ab.length; f++) {
          c = ab[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
        }
      }
    }

    ;

    function cb(a) {
      k.setTimeout(function () {
        throw a;
      }, 0);
    }

    var db;

    function eb() {
      var a = k.MessageChannel;
      "undefined" === typeof a && "undefined" !== typeof window && window.postMessage && window.addEventListener && !x("Presto") && (a = function a() {
        var a = document.createElement("IFRAME");
        a.style.display = "none";
        a.src = "";
        document.documentElement.appendChild(a);
        var b = a.contentWindow;
        a = b.document;
        a.open();
        a.write("");
        a.close();
        var c = "callImmediate" + Math.random(),
            d = "file:" == b.location.protocol ? "*" : b.location.protocol + "//" + b.location.host;
        a = r(function (a) {
          if (("*" == d || a.origin == d) && a.data == c) this.port1.onmessage();
        }, this);
        b.addEventListener("message", a, !1);
        this.port1 = {};
        this.port2 = {
          postMessage: function postMessage() {
            b.postMessage(c, d);
          }
        };
      });

      if ("undefined" !== typeof a && !x("Trident") && !x("MSIE")) {
        var b = new a(),
            c = {},
            d = c;

        b.port1.onmessage = function () {
          if (void 0 !== c.next) {
            c = c.next;
            var a = c.rb;
            c.rb = null;
            a();
          }
        };

        return function (a) {
          d.next = {
            rb: a
          };
          d = d.next;
          b.port2.postMessage(0);
        };
      }

      return "undefined" !== typeof document && "onreadystatechange" in document.createElement("SCRIPT") ? function (a) {
        var b = document.createElement("SCRIPT");

        b.onreadystatechange = function () {
          b.onreadystatechange = null;
          b.parentNode.removeChild(b);
          b = null;
          a();
          a = null;
        };

        document.documentElement.appendChild(b);
      } : function (a) {
        k.setTimeout(a, 0);
      };
    }

    ;

    function fb(a, b) {
      gb || hb();
      ib || (gb(), ib = !0);
      ya.add(a, b);
    }

    var gb;

    function hb() {
      if (-1 != String(k.Promise).indexOf("[native code]")) {
        var a = k.Promise.resolve(void 0);

        gb = function gb() {
          a.then(jb);
        };
      } else gb = function gb() {
        var a = jb;
        !n(k.setImmediate) || k.Window && k.Window.prototype && !x("Edge") && k.Window.prototype.setImmediate == k.setImmediate ? (db || (db = eb()), db(a)) : k.setImmediate(a);
      };
    }

    var ib = !1,
        ya = new ua();

    function jb() {
      for (var a; a = xa();) {
        try {
          a.a.call(a.b);
        } catch (b) {
          cb(b);
        }

        ta(wa, a);
      }

      ib = !1;
    }

    ;

    function y(a, b) {
      this.a = kb;
      this.i = void 0;
      this.f = this.b = this.c = null;
      this.g = this.h = !1;
      if (a != ca) try {
        var c = this;
        a.call(b, function (a) {
          lb(c, mb, a);
        }, function (a) {
          if (!(a instanceof nb)) try {
            if (a instanceof Error) throw a;
            throw Error("Promise rejected.");
          } catch (e) {}
          lb(c, ob, a);
        });
      } catch (d) {
        lb(this, ob, d);
      }
    }

    var kb = 0,
        mb = 2,
        ob = 3;

    function pb() {
      this.next = this.f = this.b = this.g = this.a = null;
      this.c = !1;
    }

    pb.prototype.reset = function () {
      this.f = this.b = this.g = this.a = null;
      this.c = !1;
    };

    var qb = new sa(function () {
      return new pb();
    }, function (a) {
      a.reset();
    });

    function rb(a, b, c) {
      var d = qb.get();
      d.g = a;
      d.b = b;
      d.f = c;
      return d;
    }

    function z(a) {
      if (a instanceof y) return a;
      var b = new y(ca);
      lb(b, mb, a);
      return b;
    }

    function A(a) {
      return new y(function (b, c) {
        c(a);
      });
    }

    function sb(a, b, c) {
      tb(a, b, c, null) || fb(ma(b, a));
    }

    function ub(a) {
      return new y(function (b, c) {
        var d = a.length,
            e = [];
        if (d) for (var f = function f(a, c) {
          d--;
          e[a] = c;
          0 == d && b(e);
        }, h = function h(a) {
          c(a);
        }, m = 0, p; m < a.length; m++) {
          p = a[m], sb(p, ma(f, m), h);
        } else b(e);
      });
    }

    function vb(a) {
      return new y(function (b) {
        var c = a.length,
            d = [];
        if (c) for (var e = function e(a, _e, f) {
          c--;
          d[a] = _e ? {
            Zb: !0,
            value: f
          } : {
            Zb: !1,
            reason: f
          };
          0 == c && b(d);
        }, f = 0, h; f < a.length; f++) {
          h = a[f], sb(h, ma(e, f, !0), ma(e, f, !1));
        } else b(d);
      });
    }

    y.prototype.then = function (a, b, c) {
      return wb(this, n(a) ? a : null, n(b) ? b : null, c);
    };

    oa(y);
    g = y.prototype;

    g.ga = function (a, b) {
      a = rb(a, a, b);
      a.c = !0;
      xb(this, a);
      return this;
    };

    g.o = function (a, b) {
      return wb(this, null, a, b);
    };

    g.cancel = function (a) {
      this.a == kb && fb(function () {
        var b = new nb(a);
        yb(this, b);
      }, this);
    };

    function yb(a, b) {
      if (a.a == kb) if (a.c) {
        var c = a.c;

        if (c.b) {
          for (var d = 0, e = null, f = null, h = c.b; h && (h.c || (d++, h.a == a && (e = h), !(e && 1 < d))); h = h.next) {
            e || (f = h);
          }

          e && (c.a == kb && 1 == d ? yb(c, b) : (f ? (d = f, d.next == c.f && (c.f = d), d.next = d.next.next) : zb(c), Ab(c, e, ob, b)));
        }

        a.c = null;
      } else lb(a, ob, b);
    }

    function xb(a, b) {
      a.b || a.a != mb && a.a != ob || Bb(a);
      a.f ? a.f.next = b : a.b = b;
      a.f = b;
    }

    function wb(a, b, c, d) {
      var e = rb(null, null, null);
      e.a = new y(function (a, h) {
        e.g = b ? function (c) {
          try {
            var e = b.call(d, c);
            a(e);
          } catch (E) {
            h(E);
          }
        } : a;
        e.b = c ? function (b) {
          try {
            var e = c.call(d, b);
            void 0 === e && b instanceof nb ? h(b) : a(e);
          } catch (E) {
            h(E);
          }
        } : h;
      });
      e.a.c = a;
      xb(a, e);
      return e.a;
    }

    g.Jc = function (a) {
      this.a = kb;
      lb(this, mb, a);
    };

    g.Kc = function (a) {
      this.a = kb;
      lb(this, ob, a);
    };

    function lb(a, b, c) {
      a.a == kb && (a === c && (b = ob, c = new TypeError("Promise cannot resolve to itself")), a.a = 1, tb(c, a.Jc, a.Kc, a) || (a.i = c, a.a = b, a.c = null, Bb(a), b != ob || c instanceof nb || Cb(a, c)));
    }

    function tb(a, b, c, d) {
      if (a instanceof y) return xb(a, rb(b || ca, c || null, d)), !0;
      if (pa(a)) return a.then(b, c, d), !0;
      if (q(a)) try {
        var e = a.then;
        if (n(e)) return Db(a, e, b, c, d), !0;
      } catch (f) {
        return c.call(d, f), !0;
      }
      return !1;
    }

    function Db(a, b, c, d, e) {
      function f(a) {
        m || (m = !0, d.call(e, a));
      }

      function h(a) {
        m || (m = !0, c.call(e, a));
      }

      var m = !1;

      try {
        b.call(a, h, f);
      } catch (p) {
        f(p);
      }
    }

    function Bb(a) {
      a.h || (a.h = !0, fb(a.Ub, a));
    }

    function zb(a) {
      var b = null;
      a.b && (b = a.b, a.b = b.next, b.next = null);
      a.b || (a.f = null);
      return b;
    }

    g.Ub = function () {
      for (var a; a = zb(this);) {
        Ab(this, a, this.a, this.i);
      }

      this.h = !1;
    };

    function Ab(a, b, c, d) {
      if (c == ob && b.b && !b.c) for (; a && a.g; a = a.c) {
        a.g = !1;
      }
      if (b.a) b.a.c = null, Eb(b, c, d);else try {
        b.c ? b.g.call(b.f) : Eb(b, c, d);
      } catch (e) {
        Fb.call(null, e);
      }
      ta(qb, b);
    }

    function Eb(a, b, c) {
      b == mb ? a.g.call(a.f, c) : a.b && a.b.call(a.f, c);
    }

    function Cb(a, b) {
      a.g = !0;
      fb(function () {
        a.g && Fb.call(null, b);
      });
    }

    var Fb = cb;

    function nb(a) {
      u.call(this, a);
    }

    t(nb, u);
    nb.prototype.name = "cancel";

    function Gb() {
      0 != Hb && (Ib[this[ia] || (this[ia] = ++ja)] = this);
      this.pa = this.pa;
      this.oa = this.oa;
    }

    var Hb = 0,
        Ib = {};
    Gb.prototype.pa = !1;

    function Jb(a) {
      if (!a.pa && (a.pa = !0, a.ua(), 0 != Hb)) {
        var b = a[ia] || (a[ia] = ++ja);
        if (0 != Hb && a.oa && 0 < a.oa.length) throw Error(a + " did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");
        delete Ib[b];
      }
    }

    Gb.prototype.ua = function () {
      if (this.oa) for (; this.oa.length;) {
        this.oa.shift()();
      }
    };

    function Kb(a) {
      Kb[" "](a);
      return a;
    }

    Kb[" "] = ca;

    function Lb(a, b) {
      var c = Mb;
      return Object.prototype.hasOwnProperty.call(c, a) ? c[a] : c[a] = b(a);
    }

    ;
    var Nb = x("Opera"),
        B = x("Trident") || x("MSIE"),
        Ob = x("Edge"),
        Pb = Ob || B,
        Qb = x("Gecko") && !(w(Va.toLowerCase(), "webkit") && !x("Edge")) && !(x("Trident") || x("MSIE")) && !x("Edge"),
        Rb = w(Va.toLowerCase(), "webkit") && !x("Edge");

    function Sb() {
      var a = k.document;
      return a ? a.documentMode : void 0;
    }

    var Tb;

    a: {
      var Ub = "",
          Vb = function () {
        var a = Va;
        if (Qb) return (/rv:([^\);]+)(\)|;)/.exec(a)
        );
        if (Ob) return (/Edge\/([\d\.]+)/.exec(a)
        );
        if (B) return (/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a)
        );
        if (Rb) return (/WebKit\/(\S+)/.exec(a)
        );
        if (Nb) return (/(?:Version)[ \/]?(\S+)/.exec(a)
        );
      }();

      Vb && (Ub = Vb ? Vb[1] : "");

      if (B) {
        var Wb = Sb();

        if (null != Wb && Wb > parseFloat(Ub)) {
          Tb = String(Wb);
          break a;
        }
      }

      Tb = Ub;
    }

    var Mb = {};

    function Xb(a) {
      return Lb(a, function () {
        for (var b = 0, c = La(String(Tb)).split("."), d = La(String(a)).split("."), e = Math.max(c.length, d.length), f = 0; 0 == b && f < e; f++) {
          var h = c[f] || "",
              m = d[f] || "";

          do {
            h = /(\d*)(\D*)(.*)/.exec(h) || ["", "", "", ""];
            m = /(\d*)(\D*)(.*)/.exec(m) || ["", "", "", ""];
            if (0 == h[0].length && 0 == m[0].length) break;
            b = Ua(0 == h[1].length ? 0 : parseInt(h[1], 10), 0 == m[1].length ? 0 : parseInt(m[1], 10)) || Ua(0 == h[2].length, 0 == m[2].length) || Ua(h[2], m[2]);
            h = h[3];
            m = m[3];
          } while (0 == b);
        }

        return 0 <= b;
      });
    }

    var Yb;
    var Zb = k.document;
    Yb = Zb && B ? Sb() || ("CSS1Compat" == Zb.compatMode ? parseInt(Tb, 10) : 5) : void 0;

    var $b = Object.freeze || function (a) {
      return a;
    };

    var ac = !B || 9 <= Number(Yb),
        bc = B && !Xb("9"),
        cc = function () {
      if (!k.addEventListener || !Object.defineProperty) return !1;
      var a = !1,
          b = Object.defineProperty({}, "passive", {
        get: function get() {
          a = !0;
        }
      });
      k.addEventListener("test", ca, b);
      k.removeEventListener("test", ca, b);
      return a;
    }();

    function C(a, b) {
      this.type = a;
      this.b = this.target = b;
      this.Eb = !0;
    }

    C.prototype.c = function () {
      this.Eb = !1;
    };

    function dc(a, b) {
      C.call(this, a ? a.type : "");
      this.relatedTarget = this.b = this.target = null;
      this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
      this.key = "";
      this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1;
      this.pointerId = 0;
      this.pointerType = "";
      this.a = null;

      if (a) {
        var c = this.type = a.type,
            d = a.changedTouches ? a.changedTouches[0] : null;
        this.target = a.target || a.srcElement;
        this.b = b;

        if (b = a.relatedTarget) {
          if (Qb) {
            a: {
              try {
                Kb(b.nodeName);
                var e = !0;
                break a;
              } catch (f) {}

              e = !1;
            }

            e || (b = null);
          }
        } else "mouseover" == c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);

        this.relatedTarget = b;
        null === d ? (this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0) : (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0);
        this.button = a.button;
        this.key = a.key || "";
        this.ctrlKey = a.ctrlKey;
        this.altKey = a.altKey;
        this.shiftKey = a.shiftKey;
        this.metaKey = a.metaKey;
        this.pointerId = a.pointerId || 0;
        this.pointerType = l(a.pointerType) ? a.pointerType : ec[a.pointerType] || "";
        this.a = a;
        a.defaultPrevented && this.c();
      }
    }

    t(dc, C);
    var ec = $b({
      2: "touch",
      3: "pen",
      4: "mouse"
    });

    dc.prototype.c = function () {
      dc.lb.c.call(this);
      var a = this.a;
      if (a.preventDefault) a.preventDefault();else if (a.returnValue = !1, bc) try {
        if (a.ctrlKey || 112 <= a.keyCode && 123 >= a.keyCode) a.keyCode = -1;
      } catch (b) {}
    };

    dc.prototype.g = function () {
      return this.a;
    };

    var fc = "closure_listenable_" + (1E6 * Math.random() | 0),
        hc = 0;

    function ic(a, b, c, d, e) {
      this.listener = a;
      this.proxy = null;
      this.src = b;
      this.type = c;
      this.capture = !!d;
      this.La = e;
      this.key = ++hc;
      this.ma = this.Ha = !1;
    }

    function jc(a) {
      a.ma = !0;
      a.listener = null;
      a.proxy = null;
      a.src = null;
      a.La = null;
    }

    ;

    function kc(a) {
      this.src = a;
      this.a = {};
      this.b = 0;
    }

    kc.prototype.add = function (a, b, c, d, e) {
      var f = a.toString();
      a = this.a[f];
      a || (a = this.a[f] = [], this.b++);
      var h = lc(a, b, d, e);
      -1 < h ? (b = a[h], c || (b.Ha = !1)) : (b = new ic(b, this.src, f, !!d, e), b.Ha = c, a.push(b));
      return b;
    };

    function mc(a, b) {
      var c = b.type;
      c in a.a && Ga(a.a[c], b) && (jc(b), 0 == a.a[c].length && (delete a.a[c], a.b--));
    }

    function lc(a, b, c, d) {
      for (var e = 0; e < a.length; ++e) {
        var f = a[e];
        if (!f.ma && f.listener == b && f.capture == !!c && f.La == d) return e;
      }

      return -1;
    }

    ;
    var nc = "closure_lm_" + (1E6 * Math.random() | 0),
        oc = {},
        pc = 0;

    function qc(a, b, c, d, e) {
      if (d && d.once) rc(a, b, c, d, e);else if (fa(b)) for (var f = 0; f < b.length; f++) {
        qc(a, b[f], c, d, e);
      } else c = sc(c), a && a[fc] ? tc(a, b, c, q(d) ? !!d.capture : !!d, e) : uc(a, b, c, !1, d, e);
    }

    function uc(a, b, c, d, e, f) {
      if (!b) throw Error("Invalid event type");
      var h = q(e) ? !!e.capture : !!e,
          m = vc(a);
      m || (a[nc] = m = new kc(a));
      c = m.add(b, c, d, h, f);

      if (!c.proxy) {
        d = wc();
        c.proxy = d;
        d.src = a;
        d.listener = c;
        if (a.addEventListener) cc || (e = h), void 0 === e && (e = !1), a.addEventListener(b.toString(), d, e);else if (a.attachEvent) a.attachEvent(xc(b.toString()), d);else if (a.addListener && a.removeListener) a.addListener(d);else throw Error("addEventListener and attachEvent are unavailable.");
        pc++;
      }
    }

    function wc() {
      var a = yc,
          b = ac ? function (c) {
        return a.call(b.src, b.listener, c);
      } : function (c) {
        c = a.call(b.src, b.listener, c);
        if (!c) return c;
      };
      return b;
    }

    function rc(a, b, c, d, e) {
      if (fa(b)) for (var f = 0; f < b.length; f++) {
        rc(a, b[f], c, d, e);
      } else c = sc(c), a && a[fc] ? zc(a, b, c, q(d) ? !!d.capture : !!d, e) : uc(a, b, c, !0, d, e);
    }

    function D(a, b, c, d, e) {
      if (fa(b)) for (var f = 0; f < b.length; f++) {
        D(a, b[f], c, d, e);
      } else (d = q(d) ? !!d.capture : !!d, c = sc(c), a && a[fc]) ? (a = a.u, b = String(b).toString(), b in a.a && (f = a.a[b], c = lc(f, c, d, e), -1 < c && (jc(f[c]), Array.prototype.splice.call(f, c, 1), 0 == f.length && (delete a.a[b], a.b--)))) : a && (a = vc(a)) && (b = a.a[b.toString()], a = -1, b && (a = lc(b, c, d, e)), (c = -1 < a ? b[a] : null) && Ac(c));
    }

    function Ac(a) {
      if ("number" != typeof a && a && !a.ma) {
        var b = a.src;
        if (b && b[fc]) mc(b.u, a);else {
          var c = a.type,
              d = a.proxy;
          b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(xc(c), d) : b.addListener && b.removeListener && b.removeListener(d);
          pc--;
          (c = vc(b)) ? (mc(c, a), 0 == c.b && (c.src = null, b[nc] = null)) : jc(a);
        }
      }
    }

    function xc(a) {
      return a in oc ? oc[a] : oc[a] = "on" + a;
    }

    function Bc(a, b, c, d) {
      var e = !0;
      if (a = vc(a)) if (b = a.a[b.toString()]) for (b = b.concat(), a = 0; a < b.length; a++) {
        var f = b[a];
        f && f.capture == c && !f.ma && (f = Cc(f, d), e = e && !1 !== f);
      }
      return e;
    }

    function Cc(a, b) {
      var c = a.listener,
          d = a.La || a.src;
      a.Ha && Ac(a);
      return c.call(d, b);
    }

    function yc(a, b) {
      if (a.ma) return !0;

      if (!ac) {
        if (!b) a: {
          b = ["window", "event"];

          for (var c = k, d = 0; d < b.length; d++) {
            if (c = c[b[d]], null == c) {
              b = null;
              break a;
            }
          }

          b = c;
        }
        d = b;
        b = new dc(d, this);
        c = !0;

        if (!(0 > d.keyCode || void 0 != d.returnValue)) {
          a: {
            var e = !1;
            if (0 == d.keyCode) try {
              d.keyCode = -1;
              break a;
            } catch (h) {
              e = !0;
            }
            if (e || void 0 == d.returnValue) d.returnValue = !0;
          }

          d = [];

          for (e = b.b; e; e = e.parentNode) {
            d.push(e);
          }

          a = a.type;

          for (e = d.length - 1; 0 <= e; e--) {
            b.b = d[e];
            var f = Bc(d[e], a, !0, b);
            c = c && f;
          }

          for (e = 0; e < d.length; e++) {
            b.b = d[e], f = Bc(d[e], a, !1, b), c = c && f;
          }
        }

        return c;
      }

      return Cc(a, new dc(b, this));
    }

    function vc(a) {
      a = a[nc];
      return a instanceof kc ? a : null;
    }

    var Dc = "__closure_events_fn_" + (1E9 * Math.random() >>> 0);

    function sc(a) {
      if (n(a)) return a;
      a[Dc] || (a[Dc] = function (b) {
        return a.handleEvent(b);
      });
      return a[Dc];
    }

    ;

    function F() {
      Gb.call(this);
      this.u = new kc(this);
      this.Mb = this;
      this.Ta = null;
    }

    t(F, Gb);
    F.prototype[fc] = !0;

    F.prototype.addEventListener = function (a, b, c, d) {
      qc(this, a, b, c, d);
    };

    F.prototype.removeEventListener = function (a, b, c, d) {
      D(this, a, b, c, d);
    };

    F.prototype.dispatchEvent = function (a) {
      var b,
          c = this.Ta;
      if (c) for (b = []; c; c = c.Ta) {
        b.push(c);
      }
      c = this.Mb;
      var d = a.type || a;
      if (l(a)) a = new C(a, c);else if (a instanceof C) a.target = a.target || c;else {
        var e = a;
        a = new C(d, c);
        bb(a, e);
      }
      e = !0;
      if (b) for (var f = b.length - 1; 0 <= f; f--) {
        var h = a.b = b[f];
        e = Ec(h, d, !0, a) && e;
      }
      h = a.b = c;
      e = Ec(h, d, !0, a) && e;
      e = Ec(h, d, !1, a) && e;
      if (b) for (f = 0; f < b.length; f++) {
        h = a.b = b[f], e = Ec(h, d, !1, a) && e;
      }
      return e;
    };

    F.prototype.ua = function () {
      F.lb.ua.call(this);

      if (this.u) {
        var a = this.u,
            b = 0,
            c;

        for (c in a.a) {
          for (var d = a.a[c], e = 0; e < d.length; e++) {
            ++b, jc(d[e]);
          }

          delete a.a[c];
          a.b--;
        }
      }

      this.Ta = null;
    };

    function tc(a, b, c, d, e) {
      a.u.add(String(b), c, !1, d, e);
    }

    function zc(a, b, c, d, e) {
      a.u.add(String(b), c, !0, d, e);
    }

    function Ec(a, b, c, d) {
      b = a.u.a[String(b)];
      if (!b) return !0;
      b = b.concat();

      for (var e = !0, f = 0; f < b.length; ++f) {
        var h = b[f];

        if (h && !h.ma && h.capture == c) {
          var m = h.listener,
              p = h.La || h.src;
          h.Ha && mc(a.u, h);
          e = !1 !== m.call(p, d) && e;
        }
      }

      return e && 0 != d.Eb;
    }

    ;

    function Fc(a, b, c) {
      if (n(a)) c && (a = r(a, c));else if (a && "function" == typeof a.handleEvent) a = r(a.handleEvent, a);else throw Error("Invalid listener argument");
      return 2147483647 < Number(b) ? -1 : k.setTimeout(a, b || 0);
    }

    function Gc(a) {
      var b = null;
      return new y(function (c, d) {
        b = Fc(function () {
          c(void 0);
        }, a);
        -1 == b && d(Error("Failed to schedule timer."));
      }).o(function (a) {
        k.clearTimeout(b);
        throw a;
      });
    }

    ;

    function Ic(a) {
      if (a.R && "function" == typeof a.R) return a.R();
      if (l(a)) return a.split("");

      if (ha(a)) {
        for (var b = [], c = a.length, d = 0; d < c; d++) {
          b.push(a[d]);
        }

        return b;
      }

      b = [];
      c = 0;

      for (d in a) {
        b[c++] = a[d];
      }

      return b;
    }

    function Jc(a) {
      if (a.T && "function" == typeof a.T) return a.T();

      if (!a.R || "function" != typeof a.R) {
        if (ha(a) || l(a)) {
          var b = [];
          a = a.length;

          for (var c = 0; c < a; c++) {
            b.push(c);
          }

          return b;
        }

        b = [];
        c = 0;

        for (var d in a) {
          b[c++] = d;
        }

        return b;
      }
    }

    function Kc(a, b) {
      if (a.forEach && "function" == typeof a.forEach) a.forEach(b, void 0);else if (ha(a) || l(a)) v(a, b, void 0);else for (var c = Jc(a), d = Ic(a), e = d.length, f = 0; f < e; f++) {
        b.call(void 0, d[f], c && c[f], a);
      }
    }

    ;

    function Lc(a, b) {
      this.b = {};
      this.a = [];
      this.c = 0;
      var c = arguments.length;

      if (1 < c) {
        if (c % 2) throw Error("Uneven number of arguments");

        for (var d = 0; d < c; d += 2) {
          this.set(arguments[d], arguments[d + 1]);
        }
      } else if (a) if (a instanceof Lc) for (c = a.T(), d = 0; d < c.length; d++) {
        this.set(c[d], a.get(c[d]));
      } else for (d in a) {
        this.set(d, a[d]);
      }
    }

    g = Lc.prototype;

    g.R = function () {
      Mc(this);

      for (var a = [], b = 0; b < this.a.length; b++) {
        a.push(this.b[this.a[b]]);
      }

      return a;
    };

    g.T = function () {
      Mc(this);
      return this.a.concat();
    };

    g.clear = function () {
      this.b = {};
      this.c = this.a.length = 0;
    };

    function Mc(a) {
      if (a.c != a.a.length) {
        for (var b = 0, c = 0; b < a.a.length;) {
          var d = a.a[b];
          Nc(a.b, d) && (a.a[c++] = d);
          b++;
        }

        a.a.length = c;
      }

      if (a.c != a.a.length) {
        var e = {};

        for (c = b = 0; b < a.a.length;) {
          d = a.a[b], Nc(e, d) || (a.a[c++] = d, e[d] = 1), b++;
        }

        a.a.length = c;
      }
    }

    g.get = function (a, b) {
      return Nc(this.b, a) ? this.b[a] : b;
    };

    g.set = function (a, b) {
      Nc(this.b, a) || (this.c++, this.a.push(a));
      this.b[a] = b;
    };

    g.forEach = function (a, b) {
      for (var c = this.T(), d = 0; d < c.length; d++) {
        var e = c[d],
            f = this.get(e);
        a.call(b, f, e, this);
      }
    };

    function Nc(a, b) {
      return Object.prototype.hasOwnProperty.call(a, b);
    }

    ;
    var Oc = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;

    function Pc(a, b) {
      if (a) {
        a = a.split("&");

        for (var c = 0; c < a.length; c++) {
          var d = a[c].indexOf("="),
              e = null;

          if (0 <= d) {
            var f = a[c].substring(0, d);
            e = a[c].substring(d + 1);
          } else f = a[c];

          b(f, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
        }
      }
    }

    ;

    function Qc(a, b) {
      this.b = this.l = this.c = "";
      this.i = null;
      this.h = this.g = "";
      this.f = !1;

      if (a instanceof Qc) {
        this.f = void 0 !== b ? b : a.f;
        Rc(this, a.c);
        this.l = a.l;
        this.b = a.b;
        Sc(this, a.i);
        this.g = a.g;
        b = a.a;
        var c = new Tc();
        c.c = b.c;
        b.a && (c.a = new Lc(b.a), c.b = b.b);
        Uc(this, c);
        this.h = a.h;
      } else a && (c = String(a).match(Oc)) ? (this.f = !!b, Rc(this, c[1] || "", !0), this.l = Vc(c[2] || ""), this.b = Vc(c[3] || "", !0), Sc(this, c[4]), this.g = Vc(c[5] || "", !0), Uc(this, c[6] || "", !0), this.h = Vc(c[7] || "")) : (this.f = !!b, this.a = new Tc(null, this.f));
    }

    Qc.prototype.toString = function () {
      var a = [],
          b = this.c;
      b && a.push(Wc(b, Xc, !0), ":");
      var c = this.b;
      if (c || "file" == b) a.push("//"), (b = this.l) && a.push(Wc(b, Xc, !0), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.i, null != c && a.push(":", String(c));
      if (c = this.g) this.b && "/" != c.charAt(0) && a.push("/"), a.push(Wc(c, "/" == c.charAt(0) ? Yc : Zc, !0));
      (c = this.a.toString()) && a.push("?", c);
      (c = this.h) && a.push("#", Wc(c, $c));
      return a.join("");
    };

    function Rc(a, b, c) {
      a.c = c ? Vc(b, !0) : b;
      a.c && (a.c = a.c.replace(/:$/, ""));
    }

    function Sc(a, b) {
      if (b) {
        b = Number(b);
        if (isNaN(b) || 0 > b) throw Error("Bad port number " + b);
        a.i = b;
      } else a.i = null;
    }

    function Uc(a, b, c) {
      b instanceof Tc ? (a.a = b, ad(a.a, a.f)) : (c || (b = Wc(b, bd)), a.a = new Tc(b, a.f));
    }

    function G(a, b, c) {
      a.a.set(b, c);
    }

    function cd(a, b) {
      return a.a.get(b);
    }

    function dd(a) {
      return a instanceof Qc ? new Qc(a) : new Qc(a, void 0);
    }

    function ed(a, b) {
      var c = new Qc(null, void 0);
      Rc(c, "https");
      a && (c.b = a);
      b && (c.g = b);
      return c;
    }

    function Vc(a, b) {
      return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";
    }

    function Wc(a, b, c) {
      return l(a) ? (a = encodeURI(a).replace(b, fd), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;
    }

    function fd(a) {
      a = a.charCodeAt(0);
      return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);
    }

    var Xc = /[#\/\?@]/g,
        Zc = /[#\?:]/g,
        Yc = /[#\?]/g,
        bd = /[#\?@]/g,
        $c = /#/g;

    function Tc(a, b) {
      this.b = this.a = null;
      this.c = a || null;
      this.f = !!b;
    }

    function gd(a) {
      a.a || (a.a = new Lc(), a.b = 0, a.c && Pc(a.c, function (b, c) {
        a.add(decodeURIComponent(b.replace(/\+/g, " ")), c);
      }));
    }

    function hd(a) {
      var b = Jc(a);
      if ("undefined" == typeof b) throw Error("Keys are undefined");
      var c = new Tc(null, void 0);
      a = Ic(a);

      for (var d = 0; d < b.length; d++) {
        var e = b[d],
            f = a[d];
        fa(f) ? id(c, e, f) : c.add(e, f);
      }

      return c;
    }

    g = Tc.prototype;

    g.add = function (a, b) {
      gd(this);
      this.c = null;
      a = jd(this, a);
      var c = this.a.get(a);
      c || this.a.set(a, c = []);
      c.push(b);
      this.b += 1;
      return this;
    };

    function kd(a, b) {
      gd(a);
      b = jd(a, b);
      Nc(a.a.b, b) && (a.c = null, a.b -= a.a.get(b).length, a = a.a, Nc(a.b, b) && (delete a.b[b], a.c--, a.a.length > 2 * a.c && Mc(a)));
    }

    g.clear = function () {
      this.a = this.c = null;
      this.b = 0;
    };

    function ld(a, b) {
      gd(a);
      b = jd(a, b);
      return Nc(a.a.b, b);
    }

    g.forEach = function (a, b) {
      gd(this);
      this.a.forEach(function (c, d) {
        v(c, function (c) {
          a.call(b, c, d, this);
        }, this);
      }, this);
    };

    g.T = function () {
      gd(this);

      for (var a = this.a.R(), b = this.a.T(), c = [], d = 0; d < b.length; d++) {
        for (var e = a[d], f = 0; f < e.length; f++) {
          c.push(b[d]);
        }
      }

      return c;
    };

    g.R = function (a) {
      gd(this);
      var b = [];
      if (l(a)) ld(this, a) && (b = Ia(b, this.a.get(jd(this, a))));else {
        a = this.a.R();

        for (var c = 0; c < a.length; c++) {
          b = Ia(b, a[c]);
        }
      }
      return b;
    };

    g.set = function (a, b) {
      gd(this);
      this.c = null;
      a = jd(this, a);
      ld(this, a) && (this.b -= this.a.get(a).length);
      this.a.set(a, [b]);
      this.b += 1;
      return this;
    };

    g.get = function (a, b) {
      a = a ? this.R(a) : [];
      return 0 < a.length ? String(a[0]) : b;
    };

    function id(a, b, c) {
      kd(a, b);
      0 < c.length && (a.c = null, a.a.set(jd(a, b), Ja(c)), a.b += c.length);
    }

    g.toString = function () {
      if (this.c) return this.c;
      if (!this.a) return "";

      for (var a = [], b = this.a.T(), c = 0; c < b.length; c++) {
        var d = b[c],
            e = encodeURIComponent(String(d));
        d = this.R(d);

        for (var f = 0; f < d.length; f++) {
          var h = e;
          "" !== d[f] && (h += "=" + encodeURIComponent(String(d[f])));
          a.push(h);
        }
      }

      return this.c = a.join("&");
    };

    function jd(a, b) {
      b = String(b);
      a.f && (b = b.toLowerCase());
      return b;
    }

    function ad(a, b) {
      b && !a.f && (gd(a), a.c = null, a.a.forEach(function (a, b) {
        var c = b.toLowerCase();
        b != c && (kd(this, b), id(this, c, a));
      }, a));
      a.f = b;
    }

    ;
    var md = !B || 9 <= Number(Yb);

    function nd() {
      this.a = "";
      this.b = od;
    }

    nd.prototype.la = !0;

    nd.prototype.ja = function () {
      return this.a;
    };

    nd.prototype.toString = function () {
      return "Const{" + this.a + "}";
    };

    function pd(a) {
      if (a instanceof nd && a.constructor === nd && a.b === od) return a.a;
      ra("expected object of type Const, got '" + a + "'");
      return "type_error:Const";
    }

    var od = {};

    function qd(a) {
      var b = new nd();
      b.a = a;
      return b;
    }

    qd("");

    function rd() {
      this.a = "";
      this.b = sd;
    }

    rd.prototype.la = !0;

    rd.prototype.ja = function () {
      return this.a;
    };

    rd.prototype.toString = function () {
      return "TrustedResourceUrl{" + this.a + "}";
    };

    function td(a) {
      if (a instanceof rd && a.constructor === rd && a.b === sd) return a.a;
      ra("expected object of type TrustedResourceUrl, got '" + a + "' of type " + da(a));
      return "type_error:TrustedResourceUrl";
    }

    function ud(a, b) {
      var c = pd(a);
      if (!vd.test(c)) throw Error("Invalid TrustedResourceUrl format: " + c);
      a = c.replace(wd, function (a, e) {
        if (!Object.prototype.hasOwnProperty.call(b, e)) throw Error('Found marker, "' + e + '", in format string, "' + c + '", but no valid label mapping found in args: ' + JSON.stringify(b));
        a = b[e];
        return a instanceof nd ? pd(a) : encodeURIComponent(String(a));
      });
      return xd(a);
    }

    var wd = /%{(\w+)}/g,
        vd = /^(?:https:)?\/\/[0-9a-z.:[\]-]+\/|^\/[^\/\\]|^about:blank#/i,
        sd = {};

    function xd(a) {
      var b = new rd();
      b.a = a;
      return b;
    }

    ;

    function yd() {
      this.a = "";
      this.b = zd;
    }

    yd.prototype.la = !0;

    yd.prototype.ja = function () {
      return this.a;
    };

    yd.prototype.toString = function () {
      return "SafeUrl{" + this.a + "}";
    };

    function Ad(a) {
      if (a instanceof yd && a.constructor === yd && a.b === zd) return a.a;
      ra("expected object of type SafeUrl, got '" + a + "' of type " + da(a));
      return "type_error:SafeUrl";
    }

    var Bd = /^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;

    function Cd(a) {
      if (a instanceof yd) return a;
      a = a.la ? a.ja() : String(a);
      Bd.test(a) || (a = "about:invalid#zClosurez");
      return Dd(a);
    }

    var zd = {};

    function Dd(a) {
      var b = new yd();
      b.a = a;
      return b;
    }

    Dd("about:blank");

    function Ed() {
      this.a = "";
      this.b = Fd;
    }

    Ed.prototype.la = !0;

    Ed.prototype.ja = function () {
      return this.a;
    };

    Ed.prototype.toString = function () {
      return "SafeHtml{" + this.a + "}";
    };

    function Gd(a) {
      if (a instanceof Ed && a.constructor === Ed && a.b === Fd) return a.a;
      ra("expected object of type SafeHtml, got '" + a + "' of type " + da(a));
      return "type_error:SafeHtml";
    }

    var Fd = {};

    function Hd(a) {
      var b = new Ed();
      b.a = a;
      return b;
    }

    Hd("<!DOCTYPE html>");
    Hd("");
    Hd("<br>");

    function Id(a) {
      var b = document;
      return l(a) ? b.getElementById(a) : a;
    }

    function Jd(a, b) {
      Ya(b, function (b, d) {
        b && b.la && (b = b.ja());
        "style" == d ? a.style.cssText = b : "class" == d ? a.className = b : "for" == d ? a.htmlFor = b : Kd.hasOwnProperty(d) ? a.setAttribute(Kd[d], b) : 0 == d.lastIndexOf("aria-", 0) || 0 == d.lastIndexOf("data-", 0) ? a.setAttribute(d, b) : a[d] = b;
      });
    }

    var Kd = {
      cellpadding: "cellPadding",
      cellspacing: "cellSpacing",
      colspan: "colSpan",
      frameborder: "frameBorder",
      height: "height",
      maxlength: "maxLength",
      nonce: "nonce",
      role: "role",
      rowspan: "rowSpan",
      type: "type",
      usemap: "useMap",
      valign: "vAlign",
      width: "width"
    };

    function Ld(a, b, c) {
      var d = arguments,
          e = document,
          f = String(d[0]),
          h = d[1];

      if (!md && h && (h.name || h.type)) {
        f = ["<", f];
        h.name && f.push(' name="', Ma(h.name), '"');

        if (h.type) {
          f.push(' type="', Ma(h.type), '"');
          var m = {};
          bb(m, h);
          delete m.type;
          h = m;
        }

        f.push(">");
        f = f.join("");
      }

      f = e.createElement(f);
      h && (l(h) ? f.className = h : fa(h) ? f.className = h.join(" ") : Jd(f, h));
      2 < d.length && Md(e, f, d);
      return f;
    }

    function Md(a, b, c) {
      function d(c) {
        c && b.appendChild(l(c) ? a.createTextNode(c) : c);
      }

      for (var e = 2; e < c.length; e++) {
        var f = c[e];
        !ha(f) || q(f) && 0 < f.nodeType ? d(f) : v(Nd(f) ? Ja(f) : f, d);
      }
    }

    function Nd(a) {
      if (a && "number" == typeof a.length) {
        if (q(a)) return "function" == typeof a.item || "string" == typeof a.item;
        if (n(a)) return "function" == typeof a.item;
      }

      return !1;
    }

    ;

    function Od(a) {
      var b = [];
      Pd(new Qd(), a, b);
      return b.join("");
    }

    function Qd() {}

    function Pd(a, b, c) {
      if (null == b) c.push("null");else {
        if ("object" == typeof b) {
          if (fa(b)) {
            var d = b;
            b = d.length;
            c.push("[");

            for (var e = "", f = 0; f < b; f++) {
              c.push(e), Pd(a, d[f], c), e = ",";
            }

            c.push("]");
            return;
          }

          if (b instanceof String || b instanceof Number || b instanceof Boolean) b = b.valueOf();else {
            c.push("{");
            e = "";

            for (d in b) {
              Object.prototype.hasOwnProperty.call(b, d) && (f = b[d], "function" != typeof f && (c.push(e), Rd(d, c), c.push(":"), Pd(a, f, c), e = ","));
            }

            c.push("}");
            return;
          }
        }

        switch (typeof b) {
          case "string":
            Rd(b, c);
            break;

          case "number":
            c.push(isFinite(b) && !isNaN(b) ? String(b) : "null");
            break;

          case "boolean":
            c.push(String(b));
            break;

          case "function":
            c.push("null");
            break;

          default:
            throw Error("Unknown type: " + typeof b);
        }
      }
    }

    var Sd = {
      '"': '\\"',
      "\\": "\\\\",
      "/": "\\/",
      "\b": "\\b",
      "\f": "\\f",
      "\n": "\\n",
      "\r": "\\r",
      "\t": "\\t",
      "\x0B": "\\u000b"
    },
        Td = /\uffff/.test("\uFFFF") ? /[\\"\x00-\x1f\x7f-\uffff]/g : /[\\"\x00-\x1f\x7f-\xff]/g;

    function Rd(a, b) {
      b.push('"', a.replace(Td, function (a) {
        var b = Sd[a];
        b || (b = "\\u" + (a.charCodeAt(0) | 65536).toString(16).substr(1), Sd[a] = b);
        return b;
      }), '"');
    }

    ;

    function Ud() {
      var a = H();
      return B && !!Yb && 11 == Yb || /Edge\/\d+/.test(a);
    }

    function Vd() {
      return k.window && k.window.location.href || self && self.location && self.location.href || "";
    }

    function Wd(a, b) {
      b = b || k.window;
      var c = "about:blank";
      a && (c = Ad(Cd(a)));
      b.location.href = c;
    }

    function Xd(a, b) {
      var c = [],
          d;

      for (d in a) {
        if (d in b) {
          if (typeof a[d] != typeof b[d]) c.push(d);else if (fa(a[d])) {
            a: {
              var e = void 0;
              var f = a[d],
                  h = b[d];

              for (e in f) {
                if (!(e in h) || f[e] !== h[e]) {
                  e = !1;
                  break a;
                }
              }

              for (e in h) {
                if (!(e in f)) {
                  e = !1;
                  break a;
                }
              }

              e = !0;
            }

            e || c.push(d);
          } else "object" == typeof a[d] && null != a[d] && null != b[d] ? 0 < Xd(a[d], b[d]).length && c.push(d) : a[d] !== b[d] && c.push(d);
        } else c.push(d);
      }

      for (d in b) {
        d in a || c.push(d);
      }

      return c;
    }

    function Yd() {
      var a = H();
      a = Zd(a) != $d ? null : (a = a.match(/\sChrome\/(\d+)/i)) && 2 == a.length ? parseInt(a[1], 10) : null;
      return a && 30 > a ? !1 : !B || !Yb || 9 < Yb;
    }

    function ae(a) {
      a = (a || H()).toLowerCase();
      return a.match(/android/) || a.match(/webos/) || a.match(/iphone|ipad|ipod/) || a.match(/blackberry/) || a.match(/windows phone/) || a.match(/iemobile/) ? !0 : !1;
    }

    function be(a) {
      a = a || k.window;

      try {
        a.close();
      } catch (b) {}
    }

    function ce(a, b, c) {
      var d = Math.floor(1E9 * Math.random()).toString();
      b = b || 500;
      c = c || 600;
      var e = (window.screen.availHeight - c) / 2,
          f = (window.screen.availWidth - b) / 2;
      b = {
        width: b,
        height: c,
        top: 0 < e ? e : 0,
        left: 0 < f ? f : 0,
        location: !0,
        resizable: !0,
        statusbar: !0,
        toolbar: !1
      };
      c = H().toLowerCase();
      d && (b.target = d, w(c, "crios/") && (b.target = "_blank"));
      Zd(H()) == de && (a = a || "http://localhost", b.scrollbars = !0);
      c = a || "";
      (a = b) || (a = {});
      d = window;
      b = c instanceof yd ? c : Cd("undefined" != typeof c.href ? c.href : String(c));
      c = a.target || c.target;
      e = [];

      for (h in a) {
        switch (h) {
          case "width":
          case "height":
          case "top":
          case "left":
            e.push(h + "=" + a[h]);
            break;

          case "target":
          case "noopener":
          case "noreferrer":
            break;

          default:
            e.push(h + "=" + (a[h] ? 1 : 0));
        }
      }

      var h = e.join(",");
      (x("iPhone") && !x("iPod") && !x("iPad") || x("iPad") || x("iPod")) && d.navigator && d.navigator.standalone && c && "_self" != c ? (h = d.document.createElement("A"), b instanceof yd || b instanceof yd || (b = b.la ? b.ja() : String(b), Bd.test(b) || (b = "about:invalid#zClosurez"), b = Dd(b)), h.href = Ad(b), h.setAttribute("target", c), a.noreferrer && h.setAttribute("rel", "noreferrer"), a = document.createEvent("MouseEvent"), a.initMouseEvent("click", !0, !0, d, 1), h.dispatchEvent(a), h = {}) : a.noreferrer ? (h = d.open("", c, h), a = Ad(b), h && (Pb && w(a, ";") && (a = "'" + a.replace(/'/g, "%27") + "'"), h.opener = null, qd("b/12014412, meta tag with sanitized URL"), a = '<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url=' + Ma(a) + '">', a = Hd(a), h.document.write(Gd(a)), h.document.close())) : (h = d.open(Ad(b), c, h)) && a.noopener && (h.opener = null);
      if (h) try {
        h.focus();
      } catch (m) {}
      return h;
    }

    function ee(a) {
      return new y(function (b) {
        function c() {
          Gc(2E3).then(function () {
            if (!a || a.closed) b();else return c();
          });
        }

        return c();
      });
    }

    var fe = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;

    function ge() {
      var a = null;
      return new y(function (b) {
        "complete" == k.document.readyState ? b() : (a = function a() {
          b();
        }, rc(window, "load", a));
      }).o(function (b) {
        D(window, "load", a);
        throw b;
      });
    }

    function he() {
      return ie(void 0) ? ge().then(function () {
        return new y(function (a, b) {
          var c = k.document,
              d = setTimeout(function () {
            b(Error("Cordova framework is not ready."));
          }, 1E3);
          c.addEventListener("deviceready", function () {
            clearTimeout(d);
            a();
          }, !1);
        });
      }) : A(Error("Cordova must run in an Android or iOS file scheme."));
    }

    function ie(a) {
      a = a || H();
      return !("file:" !== je() || !a.toLowerCase().match(/iphone|ipad|ipod|android/));
    }

    function ke() {
      var a = k.window;

      try {
        return !(!a || a == a.top);
      } catch (b) {
        return !1;
      }
    }

    function le() {
      return "object" !== typeof k.window && "function" === typeof k.importScripts;
    }

    function me() {
      return firebase.INTERNAL.hasOwnProperty("reactNative") ? "ReactNative" : firebase.INTERNAL.hasOwnProperty("node") ? "Node" : le() ? "Worker" : "Browser";
    }

    function ne() {
      var a = me();
      return "ReactNative" === a || "Node" === a;
    }

    var de = "Firefox",
        $d = "Chrome";

    function Zd(a) {
      var b = a.toLowerCase();
      if (w(b, "opera/") || w(b, "opr/") || w(b, "opios/")) return "Opera";
      if (w(b, "iemobile")) return "IEMobile";
      if (w(b, "msie") || w(b, "trident/")) return "IE";
      if (w(b, "edge/")) return "Edge";
      if (w(b, "firefox/")) return de;
      if (w(b, "silk/")) return "Silk";
      if (w(b, "blackberry")) return "Blackberry";
      if (w(b, "webos")) return "Webos";
      if (!w(b, "safari/") || w(b, "chrome/") || w(b, "crios/") || w(b, "android")) {
        if (!w(b, "chrome/") && !w(b, "crios/") || w(b, "edge/")) {
          if (w(b, "android")) return "Android";
          if ((a = a.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/)) && 2 == a.length) return a[1];
        } else return $d;
      } else return "Safari";
      return "Other";
    }

    var oe = {
      Pc: "FirebaseCore-web",
      Rc: "FirebaseUI-web"
    };

    function pe(a, b) {
      b = b || [];
      var c = [],
          d = {},
          e;

      for (e in oe) {
        d[oe[e]] = !0;
      }

      for (e = 0; e < b.length; e++) {
        "undefined" !== typeof d[b[e]] && (delete d[b[e]], c.push(b[e]));
      }

      c.sort();
      b = c;
      b.length || (b = ["FirebaseCore-web"]);
      c = me();
      "Browser" === c ? (d = H(), c = Zd(d)) : "Worker" === c && (d = H(), c = Zd(d) + "-" + c);
      return c + "/JsCore/" + a + "/" + b.join(",");
    }

    function H() {
      return k.navigator && k.navigator.userAgent || "";
    }

    function I(a, b) {
      a = a.split(".");
      b = b || k;

      for (var c = 0; c < a.length && "object" == typeof b && null != b; c++) {
        b = b[a[c]];
      }

      c != a.length && (b = void 0);
      return b;
    }

    function qe() {
      try {
        var a = k.localStorage,
            b = re();
        if (a) return a.setItem(b, "1"), a.removeItem(b), Ud() ? !!k.indexedDB : !0;
      } catch (c) {
        return le() && !!k.indexedDB;
      }

      return !1;
    }

    function se() {
      return (te() || "chrome-extension:" === je() || ie()) && !ne() && qe() && !le();
    }

    function te() {
      return "http:" === je() || "https:" === je();
    }

    function je() {
      return k.location && k.location.protocol || null;
    }

    function ue(a) {
      a = a || H();
      return ae(a) || Zd(a) == de ? !1 : !0;
    }

    function ve(a) {
      return "undefined" === typeof a ? null : Od(a);
    }

    function we(a) {
      var b = {},
          c;

      for (c in a) {
        a.hasOwnProperty(c) && null !== a[c] && void 0 !== a[c] && (b[c] = a[c]);
      }

      return b;
    }

    function xe(a) {
      if (null !== a) return JSON.parse(a);
    }

    function re(a) {
      return a ? a : Math.floor(1E9 * Math.random()).toString();
    }

    function ye(a) {
      a = a || H();
      return "Safari" == Zd(a) || a.toLowerCase().match(/iphone|ipad|ipod/) ? !1 : !0;
    }

    function ze() {
      var a = k.___jsl;
      if (a && a.H) for (var b in a.H) {
        if (a.H[b].r = a.H[b].r || [], a.H[b].L = a.H[b].L || [], a.H[b].r = a.H[b].L.concat(), a.CP) for (var c = 0; c < a.CP.length; c++) {
          a.CP[c] = null;
        }
      }
    }

    function Ae() {
      var a = k.navigator;
      return a && "boolean" === typeof a.onLine && (te() || "chrome-extension:" === je() || "undefined" !== typeof a.connection) ? a.onLine : !0;
    }

    function Be(a, b) {
      if (a > b) throw Error("Short delay should be less than long delay!");
      this.c = a;
      this.b = b;
      a = H();
      b = me();
      this.a = ae(a) || "ReactNative" === b;
    }

    Be.prototype.get = function () {
      return this.a ? this.b : this.c;
    };

    function Ce() {
      var a = k.document;
      return a && "undefined" !== typeof a.visibilityState ? "visible" == a.visibilityState : !0;
    }

    function De() {
      var a = k.document,
          _b = null;
      return Ce() || !a ? z() : new y(function (c) {
        _b = function b() {
          Ce() && (a.removeEventListener("visibilitychange", _b, !1), c());
        };

        a.addEventListener("visibilitychange", _b, !1);
      }).o(function (c) {
        a.removeEventListener("visibilitychange", _b, !1);
        throw c;
      });
    }

    function Ee(a) {
      try {
        var b = new Date(parseInt(a, 10));
        if (!isNaN(b.getTime()) && !/[^0-9]/.test(a)) return b.toUTCString();
      } catch (c) {}

      return null;
    }

    function Fe() {
      return !(!I("fireauth.oauthhelper", k) && !I("fireauth.iframe", k));
    }

    ;
    var Ge = {};
    var He;

    try {
      var Ie = {};
      Object.defineProperty(Ie, "abcd", {
        configurable: !0,
        enumerable: !0,
        value: 1
      });
      Object.defineProperty(Ie, "abcd", {
        configurable: !0,
        enumerable: !0,
        value: 2
      });
      He = 2 == Ie.abcd;
    } catch (a) {
      He = !1;
    }

    function J(a, b, c) {
      He ? Object.defineProperty(a, b, {
        configurable: !0,
        enumerable: !0,
        value: c
      }) : a[b] = c;
    }

    function K(a, b) {
      if (b) for (var c in b) {
        b.hasOwnProperty(c) && J(a, c, b[c]);
      }
    }

    function Je(a) {
      var b = {};
      K(b, a);
      return b;
    }

    function Ke(a) {
      var b = {},
          c;

      for (c in a) {
        a.hasOwnProperty(c) && (b[c] = a[c]);
      }

      return b;
    }

    function Le(a, b) {
      if (!b || !b.length) return !0;
      if (!a) return !1;

      for (var c = 0; c < b.length; c++) {
        var d = a[b[c]];
        if (void 0 === d || null === d || "" === d) return !1;
      }

      return !0;
    }

    function Me(a) {
      var b = a;

      if ("object" == typeof a && null != a) {
        b = "length" in a ? [] : {};

        for (var c in a) {
          J(b, c, Me(a[c]));
        }
      }

      return b;
    }

    ;

    function Ne(a) {
      var b = {},
          c = a[Oe],
          d = a[Pe];
      a = a[Qe];
      if (!a || a != Re && !c) throw Error("Invalid provider user info!");
      b[Se] = d || null;
      b[Te] = c || null;
      J(this, Ue, a);
      J(this, Ve, Me(b));
    }

    var Re = "EMAIL_SIGNIN",
        Oe = "email",
        Pe = "newEmail",
        Qe = "requestType",
        Te = "email",
        Se = "fromEmail",
        Ve = "data",
        Ue = "operation";

    function L(a, b) {
      this.code = We + a;
      this.message = b || Xe[a] || "";
    }

    t(L, Error);

    L.prototype.C = function () {
      return {
        code: this.code,
        message: this.message
      };
    };

    L.prototype.toJSON = function () {
      return this.C();
    };

    function Ye(a) {
      var b = a && a.code;
      return b ? new L(b.substring(We.length), a.message) : null;
    }

    var We = "auth/",
        Xe = {
      "argument-error": "",
      "app-not-authorized": "This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.",
      "app-not-installed": "The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.",
      "captcha-check-failed": "The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.",
      "code-expired": "The SMS code has expired. Please re-send the verification code to try again.",
      "cordova-not-ready": "Cordova framework is not ready.",
      "cors-unsupported": "This browser is not supported.",
      "credential-already-in-use": "This credential is already associated with a different user account.",
      "custom-token-mismatch": "The custom token corresponds to a different audience.",
      "requires-recent-login": "This operation is sensitive and requires recent authentication. Log in again before retrying this request.",
      "dynamic-link-not-activated": "Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.",
      "email-already-in-use": "The email address is already in use by another account.",
      "expired-action-code": "The action code has expired. ",
      "cancelled-popup-request": "This operation has been cancelled due to another conflicting popup being opened.",
      "internal-error": "An internal error has occurred.",
      "invalid-app-credential": "The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.",
      "invalid-app-id": "The mobile app identifier is not registed for the current project.",
      "invalid-user-token": "This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.",
      "invalid-auth-event": "An internal error has occurred.",
      "invalid-verification-code": "The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.",
      "invalid-continue-uri": "The continue URL provided in the request is invalid.",
      "invalid-cordova-configuration": "The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.",
      "invalid-custom-token": "The custom token format is incorrect. Please check the documentation.",
      "invalid-email": "The email address is badly formatted.",
      "invalid-api-key": "Your API key is invalid, please check you have copied it correctly.",
      "invalid-cert-hash": "The SHA-1 certificate hash provided is invalid.",
      "invalid-credential": "The supplied auth credential is malformed or has expired.",
      "invalid-persistence-type": "The specified persistence type is invalid. It can only be local, session or none.",
      "invalid-message-payload": "The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.",
      "invalid-oauth-provider": "EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.",
      "invalid-oauth-client-id": "The OAuth client ID provided is either invalid or does not match the specified API key.",
      "unauthorized-domain": "This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.",
      "invalid-action-code": "The action code is invalid. This can happen if the code is malformed, expired, or has already been used.",
      "wrong-password": "The password is invalid or the user does not have a password.",
      "invalid-phone-number": "The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].",
      "invalid-recipient-email": "The email corresponding to this action failed to send as the provided recipient email address is invalid.",
      "invalid-sender": "The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.",
      "invalid-verification-id": "The verification ID used to create the phone auth credential is invalid.",
      "missing-android-pkg-name": "An Android Package Name must be provided if the Android App is required to be installed.",
      "auth-domain-config-required": "Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.",
      "missing-app-credential": "The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.",
      "missing-verification-code": "The phone auth credential was created with an empty SMS verification code.",
      "missing-continue-uri": "A continue URL must be provided in the request.",
      "missing-iframe-start": "An internal error has occurred.",
      "missing-ios-bundle-id": "An iOS Bundle ID must be provided if an App Store ID is provided.",
      "missing-phone-number": "To send verification codes, provide a phone number for the recipient.",
      "missing-verification-id": "The phone auth credential was created with an empty verification ID.",
      "app-deleted": "This instance of FirebaseApp has been deleted.",
      "account-exists-with-different-credential": "An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.",
      "network-request-failed": "A network error (such as timeout, interrupted connection or unreachable host) has occurred.",
      "no-auth-event": "An internal error has occurred.",
      "no-such-provider": "User was not linked to an account with the given provider.",
      "operation-not-allowed": "The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.",
      "operation-not-supported-in-this-environment": 'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',
      "popup-blocked": "Unable to establish a connection with the popup. It may have been blocked by the browser.",
      "popup-closed-by-user": "The popup has been closed by the user before finalizing the operation.",
      "provider-already-linked": "User can only be linked to one identity for the given provider.",
      "quota-exceeded": "The project's quota for this operation has been exceeded.",
      "redirect-cancelled-by-user": "The redirect operation has been cancelled by the user before finalizing.",
      "redirect-operation-pending": "A redirect sign-in operation is already pending.",
      timeout: "The operation has timed out.",
      "user-token-expired": "The user's credential is no longer valid. The user must sign in again.",
      "too-many-requests": "We have blocked all requests from this device due to unusual activity. Try again later.",
      "unauthorized-continue-uri": "The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.",
      "unsupported-persistence-type": "The current environment does not support the specified persistence type.",
      "user-cancelled": "User did not grant your application the permissions it requested.",
      "user-not-found": "There is no user record corresponding to this identifier. The user may have been deleted.",
      "user-disabled": "The user account has been disabled by an administrator.",
      "user-mismatch": "The supplied credentials do not correspond to the previously signed in user.",
      "user-signed-out": "",
      "weak-password": "The password must be 6 characters long or more.",
      "web-storage-unsupported": "This browser is not supported or 3rd party cookies and data may be disabled."
    };

    function Ze(a) {
      var b = a[$e];
      if ("undefined" === typeof b) throw new L("missing-continue-uri");
      if ("string" !== typeof b || "string" === typeof b && !b.length) throw new L("invalid-continue-uri");
      this.h = b;
      this.b = this.a = null;
      this.g = !1;
      var c = a[af];

      if (c && "object" === typeof c) {
        b = c[bf];
        var d = c[cf];
        c = c[df];

        if ("string" === typeof b && b.length) {
          this.a = b;
          if ("undefined" !== typeof d && "boolean" !== typeof d) throw new L("argument-error", cf + " property must be a boolean when specified.");
          this.g = !!d;
          if ("undefined" !== typeof c && ("string" !== typeof c || "string" === typeof c && !c.length)) throw new L("argument-error", df + " property must be a non empty string when specified.");
          this.b = c || null;
        } else {
          if ("undefined" !== typeof b) throw new L("argument-error", bf + " property must be a non empty string when specified.");
          if ("undefined" !== typeof d || "undefined" !== typeof c) throw new L("missing-android-pkg-name");
        }
      } else if ("undefined" !== typeof c) throw new L("argument-error", af + " property must be a non null object when specified.");

      this.f = null;
      if ((b = a[ef]) && "object" === typeof b) {
        if (b = b[ff], "string" === typeof b && b.length) this.f = b;else {
          if ("undefined" !== typeof b) throw new L("argument-error", ff + " property must be a non empty string when specified.");
        }
      } else if ("undefined" !== typeof b) throw new L("argument-error", ef + " property must be a non null object when specified.");
      a = a[gf];
      if ("undefined" !== typeof a && "boolean" !== typeof a) throw new L("argument-error", gf + " property must be a boolean when specified.");
      this.c = !!a;
    }

    var af = "android",
        gf = "handleCodeInApp",
        ef = "iOS",
        $e = "url",
        cf = "installApp",
        df = "minimumVersion",
        bf = "packageName",
        ff = "bundleId";

    function hf(a) {
      var b = {};
      b.continueUrl = a.h;
      b.canHandleCodeInApp = a.c;
      if (b.androidPackageName = a.a) b.androidMinimumVersion = a.b, b.androidInstallApp = a.g;
      b.iOSBundleId = a.f;

      for (var c in b) {
        null === b[c] && delete b[c];
      }

      return b;
    }

    ;

    function jf(a) {
      return Ba(a, function (a) {
        a = a.toString(16);
        return 1 < a.length ? a : "0" + a;
      }).join("");
    }

    ;
    var kf = null,
        lf = null;

    function mf(a) {
      var b = "";
      nf(a, function (a) {
        b += String.fromCharCode(a);
      });
      return b;
    }

    function nf(a, b) {
      function c(b) {
        for (; d < a.length;) {
          var c = a.charAt(d++),
              e = lf[c];
          if (null != e) return e;
          if (!/^[\s\xa0]*$/.test(c)) throw Error("Unknown base64 encoding at char: " + c);
        }

        return b;
      }

      of();

      for (var d = 0;;) {
        var e = c(-1),
            f = c(0),
            h = c(64),
            m = c(64);
        if (64 === m && -1 === e) break;
        b(e << 2 | f >> 4);
        64 != h && (b(f << 4 & 240 | h >> 2), 64 != m && b(h << 6 & 192 | m));
      }
    }

    function of() {
      if (!kf) {
        kf = {};
        lf = {};

        for (var a = 0; 65 > a; a++) {
          kf[a] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(a), lf[kf[a]] = a, 62 <= a && (lf["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(a)] = a);
        }
      }
    }

    ;

    function pf(a) {
      this.c = a.sub;
      na();
      this.a = a.provider_id || a.firebase && a.firebase.sign_in_provider || null;
      this.b = !!a.is_anonymous || "anonymous" == this.a;
    }

    pf.prototype.f = function () {
      return this.b;
    };

    function qf(a) {
      a = a.split(".");
      if (3 != a.length) return null;
      a = a[1];

      for (var b = (4 - a.length % 4) % 4, c = 0; c < b; c++) {
        a += ".";
      }

      try {
        var d = JSON.parse(mf(a));
        if (d.sub && d.iss && d.aud && d.exp) return new pf(d);
      } catch (e) {}

      return null;
    }

    ;
    var rf = "oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),
        sf = ["client_id", "response_type", "scope", "redirect_uri", "state"],
        tf = {
      Qc: {
        Ma: "locale",
        Aa: 500,
        za: 600,
        Na: "facebook.com",
        cb: sf
      },
      Sc: {
        Ma: null,
        Aa: 500,
        za: 620,
        Na: "github.com",
        cb: sf
      },
      Tc: {
        Ma: "hl",
        Aa: 515,
        za: 680,
        Na: "google.com",
        cb: sf
      },
      Zc: {
        Ma: "lang",
        Aa: 485,
        za: 705,
        Na: "twitter.com",
        cb: rf
      }
    };

    function uf(a) {
      for (var b in tf) {
        if (tf[b].Na == a) return tf[b];
      }

      return null;
    }

    ;

    function vf(a) {
      var b = {};
      b["facebook.com"] = wf;
      b["google.com"] = xf;
      b["github.com"] = yf;
      b["twitter.com"] = zf;
      var c = a && a[Af];

      try {
        if (c) return b[c] ? new b[c](a) : new Bf(a);
        if ("undefined" !== typeof a[Cf]) return new Df(a);
      } catch (d) {}

      return null;
    }

    var Cf = "idToken",
        Af = "providerId";

    function Df(a) {
      var b = a[Af];

      if (!b && a[Cf]) {
        var c = qf(a[Cf]);
        c && c.a && (b = c.a);
      }

      if (!b) throw Error("Invalid additional user info!");
      if ("anonymous" == b || "custom" == b) b = null;
      c = !1;
      "undefined" !== typeof a.isNewUser ? c = !!a.isNewUser : "identitytoolkit#SignupNewUserResponse" === a.kind && (c = !0);
      J(this, "providerId", b);
      J(this, "isNewUser", c);
    }

    function Bf(a) {
      Df.call(this, a);
      a = xe(a.rawUserInfo || "{}");
      J(this, "profile", Me(a || {}));
    }

    t(Bf, Df);

    function wf(a) {
      Bf.call(this, a);
      if ("facebook.com" != this.providerId) throw Error("Invalid provider ID!");
    }

    t(wf, Bf);

    function yf(a) {
      Bf.call(this, a);
      if ("github.com" != this.providerId) throw Error("Invalid provider ID!");
      J(this, "username", this.profile && this.profile.login || null);
    }

    t(yf, Bf);

    function xf(a) {
      Bf.call(this, a);
      if ("google.com" != this.providerId) throw Error("Invalid provider ID!");
    }

    t(xf, Bf);

    function zf(a) {
      Bf.call(this, a);
      if ("twitter.com" != this.providerId) throw Error("Invalid provider ID!");
      J(this, "username", a.screenName || null);
    }

    t(zf, Bf);

    function Ef(a) {
      this.a = dd(a);
    }

    ;

    function Ff(a) {
      var b = dd(a),
          c = cd(b, "link"),
          d = cd(dd(c), "link");
      b = cd(b, "deep_link_id");
      return cd(dd(b), "link") || b || d || c || a;
    }

    ;

    function Gf(a, b) {
      return a.then(function (a) {
        if (a[M]) {
          var c = qf(a[M]);
          if (!c || b != c.c) throw new L("user-mismatch");
          return a;
        }

        throw new L("user-mismatch");
      }).o(function (a) {
        throw a && a.code && a.code == We + "user-not-found" ? new L("user-mismatch") : a;
      });
    }

    function Hf(a, b, c) {
      if (b.idToken || b.accessToken) b.idToken && J(this, "idToken", b.idToken), b.accessToken && J(this, "accessToken", b.accessToken);else if (b.oauthToken && b.oauthTokenSecret) J(this, "accessToken", b.oauthToken), J(this, "secret", b.oauthTokenSecret);else throw new L("internal-error", "failed to construct a credential");
      J(this, "providerId", a);
      J(this, "signInMethod", c);
    }

    Hf.prototype.xa = function (a) {
      return If(a, Jf(this));
    };

    Hf.prototype.c = function (a, b) {
      var c = Jf(this);
      c.idToken = b;
      return Kf(a, c);
    };

    Hf.prototype.f = function (a, b) {
      var c = Jf(this);
      return Gf(Lf(a, c), b);
    };

    function Jf(a) {
      var b = {};
      a.idToken && (b.id_token = a.idToken);
      a.accessToken && (b.access_token = a.accessToken);
      a.secret && (b.oauth_token_secret = a.secret);
      b.providerId = a.providerId;
      return {
        postBody: hd(b).toString(),
        requestUri: "http://localhost"
      };
    }

    Hf.prototype.C = function () {
      var a = {
        providerId: this.providerId,
        signInMethod: this.signInMethod
      };
      this.idToken && (a.oauthIdToken = this.idToken);
      this.accessToken && (a.oauthAccessToken = this.accessToken);
      this.secret && (a.oauthTokenSecret = this.secret);
      return a;
    };

    function Mf(a, b) {
      this.zc = b || [];
      K(this, {
        providerId: a,
        isOAuthProvider: !0
      });
      this.tb = {};
      this.Za = (uf(a) || {}).Ma || null;
      this.Xa = null;
    }

    Mf.prototype.Ca = function (a) {
      this.tb = $a(a);
      return this;
    };

    function N(a) {
      Mf.call(this, a, sf);
      this.a = [];
    }

    t(N, Mf);

    N.prototype.ta = function (a) {
      Fa(this.a, a) || this.a.push(a);
      return this;
    };

    N.prototype.yb = function () {
      return Ja(this.a);
    };

    N.prototype.credential = function (a, b) {
      if (!a && !b) throw new L("argument-error", "credential failed: must provide the ID token and/or the access token.");
      return new Hf(this.providerId, {
        idToken: a || null,
        accessToken: b || null
      }, this.providerId);
    };

    function Nf() {
      N.call(this, "facebook.com");
    }

    t(Nf, N);
    J(Nf, "PROVIDER_ID", "facebook.com");
    J(Nf, "FACEBOOK_SIGN_IN_METHOD", "facebook.com");

    function Of(a) {
      if (!a) throw new L("argument-error", "credential failed: expected 1 argument (the OAuth access token).");
      var b = a;
      q(a) && (b = a.accessToken);
      return new Nf().credential(null, b);
    }

    function Pf() {
      N.call(this, "github.com");
    }

    t(Pf, N);
    J(Pf, "PROVIDER_ID", "github.com");
    J(Pf, "GITHUB_SIGN_IN_METHOD", "github.com");

    function Qf(a) {
      if (!a) throw new L("argument-error", "credential failed: expected 1 argument (the OAuth access token).");
      var b = a;
      q(a) && (b = a.accessToken);
      return new Pf().credential(null, b);
    }

    function Rf() {
      N.call(this, "google.com");
      this.ta("profile");
    }

    t(Rf, N);
    J(Rf, "PROVIDER_ID", "google.com");
    J(Rf, "GOOGLE_SIGN_IN_METHOD", "google.com");

    function Sf(a, b) {
      var c = a;
      q(a) && (c = a.idToken, b = a.accessToken);
      return new Rf().credential(c, b);
    }

    function Tf() {
      Mf.call(this, "twitter.com", rf);
    }

    t(Tf, Mf);
    J(Tf, "PROVIDER_ID", "twitter.com");
    J(Tf, "TWITTER_SIGN_IN_METHOD", "twitter.com");

    function Uf(a, b) {
      var c = a;
      q(c) || (c = {
        oauthToken: a,
        oauthTokenSecret: b
      });
      if (!c.oauthToken || !c.oauthTokenSecret) throw new L("argument-error", "credential failed: expected 2 arguments (the OAuth access token and secret).");
      return new Hf("twitter.com", c, "twitter.com");
    }

    function Vf(a, b, c) {
      this.a = a;
      this.b = b;
      J(this, "providerId", "password");
      J(this, "signInMethod", c === O.EMAIL_LINK_SIGN_IN_METHOD ? O.EMAIL_LINK_SIGN_IN_METHOD : O.EMAIL_PASSWORD_SIGN_IN_METHOD);
    }

    Vf.prototype.xa = function (a) {
      return this.signInMethod == O.EMAIL_LINK_SIGN_IN_METHOD ? P(a, Wf, {
        email: this.a,
        oobCode: this.b
      }) : P(a, Xf, {
        email: this.a,
        password: this.b
      });
    };

    Vf.prototype.c = function (a, b) {
      return this.signInMethod == O.EMAIL_LINK_SIGN_IN_METHOD ? P(a, Yf, {
        idToken: b,
        email: this.a,
        oobCode: this.b
      }) : P(a, Zf, {
        idToken: b,
        email: this.a,
        password: this.b
      });
    };

    Vf.prototype.f = function (a, b) {
      return Gf(this.xa(a), b);
    };

    Vf.prototype.C = function () {
      return {
        email: this.a,
        password: this.b,
        signInMethod: this.signInMethod
      };
    };

    function O() {
      K(this, {
        providerId: "password",
        isOAuthProvider: !1
      });
    }

    function $f(a, b) {
      b = ag(b);
      if (!b) throw new L("argument-error", "Invalid email link!");
      return new Vf(a, b, O.EMAIL_LINK_SIGN_IN_METHOD);
    }

    function ag(a) {
      a = Ff(a);
      a = new Ef(a);
      var b = cd(a.a, "oobCode") || null;
      return "signIn" === (cd(a.a, "mode") || null) && b ? b : null;
    }

    K(O, {
      PROVIDER_ID: "password"
    });
    K(O, {
      EMAIL_LINK_SIGN_IN_METHOD: "emailLink"
    });
    K(O, {
      EMAIL_PASSWORD_SIGN_IN_METHOD: "password"
    });

    function bg(a) {
      if (!(a.Ra && a.Qa || a.Ea && a.Y)) throw new L("internal-error");
      this.a = a;
      J(this, "providerId", "phone");
      J(this, "signInMethod", "phone");
    }

    bg.prototype.xa = function (a) {
      return a.Sa(cg(this));
    };

    bg.prototype.c = function (a, b) {
      var c = cg(this);
      c.idToken = b;
      return P(a, dg, c);
    };

    bg.prototype.f = function (a, b) {
      var c = cg(this);
      c.operation = "REAUTH";
      a = P(a, eg, c);
      return Gf(a, b);
    };

    bg.prototype.C = function () {
      var a = {
        providerId: "phone"
      };
      this.a.Ra && (a.verificationId = this.a.Ra);
      this.a.Qa && (a.verificationCode = this.a.Qa);
      this.a.Ea && (a.temporaryProof = this.a.Ea);
      this.a.Y && (a.phoneNumber = this.a.Y);
      return a;
    };

    function cg(a) {
      return a.a.Ea && a.a.Y ? {
        temporaryProof: a.a.Ea,
        phoneNumber: a.a.Y
      } : {
        sessionInfo: a.a.Ra,
        code: a.a.Qa
      };
    }

    function fg(a) {
      try {
        this.a = a || firebase.auth();
      } catch (b) {
        throw new L("argument-error", "Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().");
      }

      K(this, {
        providerId: "phone",
        isOAuthProvider: !1
      });
    }

    fg.prototype.Sa = function (a, b) {
      var c = this.a.b;
      return z(b.verify()).then(function (d) {
        if (!l(d)) throw new L("argument-error", "An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");

        switch (b.type) {
          case "recaptcha":
            return gg(c, {
              phoneNumber: a,
              recaptchaToken: d
            }).then(function (a) {
              "function" === typeof b.reset && b.reset();
              return a;
            }, function (a) {
              "function" === typeof b.reset && b.reset();
              throw a;
            });

          default:
            throw new L("argument-error", 'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.');
        }
      });
    };

    function hg(a, b) {
      if (!a) throw new L("missing-verification-id");
      if (!b) throw new L("missing-verification-code");
      return new bg({
        Ra: a,
        Qa: b
      });
    }

    K(fg, {
      PROVIDER_ID: "phone"
    });
    K(fg, {
      PHONE_SIGN_IN_METHOD: "phone"
    });

    function ig(a) {
      if (a.temporaryProof && a.phoneNumber) return new bg({
        Ea: a.temporaryProof,
        Y: a.phoneNumber
      });
      var b = a && a.providerId;
      if (!b || "password" === b) return null;
      var c = a && a.oauthAccessToken,
          d = a && a.oauthTokenSecret;
      a = a && a.oauthIdToken;

      try {
        switch (b) {
          case "google.com":
            return Sf(a, c);

          case "facebook.com":
            return Of(c);

          case "github.com":
            return Qf(c);

          case "twitter.com":
            return Uf(c, d);

          default:
            return new N(b).credential(a, c);
        }
      } catch (e) {
        return null;
      }
    }

    function jg(a) {
      if (!a.isOAuthProvider) throw new L("invalid-oauth-provider");
    }

    ;

    function kg(a, b, c, d, e) {
      this.b = a;
      this.c = b || null;
      this.f = c || null;
      this.g = d || null;
      this.a = e || null;

      if (this.f || this.a) {
        if (this.f && this.a) throw new L("invalid-auth-event");
        if (this.f && !this.g) throw new L("invalid-auth-event");
      } else throw new L("invalid-auth-event");
    }

    kg.prototype.C = function () {
      return {
        type: this.b,
        eventId: this.c,
        urlResponse: this.f,
        sessionId: this.g,
        error: this.a && this.a.C()
      };
    };

    function lg(a) {
      a = a || {};
      return a.type ? new kg(a.type, a.eventId, a.urlResponse, a.sessionId, a.error && Ye(a.error)) : null;
    }

    ;

    function mg() {
      this.b = null;
      this.a = [];
    }

    var ng = null;

    mg.prototype.subscribe = function (a) {
      var b = this;
      this.a.push(a);
      this.b || (this.b = function (a) {
        for (var c = 0; c < b.a.length; c++) {
          b.a[c](a);
        }
      }, a = I("universalLinks.subscribe", k), "function" === typeof a && a(null, this.b));
    };

    mg.prototype.unsubscribe = function (a) {
      Ha(this.a, function (b) {
        return b == a;
      });
    };

    function og(a) {
      var b = "unauthorized-domain",
          c = void 0,
          d = dd(a);
      a = d.b;
      d = d.c;
      "chrome-extension" == d ? c = Ka("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.", a) : "http" == d || "https" == d ? c = Ka("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.", a) : b = "operation-not-supported-in-this-environment";
      L.call(this, b, c);
    }

    t(og, L);

    function pg(a, b, c) {
      L.call(this, a, c);
      a = b || {};
      a.ub && J(this, "email", a.ub);
      a.Y && J(this, "phoneNumber", a.Y);
      a.credential && J(this, "credential", a.credential);
    }

    t(pg, L);

    pg.prototype.C = function () {
      var a = {
        code: this.code,
        message: this.message
      };
      this.email && (a.email = this.email);
      this.phoneNumber && (a.phoneNumber = this.phoneNumber);
      var b = this.credential && this.credential.C();
      b && bb(a, b);
      return a;
    };

    pg.prototype.toJSON = function () {
      return this.C();
    };

    function qg(a) {
      if (a.code) {
        var b = a.code || "";
        0 == b.indexOf(We) && (b = b.substring(We.length));
        var c = {
          credential: ig(a)
        };
        if (a.email) c.ub = a.email;else if (a.phoneNumber) c.Y = a.phoneNumber;else return new L(b, a.message || void 0);
        return new pg(b, c, a.message);
      }

      return null;
    }

    ;
    var rg = /^[+a-zA-Z0-9_.!#$%&'*\/=?^`{|}~-]+@([a-zA-Z0-9-]+\.)+[a-zA-Z0-9]{2,63}$/;

    function sg() {}

    sg.prototype.c = null;

    function tg(a) {
      return a.c || (a.c = a.b());
    }

    ;
    var ug;

    function vg() {}

    t(vg, sg);

    vg.prototype.a = function () {
      var a = wg(this);
      return a ? new ActiveXObject(a) : new XMLHttpRequest();
    };

    vg.prototype.b = function () {
      var a = {};
      wg(this) && (a[0] = !0, a[1] = !0);
      return a;
    };

    function wg(a) {
      if (!a.f && "undefined" == typeof XMLHttpRequest && "undefined" != typeof ActiveXObject) {
        for (var b = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"], c = 0; c < b.length; c++) {
          var d = b[c];

          try {
            return new ActiveXObject(d), a.f = d;
          } catch (e) {}
        }

        throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed");
      }

      return a.f;
    }

    ug = new vg();

    function xg() {}

    t(xg, sg);

    xg.prototype.a = function () {
      var a = new XMLHttpRequest();
      if ("withCredentials" in a) return a;
      if ("undefined" != typeof XDomainRequest) return new yg();
      throw Error("Unsupported browser");
    };

    xg.prototype.b = function () {
      return {};
    };

    function yg() {
      this.a = new XDomainRequest();
      this.readyState = 0;
      this.onreadystatechange = null;
      this.responseText = "";
      this.status = -1;
      this.statusText = "";
      this.a.onload = r(this.ac, this);
      this.a.onerror = r(this.zb, this);
      this.a.onprogress = r(this.bc, this);
      this.a.ontimeout = r(this.ec, this);
    }

    g = yg.prototype;

    g.open = function (a, b, c) {
      if (null != c && !c) throw Error("Only async requests are supported.");
      this.a.open(a, b);
    };

    g.send = function (a) {
      if (a) {
        if ("string" == typeof a) this.a.send(a);else throw Error("Only string data is supported");
      } else this.a.send();
    };

    g.abort = function () {
      this.a.abort();
    };

    g.setRequestHeader = function () {};

    g.getResponseHeader = function (a) {
      return "content-type" == a.toLowerCase() ? this.a.contentType : "";
    };

    g.ac = function () {
      this.status = 200;
      this.responseText = this.a.responseText;
      zg(this, 4);
    };

    g.zb = function () {
      this.status = 500;
      this.responseText = "";
      zg(this, 4);
    };

    g.ec = function () {
      this.zb();
    };

    g.bc = function () {
      this.status = 200;
      zg(this, 1);
    };

    function zg(a, b) {
      a.readyState = b;
      if (a.onreadystatechange) a.onreadystatechange();
    }

    g.getAllResponseHeaders = function () {
      return "content-type: " + this.a.contentType;
    };

    function Ag(a, b, c) {
      this.reset(a, b, c, void 0, void 0);
    }

    Ag.prototype.a = null;
    var Bg = 0;

    Ag.prototype.reset = function (a, b, c, d, e) {
      "number" == typeof e || Bg++;
      d || na();
      delete this.a;
    };

    function Cg(a) {
      this.f = a;
      this.b = this.c = this.a = null;
    }

    function Dg(a, b) {
      this.name = a;
      this.value = b;
    }

    Dg.prototype.toString = function () {
      return this.name;
    };

    var Eg = new Dg("SEVERE", 1E3),
        Fg = new Dg("WARNING", 900),
        Gg = new Dg("CONFIG", 700),
        Hg = new Dg("FINE", 500);

    function Ig(a) {
      if (a.c) return a.c;
      if (a.a) return Ig(a.a);
      ra("Root logger has no level set.");
      return null;
    }

    Cg.prototype.log = function (a, b, c) {
      if (a.value >= Ig(this).value) for (n(b) && (b = b()), a = new Ag(a, String(b), this.f), c && (a.a = c), c = this; c;) {
        c = c.a;
      }
    };

    var Jg = {},
        Kg = null;

    function Lg(a) {
      Kg || (Kg = new Cg(""), Jg[""] = Kg, Kg.c = Gg);
      var b;

      if (!(b = Jg[a])) {
        b = new Cg(a);
        var c = a.lastIndexOf("."),
            d = a.substr(c + 1);
        c = Lg(a.substr(0, c));
        c.b || (c.b = {});
        c.b[d] = b;
        b.a = c;
        Jg[a] = b;
      }

      return b;
    }

    ;

    function Q(a, b) {
      a && a.log(Hg, b, void 0);
    }

    ;

    function Mg(a) {
      this.f = a;
    }

    t(Mg, sg);

    Mg.prototype.a = function () {
      return new Ng(this.f);
    };

    Mg.prototype.b = function (a) {
      return function () {
        return a;
      };
    }({});

    function Ng(a) {
      F.call(this);
      this.i = a;
      this.readyState = Og;
      this.status = 0;
      this.responseText = this.statusText = "";
      this.onreadystatechange = null;
      this.g = new Headers();
      this.b = null;
      this.h = "GET";
      this.c = "";
      this.a = !1;
      this.f = Lg("goog.net.FetchXmlHttp");
    }

    t(Ng, F);
    var Og = 0;
    g = Ng.prototype;

    g.open = function (a, b) {
      if (this.readyState != Og) throw this.abort(), Error("Error reopening a connection");
      this.h = a;
      this.c = b;
      this.readyState = 1;
      Pg(this);
    };

    g.send = function (a) {
      if (1 != this.readyState) throw this.abort(), Error("need to call open() first. ");
      this.a = !0;
      var b = {
        headers: this.g,
        method: this.h,
        credentials: void 0,
        cache: void 0
      };
      a && (b.body = a);
      this.i.fetch(new Request(this.c, b)).then(this.dc.bind(this), this.Ab.bind(this));
    };

    g.abort = function () {
      this.responseText = "";
      this.g = new Headers();
      this.status = 0;
      1 <= this.readyState && this.a && 4 != this.readyState && (this.readyState = 4, this.a = !1, Pg(this));
      this.readyState = Og;
    };

    g.dc = function (a) {
      this.a && (this.b || (this.b = a.headers, this.readyState = 2, Pg(this)), this.a && (this.readyState = 3, Pg(this), this.a && a.text().then(this.cc.bind(this, a), this.Ab.bind(this))));
    };

    g.cc = function (a, b) {
      this.a && (this.status = a.status, this.statusText = a.statusText, this.responseText = b, this.readyState = 4, Pg(this));
    };

    g.Ab = function (a) {
      var b = this.f;
      b && b.log(Fg, "Failed to fetch url " + this.c, a instanceof Error ? a : Error(a));
      this.a && (this.readyState = 4, Pg(this));
    };

    g.setRequestHeader = function (a, b) {
      this.g.append(a, b);
    };

    g.getResponseHeader = function (a) {
      return this.b ? this.b.get(a.toLowerCase()) || "" : ((a = this.f) && a.log(Fg, "Attempting to get response header but no headers have been received for url: " + this.c, void 0), "");
    };

    g.getAllResponseHeaders = function () {
      if (!this.b) {
        var a = this.f;
        a && a.log(Fg, "Attempting to get all response headers but no headers have been received for url: " + this.c, void 0);
        return "";
      }

      a = [];

      for (var b = this.b.entries(), c = b.next(); !c.done;) {
        c = c.value, a.push(c[0] + ": " + c[1]), c = b.next();
      }

      return a.join("\r\n");
    };

    function Pg(a) {
      a.onreadystatechange && a.onreadystatechange.call(a);
    }

    ;

    function Qg(a) {
      F.call(this);
      this.headers = new Lc();
      this.D = a || null;
      this.c = !1;
      this.A = this.a = null;
      this.h = this.N = this.l = "";
      this.f = this.I = this.i = this.G = !1;
      this.g = 0;
      this.s = null;
      this.m = Rg;
      this.v = this.O = !1;
    }

    t(Qg, F);
    var Rg = "";
    Qg.prototype.b = Lg("goog.net.XhrIo");
    var Sg = /^https?$/i,
        Tg = ["POST", "PUT"];

    function Ug(a, b, c, d, e) {
      if (a.a) throw Error("[goog.net.XhrIo] Object is active with another request=" + a.l + "; newUri=" + b);
      c = c ? c.toUpperCase() : "GET";
      a.l = b;
      a.h = "";
      a.N = c;
      a.G = !1;
      a.c = !0;
      a.a = a.D ? a.D.a() : ug.a();
      a.A = a.D ? tg(a.D) : tg(ug);
      a.a.onreadystatechange = r(a.Db, a);

      try {
        Q(a.b, Vg(a, "Opening Xhr")), a.I = !0, a.a.open(c, String(b), !0), a.I = !1;
      } catch (h) {
        Q(a.b, Vg(a, "Error opening Xhr: " + h.message));
        Wg(a, h);
        return;
      }

      b = d || "";
      var f = new Lc(a.headers);
      e && Kc(e, function (a, b) {
        f.set(b, a);
      });
      e = Da(f.T());
      d = k.FormData && b instanceof k.FormData;
      !Fa(Tg, c) || e || d || f.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
      f.forEach(function (a, b) {
        this.a.setRequestHeader(b, a);
      }, a);
      a.m && (a.a.responseType = a.m);
      "withCredentials" in a.a && a.a.withCredentials !== a.O && (a.a.withCredentials = a.O);

      try {
        Xg(a), 0 < a.g && (a.v = Yg(a.a), Q(a.b, Vg(a, "Will abort after " + a.g + "ms if incomplete, xhr2 " + a.v)), a.v ? (a.a.timeout = a.g, a.a.ontimeout = r(a.Fa, a)) : a.s = Fc(a.Fa, a.g, a)), Q(a.b, Vg(a, "Sending request")), a.i = !0, a.a.send(b), a.i = !1;
      } catch (h) {
        Q(a.b, Vg(a, "Send error: " + h.message)), Wg(a, h);
      }
    }

    function Yg(a) {
      return B && Xb(9) && "number" == typeof a.timeout && void 0 !== a.ontimeout;
    }

    function Ea(a) {
      return "content-type" == a.toLowerCase();
    }

    g = Qg.prototype;

    g.Fa = function () {
      "undefined" != typeof aa && this.a && (this.h = "Timed out after " + this.g + "ms, aborting", Q(this.b, Vg(this, this.h)), this.dispatchEvent("timeout"), this.abort(8));
    };

    function Wg(a, b) {
      a.c = !1;
      a.a && (a.f = !0, a.a.abort(), a.f = !1);
      a.h = b;
      Zg(a);
      $g(a);
    }

    function Zg(a) {
      a.G || (a.G = !0, a.dispatchEvent("complete"), a.dispatchEvent("error"));
    }

    g.abort = function () {
      this.a && this.c && (Q(this.b, Vg(this, "Aborting")), this.c = !1, this.f = !0, this.a.abort(), this.f = !1, this.dispatchEvent("complete"), this.dispatchEvent("abort"), $g(this));
    };

    g.ua = function () {
      this.a && (this.c && (this.c = !1, this.f = !0, this.a.abort(), this.f = !1), $g(this, !0));
      Qg.lb.ua.call(this);
    };

    g.Db = function () {
      this.pa || (this.I || this.i || this.f ? ah(this) : this.sc());
    };

    g.sc = function () {
      ah(this);
    };

    function ah(a) {
      if (a.c && "undefined" != typeof aa) if (a.A[1] && 4 == bh(a) && 2 == ch(a)) Q(a.b, Vg(a, "Local request error detected and ignored"));else if (a.i && 4 == bh(a)) Fc(a.Db, 0, a);else if (a.dispatchEvent("readystatechange"), 4 == bh(a)) {
        Q(a.b, Vg(a, "Request complete"));
        a.c = !1;

        try {
          var b = ch(a);

          a: switch (b) {
            case 200:
            case 201:
            case 202:
            case 204:
            case 206:
            case 304:
            case 1223:
              var c = !0;
              break a;

            default:
              c = !1;
          }

          var d;

          if (!(d = c)) {
            var e;

            if (e = 0 === b) {
              var f = String(a.l).match(Oc)[1] || null;

              if (!f && k.self && k.self.location) {
                var h = k.self.location.protocol;
                f = h.substr(0, h.length - 1);
              }

              e = !Sg.test(f ? f.toLowerCase() : "");
            }

            d = e;
          }

          if (d) a.dispatchEvent("complete"), a.dispatchEvent("success");else {
            try {
              var m = 2 < bh(a) ? a.a.statusText : "";
            } catch (p) {
              Q(a.b, "Can not get status: " + p.message), m = "";
            }

            a.h = m + " [" + ch(a) + "]";
            Zg(a);
          }
        } finally {
          $g(a);
        }
      }
    }

    function $g(a, b) {
      if (a.a) {
        Xg(a);
        var c = a.a,
            d = a.A[0] ? ca : null;
        a.a = null;
        a.A = null;
        b || a.dispatchEvent("ready");

        try {
          c.onreadystatechange = d;
        } catch (e) {
          (a = a.b) && a.log(Eg, "Problem encountered resetting onreadystatechange: " + e.message, void 0);
        }
      }
    }

    function Xg(a) {
      a.a && a.v && (a.a.ontimeout = null);
      a.s && (k.clearTimeout(a.s), a.s = null);
    }

    function bh(a) {
      return a.a ? a.a.readyState : 0;
    }

    function ch(a) {
      try {
        return 2 < bh(a) ? a.a.status : -1;
      } catch (b) {
        return -1;
      }
    }

    function dh(a) {
      try {
        return a.a ? a.a.responseText : "";
      } catch (b) {
        return Q(a.b, "Can not get responseText: " + b.message), "";
      }
    }

    g.getResponse = function () {
      try {
        if (!this.a) return null;
        if ("response" in this.a) return this.a.response;

        switch (this.m) {
          case Rg:
          case "text":
            return this.a.responseText;

          case "arraybuffer":
            if ("mozResponseArrayBuffer" in this.a) return this.a.mozResponseArrayBuffer;
        }

        var a = this.b;
        a && a.log(Eg, "Response type " + this.m + " is not supported on this browser", void 0);
        return null;
      } catch (b) {
        return Q(this.b, "Can not get response: " + b.message), null;
      }
    };

    function Vg(a, b) {
      return b + " [" + a.N + " " + a.l + " " + ch(a) + "]";
    }

    ;

    function eh(a, b) {
      this.g = [];
      this.v = a;
      this.s = b || null;
      this.f = this.a = !1;
      this.c = void 0;
      this.u = this.A = this.i = !1;
      this.h = 0;
      this.b = null;
      this.l = 0;
    }

    eh.prototype.cancel = function (a) {
      if (this.a) this.c instanceof eh && this.c.cancel();else {
        if (this.b) {
          var b = this.b;
          delete this.b;
          a ? b.cancel(a) : (b.l--, 0 >= b.l && b.cancel());
        }

        this.v ? this.v.call(this.s, this) : this.u = !0;
        this.a || (a = new fh(this), gh(this), hh(this, !1, a));
      }
    };

    eh.prototype.m = function (a, b) {
      this.i = !1;
      hh(this, a, b);
    };

    function hh(a, b, c) {
      a.a = !0;
      a.c = c;
      a.f = !b;
      ih(a);
    }

    function gh(a) {
      if (a.a) {
        if (!a.u) throw new jh(a);
        a.u = !1;
      }
    }

    eh.prototype.D = function () {
      gh(this);
      hh(this, !0, null);
    };

    function kh(a, b) {
      lh(a, null, b, void 0);
    }

    function lh(a, b, c, d) {
      a.g.push([b, c, d]);
      a.a && ih(a);
    }

    eh.prototype.then = function (a, b, c) {
      var d,
          e,
          f = new y(function (a, b) {
        d = a;
        e = b;
      });
      lh(this, d, function (a) {
        a instanceof fh ? f.cancel() : e(a);
      });
      return f.then(a, b, c);
    };

    oa(eh);

    function mh(a) {
      return Ca(a.g, function (a) {
        return n(a[1]);
      });
    }

    function ih(a) {
      if (a.h && a.a && mh(a)) {
        var b = a.h,
            c = nh[b];
        c && (k.clearTimeout(c.a), delete nh[b]);
        a.h = 0;
      }

      a.b && (a.b.l--, delete a.b);
      b = a.c;

      for (var d = c = !1; a.g.length && !a.i;) {
        var e = a.g.shift(),
            f = e[0],
            h = e[1];
        e = e[2];
        if (f = a.f ? h : f) try {
          var m = f.call(e || a.s, b);
          void 0 !== m && (a.f = a.f && (m == b || m instanceof Error), a.c = b = m);
          if (pa(b) || "function" === typeof k.Promise && b instanceof k.Promise) d = !0, a.i = !0;
        } catch (p) {
          b = p, a.f = !0, mh(a) || (c = !0);
        }
      }

      a.c = b;
      d && (m = r(a.m, a, !0), d = r(a.m, a, !1), b instanceof eh ? (lh(b, m, d), b.A = !0) : b.then(m, d));
      c && (b = new oh(b), nh[b.a] = b, a.h = b.a);
    }

    function jh() {
      u.call(this);
    }

    t(jh, u);
    jh.prototype.message = "Deferred has already fired";
    jh.prototype.name = "AlreadyCalledError";

    function fh() {
      u.call(this);
    }

    t(fh, u);
    fh.prototype.message = "Deferred was canceled";
    fh.prototype.name = "CanceledError";

    function oh(a) {
      this.a = k.setTimeout(r(this.c, this), 0);
      this.b = a;
    }

    oh.prototype.c = function () {
      delete nh[this.a];
      throw this.b;
    };

    var nh = {};

    function ph(a) {
      var b = {},
          c = b.document || document,
          d = td(a),
          e = document.createElement("SCRIPT"),
          f = {
        Fb: e,
        Fa: void 0
      },
          h = new eh(qh, f),
          m = null,
          p = null != b.timeout ? b.timeout : 5E3;
      0 < p && (m = window.setTimeout(function () {
        rh(e, !0);
        var a = new sh(th, "Timeout reached for loading script " + d);
        gh(h);
        hh(h, !1, a);
      }, p), f.Fa = m);

      e.onload = e.onreadystatechange = function () {
        e.readyState && "loaded" != e.readyState && "complete" != e.readyState || (rh(e, b.ad || !1, m), h.D());
      };

      e.onerror = function () {
        rh(e, !0, m);
        var a = new sh(uh, "Error while loading script " + d);
        gh(h);
        hh(h, !1, a);
      };

      f = b.attributes || {};
      bb(f, {
        type: "text/javascript",
        charset: "UTF-8"
      });
      Jd(e, f);
      e.src = td(a);
      vh(c).appendChild(e);
      return h;
    }

    function vh(a) {
      var b;
      return (b = (a || document).getElementsByTagName("HEAD")) && 0 != b.length ? b[0] : a.documentElement;
    }

    function qh() {
      if (this && this.Fb) {
        var a = this.Fb;
        a && "SCRIPT" == a.tagName && rh(a, !0, this.Fa);
      }
    }

    function rh(a, b, c) {
      null != c && k.clearTimeout(c);
      a.onload = ca;
      a.onerror = ca;
      a.onreadystatechange = ca;
      b && window.setTimeout(function () {
        a && a.parentNode && a.parentNode.removeChild(a);
      }, 0);
    }

    var uh = 0,
        th = 1;

    function sh(a, b) {
      var c = "Jsloader error (code #" + a + ")";
      b && (c += ": " + b);
      u.call(this, c);
      this.code = a;
    }

    t(sh, u);

    function wh(a) {
      this.f = a;
    }

    t(wh, sg);

    wh.prototype.a = function () {
      return new this.f();
    };

    wh.prototype.b = function () {
      return {};
    };

    function xh(a, b, c) {
      this.b = a;
      a = b || {};
      this.i = a.secureTokenEndpoint || "https://securetoken.googleapis.com/v1/token";
      this.l = a.secureTokenTimeout || yh;
      this.f = $a(a.secureTokenHeaders || zh);
      this.g = a.firebaseEndpoint || "https://www.googleapis.com/identitytoolkit/v3/relyingparty/";
      this.h = a.firebaseTimeout || Ah;
      this.a = $a(a.firebaseHeaders || Bh);
      c && (this.a["X-Client-Version"] = c, this.f["X-Client-Version"] = c);
      c = "Node" == me();
      c = k.XMLHttpRequest || c && firebase.INTERNAL.node && firebase.INTERNAL.node.XMLHttpRequest;
      if (!c && !le()) throw new L("internal-error", "The XMLHttpRequest compatibility library was not found.");
      this.c = void 0;
      le() ? this.c = new Mg(self) : ne() ? this.c = new wh(c) : this.c = new xg();
    }

    var Ch,
        M = "idToken",
        yh = new Be(3E4, 6E4),
        zh = {
      "Content-Type": "application/x-www-form-urlencoded"
    },
        Ah = new Be(3E4, 6E4),
        Bh = {
      "Content-Type": "application/json"
    };

    function Dh(a, b) {
      b ? a.a["X-Firebase-Locale"] = b : delete a.a["X-Firebase-Locale"];
    }

    function Eh(a, b) {
      b ? (a.a["X-Client-Version"] = b, a.f["X-Client-Version"] = b) : (delete a.a["X-Client-Version"], delete a.f["X-Client-Version"]);
    }

    function Fh(a, b, c, d, e, f, h) {
      Ae() ? (Yd() || le() ? a = r(a.m, a) : (Ch || (Ch = new y(function (a, b) {
        Gh(a, b);
      })), a = r(a.u, a)), a(b, c, d, e, f, h)) : c && c(null);
    }

    xh.prototype.m = function (a, b, c, d, e, f) {
      if (le() && ("undefined" === typeof k.fetch || "undefined" === typeof k.Headers || "undefined" === typeof k.Request)) throw new L("operation-not-supported-in-this-environment", "fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");
      var h = new Qg(this.c);

      if (f) {
        h.g = Math.max(0, f);
        var m = setTimeout(function () {
          h.dispatchEvent("timeout");
        }, f);
      }

      tc(h, "complete", function () {
        m && clearTimeout(m);
        var a = null;

        try {
          a = JSON.parse(dh(this)) || null;
        } catch (E) {
          a = null;
        }

        b && b(a);
      });
      zc(h, "ready", function () {
        m && clearTimeout(m);
        Jb(this);
      });
      zc(h, "timeout", function () {
        m && clearTimeout(m);
        Jb(this);
        b && b(null);
      });
      Ug(h, a, c, d, e);
    };

    var Hh = qd("https://apis.google.com/js/client.js?onload=%{onload}"),
        Ih = "__fcb" + Math.floor(1E6 * Math.random()).toString();

    function Gh(a, b) {
      if (((window.gapi || {}).client || {}).request) a();else {
        k[Ih] = function () {
          ((window.gapi || {}).client || {}).request ? a() : b(Error("CORS_UNSUPPORTED"));
        };

        var c = ud(Hh, {
          onload: Ih
        });
        kh(ph(c), function () {
          b(Error("CORS_UNSUPPORTED"));
        });
      }
    }

    xh.prototype.u = function (a, b, c, d, e) {
      var f = this;
      Ch.then(function () {
        window.gapi.client.setApiKey(f.b);
        var h = window.gapi.auth.getToken();
        window.gapi.auth.setToken(null);
        window.gapi.client.request({
          path: a,
          method: c,
          body: d,
          headers: e,
          authType: "none",
          callback: function callback(a) {
            window.gapi.auth.setToken(h);
            b && b(a);
          }
        });
      }).o(function (a) {
        b && b({
          error: {
            message: a && a.message || "CORS_UNSUPPORTED"
          }
        });
      });
    };

    function Jh(a, b) {
      return new y(function (c, d) {
        "refresh_token" == b.grant_type && b.refresh_token || "authorization_code" == b.grant_type && b.code ? Fh(a, a.i + "?key=" + encodeURIComponent(a.b), function (a) {
          a ? a.error ? d(Kh(a)) : a.access_token && a.refresh_token ? c(a) : d(new L("internal-error")) : d(new L("network-request-failed"));
        }, "POST", hd(b).toString(), a.f, a.l.get()) : d(new L("internal-error"));
      });
    }

    function Lh(a, b, c, d, e, f) {
      var h = dd(a.g + b);
      G(h, "key", a.b);
      f && G(h, "cb", na().toString());
      var m = "GET" == c;
      if (m) for (var p in d) {
        d.hasOwnProperty(p) && G(h, p, d[p]);
      }
      return new y(function (b, f) {
        Fh(a, h.toString(), function (a) {
          a ? a.error ? f(Kh(a, e || {})) : b(a) : f(new L("network-request-failed"));
        }, c, m ? void 0 : Od(we(d)), a.a, a.h.get());
      });
    }

    function Mh(a) {
      if (!rg.test(a.email)) throw new L("invalid-email");
    }

    function Nh(a) {
      "email" in a && Mh(a);
    }

    function Oh(a, b) {
      return P(a, Ph, {
        identifier: b,
        continueUri: te() ? Vd() : "http://localhost"
      }).then(function (a) {
        return a.allProviders || [];
      });
    }

    function Qh(a, b) {
      return P(a, Ph, {
        identifier: b,
        continueUri: te() ? Vd() : "http://localhost"
      }).then(function (a) {
        return a.signinMethods || [];
      });
    }

    function Rh(a) {
      return P(a, Sh, {}).then(function (a) {
        return a.authorizedDomains || [];
      });
    }

    function Th(a) {
      if (!a[M]) throw new L("internal-error");
    }

    function Uh(a) {
      if (a.phoneNumber || a.temporaryProof) {
        if (!a.phoneNumber || !a.temporaryProof) throw new L("internal-error");
      } else {
        if (!a.sessionInfo) throw new L("missing-verification-id");
        if (!a.code) throw new L("missing-verification-code");
      }
    }

    xh.prototype.jb = function () {
      return P(this, Vh, {});
    };

    xh.prototype.mb = function (a, b) {
      return P(this, Wh, {
        idToken: a,
        email: b
      });
    };

    xh.prototype.nb = function (a, b) {
      return P(this, Zf, {
        idToken: a,
        password: b
      });
    };

    var Xh = {
      displayName: "DISPLAY_NAME",
      photoUrl: "PHOTO_URL"
    };
    g = xh.prototype;

    g.ob = function (a, b) {
      var c = {
        idToken: a
      },
          d = [];
      Ya(Xh, function (a, f) {
        var e = b[f];
        null === e ? d.push(a) : f in b && (c[f] = e);
      });
      d.length && (c.deleteAttribute = d);
      return P(this, Wh, c);
    };

    g.gb = function (a, b) {
      a = {
        requestType: "PASSWORD_RESET",
        email: a
      };
      bb(a, b);
      return P(this, Yh, a);
    };

    g.hb = function (a, b) {
      a = {
        requestType: "EMAIL_SIGNIN",
        email: a
      };
      bb(a, b);
      return P(this, Zh, a);
    };

    g.fb = function (a, b) {
      a = {
        requestType: "VERIFY_EMAIL",
        idToken: a
      };
      bb(a, b);
      return P(this, $h, a);
    };

    function gg(a, b) {
      return P(a, ai, b);
    }

    g.Sa = function (a) {
      return P(this, bi, a);
    };

    function ci(a, b, c) {
      return P(a, di, {
        idToken: b,
        deleteProvider: c
      });
    }

    function ei(a) {
      if (!a.requestUri || !a.sessionId && !a.postBody) throw new L("internal-error");
    }

    function fi(a) {
      var b = null;
      a.needConfirmation ? (a.code = "account-exists-with-different-credential", b = qg(a)) : "FEDERATED_USER_ID_ALREADY_LINKED" == a.errorMessage ? (a.code = "credential-already-in-use", b = qg(a)) : "EMAIL_EXISTS" == a.errorMessage ? (a.code = "email-already-in-use", b = qg(a)) : a.errorMessage && (b = gi(a.errorMessage));
      if (b) throw b;
      if (!a[M]) throw new L("internal-error");
    }

    function If(a, b) {
      b.returnIdpCredential = !0;
      return P(a, hi, b);
    }

    function Kf(a, b) {
      b.returnIdpCredential = !0;
      return P(a, ii, b);
    }

    function Lf(a, b) {
      b.returnIdpCredential = !0;
      b.autoCreate = !1;
      return P(a, ji, b);
    }

    function ki(a) {
      if (!a.oobCode) throw new L("invalid-action-code");
    }

    g.Wa = function (a, b) {
      return P(this, li, {
        oobCode: a,
        newPassword: b
      });
    };

    g.Ia = function (a) {
      return P(this, mi, {
        oobCode: a
      });
    };

    g.Ua = function (a) {
      return P(this, ni, {
        oobCode: a
      });
    };

    var ni = {
      endpoint: "setAccountInfo",
      w: ki,
      $: "email"
    },
        mi = {
      endpoint: "resetPassword",
      w: ki,
      J: function J(a) {
        if (!a.email || !a.requestType) throw new L("internal-error");
      }
    },
        oi = {
      endpoint: "signupNewUser",
      w: function w(a) {
        Mh(a);
        if (!a.password) throw new L("weak-password");
      },
      J: Th,
      P: !0
    },
        Ph = {
      endpoint: "createAuthUri"
    },
        pi = {
      endpoint: "deleteAccount",
      S: ["idToken"]
    },
        di = {
      endpoint: "setAccountInfo",
      S: ["idToken", "deleteProvider"],
      w: function w(a) {
        if (!fa(a.deleteProvider)) throw new L("internal-error");
      }
    },
        Wf = {
      endpoint: "emailLinkSignin",
      S: ["email", "oobCode"],
      w: Mh,
      J: Th,
      P: !0
    },
        Yf = {
      endpoint: "emailLinkSignin",
      S: ["idToken", "email", "oobCode"],
      w: Mh,
      J: Th,
      P: !0
    },
        qi = {
      endpoint: "getAccountInfo"
    },
        Zh = {
      endpoint: "getOobConfirmationCode",
      S: ["requestType"],
      w: function w(a) {
        if ("EMAIL_SIGNIN" != a.requestType) throw new L("internal-error");
        Mh(a);
      },
      $: "email"
    },
        $h = {
      endpoint: "getOobConfirmationCode",
      S: ["idToken", "requestType"],
      w: function w(a) {
        if ("VERIFY_EMAIL" != a.requestType) throw new L("internal-error");
      },
      $: "email"
    },
        Yh = {
      endpoint: "getOobConfirmationCode",
      S: ["requestType"],
      w: function w(a) {
        if ("PASSWORD_RESET" != a.requestType) throw new L("internal-error");
        Mh(a);
      },
      $: "email"
    },
        Sh = {
      pb: !0,
      endpoint: "getProjectConfig",
      Cb: "GET"
    },
        ri = {
      pb: !0,
      endpoint: "getRecaptchaParam",
      Cb: "GET",
      J: function J(a) {
        if (!a.recaptchaSiteKey) throw new L("internal-error");
      }
    },
        li = {
      endpoint: "resetPassword",
      w: ki,
      $: "email"
    },
        ai = {
      endpoint: "sendVerificationCode",
      S: ["phoneNumber", "recaptchaToken"],
      $: "sessionInfo"
    },
        Wh = {
      endpoint: "setAccountInfo",
      S: ["idToken"],
      w: Nh,
      P: !0
    },
        Zf = {
      endpoint: "setAccountInfo",
      S: ["idToken"],
      w: function w(a) {
        Nh(a);
        if (!a.password) throw new L("weak-password");
      },
      J: Th,
      P: !0
    },
        Vh = {
      endpoint: "signupNewUser",
      J: Th,
      P: !0
    },
        hi = {
      endpoint: "verifyAssertion",
      w: ei,
      J: fi,
      P: !0
    },
        ji = {
      endpoint: "verifyAssertion",
      w: ei,
      J: function J(a) {
        if (a.errorMessage && "USER_NOT_FOUND" == a.errorMessage) throw new L("user-not-found");
        if (a.errorMessage) throw gi(a.errorMessage);
        if (!a[M]) throw new L("internal-error");
      },
      P: !0
    },
        ii = {
      endpoint: "verifyAssertion",
      w: function w(a) {
        ei(a);
        if (!a.idToken) throw new L("internal-error");
      },
      J: fi,
      P: !0
    },
        si = {
      endpoint: "verifyCustomToken",
      w: function w(a) {
        if (!a.token) throw new L("invalid-custom-token");
      },
      J: Th,
      P: !0
    },
        Xf = {
      endpoint: "verifyPassword",
      w: function w(a) {
        Mh(a);
        if (!a.password) throw new L("wrong-password");
      },
      J: Th,
      P: !0
    },
        bi = {
      endpoint: "verifyPhoneNumber",
      w: Uh,
      J: Th
    },
        dg = {
      endpoint: "verifyPhoneNumber",
      w: function w(a) {
        if (!a.idToken) throw new L("internal-error");
        Uh(a);
      },
      J: function J(a) {
        if (a.temporaryProof) throw a.code = "credential-already-in-use", qg(a);
        Th(a);
      }
    },
        eg = {
      Tb: {
        USER_NOT_FOUND: "user-not-found"
      },
      endpoint: "verifyPhoneNumber",
      w: Uh,
      J: Th
    };

    function P(a, b, c) {
      if (!Le(c, b.S)) return A(new L("internal-error"));
      var d = b.Cb || "POST",
          e;
      return z(c).then(b.w).then(function () {
        b.P && (c.returnSecureToken = !0);
        return Lh(a, b.endpoint, d, c, b.Tb, b.pb || !1);
      }).then(function (a) {
        return e = a;
      }).then(b.J).then(function () {
        if (!b.$) return e;
        if (!(b.$ in e)) throw new L("internal-error");
        return e[b.$];
      });
    }

    function gi(a) {
      return Kh({
        error: {
          errors: [{
            message: a
          }],
          code: 400,
          message: a
        }
      });
    }

    function Kh(a, b) {
      var c = (a.error && a.error.errors && a.error.errors[0] || {}).reason || "";
      var d = {
        keyInvalid: "invalid-api-key",
        ipRefererBlocked: "app-not-authorized"
      };
      if (c = d[c] ? new L(d[c]) : null) return c;
      c = a.error && a.error.message || "";
      d = {
        INVALID_CUSTOM_TOKEN: "invalid-custom-token",
        CREDENTIAL_MISMATCH: "custom-token-mismatch",
        MISSING_CUSTOM_TOKEN: "internal-error",
        INVALID_IDENTIFIER: "invalid-email",
        MISSING_CONTINUE_URI: "internal-error",
        INVALID_EMAIL: "invalid-email",
        INVALID_PASSWORD: "wrong-password",
        USER_DISABLED: "user-disabled",
        MISSING_PASSWORD: "internal-error",
        EMAIL_EXISTS: "email-already-in-use",
        PASSWORD_LOGIN_DISABLED: "operation-not-allowed",
        INVALID_IDP_RESPONSE: "invalid-credential",
        FEDERATED_USER_ID_ALREADY_LINKED: "credential-already-in-use",
        INVALID_MESSAGE_PAYLOAD: "invalid-message-payload",
        INVALID_RECIPIENT_EMAIL: "invalid-recipient-email",
        INVALID_SENDER: "invalid-sender",
        EMAIL_NOT_FOUND: "user-not-found",
        EXPIRED_OOB_CODE: "expired-action-code",
        INVALID_OOB_CODE: "invalid-action-code",
        MISSING_OOB_CODE: "internal-error",
        CREDENTIAL_TOO_OLD_LOGIN_AGAIN: "requires-recent-login",
        INVALID_ID_TOKEN: "invalid-user-token",
        TOKEN_EXPIRED: "user-token-expired",
        USER_NOT_FOUND: "user-token-expired",
        CORS_UNSUPPORTED: "cors-unsupported",
        DYNAMIC_LINK_NOT_ACTIVATED: "dynamic-link-not-activated",
        INVALID_APP_ID: "invalid-app-id",
        TOO_MANY_ATTEMPTS_TRY_LATER: "too-many-requests",
        WEAK_PASSWORD: "weak-password",
        OPERATION_NOT_ALLOWED: "operation-not-allowed",
        USER_CANCELLED: "user-cancelled",
        CAPTCHA_CHECK_FAILED: "captcha-check-failed",
        INVALID_APP_CREDENTIAL: "invalid-app-credential",
        INVALID_CODE: "invalid-verification-code",
        INVALID_PHONE_NUMBER: "invalid-phone-number",
        INVALID_SESSION_INFO: "invalid-verification-id",
        INVALID_TEMPORARY_PROOF: "invalid-credential",
        MISSING_APP_CREDENTIAL: "missing-app-credential",
        MISSING_CODE: "missing-verification-code",
        MISSING_PHONE_NUMBER: "missing-phone-number",
        MISSING_SESSION_INFO: "missing-verification-id",
        QUOTA_EXCEEDED: "quota-exceeded",
        SESSION_EXPIRED: "code-expired",
        INVALID_CONTINUE_URI: "invalid-continue-uri",
        MISSING_ANDROID_PACKAGE_NAME: "missing-android-pkg-name",
        MISSING_IOS_BUNDLE_ID: "missing-ios-bundle-id",
        UNAUTHORIZED_DOMAIN: "unauthorized-continue-uri",
        INVALID_OAUTH_CLIENT_ID: "invalid-oauth-client-id",
        INVALID_CERT_HASH: "invalid-cert-hash"
      };
      bb(d, b || {});
      b = (b = c.match(/^[^\s]+\s*:\s*(.*)$/)) && 1 < b.length ? b[1] : void 0;

      for (var e in d) {
        if (0 === c.indexOf(e)) return new L(d[e], b);
      }

      !b && a && (b = ve(a));
      return new L("internal-error", b);
    }

    ;
    var ti = {
      Vc: {
        Ya: "https://www.googleapis.com/identitytoolkit/v3/relyingparty/",
        eb: "https://securetoken.googleapis.com/v1/token",
        id: "p"
      },
      Xc: {
        Ya: "https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",
        eb: "https://staging-securetoken.sandbox.googleapis.com/v1/token",
        id: "s"
      },
      Yc: {
        Ya: "https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",
        eb: "https://test-securetoken.sandbox.googleapis.com/v1/token",
        id: "t"
      }
    };

    function ui(a) {
      for (var b in ti) {
        if (ti[b].id === a) return a = ti[b], {
          firebaseEndpoint: a.Ya,
          secureTokenEndpoint: a.eb
        };
      }

      return null;
    }

    var vi;
    vi = ui("__EID__") ? "__EID__" : void 0;

    function wi(a) {
      this.b = a;
      this.a = null;
      this.ab = xi(this);
    }

    function xi(a) {
      return yi().then(function () {
        return new y(function (b, c) {
          I("gapi.iframes.getContext")().open({
            where: document.body,
            url: a.b,
            messageHandlersFilter: I("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),
            attributes: {
              style: {
                position: "absolute",
                top: "-100px",
                width: "1px",
                height: "1px"
              }
            },
            dontclear: !0
          }, function (d) {
            function e() {
              clearTimeout(f);
              b();
            }

            a.a = d;
            a.a.restyle({
              setHideOnLeave: !1
            });
            var f = setTimeout(function () {
              c(Error("Network Error"));
            }, zi.get());
            d.ping(e).then(e, function () {
              c(Error("Network Error"));
            });
          });
        });
      });
    }

    function Ai(a, b) {
      return a.ab.then(function () {
        return new y(function (c) {
          a.a.send(b.type, b, c, I("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));
        });
      });
    }

    function Bi(a, b) {
      a.ab.then(function () {
        a.a.register("authEvent", b, I("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));
      });
    }

    var Ci = qd("https://apis.google.com/js/api.js?onload=%{onload}"),
        Di = new Be(3E4, 6E4),
        zi = new Be(5E3, 15E3),
        Ei = null;

    function yi() {
      return Ei ? Ei : Ei = new y(function (a, b) {
        if (Ae()) {
          var c = function c() {
            ze();
            I("gapi.load")("gapi.iframes", {
              callback: a,
              ontimeout: function ontimeout() {
                ze();
                b(Error("Network Error"));
              },
              timeout: Di.get()
            });
          };

          if (I("gapi.iframes.Iframe")) a();else if (I("gapi.load")) c();else {
            var d = "__iframefcb" + Math.floor(1E6 * Math.random()).toString();

            k[d] = function () {
              I("gapi.load") ? c() : b(Error("Network Error"));
            };

            d = ud(Ci, {
              onload: d
            });
            z(ph(d)).o(function () {
              b(Error("Network Error"));
            });
          }
        } else b(Error("Network Error"));
      }).o(function (a) {
        Ei = null;
        throw a;
      });
    }

    ;

    function Fi(a, b, c) {
      this.i = a;
      this.g = b;
      this.h = c;
      this.f = null;
      this.a = ed(this.i, "/__/auth/iframe");
      G(this.a, "apiKey", this.g);
      G(this.a, "appName", this.h);
      this.b = null;
      this.c = [];
    }

    Fi.prototype.toString = function () {
      this.f ? G(this.a, "v", this.f) : kd(this.a.a, "v");
      this.b ? G(this.a, "eid", this.b) : kd(this.a.a, "eid");
      this.c.length ? G(this.a, "fw", this.c.join(",")) : kd(this.a.a, "fw");
      return this.a.toString();
    };

    function Gi(a, b, c, d, e) {
      this.m = a;
      this.u = b;
      this.c = c;
      this.l = d;
      this.h = this.g = this.i = null;
      this.a = e;
      this.f = null;
    }

    Gi.prototype.toString = function () {
      var a = ed(this.m, "/__/auth/handler");
      G(a, "apiKey", this.u);
      G(a, "appName", this.c);
      G(a, "authType", this.l);

      if (this.a.isOAuthProvider) {
        var b = this.a;

        try {
          var c = firebase.app(this.c).auth().aa();
        } catch (m) {
          c = null;
        }

        b.Xa = c;
        G(a, "providerId", this.a.providerId);
        b = this.a;
        c = we(b.tb);

        for (var d in c) {
          c[d] = c[d].toString();
        }

        d = b.zc;
        c = $a(c);

        for (var e = 0; e < d.length; e++) {
          var f = d[e];
          f in c && delete c[f];
        }

        b.Za && b.Xa && !c[b.Za] && (c[b.Za] = b.Xa);
        Za(c) || G(a, "customParameters", ve(c));
      }

      "function" === typeof this.a.yb && (b = this.a.yb(), b.length && G(a, "scopes", b.join(",")));
      this.i ? G(a, "redirectUrl", this.i) : kd(a.a, "redirectUrl");
      this.g ? G(a, "eventId", this.g) : kd(a.a, "eventId");
      this.h ? G(a, "v", this.h) : kd(a.a, "v");
      if (this.b) for (var h in this.b) {
        this.b.hasOwnProperty(h) && !cd(a, h) && G(a, h, this.b[h]);
      }
      this.f ? G(a, "eid", this.f) : kd(a.a, "eid");
      h = Hi(this.c);
      h.length && G(a, "fw", h.join(","));
      return a.toString();
    };

    function Hi(a) {
      try {
        return firebase.app(a).auth().Ka();
      } catch (b) {
        return [];
      }
    }

    function Ii(a, b, c, d, e) {
      this.u = a;
      this.f = b;
      this.b = c;
      this.c = d || null;
      this.h = e || null;
      this.m = this.s = this.v = null;
      this.g = [];
      this.l = this.a = null;
    }

    function Ji(a) {
      var b = Vd();
      return Rh(a).then(function (a) {
        a: {
          var c = dd(b),
              e = c.c;
          c = c.b;

          for (var f = 0; f < a.length; f++) {
            var h = a[f];
            var m = c;
            var p = e;
            0 == h.indexOf("chrome-extension://") ? m = dd(h).b == m && "chrome-extension" == p : "http" != p && "https" != p ? m = !1 : fe.test(h) ? m = m == h : (h = h.split(".").join("\\."), m = new RegExp("^(.+\\." + h + "|" + h + ")$", "i").test(m));

            if (m) {
              a = !0;
              break a;
            }
          }

          a = !1;
        }

        if (!a) throw new og(Vd());
      });
    }

    function Ki(a) {
      if (a.l) return a.l;
      a.l = ge().then(function () {
        if (!a.s) {
          var b = a.c,
              c = a.h,
              d = Hi(a.b),
              e = new Fi(a.u, a.f, a.b);
          e.f = b;
          e.b = c;
          e.c = Ja(d || []);
          a.s = e.toString();
        }

        a.i = new wi(a.s);
        Li(a);
      });
      return a.l;
    }

    g = Ii.prototype;

    g.Da = function (a, b, c) {
      var d = new L("popup-closed-by-user"),
          e = new L("web-storage-unsupported"),
          f = this,
          h = !1;
      return this.ca().then(function () {
        Mi(f).then(function (c) {
          c || (a && be(a), b(e), h = !0);
        });
      }).o(function () {}).then(function () {
        if (!h) return ee(a);
      }).then(function () {
        if (!h) return Gc(c).then(function () {
          b(d);
        });
      });
    };

    g.Gb = function () {
      var a = H();
      return !ue(a) && !ye(a);
    };

    g.Bb = function () {
      return !1;
    };

    g.xb = function (a, b, c, d, e, f, h) {
      if (!a) return A(new L("popup-blocked"));
      if (h && !ue()) return this.ca().o(function (b) {
        be(a);
        e(b);
      }), d(), z();
      this.a || (this.a = Ji(Ni(this)));
      var m = this;
      return this.a.then(function () {
        var b = m.ca().o(function (b) {
          be(a);
          e(b);
          throw b;
        });
        d();
        return b;
      }).then(function () {
        jg(c);

        if (!h) {
          var d = Oi(m.u, m.f, m.b, b, c, null, f, m.c, void 0, m.h);
          Wd(d, a);
        }
      }).o(function (a) {
        "auth/network-request-failed" == a.code && (m.a = null);
        throw a;
      });
    };

    function Ni(a) {
      a.m || (a.v = a.c ? pe(a.c, Hi(a.b)) : null, a.m = new xh(a.f, ui(a.h), a.v));
      return a.m;
    }

    g.Ba = function (a, b, c) {
      this.a || (this.a = Ji(Ni(this)));
      var d = this;
      return this.a.then(function () {
        jg(b);
        var e = Oi(d.u, d.f, d.b, a, b, Vd(), c, d.c, void 0, d.h);
        Wd(e);
      }).o(function (a) {
        "auth/network-request-failed" == a.code && (d.a = null);
        throw a;
      });
    };

    g.ca = function () {
      var a = this;
      return Ki(this).then(function () {
        return a.i.ab;
      }).o(function () {
        a.a = null;
        throw new L("network-request-failed");
      });
    };

    g.Lb = function () {
      return !0;
    };

    function Oi(a, b, c, d, e, f, h, m, p, E) {
      a = new Gi(a, b, c, d, e);
      a.i = f;
      a.g = h;
      a.h = m;
      a.b = $a(p || null);
      a.f = E;
      return a.toString();
    }

    function Li(a) {
      if (!a.i) throw Error("IfcHandler must be initialized!");
      Bi(a.i, function (b) {
        var c = {};

        if (b && b.authEvent) {
          var d = !1;
          b = lg(b.authEvent);

          for (c = 0; c < a.g.length; c++) {
            d = a.g[c](b) || d;
          }

          c = {};
          c.status = d ? "ACK" : "ERROR";
          return z(c);
        }

        c.status = "ERROR";
        return z(c);
      });
    }

    function Mi(a) {
      var b = {
        type: "webStorageSupport"
      };
      return Ki(a).then(function () {
        return Ai(a.i, b);
      }).then(function (a) {
        if (a && a.length && "undefined" !== typeof a[0].webStorageSupport) return a[0].webStorageSupport;
        throw Error();
      });
    }

    g.va = function (a) {
      this.g.push(a);
    };

    g.Ja = function (a) {
      Ha(this.g, function (b) {
        return b == a;
      });
    };

    function Pi(a) {
      this.a = a || firebase.INTERNAL.reactNative && firebase.INTERNAL.reactNative.AsyncStorage;
      if (!this.a) throw new L("internal-error", "The React Native compatibility library was not found.");
      this.type = "asyncStorage";
    }

    g = Pi.prototype;

    g.get = function (a) {
      return z(this.a.getItem(a)).then(function (a) {
        return a && xe(a);
      });
    };

    g.set = function (a, b) {
      return z(this.a.setItem(a, ve(b)));
    };

    g.X = function (a) {
      return z(this.a.removeItem(a));
    };

    g.ia = function () {};

    g.ea = function () {};

    function Qi() {
      this.a = {};
      this.type = "inMemory";
    }

    g = Qi.prototype;

    g.get = function (a) {
      return z(this.a[a]);
    };

    g.set = function (a, b) {
      this.a[a] = b;
      return z();
    };

    g.X = function (a) {
      delete this.a[a];
      return z();
    };

    g.ia = function () {};

    g.ea = function () {};

    function Ri() {
      try {
        var a = !!k.indexedDB;
      } catch (b) {
        a = !1;
      }

      if (!a) throw new L("web-storage-unsupported");
      this.f = {};
      this.c = [];
      this.a = 0;
      this.h = k.indexedDB;
      this.type = "indexedDB";
    }

    var Si;

    function Ti(a) {
      return new y(function (b, c) {
        var d = a.h.open("firebaseLocalStorageDb", 1);

        d.onerror = function (a) {
          c(Error(a.target.errorCode));
        };

        d.onupgradeneeded = function (a) {
          a = a.target.result;

          try {
            a.createObjectStore("firebaseLocalStorage", {
              keyPath: "fbase_key"
            });
          } catch (f) {
            c(f);
          }
        };

        d.onsuccess = function (a) {
          b(a.target.result);
        };
      });
    }

    function Ui(a) {
      a.g || (a.g = Ti(a));
      return a.g;
    }

    function Vi(a) {
      return a.objectStore("firebaseLocalStorage");
    }

    function Wi(a, b) {
      return a.transaction(["firebaseLocalStorage"], b ? "readwrite" : "readonly");
    }

    function Xi(a) {
      return new y(function (b, c) {
        a.onsuccess = function (a) {
          a && a.target ? b(a.target.result) : b();
        };

        a.onerror = function (a) {
          c(Error(a.target.errorCode));
        };
      });
    }

    g = Ri.prototype;

    g.set = function (a, b) {
      var c = !1,
          d,
          e = this;
      return Ui(this).then(function (b) {
        d = b;
        b = Vi(Wi(d, !0));
        return Xi(b.get(a));
      }).then(function (f) {
        var h = Vi(Wi(d, !0));
        if (f) return f.value = b, Xi(h.put(f));
        e.a++;
        c = !0;
        f = {};
        f.fbase_key = a;
        f.value = b;
        return Xi(h.add(f));
      }).then(function () {
        e.f[a] = b;
      }).ga(function () {
        c && e.a--;
      });
    };

    g.get = function (a) {
      return Ui(this).then(function (b) {
        return Xi(Vi(Wi(b, !1)).get(a));
      }).then(function (a) {
        return a && a.value;
      });
    };

    g.X = function (a) {
      var b = !1,
          c = this;
      return Ui(this).then(function (d) {
        b = !0;
        c.a++;
        return Xi(Vi(Wi(d, !0))["delete"](a));
      }).then(function () {
        delete c.f[a];
      }).ga(function () {
        b && c.a--;
      });
    };

    g.Ic = function () {
      var a = this;
      return Ui(this).then(function (a) {
        var b = Vi(Wi(a, !1));
        return b.getAll ? Xi(b.getAll()) : new y(function (a, c) {
          var d = [],
              e = b.openCursor();

          e.onsuccess = function (b) {
            (b = b.target.result) ? (d.push(b.value), b["continue"]()) : a(d);
          };

          e.onerror = function (a) {
            c(Error(a.target.errorCode));
          };
        });
      }).then(function (b) {
        var c = {},
            d = [];

        if (0 == a.a) {
          for (d = 0; d < b.length; d++) {
            c[b[d].fbase_key] = b[d].value;
          }

          d = Xd(a.f, c);
          a.f = c;
        }

        return d;
      });
    };

    g.ia = function (a) {
      0 == this.c.length && Yi(this);
      this.c.push(a);
    };

    g.ea = function (a) {
      Ha(this.c, function (b) {
        return b == a;
      });
      0 == this.c.length && this.b && this.b.cancel("STOP_EVENT");
    };

    function Yi(a) {
      function b() {
        a.b = Gc(800).then(r(a.Ic, a)).then(function (b) {
          0 < b.length && v(a.c, function (a) {
            a(b);
          });
        }).then(b).o(function (a) {
          "STOP_EVENT" != a.message && b();
        });
        return a.b;
      }

      a.b && a.b.cancel("STOP_EVENT");
      b();
    }

    ;

    function Zi() {
      if (!$i()) {
        if ("Node" == me()) throw new L("internal-error", "The LocalStorage compatibility library was not found.");
        throw new L("web-storage-unsupported");
      }

      this.a = aj() || firebase.INTERNAL.node.localStorage;
      this.type = "localStorage";
    }

    function aj() {
      try {
        var a = k.localStorage,
            b = re();
        a && (a.setItem(b, "1"), a.removeItem(b));
        return a;
      } catch (c) {
        return null;
      }
    }

    function $i() {
      var a = "Node" == me();
      a = aj() || a && firebase.INTERNAL.node && firebase.INTERNAL.node.localStorage;
      if (!a) return !1;

      try {
        return a.setItem("__sak", "1"), a.removeItem("__sak"), !0;
      } catch (b) {
        return !1;
      }
    }

    g = Zi.prototype;

    g.get = function (a) {
      var b = this;
      return z().then(function () {
        var c = b.a.getItem(a);
        return xe(c);
      });
    };

    g.set = function (a, b) {
      var c = this;
      return z().then(function () {
        var d = ve(b);
        null === d ? c.X(a) : c.a.setItem(a, d);
      });
    };

    g.X = function (a) {
      var b = this;
      return z().then(function () {
        b.a.removeItem(a);
      });
    };

    g.ia = function (a) {
      k.window && qc(k.window, "storage", a);
    };

    g.ea = function (a) {
      k.window && D(k.window, "storage", a);
    };

    function bj() {
      this.type = "nullStorage";
    }

    g = bj.prototype;

    g.get = function () {
      return z(null);
    };

    g.set = function () {
      return z();
    };

    g.X = function () {
      return z();
    };

    g.ia = function () {};

    g.ea = function () {};

    function cj() {
      if (!dj()) {
        if ("Node" == me()) throw new L("internal-error", "The SessionStorage compatibility library was not found.");
        throw new L("web-storage-unsupported");
      }

      this.a = ej() || firebase.INTERNAL.node.sessionStorage;
      this.type = "sessionStorage";
    }

    function ej() {
      try {
        var a = k.sessionStorage,
            b = re();
        a && (a.setItem(b, "1"), a.removeItem(b));
        return a;
      } catch (c) {
        return null;
      }
    }

    function dj() {
      var a = "Node" == me();
      a = ej() || a && firebase.INTERNAL.node && firebase.INTERNAL.node.sessionStorage;
      if (!a) return !1;

      try {
        return a.setItem("__sak", "1"), a.removeItem("__sak"), !0;
      } catch (b) {
        return !1;
      }
    }

    g = cj.prototype;

    g.get = function (a) {
      var b = this;
      return z().then(function () {
        var c = b.a.getItem(a);
        return xe(c);
      });
    };

    g.set = function (a, b) {
      var c = this;
      return z().then(function () {
        var d = ve(b);
        null === d ? c.X(a) : c.a.setItem(a, d);
      });
    };

    g.X = function (a) {
      var b = this;
      return z().then(function () {
        b.a.removeItem(a);
      });
    };

    g.ia = function () {};

    g.ea = function () {};

    function fj() {
      var a = {};
      a.Browser = gj;
      a.Node = hj;
      a.ReactNative = ij;
      a.Worker = jj;
      this.a = a[me()];
    }

    var kj,
        gj = {
      B: Zi,
      Pa: cj
    },
        hj = {
      B: Zi,
      Pa: cj
    },
        ij = {
      B: Pi,
      Pa: bj
    },
        jj = {
      B: Zi,
      Pa: bj
    };
    var lj = {
      Uc: "local",
      NONE: "none",
      Wc: "session"
    };

    function mj(a) {
      var b = new L("invalid-persistence-type"),
          c = new L("unsupported-persistence-type");

      a: {
        for (d in lj) {
          if (lj[d] == a) {
            var d = !0;
            break a;
          }
        }

        d = !1;
      }

      if (!d || "string" !== typeof a) throw b;

      switch (me()) {
        case "ReactNative":
          if ("session" === a) throw c;
          break;

        case "Node":
          if ("none" !== a) throw c;
          break;

        default:
          if (!qe() && "none" !== a) throw c;
      }
    }

    function nj() {
      var a = !ye(H()) && ke() ? !0 : !1,
          b = ue(),
          c = qe();
      this.m = a;
      this.h = b;
      this.l = c;
      this.a = {};
      kj || (kj = new fj());
      a = kj;

      try {
        if (!Ud() && Fe() || !k.indexedDB) var d = new a.a.B();else Si || (Si = new Ri()), d = Si;
        this.g = d;
      } catch (e) {
        this.g = new Qi(), this.h = !0;
      }

      try {
        this.i = new a.a.Pa();
      } catch (e) {
        this.i = new Qi();
      }

      this.u = new Qi();
      this.f = r(this.Kb, this);
      this.b = {};
    }

    var oj;

    function pj() {
      oj || (oj = new nj());
      return oj;
    }

    function qj(a, b) {
      switch (b) {
        case "session":
          return a.i;

        case "none":
          return a.u;

        default:
          return a.g;
      }
    }

    function rj(a, b) {
      return "firebase:" + a.name + (b ? ":" + b : "");
    }

    function sj(a, b, c) {
      var d = rj(b, c),
          e = qj(a, b.B);
      return a.get(b, c).then(function (f) {
        var h = null;

        try {
          h = xe(k.localStorage.getItem(d));
        } catch (m) {}

        if (h && !f) return k.localStorage.removeItem(d), a.set(b, h, c);
        h && f && "localStorage" != e.type && k.localStorage.removeItem(d);
      });
    }

    g = nj.prototype;

    g.get = function (a, b) {
      return qj(this, a.B).get(rj(a, b));
    };

    function tj(a, b, c) {
      c = rj(b, c);
      "local" == b.B && (a.b[c] = null);
      return qj(a, b.B).X(c);
    }

    g.set = function (a, b, c) {
      var d = rj(a, c),
          e = this,
          f = qj(this, a.B);
      return f.set(d, b).then(function () {
        return f.get(d);
      }).then(function (b) {
        "local" == a.B && (e.b[d] = b);
      });
    };

    g.addListener = function (a, b, c) {
      a = rj(a, b);
      this.l && (this.b[a] = k.localStorage.getItem(a));
      Za(this.a) && (qj(this, "local").ia(this.f), this.h || (Ud() || !Fe()) && k.indexedDB || !this.l || uj(this));
      this.a[a] || (this.a[a] = []);
      this.a[a].push(c);
    };

    g.removeListener = function (a, b, c) {
      a = rj(a, b);
      this.a[a] && (Ha(this.a[a], function (a) {
        return a == c;
      }), 0 == this.a[a].length && delete this.a[a]);
      Za(this.a) && (qj(this, "local").ea(this.f), vj(this));
    };

    function uj(a) {
      vj(a);
      a.c = setInterval(function () {
        for (var b in a.a) {
          var c = k.localStorage.getItem(b),
              d = a.b[b];
          c != d && (a.b[b] = c, c = new dc({
            type: "storage",
            key: b,
            target: window,
            oldValue: d,
            newValue: c,
            a: !0
          }), a.Kb(c));
        }
      }, 1E3);
    }

    function vj(a) {
      a.c && (clearInterval(a.c), a.c = null);
    }

    g.Kb = function (a) {
      if (a && a.g) {
        var b = a.a.key;
        if (null == b) for (var c in this.a) {
          var d = this.b[c];
          "undefined" === typeof d && (d = null);
          var e = k.localStorage.getItem(c);
          e !== d && (this.b[c] = e, this.Va(c));
        } else if (0 == b.indexOf("firebase:") && this.a[b]) {
          "undefined" !== typeof a.a.a ? qj(this, "local").ea(this.f) : vj(this);
          if (this.m) if (c = k.localStorage.getItem(b), d = a.a.newValue, d !== c) null !== d ? k.localStorage.setItem(b, d) : k.localStorage.removeItem(b);else if (this.b[b] === d && "undefined" === typeof a.a.a) return;
          var f = this;

          c = function c() {
            if ("undefined" !== typeof a.a.a || f.b[b] !== k.localStorage.getItem(b)) f.b[b] = k.localStorage.getItem(b), f.Va(b);
          };

          B && Yb && 10 == Yb && k.localStorage.getItem(b) !== a.a.newValue && a.a.newValue !== a.a.oldValue ? setTimeout(c, 10) : c();
        }
      } else v(a, r(this.Va, this));
    };

    g.Va = function (a) {
      this.a[a] && v(this.a[a], function (a) {
        a();
      });
    };

    function wj(a) {
      this.a = a;
      this.b = pj();
    }

    var xj = {
      name: "authEvent",
      B: "local"
    };

    function yj(a) {
      return a.b.get(xj, a.a).then(function (a) {
        return lg(a);
      });
    }

    ;

    function zj() {
      this.a = pj();
    }

    ;

    function Aj() {
      this.b = -1;
    }

    ;

    function Bj(a, b) {
      this.b = -1;
      this.b = Cj;
      this.f = k.Uint8Array ? new Uint8Array(this.b) : Array(this.b);
      this.g = this.c = 0;
      this.a = [];
      this.i = a;
      this.h = b;
      this.l = k.Int32Array ? new Int32Array(64) : Array(64);
      void 0 !== Dj || (k.Int32Array ? Dj = new Int32Array(Ej) : Dj = Ej);
      this.reset();
    }

    var Dj;
    t(Bj, Aj);

    for (var Cj = 64, Fj = Cj - 1, Gj = [], Hj = 0; Hj < Fj; Hj++) {
      Gj[Hj] = 0;
    }

    var Ij = Ia(128, Gj);

    Bj.prototype.reset = function () {
      this.g = this.c = 0;
      this.a = k.Int32Array ? new Int32Array(this.h) : Ja(this.h);
    };

    function Jj(a) {
      for (var b = a.f, c = a.l, d = 0, e = 0; e < b.length;) {
        c[d++] = b[e] << 24 | b[e + 1] << 16 | b[e + 2] << 8 | b[e + 3], e = 4 * d;
      }

      for (b = 16; 64 > b; b++) {
        e = c[b - 15] | 0;
        d = c[b - 2] | 0;
        var f = (c[b - 16] | 0) + ((e >>> 7 | e << 25) ^ (e >>> 18 | e << 14) ^ e >>> 3) | 0,
            h = (c[b - 7] | 0) + ((d >>> 17 | d << 15) ^ (d >>> 19 | d << 13) ^ d >>> 10) | 0;
        c[b] = f + h | 0;
      }

      d = a.a[0] | 0;
      e = a.a[1] | 0;
      var m = a.a[2] | 0,
          p = a.a[3] | 0,
          E = a.a[4] | 0,
          gc = a.a[5] | 0,
          Hc = a.a[6] | 0;
      f = a.a[7] | 0;

      for (b = 0; 64 > b; b++) {
        var Bl = ((d >>> 2 | d << 30) ^ (d >>> 13 | d << 19) ^ (d >>> 22 | d << 10)) + (d & e ^ d & m ^ e & m) | 0;
        h = E & gc ^ ~E & Hc;
        f = f + ((E >>> 6 | E << 26) ^ (E >>> 11 | E << 21) ^ (E >>> 25 | E << 7)) | 0;
        h = h + (Dj[b] | 0) | 0;
        h = f + (h + (c[b] | 0) | 0) | 0;
        f = Hc;
        Hc = gc;
        gc = E;
        E = p + h | 0;
        p = m;
        m = e;
        e = d;
        d = h + Bl | 0;
      }

      a.a[0] = a.a[0] + d | 0;
      a.a[1] = a.a[1] + e | 0;
      a.a[2] = a.a[2] + m | 0;
      a.a[3] = a.a[3] + p | 0;
      a.a[4] = a.a[4] + E | 0;
      a.a[5] = a.a[5] + gc | 0;
      a.a[6] = a.a[6] + Hc | 0;
      a.a[7] = a.a[7] + f | 0;
    }

    function Kj(a, b, c) {
      void 0 === c && (c = b.length);
      var d = 0,
          e = a.c;
      if (l(b)) for (; d < c;) {
        a.f[e++] = b.charCodeAt(d++), e == a.b && (Jj(a), e = 0);
      } else if (ha(b)) for (; d < c;) {
        var f = b[d++];
        if (!("number" == typeof f && 0 <= f && 255 >= f && f == (f | 0))) throw Error("message must be a byte array");
        a.f[e++] = f;
        e == a.b && (Jj(a), e = 0);
      } else throw Error("message must be string or array");
      a.c = e;
      a.g += c;
    }

    var Ej = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];

    function Lj() {
      Bj.call(this, 8, Mj);
    }

    t(Lj, Bj);
    var Mj = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225];

    function Nj(a, b, c, d, e) {
      this.u = a;
      this.i = b;
      this.l = c;
      this.m = d || null;
      this.s = e || null;
      this.h = b + ":" + c;
      this.v = new zj();
      this.g = new wj(this.h);
      this.f = null;
      this.b = [];
      this.a = this.c = null;
    }

    function Oj(a) {
      return new L("invalid-cordova-configuration", a);
    }

    g = Nj.prototype;

    g.ca = function () {
      return this.ya ? this.ya : this.ya = he().then(function () {
        if ("function" !== typeof I("universalLinks.subscribe", k)) throw Oj("cordova-universal-links-plugin is not installed");
        if ("undefined" === typeof I("BuildInfo.packageName", k)) throw Oj("cordova-plugin-buildinfo is not installed");
        if ("function" !== typeof I("cordova.plugins.browsertab.openUrl", k)) throw Oj("cordova-plugin-browsertab is not installed");
        if ("function" !== typeof I("cordova.InAppBrowser.open", k)) throw Oj("cordova-plugin-inappbrowser is not installed");
      }, function () {
        throw new L("cordova-not-ready");
      });
    };

    function Pj() {
      for (var a = 20, b = []; 0 < a;) {
        b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62 * Math.random()))), a--;
      }

      return b.join("");
    }

    function Qj(a) {
      var b = new Lj();
      Kj(b, a);
      a = [];
      var c = 8 * b.g;
      56 > b.c ? Kj(b, Ij, 56 - b.c) : Kj(b, Ij, b.b - (b.c - 56));

      for (var d = 63; 56 <= d; d--) {
        b.f[d] = c & 255, c /= 256;
      }

      Jj(b);

      for (d = c = 0; d < b.i; d++) {
        for (var e = 24; 0 <= e; e -= 8) {
          a[c++] = b.a[d] >> e & 255;
        }
      }

      return jf(a);
    }

    g.Da = function (a, b) {
      b(new L("operation-not-supported-in-this-environment"));
      return z();
    };

    g.xb = function () {
      return A(new L("operation-not-supported-in-this-environment"));
    };

    g.Lb = function () {
      return !1;
    };

    g.Gb = function () {
      return !0;
    };

    g.Bb = function () {
      return !0;
    };

    g.Ba = function (a, b, c) {
      if (this.c) return A(new L("redirect-operation-pending"));
      var d = this,
          e = k.document,
          f = null,
          h = null,
          m = null,
          p = null;
      return this.c = z().then(function () {
        jg(b);
        return Rj(d);
      }).then(function () {
        return Sj(d, a, b, c);
      }).then(function () {
        return new y(function (a, b) {
          h = function h() {
            var b = I("cordova.plugins.browsertab.close", k);
            a();
            "function" === typeof b && b();
            d.a && "function" === typeof d.a.close && (d.a.close(), d.a = null);
            return !1;
          };

          d.va(h);

          m = function m() {
            f || (f = Gc(2E3).then(function () {
              b(new L("redirect-cancelled-by-user"));
            }));
          };

          p = function p() {
            Ce() && m();
          };

          e.addEventListener("resume", m, !1);
          H().toLowerCase().match(/android/) || e.addEventListener("visibilitychange", p, !1);
        }).o(function (a) {
          return Tj(d).then(function () {
            throw a;
          });
        });
      }).ga(function () {
        m && e.removeEventListener("resume", m, !1);
        p && e.removeEventListener("visibilitychange", p, !1);
        f && f.cancel();
        h && d.Ja(h);
        d.c = null;
      });
    };

    function Sj(a, b, c, d) {
      var e = Pj(),
          f = new kg(b, d, null, e, new L("no-auth-event")),
          h = I("BuildInfo.packageName", k);
      if ("string" !== typeof h) throw new L("invalid-cordova-configuration");
      var m = I("BuildInfo.displayName", k),
          p = {};
      if (H().toLowerCase().match(/iphone|ipad|ipod/)) p.ibi = h;else if (H().toLowerCase().match(/android/)) p.apn = h;else return A(new L("operation-not-supported-in-this-environment"));
      m && (p.appDisplayName = m);
      e = Qj(e);
      p.sessionId = e;
      var E = Oi(a.u, a.i, a.l, b, c, null, d, a.m, p, a.s);
      return a.ca().then(function () {
        var b = a.h;
        return a.v.a.set(xj, f.C(), b);
      }).then(function () {
        var b = I("cordova.plugins.browsertab.isAvailable", k);
        if ("function" !== typeof b) throw new L("invalid-cordova-configuration");
        var c = null;
        b(function (b) {
          if (b) {
            c = I("cordova.plugins.browsertab.openUrl", k);
            if ("function" !== typeof c) throw new L("invalid-cordova-configuration");
            c(E);
          } else {
            c = I("cordova.InAppBrowser.open", k);
            if ("function" !== typeof c) throw new L("invalid-cordova-configuration");
            b = H();
            b = !(!b.match(/(iPad|iPhone|iPod).*OS 7_\d/i) && !b.match(/(iPad|iPhone|iPod).*OS 8_\d/i));
            a.a = c(E, b ? "_blank" : "_system", "location=yes");
          }
        });
      });
    }

    function Uj(a, b) {
      for (var c = 0; c < a.b.length; c++) {
        try {
          a.b[c](b);
        } catch (d) {}
      }
    }

    function Rj(a) {
      a.f || (a.f = a.ca().then(function () {
        return new y(function (b) {
          function c(d) {
            b(d);
            a.Ja(c);
            return !1;
          }

          a.va(c);
          Vj(a);
        });
      }));
      return a.f;
    }

    function Tj(a) {
      var b = null;
      return yj(a.g).then(function (c) {
        b = c;
        c = a.g;
        return tj(c.b, xj, c.a);
      }).then(function () {
        return b;
      });
    }

    function Vj(a) {
      function b(b) {
        d = !0;
        e && e.cancel();
        Tj(a).then(function (d) {
          var e = c;

          if (d && b && b.url) {
            var f = null;
            e = Ff(b.url);
            -1 != e.indexOf("/__/auth/callback") && (f = dd(e), f = xe(cd(f, "firebaseError") || null), f = (f = "object" === typeof f ? Ye(f) : null) ? new kg(d.b, d.c, null, null, f) : new kg(d.b, d.c, e, d.g));
            e = f || c;
          }

          Uj(a, e);
        });
      }

      var c = new kg("unknown", null, null, null, new L("no-auth-event")),
          d = !1,
          e = Gc(500).then(function () {
        return Tj(a).then(function () {
          d || Uj(a, c);
        });
      }),
          f = k.handleOpenURL;

      k.handleOpenURL = function (a) {
        0 == a.toLowerCase().indexOf(I("BuildInfo.packageName", k).toLowerCase() + "://") && b({
          url: a
        });
        if ("function" === typeof f) try {
          f(a);
        } catch (m) {
          console.error(m);
        }
      };

      ng || (ng = new mg());
      ng.subscribe(b);
    }

    g.va = function (a) {
      this.b.push(a);
      Rj(this).o(function (b) {
        "auth/invalid-cordova-configuration" === b.code && (b = new kg("unknown", null, null, null, new L("no-auth-event")), a(b));
      });
    };

    g.Ja = function (a) {
      Ha(this.b, function (b) {
        return b == a;
      });
    };

    function Wj(a) {
      this.a = a;
      this.b = pj();
    }

    var Xj = {
      name: "pendingRedirect",
      B: "session"
    };

    function Yj(a) {
      return a.b.set(Xj, "pending", a.a);
    }

    function Zj(a) {
      return tj(a.b, Xj, a.a);
    }

    function ak(a) {
      return a.b.get(Xj, a.a).then(function (a) {
        return "pending" == a;
      });
    }

    ;

    function bk(a, b, c) {
      this.v = a;
      this.l = b;
      this.u = c;
      this.h = [];
      this.f = !1;
      this.i = r(this.m, this);
      this.c = new ck();
      this.s = new dk();
      this.g = new Wj(this.l + ":" + this.u);
      this.b = {};
      this.b.unknown = this.c;
      this.b.signInViaRedirect = this.c;
      this.b.linkViaRedirect = this.c;
      this.b.reauthViaRedirect = this.c;
      this.b.signInViaPopup = this.s;
      this.b.linkViaPopup = this.s;
      this.b.reauthViaPopup = this.s;
      this.a = ek(this.v, this.l, this.u, vi);
    }

    function ek(a, b, c, d) {
      var e = firebase.SDK_VERSION || null;
      return ie() ? new Nj(a, b, c, e, d) : new Ii(a, b, c, e, d);
    }

    bk.prototype.reset = function () {
      this.f = !1;
      this.a.Ja(this.i);
      this.a = ek(this.v, this.l, this.u);
    };

    function fk(a) {
      a.f || (a.f = !0, a.a.va(a.i));
      var b = a.a;
      return a.a.ca().o(function (c) {
        a.a == b && a.reset();
        throw c;
      });
    }

    function gk(a) {
      a.a.Gb() && fk(a).o(function (b) {
        var c = new kg("unknown", null, null, null, new L("operation-not-supported-in-this-environment"));
        hk(b) && a.m(c);
      });
      a.a.Bb() || ik(a.c);
    }

    bk.prototype.subscribe = function (a) {
      Fa(this.h, a) || this.h.push(a);

      if (!this.f) {
        var b = this;
        ak(this.g).then(function (a) {
          a ? Zj(b.g).then(function () {
            fk(b).o(function (a) {
              var c = new kg("unknown", null, null, null, new L("operation-not-supported-in-this-environment"));
              hk(a) && b.m(c);
            });
          }) : gk(b);
        }).o(function () {
          gk(b);
        });
      }
    };

    bk.prototype.unsubscribe = function (a) {
      Ha(this.h, function (b) {
        return b == a;
      });
    };

    bk.prototype.m = function (a) {
      if (!a) throw new L("invalid-auth-event");

      for (var b = !1, c = 0; c < this.h.length; c++) {
        var d = this.h[c];

        if (d.qb(a.b, a.c)) {
          (b = this.b[a.b]) && b.h(a, d);
          b = !0;
          break;
        }
      }

      ik(this.c);
      return b;
    };

    var jk = new Be(2E3, 1E4),
        kk = new Be(3E4, 6E4);

    bk.prototype.ba = function () {
      return this.c.ba();
    };

    function lk(a, b, c, d, e, f) {
      return a.a.xb(b, c, d, function () {
        a.f || (a.f = !0, a.a.va(a.i));
      }, function () {
        a.reset();
      }, e, f);
    }

    function hk(a) {
      return a && "auth/cordova-not-ready" == a.code ? !0 : !1;
    }

    bk.prototype.Ba = function (a, b, c) {
      var d = this,
          e;
      return Yj(this.g).then(function () {
        return d.a.Ba(a, b, c).o(function (a) {
          if (hk(a)) throw new L("operation-not-supported-in-this-environment");
          e = a;
          return Zj(d.g).then(function () {
            throw e;
          });
        }).then(function () {
          return d.a.Lb() ? new y(function () {}) : Zj(d.g).then(function () {
            return d.ba();
          }).then(function () {}).o(function () {});
        });
      });
    };

    bk.prototype.Da = function (a, b, c, d) {
      return this.a.Da(c, function (c) {
        a.fa(b, null, c, d);
      }, jk.get());
    };

    var mk = {};

    function nk(a, b, c) {
      var d = b + ":" + c;
      mk[d] || (mk[d] = new bk(a, b, c));
      return mk[d];
    }

    function ck() {
      this.b = null;
      this.f = [];
      this.c = [];
      this.a = null;
      this.g = !1;
    }

    ck.prototype.reset = function () {
      this.b = null;
      this.a && (this.a.cancel(), this.a = null);
    };

    ck.prototype.h = function (a, b) {
      if (a) {
        this.reset();
        this.g = !0;
        var c = a.b,
            d = a.c,
            e = a.a && "auth/web-storage-unsupported" == a.a.code,
            f = a.a && "auth/operation-not-supported-in-this-environment" == a.a.code;
        "unknown" != c || e || f ? a.a ? (ok(this, !0, null, a.a), z()) : b.wa(c, d) ? pk(this, a, b) : A(new L("invalid-auth-event")) : (ok(this, !1, null, null), z());
      } else A(new L("invalid-auth-event"));
    };

    function ik(a) {
      a.g || (a.g = !0, ok(a, !1, null, null));
    }

    function pk(a, b, c) {
      c = c.wa(b.b, b.c);
      var d = b.f,
          e = b.g,
          f = !!b.b.match(/Redirect$/);
      c(d, e).then(function (b) {
        ok(a, f, b, null);
      }).o(function (b) {
        ok(a, f, null, b);
      });
    }

    function qk(a, b) {
      a.b = function () {
        return A(b);
      };

      if (a.c.length) for (var c = 0; c < a.c.length; c++) {
        a.c[c](b);
      }
    }

    function rk(a, b) {
      a.b = function () {
        return z(b);
      };

      if (a.f.length) for (var c = 0; c < a.f.length; c++) {
        a.f[c](b);
      }
    }

    function ok(a, b, c, d) {
      b ? d ? qk(a, d) : rk(a, c) : rk(a, {
        user: null
      });
      a.f = [];
      a.c = [];
    }

    ck.prototype.ba = function () {
      var a = this;
      return new y(function (b, c) {
        a.b ? a.b().then(b, c) : (a.f.push(b), a.c.push(c), sk(a));
      });
    };

    function sk(a) {
      var b = new L("timeout");
      a.a && a.a.cancel();
      a.a = Gc(kk.get()).then(function () {
        a.b || ok(a, !0, null, b);
      });
    }

    function dk() {}

    dk.prototype.h = function (a, b) {
      if (a) {
        var c = a.b,
            d = a.c;
        a.a ? (b.fa(a.b, null, a.a, a.c), z()) : b.wa(c, d) ? tk(a, b) : A(new L("invalid-auth-event"));
      } else A(new L("invalid-auth-event"));
    };

    function tk(a, b) {
      var c = a.c,
          d = a.b;
      b.wa(d, c)(a.f, a.g).then(function (a) {
        b.fa(d, a, null, c);
      }).o(function (a) {
        b.fa(d, null, a, c);
      });
    }

    ;

    function uk(a, b) {
      this.a = b;
      J(this, "verificationId", a);
    }

    uk.prototype.confirm = function (a) {
      a = hg(this.verificationId, a);
      return this.a(a);
    };

    function vk(a, b, c, d) {
      return new fg(a).Sa(b, c).then(function (a) {
        return new uk(a, d);
      });
    }

    ;

    function wk(a, b, c) {
      this.h = a;
      this.i = b;
      this.g = c;
      this.c = 3E4;
      this.f = 96E4;
      this.b = null;
      this.a = this.c;
      if (this.f < this.c) throw Error("Proactive refresh lower bound greater than upper bound!");
    }

    wk.prototype.start = function () {
      this.a = this.c;
      xk(this, !0);
    };

    function yk(a, b) {
      if (b) return a.a = a.c, a.g();
      b = a.a;
      a.a *= 2;
      a.a > a.f && (a.a = a.f);
      return b;
    }

    function xk(a, b) {
      a.stop();
      a.b = Gc(yk(a, b)).then(function () {
        return De();
      }).then(function () {
        return a.h();
      }).then(function () {
        xk(a, !0);
      }).o(function (b) {
        a.i(b) && xk(a, !1);
      });
    }

    wk.prototype.stop = function () {
      this.b && (this.b.cancel(), this.b = null);
    };

    function zk(a) {
      this.f = a;
      this.b = this.a = null;
      this.c = 0;
    }

    zk.prototype.C = function () {
      return {
        apiKey: this.f.b,
        refreshToken: this.a,
        accessToken: this.b,
        expirationTime: this.c
      };
    };

    function Ak(a, b) {
      var c = b[M],
          d = b.refreshToken;
      b = Bk(b.expiresIn);
      a.b = c;
      a.c = b;
      a.a = d;
    }

    function Bk(a) {
      return na() + 1E3 * parseInt(a, 10);
    }

    function Ck(a, b) {
      return Jh(a.f, b).then(function (b) {
        a.b = b.access_token;
        a.c = Bk(b.expires_in);
        a.a = b.refresh_token;
        return {
          accessToken: a.b,
          expirationTime: a.c,
          refreshToken: a.a
        };
      }).o(function (b) {
        "auth/user-token-expired" == b.code && (a.a = null);
        throw b;
      });
    }

    zk.prototype.getToken = function (a) {
      a = !!a;
      return this.b && !this.a ? A(new L("user-token-expired")) : a || !this.b || na() > this.c - 3E4 ? this.a ? Ck(this, {
        grant_type: "refresh_token",
        refresh_token: this.a
      }) : z(null) : z({
        accessToken: this.b,
        expirationTime: this.c,
        refreshToken: this.a
      });
    };

    function Dk(a, b) {
      this.a = a || null;
      this.b = b || null;
      K(this, {
        lastSignInTime: Ee(b || null),
        creationTime: Ee(a || null)
      });
    }

    function Ek(a) {
      return new Dk(a.a, a.b);
    }

    Dk.prototype.C = function () {
      return {
        lastLoginAt: this.b,
        createdAt: this.a
      };
    };

    function Fk(a, b, c, d, e, f) {
      K(this, {
        uid: a,
        displayName: d || null,
        photoURL: e || null,
        email: c || null,
        phoneNumber: f || null,
        providerId: b
      });
    }

    function Gk(a, b) {
      C.call(this, a);

      for (var c in b) {
        this[c] = b[c];
      }
    }

    t(Gk, C);

    function Hk(a, b, c) {
      this.D = [];
      this.G = a.apiKey;
      this.s = a.appName;
      this.A = a.authDomain || null;
      a = firebase.SDK_VERSION ? pe(firebase.SDK_VERSION) : null;
      this.b = new xh(this.G, ui(vi), a);
      this.h = new zk(this.b);
      Ik(this, b[M]);
      Ak(this.h, b);
      J(this, "refreshToken", this.h.a);
      Jk(this, c || {});
      F.call(this);
      this.I = !1;
      this.A && se() && (this.a = nk(this.A, this.G, this.s));
      this.N = [];
      this.i = null;
      this.l = Kk(this);
      this.U = r(this.Ga, this);
      var d = this;
      this.ha = null;

      this.sa = function (a) {
        d.na(a.h);
      };

      this.W = null;
      this.O = [];

      this.ra = function (a) {
        Lk(d, a.f);
      };

      this.V = null;
    }

    t(Hk, F);

    Hk.prototype.na = function (a) {
      this.ha = a;
      Dh(this.b, a);
    };

    Hk.prototype.aa = function () {
      return this.ha;
    };

    function Mk(a, b) {
      a.W && D(a.W, "languageCodeChanged", a.sa);
      (a.W = b) && qc(b, "languageCodeChanged", a.sa);
    }

    function Lk(a, b) {
      a.O = b;
      Eh(a.b, firebase.SDK_VERSION ? pe(firebase.SDK_VERSION, a.O) : null);
    }

    Hk.prototype.Ka = function () {
      return Ja(this.O);
    };

    function Nk(a, b) {
      a.V && D(a.V, "frameworkChanged", a.ra);
      (a.V = b) && qc(b, "frameworkChanged", a.ra);
    }

    Hk.prototype.Ga = function () {
      this.l.b && (this.l.stop(), this.l.start());
    };

    function Ok(a) {
      try {
        return firebase.app(a.s).auth();
      } catch (b) {
        throw new L("internal-error", "No firebase.auth.Auth instance is available for the Firebase App '" + a.s + "'!");
      }
    }

    function Kk(a) {
      return new wk(function () {
        return a.F(!0);
      }, function (a) {
        return a && "auth/network-request-failed" == a.code ? !0 : !1;
      }, function () {
        var b = a.h.c - na() - 3E5;
        return 0 < b ? b : 0;
      });
    }

    function Pk(a) {
      a.m || a.l.b || (a.l.start(), D(a, "tokenChanged", a.U), qc(a, "tokenChanged", a.U));
    }

    function Qk(a) {
      D(a, "tokenChanged", a.U);
      a.l.stop();
    }

    function Ik(a, b) {
      a.qa = b;
      J(a, "_lat", b);
    }

    function Rk(a, b) {
      Ha(a.N, function (a) {
        return a == b;
      });
    }

    function Sk(a) {
      for (var b = [], c = 0; c < a.N.length; c++) {
        b.push(a.N[c](a));
      }

      return vb(b).then(function () {
        return a;
      });
    }

    function Tk(a) {
      a.a && !a.I && (a.I = !0, a.a.subscribe(a));
    }

    function Jk(a, b) {
      K(a, {
        uid: b.uid,
        displayName: b.displayName || null,
        photoURL: b.photoURL || null,
        email: b.email || null,
        emailVerified: b.emailVerified || !1,
        phoneNumber: b.phoneNumber || null,
        isAnonymous: b.isAnonymous || !1,
        metadata: new Dk(b.createdAt, b.lastLoginAt),
        providerData: []
      });
    }

    J(Hk.prototype, "providerId", "firebase");

    function Uk() {}

    function Vk(a) {
      return z().then(function () {
        if (a.m) throw new L("app-deleted");
      });
    }

    function Wk(a) {
      return Ba(a.providerData, function (a) {
        return a.providerId;
      });
    }

    function Xk(a, b) {
      b && (Yk(a, b.providerId), a.providerData.push(b));
    }

    function Yk(a, b) {
      Ha(a.providerData, function (a) {
        return a.providerId == b;
      });
    }

    function Zk(a, b, c) {
      ("uid" != b || c) && a.hasOwnProperty(b) && J(a, b, c);
    }

    function $k(a, b) {
      a != b && (K(a, {
        uid: b.uid,
        displayName: b.displayName,
        photoURL: b.photoURL,
        email: b.email,
        emailVerified: b.emailVerified,
        phoneNumber: b.phoneNumber,
        isAnonymous: b.isAnonymous,
        providerData: []
      }), b.metadata ? J(a, "metadata", Ek(b.metadata)) : J(a, "metadata", new Dk()), v(b.providerData, function (b) {
        Xk(a, b);
      }), a.h = b.h, J(a, "refreshToken", a.h.a));
    }

    g = Hk.prototype;

    g.reload = function () {
      var a = this;
      return R(this, Vk(this).then(function () {
        return al(a).then(function () {
          return Sk(a);
        }).then(Uk);
      }));
    };

    function al(a) {
      return a.F().then(function (b) {
        var c = a.isAnonymous;
        return bl(a, b).then(function () {
          c || Zk(a, "isAnonymous", !1);
          return b;
        });
      });
    }

    g.F = function (a) {
      var b = this;
      return R(this, Vk(this).then(function () {
        return b.h.getToken(a);
      }).then(function (a) {
        if (!a) throw new L("internal-error");
        a.accessToken != b.qa && (Ik(b, a.accessToken), b.dispatchEvent(new Gk("tokenChanged")));
        Zk(b, "refreshToken", a.refreshToken);
        return a.accessToken;
      }));
    };

    g.getToken = function (a) {
      Ge["firebase.User.prototype.getToken is deprecated. Please use firebase.User.prototype.getIdToken instead."] || (Ge["firebase.User.prototype.getToken is deprecated. Please use firebase.User.prototype.getIdToken instead."] = !0, "undefined" !== typeof console && "function" === typeof console.warn && console.warn("firebase.User.prototype.getToken is deprecated. Please use firebase.User.prototype.getIdToken instead."));
      return this.F(a);
    };

    function cl(a, b) {
      b[M] && a.qa != b[M] && (Ak(a.h, b), a.dispatchEvent(new Gk("tokenChanged")), Ik(a, b[M]), Zk(a, "refreshToken", a.h.a));
    }

    function bl(a, b) {
      return P(a.b, qi, {
        idToken: b
      }).then(r(a.tc, a));
    }

    g.tc = function (a) {
      a = a.users;
      if (!a || !a.length) throw new L("internal-error");
      a = a[0];
      Jk(this, {
        uid: a.localId,
        displayName: a.displayName,
        photoURL: a.photoUrl,
        email: a.email,
        emailVerified: !!a.emailVerified,
        phoneNumber: a.phoneNumber,
        lastLoginAt: a.lastLoginAt,
        createdAt: a.createdAt
      });

      for (var b = dl(a), c = 0; c < b.length; c++) {
        Xk(this, b[c]);
      }

      Zk(this, "isAnonymous", !(this.email && a.passwordHash) && !(this.providerData && this.providerData.length));
    };

    function dl(a) {
      return (a = a.providerUserInfo) && a.length ? Ba(a, function (a) {
        return new Fk(a.rawId, a.providerId, a.email, a.displayName, a.photoUrl, a.phoneNumber);
      }) : [];
    }

    g.bb = function (a) {
      var b = this,
          c = null;
      return R(this, a.f(this.b, this.uid).then(function (a) {
        cl(b, a);
        c = el(b, a, "reauthenticate");
        b.i = null;
        return b.reload();
      }).then(function () {
        return c;
      }), !0);
    };

    g.uc = function (a) {
      return this.bb(a).then(function () {});
    };

    function fl(a, b) {
      return al(a).then(function () {
        if (Fa(Wk(a), b)) return Sk(a).then(function () {
          throw new L("provider-already-linked");
        });
      });
    }

    g.$a = function (a) {
      var b = this,
          c = null;
      return R(this, fl(this, a.providerId).then(function () {
        return b.F();
      }).then(function (c) {
        return a.c(b.b, c);
      }).then(function (a) {
        c = el(b, a, "link");
        return gl(b, a);
      }).then(function () {
        return c;
      }));
    };

    g.kc = function (a) {
      return this.$a(a).then(function (a) {
        return a.user;
      });
    };

    g.mc = function (a, b) {
      var c = this;
      return R(this, fl(this, "phone").then(function () {
        return vk(Ok(c), a, b, r(c.$a, c));
      }));
    };

    g.vc = function (a, b) {
      var c = this;
      return R(this, z().then(function () {
        return vk(Ok(c), a, b, r(c.bb, c));
      }), !0);
    };

    function el(a, b, c) {
      var d = ig(b);
      b = vf(b);
      return Je({
        user: a,
        credential: d,
        additionalUserInfo: b,
        operationType: c
      });
    }

    function gl(a, b) {
      cl(a, b);
      return a.reload().then(function () {
        return a;
      });
    }

    g.mb = function (a) {
      var b = this;
      return R(this, this.F().then(function (c) {
        return b.b.mb(c, a);
      }).then(function (a) {
        cl(b, a);
        return b.reload();
      }));
    };

    g.Mc = function (a) {
      var b = this;
      return R(this, this.F().then(function (c) {
        return a.c(b.b, c);
      }).then(function (a) {
        cl(b, a);
        return b.reload();
      }));
    };

    g.nb = function (a) {
      var b = this;
      return R(this, this.F().then(function (c) {
        return b.b.nb(c, a);
      }).then(function (a) {
        cl(b, a);
        return b.reload();
      }));
    };

    g.ob = function (a) {
      if (void 0 === a.displayName && void 0 === a.photoURL) return Vk(this);
      var b = this;
      return R(this, this.F().then(function (c) {
        return b.b.ob(c, {
          displayName: a.displayName,
          photoUrl: a.photoURL
        });
      }).then(function (a) {
        cl(b, a);
        Zk(b, "displayName", a.displayName || null);
        Zk(b, "photoURL", a.photoUrl || null);
        v(b.providerData, function (a) {
          "password" === a.providerId && (J(a, "displayName", b.displayName), J(a, "photoURL", b.photoURL));
        });
        return Sk(b);
      }).then(Uk));
    };

    g.Lc = function (a) {
      var b = this;
      return R(this, al(this).then(function (c) {
        return Fa(Wk(b), a) ? ci(b.b, c, [a]).then(function (a) {
          var c = {};
          v(a.providerUserInfo || [], function (a) {
            c[a.providerId] = !0;
          });
          v(Wk(b), function (a) {
            c[a] || Yk(b, a);
          });
          c[fg.PROVIDER_ID] || J(b, "phoneNumber", null);
          return Sk(b);
        }) : Sk(b).then(function () {
          throw new L("no-such-provider");
        });
      }));
    };

    g.delete = function () {
      var a = this;
      return R(this, this.F().then(function (b) {
        return P(a.b, pi, {
          idToken: b
        });
      }).then(function () {
        a.dispatchEvent(new Gk("userDeleted"));
      })).then(function () {
        for (var b = 0; b < a.D.length; b++) {
          a.D[b].cancel("app-deleted");
        }

        Mk(a, null);
        Nk(a, null);
        a.D = [];
        a.m = !0;
        Qk(a);
        J(a, "refreshToken", null);
        a.a && a.a.unsubscribe(a);
      });
    };

    g.qb = function (a, b) {
      return "linkViaPopup" == a && (this.g || null) == b && this.f || "reauthViaPopup" == a && (this.g || null) == b && this.f || "linkViaRedirect" == a && (this.Z || null) == b || "reauthViaRedirect" == a && (this.Z || null) == b ? !0 : !1;
    };

    g.fa = function (a, b, c, d) {
      "linkViaPopup" != a && "reauthViaPopup" != a || d != (this.g || null) || (c && this.v ? this.v(c) : b && !c && this.f && this.f(b), this.c && (this.c.cancel(), this.c = null), delete this.f, delete this.v);
    };

    g.wa = function (a, b) {
      return "linkViaPopup" == a && b == (this.g || null) ? r(this.vb, this) : "reauthViaPopup" == a && b == (this.g || null) ? r(this.wb, this) : "linkViaRedirect" == a && (this.Z || null) == b ? r(this.vb, this) : "reauthViaRedirect" == a && (this.Z || null) == b ? r(this.wb, this) : null;
    };

    g.nc = function (a) {
      var b = this;
      return hl(this, "linkViaPopup", a, function () {
        return fl(b, a.providerId).then(function () {
          return Sk(b);
        });
      }, !1);
    };

    g.wc = function (a) {
      return hl(this, "reauthViaPopup", a, function () {
        return z();
      }, !0);
    };

    function hl(a, b, c, d, e) {
      if (!se()) return A(new L("operation-not-supported-in-this-environment"));
      if (a.i && !e) return A(a.i);
      var f = uf(c.providerId),
          h = re(a.uid + ":::"),
          m = null;
      (!ue() || ke()) && a.A && c.isOAuthProvider && (m = Oi(a.A, a.G, a.s, b, c, null, h, firebase.SDK_VERSION || null));
      var p = ce(m, f && f.Aa, f && f.za);
      d = d().then(function () {
        il(a);
        if (!e) return a.F().then(function () {});
      }).then(function () {
        return lk(a.a, p, b, c, h, !!m);
      }).then(function () {
        return new y(function (c, d) {
          a.fa(b, null, new L("cancelled-popup-request"), a.g || null);
          a.f = c;
          a.v = d;
          a.g = h;
          a.c = a.a.Da(a, b, p, h);
        });
      }).then(function (a) {
        p && be(p);
        return a ? Je(a) : null;
      }).o(function (a) {
        p && be(p);
        throw a;
      });
      return R(a, d, e);
    }

    g.oc = function (a) {
      var b = this;
      return jl(this, "linkViaRedirect", a, function () {
        return fl(b, a.providerId);
      }, !1);
    };

    g.xc = function (a) {
      return jl(this, "reauthViaRedirect", a, function () {
        return z();
      }, !0);
    };

    function jl(a, b, c, d, e) {
      if (!se()) return A(new L("operation-not-supported-in-this-environment"));
      if (a.i && !e) return A(a.i);
      var f = null,
          h = re(a.uid + ":::");
      d = d().then(function () {
        il(a);
        if (!e) return a.F().then(function () {});
      }).then(function () {
        a.Z = h;
        return Sk(a);
      }).then(function (b) {
        a.da && (b = a.da, b = b.b.set(kl, a.C(), b.a));
        return b;
      }).then(function () {
        return a.a.Ba(b, c, h);
      }).o(function (b) {
        f = b;
        if (a.da) return ll(a.da);
        throw f;
      }).then(function () {
        if (f) throw f;
      });
      return R(a, d, e);
    }

    function il(a) {
      if (!a.a || !a.I) {
        if (a.a && !a.I) throw new L("internal-error");
        throw new L("auth-domain-config-required");
      }
    }

    g.vb = function (a, b) {
      var c = this;
      this.c && (this.c.cancel(), this.c = null);
      var d = null,
          e = this.F().then(function (d) {
        return Kf(c.b, {
          requestUri: a,
          sessionId: b,
          idToken: d
        });
      }).then(function (a) {
        d = el(c, a, "link");
        return gl(c, a);
      }).then(function () {
        return d;
      });
      return R(this, e);
    };

    g.wb = function (a, b) {
      var c = this;
      this.c && (this.c.cancel(), this.c = null);
      var d = null,
          e = z().then(function () {
        return Gf(Lf(c.b, {
          requestUri: a,
          sessionId: b
        }), c.uid);
      }).then(function (a) {
        d = el(c, a, "reauthenticate");
        cl(c, a);
        c.i = null;
        return c.reload();
      }).then(function () {
        return d;
      });
      return R(this, e, !0);
    };

    g.fb = function (a) {
      var b = this,
          c = null;
      return R(this, this.F().then(function (b) {
        c = b;
        return "undefined" === typeof a || Za(a) ? {} : hf(new Ze(a));
      }).then(function (a) {
        return b.b.fb(c, a);
      }).then(function (a) {
        if (b.email != a) return b.reload();
      }).then(function () {}));
    };

    function R(a, b, c) {
      var d = ml(a, b, c);
      a.D.push(d);
      d.ga(function () {
        Ga(a.D, d);
      });
      return d;
    }

    function ml(a, b, c) {
      return a.i && !c ? (b.cancel(), A(a.i)) : b.o(function (b) {
        !b || "auth/user-disabled" != b.code && "auth/user-token-expired" != b.code || (a.i || a.dispatchEvent(new Gk("userInvalidated")), a.i = b);
        throw b;
      });
    }

    g.toJSON = function () {
      return this.C();
    };

    g.C = function () {
      var a = {
        uid: this.uid,
        displayName: this.displayName,
        photoURL: this.photoURL,
        email: this.email,
        emailVerified: this.emailVerified,
        phoneNumber: this.phoneNumber,
        isAnonymous: this.isAnonymous,
        providerData: [],
        apiKey: this.G,
        appName: this.s,
        authDomain: this.A,
        stsTokenManager: this.h.C(),
        redirectEventId: this.Z || null
      };
      this.metadata && bb(a, this.metadata.C());
      v(this.providerData, function (b) {
        a.providerData.push(Ke(b));
      });
      return a;
    };

    function nl(a) {
      if (!a.apiKey) return null;
      var b = {
        apiKey: a.apiKey,
        authDomain: a.authDomain,
        appName: a.appName
      },
          c = {};
      if (a.stsTokenManager && a.stsTokenManager.accessToken && a.stsTokenManager.expirationTime) c[M] = a.stsTokenManager.accessToken, c.refreshToken = a.stsTokenManager.refreshToken || null, c.expiresIn = (a.stsTokenManager.expirationTime - na()) / 1E3;else return null;
      var d = new Hk(b, c, a);
      a.providerData && v(a.providerData, function (a) {
        a && Xk(d, Je(a));
      });
      a.redirectEventId && (d.Z = a.redirectEventId);
      return d;
    }

    function ol(a, b, c, d) {
      var e = new Hk(a, b);
      c && (e.da = c);
      d && Lk(e, d);
      return e.reload().then(function () {
        return e;
      });
    }

    ;

    function pl(a) {
      this.a = a;
      this.b = pj();
    }

    var kl = {
      name: "redirectUser",
      B: "session"
    };

    function ll(a) {
      return tj(a.b, kl, a.a);
    }

    function ql(a, b) {
      return a.b.get(kl, a.a).then(function (a) {
        a && b && (a.authDomain = b);
        return nl(a || {});
      });
    }

    ;

    function rl(a) {
      this.a = a;
      this.b = pj();
      this.c = null;
      this.f = sl(this);
      this.b.addListener(tl("local"), this.a, r(this.g, this));
    }

    rl.prototype.g = function () {
      var a = this,
          b = tl("local");
      ul(this, function () {
        return z().then(function () {
          return a.c && "local" != a.c.B ? a.b.get(b, a.a) : null;
        }).then(function (c) {
          if (c) return vl(a, "local").then(function () {
            a.c = b;
          });
        });
      });
    };

    function vl(a, b) {
      var c = [],
          d;

      for (d in lj) {
        lj[d] !== b && c.push(tj(a.b, tl(lj[d]), a.a));
      }

      c.push(tj(a.b, wl, a.a));
      return ub(c);
    }

    function sl(a) {
      var b = tl("local"),
          c = tl("session"),
          d = tl("none");
      return sj(a.b, b, a.a).then(function () {
        return a.b.get(c, a.a);
      }).then(function (e) {
        return e ? c : a.b.get(d, a.a).then(function (c) {
          return c ? d : a.b.get(b, a.a).then(function (c) {
            return c ? b : a.b.get(wl, a.a).then(function (a) {
              return a ? tl(a) : b;
            });
          });
        });
      }).then(function (b) {
        a.c = b;
        return vl(a, b.B);
      }).o(function () {
        a.c || (a.c = b);
      });
    }

    var wl = {
      name: "persistence",
      B: "session"
    };

    function tl(a) {
      return {
        name: "authUser",
        B: a
      };
    }

    rl.prototype.ib = function (a) {
      var b = null,
          c = this;
      mj(a);
      return ul(this, function () {
        return a != c.c.B ? c.b.get(c.c, c.a).then(function (d) {
          b = d;
          return vl(c, a);
        }).then(function () {
          c.c = tl(a);
          if (b) return c.b.set(c.c, b, c.a);
        }) : z();
      });
    };

    function xl(a) {
      return ul(a, function () {
        return a.b.set(wl, a.c.B, a.a);
      });
    }

    function yl(a, b) {
      return ul(a, function () {
        return a.b.set(a.c, b.C(), a.a);
      });
    }

    function zl(a) {
      return ul(a, function () {
        return tj(a.b, a.c, a.a);
      });
    }

    function Al(a, b) {
      return ul(a, function () {
        return a.b.get(a.c, a.a).then(function (a) {
          a && b && (a.authDomain = b);
          return nl(a || {});
        });
      });
    }

    function ul(a, b) {
      a.f = a.f.then(b, b);
      return a.f;
    }

    ;

    function Cl(a) {
      this.l = !1;
      J(this, "app", a);
      if (S(this).options && S(this).options.apiKey) a = firebase.SDK_VERSION ? pe(firebase.SDK_VERSION) : null, this.b = new xh(S(this).options && S(this).options.apiKey, ui(vi), a);else throw new L("invalid-api-key");
      this.N = [];
      this.m = [];
      this.I = [];
      this.Ob = firebase.INTERNAL.createSubscribe(r(this.hc, this));
      this.O = void 0;
      this.Pb = firebase.INTERNAL.createSubscribe(r(this.ic, this));
      Dl(this, null);
      this.h = new rl(S(this).options.apiKey + ":" + S(this).name);
      this.G = new pl(S(this).options.apiKey + ":" + S(this).name);
      this.U = T(this, El(this));
      this.i = T(this, Fl(this));
      this.W = !1;
      this.ha = r(this.Hc, this);
      this.Ga = r(this.ka, this);
      this.qa = r(this.Yb, this);
      this.ra = r(this.fc, this);
      this.sa = r(this.gc, this);
      Gl(this);
      this.INTERNAL = {};
      this.INTERNAL["delete"] = r(this.delete, this);
      this.INTERNAL.logFramework = r(this.pc, this);
      this.s = 0;
      F.call(this);
      Hl(this);
      this.D = [];
    }

    t(Cl, F);

    function Il(a) {
      C.call(this, "languageCodeChanged");
      this.h = a;
    }

    t(Il, C);

    function Jl(a) {
      C.call(this, "frameworkChanged");
      this.f = a;
    }

    t(Jl, C);
    g = Cl.prototype;

    g.ib = function (a) {
      a = this.h.ib(a);
      return T(this, a);
    };

    g.na = function (a) {
      this.V === a || this.l || (this.V = a, Dh(this.b, this.V), this.dispatchEvent(new Il(this.aa())));
    };

    g.aa = function () {
      return this.V;
    };

    g.Nc = function () {
      var a = k.navigator;
      this.na(a ? a.languages && a.languages[0] || a.language || a.userLanguage || null : null);
    };

    g.pc = function (a) {
      this.D.push(a);
      Eh(this.b, firebase.SDK_VERSION ? pe(firebase.SDK_VERSION, this.D) : null);
      this.dispatchEvent(new Jl(this.D));
    };

    g.Ka = function () {
      return Ja(this.D);
    };

    function Hl(a) {
      Object.defineProperty(a, "lc", {
        get: function get() {
          return this.aa();
        },
        set: function set(a) {
          this.na(a);
        },
        enumerable: !1
      });
      a.V = null;
    }

    g.toJSON = function () {
      return {
        apiKey: S(this).options.apiKey,
        authDomain: S(this).options.authDomain,
        appName: S(this).name,
        currentUser: U(this) && U(this).C()
      };
    };

    function Kl(a) {
      return a.Nb || A(new L("auth-domain-config-required"));
    }

    function Gl(a) {
      var b = S(a).options.authDomain,
          c = S(a).options.apiKey;
      b && se() && (a.Nb = a.U.then(function () {
        if (!a.l) {
          a.a = nk(b, c, S(a).name);
          a.a.subscribe(a);
          U(a) && Tk(U(a));

          if (a.A) {
            Tk(a.A);
            var d = a.A;
            d.na(a.aa());
            Mk(d, a);
            d = a.A;
            Lk(d, a.D);
            Nk(d, a);
            a.A = null;
          }

          return a.a;
        }
      }));
    }

    g.qb = function (a, b) {
      switch (a) {
        case "unknown":
        case "signInViaRedirect":
          return !0;

        case "signInViaPopup":
          return this.g == b && !!this.f;

        default:
          return !1;
      }
    };

    g.fa = function (a, b, c, d) {
      "signInViaPopup" == a && this.g == d && (c && this.v ? this.v(c) : b && !c && this.f && this.f(b), this.c && (this.c.cancel(), this.c = null), delete this.f, delete this.v);
    };

    g.wa = function (a, b) {
      return "signInViaRedirect" == a || "signInViaPopup" == a && this.g == b && this.f ? r(this.Xb, this) : null;
    };

    g.Xb = function (a, b) {
      var c = this;
      a = {
        requestUri: a,
        sessionId: b
      };
      this.c && (this.c.cancel(), this.c = null);
      var d = null,
          e = null,
          f = If(c.b, a).then(function (a) {
        d = ig(a);
        e = vf(a);
        return a;
      });
      a = c.U.then(function () {
        return f;
      }).then(function (a) {
        return Ll(c, a);
      }).then(function () {
        return Je({
          user: U(c),
          credential: d,
          additionalUserInfo: e,
          operationType: "signIn"
        });
      });
      return T(this, a);
    };

    g.Fc = function (a) {
      if (!se()) return A(new L("operation-not-supported-in-this-environment"));
      var b = this,
          c = uf(a.providerId),
          d = re(),
          e = null;
      (!ue() || ke()) && S(this).options.authDomain && a.isOAuthProvider && (e = Oi(S(this).options.authDomain, S(this).options.apiKey, S(this).name, "signInViaPopup", a, null, d, firebase.SDK_VERSION || null));
      var f = ce(e, c && c.Aa, c && c.za);
      c = Kl(this).then(function (b) {
        return lk(b, f, "signInViaPopup", a, d, !!e);
      }).then(function () {
        return new y(function (a, c) {
          b.fa("signInViaPopup", null, new L("cancelled-popup-request"), b.g);
          b.f = a;
          b.v = c;
          b.g = d;
          b.c = b.a.Da(b, "signInViaPopup", f, d);
        });
      }).then(function (a) {
        f && be(f);
        return a ? Je(a) : null;
      }).o(function (a) {
        f && be(f);
        throw a;
      });
      return T(this, c);
    };

    g.Gc = function (a) {
      if (!se()) return A(new L("operation-not-supported-in-this-environment"));
      var b = this,
          c = Kl(this).then(function () {
        return xl(b.h);
      }).then(function () {
        return b.a.Ba("signInViaRedirect", a);
      });
      return T(this, c);
    };

    g.ba = function () {
      if (!se()) return A(new L("operation-not-supported-in-this-environment"));
      var a = this,
          b = Kl(this).then(function () {
        return a.a.ba();
      }).then(function (a) {
        return a ? Je(a) : null;
      });
      return T(this, b);
    };

    function Ll(a, b) {
      var c = {};
      c.apiKey = S(a).options.apiKey;
      c.authDomain = S(a).options.authDomain;
      c.appName = S(a).name;
      return a.U.then(function () {
        return ol(c, b, a.G, a.Ka());
      }).then(function (b) {
        if (U(a) && b.uid == U(a).uid) return $k(U(a), b), a.ka(b);
        Dl(a, b);
        Tk(b);
        return a.ka(b);
      }).then(function () {
        Ml(a);
      });
    }

    function Dl(a, b) {
      U(a) && (Rk(U(a), a.Ga), D(U(a), "tokenChanged", a.qa), D(U(a), "userDeleted", a.ra), D(U(a), "userInvalidated", a.sa), Qk(U(a)));
      b && (b.N.push(a.Ga), qc(b, "tokenChanged", a.qa), qc(b, "userDeleted", a.ra), qc(b, "userInvalidated", a.sa), 0 < a.s && Pk(b));
      J(a, "currentUser", b);
      b && (b.na(a.aa()), Mk(b, a), Lk(b, a.D), Nk(b, a));
    }

    g.kb = function () {
      var a = this,
          b = this.i.then(function () {
        if (!U(a)) return z();
        Dl(a, null);
        return zl(a.h).then(function () {
          Ml(a);
        });
      });
      return T(this, b);
    };

    function Nl(a) {
      var b = ql(a.G, S(a).options.authDomain).then(function (b) {
        if (a.A = b) b.da = a.G;
        return ll(a.G);
      });
      return T(a, b);
    }

    function El(a) {
      var b = S(a).options.authDomain,
          c = Nl(a).then(function () {
        return Al(a.h, b);
      }).then(function (b) {
        return b ? (b.da = a.G, a.A && (a.A.Z || null) == (b.Z || null) ? b : b.reload().then(function () {
          return yl(a.h, b).then(function () {
            return b;
          });
        }).o(function (c) {
          return "auth/network-request-failed" == c.code ? b : zl(a.h);
        })) : null;
      }).then(function (b) {
        Dl(a, b || null);
      });
      return T(a, c);
    }

    function Fl(a) {
      return a.U.then(function () {
        return a.ba();
      }).o(function () {}).then(function () {
        if (!a.l) return a.ha();
      }).o(function () {}).then(function () {
        if (!a.l) {
          a.W = !0;
          var b = a.h;
          b.b.addListener(tl("local"), b.a, a.ha);
        }
      });
    }

    g.Hc = function () {
      var a = this;
      return Al(this.h, S(this).options.authDomain).then(function (b) {
        if (!a.l) {
          var c;

          if (c = U(a) && b) {
            c = U(a).uid;
            var d = b.uid;
            c = void 0 === c || null === c || "" === c || void 0 === d || null === d || "" === d ? !1 : c == d;
          }

          if (c) return $k(U(a), b), U(a).F();
          if (U(a) || b) Dl(a, b), b && (Tk(b), b.da = a.G), a.a && a.a.subscribe(a), Ml(a);
        }
      });
    };

    g.ka = function (a) {
      return yl(this.h, a);
    };

    g.Yb = function () {
      Ml(this);
      this.ka(U(this));
    };

    g.fc = function () {
      this.kb();
    };

    g.gc = function () {
      this.kb();
    };

    function Ol(a, b) {
      var c = null,
          d = null;
      return T(a, b.then(function (b) {
        c = ig(b);
        d = vf(b);
        return Ll(a, b);
      }).then(function () {
        return Je({
          user: U(a),
          credential: c,
          additionalUserInfo: d,
          operationType: "signIn"
        });
      }));
    }

    g.hc = function (a) {
      var b = this;
      this.addAuthTokenListener(function () {
        a.next(U(b));
      });
    };

    g.ic = function (a) {
      var b = this;
      Pl(this, function () {
        a.next(U(b));
      });
    };

    g.rc = function (a, b, c) {
      var d = this;
      this.W && firebase.Promise.resolve().then(function () {
        n(a) ? a(U(d)) : n(a.next) && a.next(U(d));
      });
      return this.Ob(a, b, c);
    };

    g.qc = function (a, b, c) {
      var d = this;
      this.W && firebase.Promise.resolve().then(function () {
        d.O = d.getUid();
        n(a) ? a(U(d)) : n(a.next) && a.next(U(d));
      });
      return this.Pb(a, b, c);
    };

    g.$b = function (a) {
      var b = this,
          c = this.i.then(function () {
        return U(b) ? U(b).F(a).then(function (a) {
          return {
            accessToken: a
          };
        }) : null;
      });
      return T(this, c);
    };

    g.Bc = function (a) {
      return this.Hb(a).then(function (a) {
        return a.user;
      });
    };

    g.Hb = function (a) {
      var b = this;
      return this.i.then(function () {
        return Ol(b, P(b.b, si, {
          token: a
        }));
      }).then(function (a) {
        var c = a.user;
        Zk(c, "isAnonymous", !1);
        b.ka(c);
        return a;
      });
    };

    g.Ib = function (a, b) {
      var c = this;
      return this.i.then(function () {
        return Ol(c, P(c.b, Xf, {
          email: a,
          password: b
        }));
      });
    };

    g.Cc = function (a, b) {
      return this.Ib(a, b).then(function (a) {
        return a.user;
      });
    };

    g.Sb = function (a, b) {
      return this.sb(a, b).then(function (a) {
        return a.user;
      });
    };

    g.sb = function (a, b) {
      var c = this;
      return this.i.then(function () {
        return Ol(c, P(c.b, oi, {
          email: a,
          password: b
        }));
      });
    };

    g.Ac = function (a) {
      return this.Oa(a).then(function (a) {
        return a.user;
      });
    };

    g.Oa = function (a) {
      var b = this;
      return this.i.then(function () {
        return Ol(b, a.xa(b.b));
      });
    };

    g.jb = function () {
      return this.Jb().then(function (a) {
        return a.user;
      });
    };

    g.Jb = function () {
      var a = this;
      return this.i.then(function () {
        var b = U(a);

        if (b && b.isAnonymous) {
          var c = Je({
            providerId: null,
            isNewUser: !1
          });
          return Je({
            user: b,
            credential: null,
            additionalUserInfo: c,
            operationType: "signIn"
          });
        }

        return Ol(a, a.b.jb()).then(function (b) {
          var c = b.user;
          Zk(c, "isAnonymous", !0);
          a.ka(c);
          return b;
        });
      });
    };

    function S(a) {
      return a.app;
    }

    function U(a) {
      return a.currentUser;
    }

    g.getUid = function () {
      return U(this) && U(this).uid || null;
    };

    function Ql(a) {
      return U(a) && U(a)._lat || null;
    }

    function Ml(a) {
      if (a.W) {
        for (var b = 0; b < a.m.length; b++) {
          if (a.m[b]) a.m[b](Ql(a));
        }

        if (a.O !== a.getUid() && a.I.length) for (a.O = a.getUid(), b = 0; b < a.I.length; b++) {
          if (a.I[b]) a.I[b](Ql(a));
        }
      }
    }

    g.Qb = function (a) {
      this.addAuthTokenListener(a);
      this.s++;
      0 < this.s && U(this) && Pk(U(this));
    };

    g.yc = function (a) {
      var b = this;
      v(this.m, function (c) {
        c == a && b.s--;
      });
      0 > this.s && (this.s = 0);
      0 == this.s && U(this) && Qk(U(this));
      this.removeAuthTokenListener(a);
    };

    g.addAuthTokenListener = function (a) {
      var b = this;
      this.m.push(a);
      T(this, this.i.then(function () {
        b.l || Fa(b.m, a) && a(Ql(b));
      }));
    };

    g.removeAuthTokenListener = function (a) {
      Ha(this.m, function (b) {
        return b == a;
      });
    };

    function Pl(a, b) {
      a.I.push(b);
      T(a, a.i.then(function () {
        !a.l && Fa(a.I, b) && a.O !== a.getUid() && (a.O = a.getUid(), b(Ql(a)));
      }));
    }

    g.delete = function () {
      this.l = !0;

      for (var a = 0; a < this.N.length; a++) {
        this.N[a].cancel("app-deleted");
      }

      this.N = [];
      this.h && (a = this.h, a.b.removeListener(tl("local"), a.a, this.ha));
      this.a && this.a.unsubscribe(this);
      return firebase.Promise.resolve();
    };

    function T(a, b) {
      a.N.push(b);
      b.ga(function () {
        Ga(a.N, b);
      });
      return b;
    }

    g.Vb = function (a) {
      return T(this, Oh(this.b, a));
    };

    g.Wb = function (a) {
      return T(this, Qh(this.b, a));
    };

    g.jc = function (a) {
      return !!ag(a);
    };

    g.hb = function (a, b) {
      var c = this;
      return T(this, z().then(function () {
        var a = new Ze(b);
        if (!a.c) throw new L("argument-error", gf + " must be true when sending sign in link to email");
        return hf(a);
      }).then(function (b) {
        return c.b.hb(a, b);
      }).then(function () {}));
    };

    g.Oc = function (a) {
      return this.Ia(a).then(function (a) {
        return a.data.email;
      });
    };

    g.Wa = function (a, b) {
      return T(this, this.b.Wa(a, b).then(function () {}));
    };

    g.Ia = function (a) {
      return T(this, this.b.Ia(a).then(function (a) {
        return new Ne(a);
      }));
    };

    g.Ua = function (a) {
      return T(this, this.b.Ua(a).then(function () {}));
    };

    g.gb = function (a, b) {
      var c = this;
      return T(this, z().then(function () {
        return "undefined" === typeof b || Za(b) ? {} : hf(new Ze(b));
      }).then(function (b) {
        return c.b.gb(a, b);
      }).then(function () {}));
    };

    g.Ec = function (a, b) {
      return T(this, vk(this, a, b, r(this.Oa, this)));
    };

    g.Dc = function (a, b) {
      var c = this;
      return T(this, z().then(function () {
        var d = $f(a, b || Vd());
        return c.Oa(d);
      }));
    };

    function Rl(a, b, c, d, e, f) {
      J(this, "type", "recaptcha");
      this.b = this.c = null;
      this.m = !1;
      this.l = b;
      this.a = c || {
        theme: "light",
        type: "image"
      };
      this.g = [];
      if (this.a[Sl]) throw new L("argument-error", "sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");
      this.h = "invisible" === this.a[Tl];
      if (!k.document) throw new L("operation-not-supported-in-this-environment", "RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");
      if (!Id(b) || !this.h && Id(b).hasChildNodes()) throw new L("argument-error", "reCAPTCHA container is either not found or already contains inner elements!");
      this.u = new xh(a, f || null, e || null);

      this.s = d || function () {
        return null;
      };

      var h = this;
      this.i = [];
      var m = this.a[Ul];

      this.a[Ul] = function (a) {
        Vl(h, a);
        if ("function" === typeof m) m(a);else if ("string" === typeof m) {
          var b = I(m, k);
          "function" === typeof b && b(a);
        }
      };

      var p = this.a[Wl];

      this.a[Wl] = function () {
        Vl(h, null);
        if ("function" === typeof p) p();else if ("string" === typeof p) {
          var a = I(p, k);
          "function" === typeof a && a();
        }
      };
    }

    var Ul = "callback",
        Wl = "expired-callback",
        Sl = "sitekey",
        Tl = "size";

    function Vl(a, b) {
      for (var c = 0; c < a.i.length; c++) {
        try {
          a.i[c](b);
        } catch (d) {}
      }
    }

    function Xl(a, b) {
      Ha(a.i, function (a) {
        return a == b;
      });
    }

    function Yl(a, b) {
      a.g.push(b);
      b.ga(function () {
        Ga(a.g, b);
      });
      return b;
    }

    g = Rl.prototype;

    g.ya = function () {
      var a = this;
      return this.c ? this.c : this.c = Yl(this, z().then(function () {
        if (te() && !le()) return ge();
        throw new L("operation-not-supported-in-this-environment", "RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.");
      }).then(function () {
        return Zl($l(), a.s());
      }).then(function () {
        return P(a.u, ri, {});
      }).then(function (b) {
        a.a[Sl] = b.recaptchaSiteKey;
      }).o(function (b) {
        a.c = null;
        throw b;
      }));
    };

    g.render = function () {
      am(this);
      var a = this;
      return Yl(this, this.ya().then(function () {
        if (null === a.b) {
          var b = a.l;

          if (!a.h) {
            var c = Id(b);
            b = Ld("DIV");
            c.appendChild(b);
          }

          a.b = grecaptcha.render(b, a.a);
        }

        return a.b;
      }));
    };

    g.verify = function () {
      am(this);
      var a = this;
      return Yl(this, this.render().then(function (b) {
        return new y(function (c) {
          var d = grecaptcha.getResponse(b);
          if (d) c(d);else {
            var e = function e(b) {
              b && (Xl(a, e), c(b));
            };

            a.i.push(e);
            a.h && grecaptcha.execute(a.b);
          }
        });
      }));
    };

    g.reset = function () {
      am(this);
      null !== this.b && grecaptcha.reset(this.b);
    };

    function am(a) {
      if (a.m) throw new L("internal-error", "RecaptchaVerifier instance has been destroyed.");
    }

    g.clear = function () {
      am(this);
      this.m = !0;
      $l().b--;

      for (var a = 0; a < this.g.length; a++) {
        this.g[a].cancel("RecaptchaVerifier instance has been destroyed.");
      }

      if (!this.h) {
        a = Id(this.l);

        for (var b; b = a.firstChild;) {
          a.removeChild(b);
        }
      }
    };

    var bm = qd("https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}");

    function cm() {
      this.b = k.grecaptcha ? Infinity : 0;
      this.c = null;
      this.a = "__rcb" + Math.floor(1E6 * Math.random()).toString();
    }

    function Zl(a, b) {
      return new y(function (c, d) {
        if (Ae()) {
          if (!k.grecaptcha || b !== a.c && !a.b) {
            k[a.a] = function () {
              if (k.grecaptcha) {
                a.c = b;
                var e = k.grecaptcha.render;

                k.grecaptcha.render = function (b, c) {
                  b = e(b, c);
                  a.b++;
                  return b;
                };

                c();
              } else d(new L("internal-error"));

              delete k[a.a];
            };

            var e = ud(bm, {
              onload: a.a,
              hl: b || ""
            });
            z(ph(e)).o(function () {
              d(new L("internal-error", "Unable to load external reCAPTCHA dependencies!"));
            });
          } else c();
        } else d(new L("network-request-failed"));
      });
    }

    var dm = null;

    function $l() {
      dm || (dm = new cm());
      return dm;
    }

    function em(a, b, c) {
      try {
        this.f = c || firebase.app();
      } catch (f) {
        throw new L("argument-error", "No firebase.app.App instance is currently initialized.");
      }

      if (this.f.options && this.f.options.apiKey) c = this.f.options.apiKey;else throw new L("invalid-api-key");
      var d = this,
          e = null;

      try {
        e = this.f.auth().Ka();
      } catch (f) {}

      e = firebase.SDK_VERSION ? pe(firebase.SDK_VERSION, e) : null;
      Rl.call(this, c, a, b, function () {
        try {
          var a = d.f.auth().aa();
        } catch (h) {
          a = null;
        }

        return a;
      }, e, ui(vi));
    }

    t(em, Rl);

    function fm(a, b, c, d) {
      a: {
        c = Array.prototype.slice.call(c);
        var e = 0;

        for (var f = !1, h = 0; h < b.length; h++) {
          if (b[h].optional) f = !0;else {
            if (f) throw new L("internal-error", "Argument validator encountered a required argument after an optional argument.");
            e++;
          }
        }

        f = b.length;
        if (c.length < e || f < c.length) d = "Expected " + (e == f ? 1 == e ? "1 argument" : e + " arguments" : e + "-" + f + " arguments") + " but got " + c.length + ".";else {
          for (e = 0; e < c.length; e++) {
            if (f = b[e].optional && void 0 === c[e], !b[e].M(c[e]) && !f) {
              b = b[e];
              if (0 > e || e >= gm.length) throw new L("internal-error", "Argument validator received an unsupported number of arguments.");
              c = gm[e];
              d = (d ? "" : c + " argument ") + (b.name ? '"' + b.name + '" ' : "") + "must be " + b.K + ".";
              break a;
            }
          }

          d = null;
        }
      }

      if (d) throw new L("argument-error", a + " failed: " + d);
    }

    var gm = "First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");

    function V(a, b) {
      return {
        name: a || "",
        K: "a valid string",
        optional: !!b,
        M: l
      };
    }

    function hm() {
      return {
        name: "opt_forceRefresh",
        K: "a boolean",
        optional: !0,
        M: ba
      };
    }

    function W(a, b) {
      return {
        name: a || "",
        K: "a valid object",
        optional: !!b,
        M: q
      };
    }

    function im(a, b) {
      return {
        name: a || "",
        K: "a function",
        optional: !!b,
        M: n
      };
    }

    function jm(a, b) {
      return {
        name: a || "",
        K: "null",
        optional: !!b,
        M: ea
      };
    }

    function km() {
      return {
        name: "",
        K: "an HTML element",
        optional: !1,
        M: function M(a) {
          return !!(a && a instanceof Element);
        }
      };
    }

    function lm() {
      return {
        name: "auth",
        K: "an instance of Firebase Auth",
        optional: !0,
        M: function M(a) {
          return !!(a && a instanceof Cl);
        }
      };
    }

    function mm() {
      return {
        name: "app",
        K: "an instance of Firebase App",
        optional: !0,
        M: function M(a) {
          return !!(a && a instanceof firebase.app.App);
        }
      };
    }

    function nm(a) {
      return {
        name: a ? a + "Credential" : "credential",
        K: a ? "a valid " + a + " credential" : "a valid credential",
        optional: !1,
        M: function M(b) {
          if (!b) return !1;
          var c = !a || b.providerId === a;
          return !(!b.xa || !c);
        }
      };
    }

    function om() {
      return {
        name: "authProvider",
        K: "a valid Auth provider",
        optional: !1,
        M: function M(a) {
          return !!(a && a.providerId && a.hasOwnProperty && a.hasOwnProperty("isOAuthProvider"));
        }
      };
    }

    function pm() {
      return {
        name: "applicationVerifier",
        K: "an implementation of firebase.auth.ApplicationVerifier",
        optional: !1,
        M: function M(a) {
          return !!(a && l(a.type) && n(a.verify));
        }
      };
    }

    function X(a, b, c, d) {
      return {
        name: c || "",
        K: a.K + " or " + b.K,
        optional: !!d,
        M: function M(c) {
          return a.M(c) || b.M(c);
        }
      };
    }

    ;

    function Y(a, b) {
      for (var c in b) {
        var d = b[c].name;
        a[d] = qm(d, a[c], b[c].j);
      }
    }

    function Z(a, b, c, d) {
      a[b] = qm(b, c, d);
    }

    function qm(a, b, c) {
      function d() {
        var a = Array.prototype.slice.call(arguments);
        fm(e, c, a);
        return b.apply(this, a);
      }

      if (!c) return b;
      var e = rm(a),
          f;

      for (f in b) {
        d[f] = b[f];
      }

      for (f in b.prototype) {
        d.prototype[f] = b.prototype[f];
      }

      return d;
    }

    function rm(a) {
      a = a.split(".");
      return a[a.length - 1];
    }

    ;
    Y(Cl.prototype, {
      Ua: {
        name: "applyActionCode",
        j: [V("code")]
      },
      Ia: {
        name: "checkActionCode",
        j: [V("code")]
      },
      Wa: {
        name: "confirmPasswordReset",
        j: [V("code"), V("newPassword")]
      },
      Sb: {
        name: "createUserWithEmailAndPassword",
        j: [V("email"), V("password")]
      },
      sb: {
        name: "createUserAndRetrieveDataWithEmailAndPassword",
        j: [V("email"), V("password")]
      },
      Vb: {
        name: "fetchProvidersForEmail",
        j: [V("email")]
      },
      Wb: {
        name: "fetchSignInMethodsForEmail",
        j: [V("email")]
      },
      ba: {
        name: "getRedirectResult",
        j: []
      },
      jc: {
        name: "isSignInWithEmailLink",
        j: [V("emailLink")]
      },
      qc: {
        name: "onAuthStateChanged",
        j: [X(W(), im(), "nextOrObserver"), im("opt_error", !0), im("opt_completed", !0)]
      },
      rc: {
        name: "onIdTokenChanged",
        j: [X(W(), im(), "nextOrObserver"), im("opt_error", !0), im("opt_completed", !0)]
      },
      gb: {
        name: "sendPasswordResetEmail",
        j: [V("email"), X(W("opt_actionCodeSettings", !0), jm(null, !0), "opt_actionCodeSettings", !0)]
      },
      hb: {
        name: "sendSignInLinkToEmail",
        j: [V("email"), W("actionCodeSettings")]
      },
      ib: {
        name: "setPersistence",
        j: [V("persistence")]
      },
      Oa: {
        name: "signInAndRetrieveDataWithCredential",
        j: [nm()]
      },
      jb: {
        name: "signInAnonymously",
        j: []
      },
      Jb: {
        name: "signInAnonymouslyAndRetrieveData",
        j: []
      },
      Ac: {
        name: "signInWithCredential",
        j: [nm()]
      },
      Bc: {
        name: "signInWithCustomToken",
        j: [V("token")]
      },
      Hb: {
        name: "signInAndRetrieveDataWithCustomToken",
        j: [V("token")]
      },
      Cc: {
        name: "signInWithEmailAndPassword",
        j: [V("email"), V("password")]
      },
      Dc: {
        name: "signInWithEmailLink",
        j: [V("email"), V("emailLink", !0)]
      },
      Ib: {
        name: "signInAndRetrieveDataWithEmailAndPassword",
        j: [V("email"), V("password")]
      },
      Ec: {
        name: "signInWithPhoneNumber",
        j: [V("phoneNumber"), pm()]
      },
      Fc: {
        name: "signInWithPopup",
        j: [om()]
      },
      Gc: {
        name: "signInWithRedirect",
        j: [om()]
      },
      kb: {
        name: "signOut",
        j: []
      },
      toJSON: {
        name: "toJSON",
        j: [V(null, !0)]
      },
      Nc: {
        name: "useDeviceLanguage",
        j: []
      },
      Oc: {
        name: "verifyPasswordResetCode",
        j: [V("code")]
      }
    });

    (function (a, b) {
      for (var c in b) {
        var d = b[c].name;

        if (d !== c) {
          var e = b[c].Rb;
          Object.defineProperty(a, d, {
            get: function get() {
              return this[c];
            },
            set: function set(a) {
              fm(d, [e], [a], !0);
              this[c] = a;
            },
            enumerable: !0
          });
        }
      }
    })(Cl.prototype, {
      lc: {
        name: "languageCode",
        Rb: X(V(), jm(), "languageCode")
      }
    });

    Cl.Persistence = lj;
    Cl.Persistence.LOCAL = "local";
    Cl.Persistence.SESSION = "session";
    Cl.Persistence.NONE = "none";
    Y(Hk.prototype, {
      "delete": {
        name: "delete",
        j: []
      },
      F: {
        name: "getIdToken",
        j: [hm()]
      },
      getToken: {
        name: "getToken",
        j: [hm()]
      },
      $a: {
        name: "linkAndRetrieveDataWithCredential",
        j: [nm()]
      },
      kc: {
        name: "linkWithCredential",
        j: [nm()]
      },
      mc: {
        name: "linkWithPhoneNumber",
        j: [V("phoneNumber"), pm()]
      },
      nc: {
        name: "linkWithPopup",
        j: [om()]
      },
      oc: {
        name: "linkWithRedirect",
        j: [om()]
      },
      bb: {
        name: "reauthenticateAndRetrieveDataWithCredential",
        j: [nm()]
      },
      uc: {
        name: "reauthenticateWithCredential",
        j: [nm()]
      },
      vc: {
        name: "reauthenticateWithPhoneNumber",
        j: [V("phoneNumber"), pm()]
      },
      wc: {
        name: "reauthenticateWithPopup",
        j: [om()]
      },
      xc: {
        name: "reauthenticateWithRedirect",
        j: [om()]
      },
      reload: {
        name: "reload",
        j: []
      },
      fb: {
        name: "sendEmailVerification",
        j: [X(W("opt_actionCodeSettings", !0), jm(null, !0), "opt_actionCodeSettings", !0)]
      },
      toJSON: {
        name: "toJSON",
        j: [V(null, !0)]
      },
      Lc: {
        name: "unlink",
        j: [V("provider")]
      },
      mb: {
        name: "updateEmail",
        j: [V("email")]
      },
      nb: {
        name: "updatePassword",
        j: [V("password")]
      },
      Mc: {
        name: "updatePhoneNumber",
        j: [nm("phone")]
      },
      ob: {
        name: "updateProfile",
        j: [W("profile")]
      }
    });
    Y(y.prototype, {
      ga: {
        name: "finally"
      },
      o: {
        name: "catch"
      },
      then: {
        name: "then"
      }
    });
    Y(uk.prototype, {
      confirm: {
        name: "confirm",
        j: [V("verificationCode")]
      }
    });
    Z(O, "credential", function (a, b) {
      return new Vf(a, b);
    }, [V("email"), V("password")]);
    Y(Nf.prototype, {
      ta: {
        name: "addScope",
        j: [V("scope")]
      },
      Ca: {
        name: "setCustomParameters",
        j: [W("customOAuthParameters")]
      }
    });
    Z(Nf, "credential", Of, [X(V(), W(), "token")]);
    Z(O, "credentialWithLink", $f, [V("email"), V("emailLink")]);
    Y(Pf.prototype, {
      ta: {
        name: "addScope",
        j: [V("scope")]
      },
      Ca: {
        name: "setCustomParameters",
        j: [W("customOAuthParameters")]
      }
    });
    Z(Pf, "credential", Qf, [X(V(), W(), "token")]);
    Y(Rf.prototype, {
      ta: {
        name: "addScope",
        j: [V("scope")]
      },
      Ca: {
        name: "setCustomParameters",
        j: [W("customOAuthParameters")]
      }
    });
    Z(Rf, "credential", Sf, [X(V(), X(W(), jm()), "idToken"), X(V(), jm(), "accessToken", !0)]);
    Y(Tf.prototype, {
      Ca: {
        name: "setCustomParameters",
        j: [W("customOAuthParameters")]
      }
    });
    Z(Tf, "credential", Uf, [X(V(), W(), "token"), V("secret", !0)]);
    Y(N.prototype, {
      ta: {
        name: "addScope",
        j: [V("scope")]
      },
      credential: {
        name: "credential",
        j: [X(V(), jm(), "idToken", !0), X(V(), jm(), "accessToken", !0)]
      },
      Ca: {
        name: "setCustomParameters",
        j: [W("customOAuthParameters")]
      }
    });
    Z(fg, "credential", hg, [V("verificationId"), V("verificationCode")]);
    Y(fg.prototype, {
      Sa: {
        name: "verifyPhoneNumber",
        j: [V("phoneNumber"), pm()]
      }
    });
    Y(L.prototype, {
      toJSON: {
        name: "toJSON",
        j: [V(null, !0)]
      }
    });
    Y(pg.prototype, {
      toJSON: {
        name: "toJSON",
        j: [V(null, !0)]
      }
    });
    Y(og.prototype, {
      toJSON: {
        name: "toJSON",
        j: [V(null, !0)]
      }
    });
    Y(em.prototype, {
      clear: {
        name: "clear",
        j: []
      },
      render: {
        name: "render",
        j: []
      },
      verify: {
        name: "verify",
        j: []
      }
    });

    (function () {
      if ("undefined" !== typeof firebase && firebase.INTERNAL && firebase.INTERNAL.registerService) {
        var a = {
          Auth: Cl,
          Error: L
        };
        Z(a, "EmailAuthProvider", O, []);
        Z(a, "FacebookAuthProvider", Nf, []);
        Z(a, "GithubAuthProvider", Pf, []);
        Z(a, "GoogleAuthProvider", Rf, []);
        Z(a, "TwitterAuthProvider", Tf, []);
        Z(a, "OAuthProvider", N, [V("providerId")]);
        Z(a, "PhoneAuthProvider", fg, [lm()]);
        Z(a, "RecaptchaVerifier", em, [X(V(), km(), "recaptchaContainer"), W("recaptchaParameters", !0), mm()]);
        firebase.INTERNAL.registerService("auth", function (a, c) {
          a = new Cl(a);
          c({
            INTERNAL: {
              getUid: r(a.getUid, a),
              getToken: r(a.$b, a),
              addAuthTokenListener: r(a.Qb, a),
              removeAuthTokenListener: r(a.yc, a)
            }
          });
          return a;
        }, a, function (a, c) {
          if ("create" === a) try {
            c.auth();
          } catch (d) {}
        });
        firebase.INTERNAL.extendNamespace({
          User: Hk
        });
      } else throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");
    })();
  }).call(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {});
},527,[506],"node_modules\\@firebase\\auth\\dist\\auth.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], '@firebase/database');
},528,[529],"node_modules\\firebase\\database\\index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var app_1 = _require(_dependencyMap[0], "@firebase/app");

    var Database_1 = _require(_dependencyMap[1], "./src/api/Database");

    exports.Database = Database_1.Database;

    var Query_1 = _require(_dependencyMap[2], "./src/api/Query");

    exports.Query = Query_1.Query;

    var Reference_1 = _require(_dependencyMap[3], "./src/api/Reference");

    exports.Reference = Reference_1.Reference;

    var util_1 = _require(_dependencyMap[4], "./src/core/util/util");

    exports.enableLogging = util_1.enableLogging;

    var RepoManager_1 = _require(_dependencyMap[5], "./src/core/RepoManager");

    var INTERNAL = _require(_dependencyMap[6], "./src/api/internal");

    var TEST_ACCESS = _require(_dependencyMap[7], "./src/api/test_access");

    var util_2 = _require(_dependencyMap[8], "@firebase/util");

    var ServerValue = Database_1.Database.ServerValue;
    exports.ServerValue = ServerValue;

    function registerDatabase(instance) {
        var namespace = instance.INTERNAL.registerService('database', function (app, unused, url) {
            return RepoManager_1.RepoManager.getInstance().databaseFromApp(app, url);
        }, {
            Reference: Reference_1.Reference,
            Query: Query_1.Query,
            Database: Database_1.Database,
            enableLogging: util_1.enableLogging,
            INTERNAL: INTERNAL,
            ServerValue: ServerValue,
            TEST_ACCESS: TEST_ACCESS
        }, null, true);

        if (util_2.isNodeSdk()) {
            module.exports = namespace;
        }
    }

    exports.registerDatabase = registerDatabase;
    registerDatabase(app_1.default);

    var DataSnapshot_1 = _require(_dependencyMap[9], "./src/api/DataSnapshot");

    exports.DataSnapshot = DataSnapshot_1.DataSnapshot;

    var onDisconnect_1 = _require(_dependencyMap[10], "./src/api/onDisconnect");

    exports.OnDisconnect = onDisconnect_1.OnDisconnect;
},529,[506,530,546,541,531,608,611,612,508,562,542],"node_modules\\@firebase\\database\\dist\\cjs\\index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var tslib_1 = _require(_dependencyMap[0], "tslib");

    var util_1 = _require(_dependencyMap[1], "../core/util/util");

    var parser_1 = _require(_dependencyMap[2], "../core/util/libs/parser");

    var Path_1 = _require(_dependencyMap[3], "../core/util/Path");

    var Reference_1 = _require(_dependencyMap[4], "./Reference");

    var Repo_1 = _require(_dependencyMap[5], "../core/Repo");

    var RepoManager_1 = _require(_dependencyMap[6], "../core/RepoManager");

    var util_2 = _require(_dependencyMap[7], "@firebase/util");

    var validation_1 = _require(_dependencyMap[8], "../core/util/validation");

    var Database = function () {
        function Database(repo_) {
            this.repo_ = repo_;

            if (!(repo_ instanceof Repo_1.Repo)) {
                util_1.fatal("Don't call new Database() directly - please use firebase.database().");
            }

            this.root_ = new Reference_1.Reference(repo_, Path_1.Path.Empty);
            this.INTERNAL = new DatabaseInternals(this);
        }

        Object.defineProperty(Database.prototype, "app", {
            get: function get() {
                return this.repo_.app;
            },
            enumerable: true,
            configurable: true
        });

        Database.prototype.ref = function (path) {
            this.checkDeleted_('ref');
            util_2.validateArgCount('database.ref', 0, 1, arguments.length);

            if (path instanceof Reference_1.Reference) {
                return this.refFromURL(path.toString());
            }

            return path !== undefined ? this.root_.child(path) : this.root_;
        };

        Database.prototype.refFromURL = function (url) {
            var apiName = 'database.refFromURL';
            this.checkDeleted_(apiName);
            util_2.validateArgCount(apiName, 1, 1, arguments.length);
            var parsedURL = parser_1.parseRepoInfo(url);
            validation_1.validateUrl(apiName, 1, parsedURL);
            var repoInfo = parsedURL.repoInfo;

            if (repoInfo.host !== this.repo_.repoInfo_.host) {
                util_1.fatal(apiName + ': Host name does not match the current database: ' + '(found ' + repoInfo.host + ' but expected ' + this.repo_.repoInfo_.host + ')');
            }

            return this.ref(parsedURL.path.toString());
        };

        Database.prototype.checkDeleted_ = function (apiName) {
            if (this.repo_ === null) {
                util_1.fatal('Cannot call ' + apiName + ' on a deleted database.');
            }
        };

        Database.prototype.goOffline = function () {
            util_2.validateArgCount('database.goOffline', 0, 0, arguments.length);
            this.checkDeleted_('goOffline');
            this.repo_.interrupt();
        };

        Database.prototype.goOnline = function () {
            util_2.validateArgCount('database.goOnline', 0, 0, arguments.length);
            this.checkDeleted_('goOnline');
            this.repo_.resume();
        };

        Database.ServerValue = {
            TIMESTAMP: {
                '.sv': 'timestamp'
            }
        };
        return Database;
    }();

    exports.Database = Database;

    var DatabaseInternals = function () {
        function DatabaseInternals(database) {
            this.database = database;
        }

        DatabaseInternals.prototype.delete = function () {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    this.database.checkDeleted_('delete');
                    RepoManager_1.RepoManager.getInstance().deleteRepo(this.database.repo_);
                    this.database.repo_ = null;
                    this.database.root_ = null;
                    this.database.INTERNAL = null;
                    this.database = null;
                    return [2];
                });
            });
        };

        return DatabaseInternals;
    }();

    exports.DatabaseInternals = DatabaseInternals;
},530,[521,531,537,538,541,564,608,508,543],"node_modules\\@firebase\\database\\dist\\cjs\\src\\api\\Database.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "@firebase/util");

    var util_2 = _require(_dependencyMap[0], "@firebase/util");

    var util_3 = _require(_dependencyMap[0], "@firebase/util");

    var util_4 = _require(_dependencyMap[0], "@firebase/util");

    var util_5 = _require(_dependencyMap[0], "@firebase/util");

    var util_6 = _require(_dependencyMap[0], "@firebase/util");

    var storage_1 = _require(_dependencyMap[1], "../storage/storage");

    var util_7 = _require(_dependencyMap[0], "@firebase/util");

    var logger_1 = _require(_dependencyMap[2], "@firebase/logger");

    var logClient = new logger_1.Logger('@firebase/database');

    exports.LUIDGenerator = function () {
        var id = 1;
        return function () {
            return id++;
        };
    }();

    exports.sha1 = function (str) {
        var utf8Bytes = util_5.stringToByteArray(str);
        var sha1 = new util_4.Sha1();
        sha1.update(utf8Bytes);
        var sha1Bytes = sha1.digest();
        return util_3.base64.encodeByteArray(sha1Bytes);
    };

    var buildLogMessage_ = function buildLogMessage_() {
        var var_args = [];

        for (var _i = 0; _i < arguments.length; _i++) {
            var_args[_i] = arguments[_i];
        }

        var message = '';

        for (var i = 0; i < var_args.length; i++) {
            if (Array.isArray(var_args[i]) || var_args[i] && typeof var_args[i] === 'object' && typeof var_args[i].length === 'number') {
                message += buildLogMessage_.apply(null, var_args[i]);
            } else if (typeof var_args[i] === 'object') {
                message += util_6.stringify(var_args[i]);
            } else {
                message += var_args[i];
            }

            message += ' ';
        }

        return message;
    };

    exports.logger = null;
    var firstLog_ = true;

    exports.enableLogging = function (logger_, persistent) {
        util_1.assert(!persistent || logger_ === true || logger_ === false, "Can't turn on custom loggers persistently.");

        if (logger_ === true) {
            logClient.logLevel = logger_1.LogLevel.VERBOSE;
            exports.logger = logClient.log.bind(logClient);
            if (persistent) storage_1.SessionStorage.set('logging_enabled', true);
        } else if (typeof logger_ === 'function') {
            exports.logger = logger_;
        } else {
            exports.logger = null;
            storage_1.SessionStorage.remove('logging_enabled');
        }
    };

    exports.log = function () {
        var var_args = [];

        for (var _i = 0; _i < arguments.length; _i++) {
            var_args[_i] = arguments[_i];
        }

        if (firstLog_ === true) {
            firstLog_ = false;
            if (exports.logger === null && storage_1.SessionStorage.get('logging_enabled') === true) exports.enableLogging(true);
        }

        if (exports.logger) {
            var message = buildLogMessage_.apply(null, var_args);
            exports.logger(message);
        }
    };

    exports.logWrapper = function (prefix) {
        return function () {
            var var_args = [];

            for (var _i = 0; _i < arguments.length; _i++) {
                var_args[_i] = arguments[_i];
            }

            exports.log.apply(void 0, [prefix].concat(var_args));
        };
    };

    exports.error = function () {
        var var_args = [];

        for (var _i = 0; _i < arguments.length; _i++) {
            var_args[_i] = arguments[_i];
        }

        var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, var_args);
        logClient.error(message);
    };

    exports.fatal = function () {
        var var_args = [];

        for (var _i = 0; _i < arguments.length; _i++) {
            var_args[_i] = arguments[_i];
        }

        var message = "FIREBASE FATAL ERROR: " + buildLogMessage_.apply(void 0, var_args);
        logClient.error(message);
        throw new Error(message);
    };

    exports.warn = function () {
        var var_args = [];

        for (var _i = 0; _i < arguments.length; _i++) {
            var_args[_i] = arguments[_i];
        }

        var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, var_args);
        logClient.warn(message);
    };

    exports.warnIfPageIsSecure = function () {
        if (typeof window !== 'undefined' && window.location && window.location.protocol && window.location.protocol.indexOf('https:') !== -1) {
            exports.warn('Insecure Firebase access from a secure page. ' + 'Please use https in calls to new Firebase().');
        }
    };

    exports.warnAboutUnsupportedMethod = function (methodName) {
        exports.warn(methodName + ' is unsupported and will likely change soon.  ' + 'Please do not use.');
    };

    exports.isInvalidJSONNumber = function (data) {
        return typeof data === 'number' && (data != data || data == Number.POSITIVE_INFINITY || data == Number.NEGATIVE_INFINITY);
    };

    exports.executeWhenDOMReady = function (fn) {
        if (util_7.isNodeSdk() || document.readyState === 'complete') {
            fn();
        } else {
            var called_1 = false;

            var wrappedFn_1 = function wrappedFn_1() {
                if (!document.body) {
                    setTimeout(wrappedFn_1, Math.floor(10));
                    return;
                }

                if (!called_1) {
                    called_1 = true;
                    fn();
                }
            };

            if (document.addEventListener) {
                document.addEventListener('DOMContentLoaded', wrappedFn_1, false);
                window.addEventListener('load', wrappedFn_1, false);
            } else if (document.attachEvent) {
                document.attachEvent('onreadystatechange', function () {
                    if (document.readyState === 'complete') wrappedFn_1();
                });
                window.attachEvent('onload', wrappedFn_1);
            }
        }
    };

    exports.MIN_NAME = '[MIN_NAME]';
    exports.MAX_NAME = '[MAX_NAME]';

    exports.nameCompare = function (a, b) {
        if (a === b) {
            return 0;
        } else if (a === exports.MIN_NAME || b === exports.MAX_NAME) {
            return -1;
        } else if (b === exports.MIN_NAME || a === exports.MAX_NAME) {
            return 1;
        } else {
            var aAsInt = exports.tryParseInt(a),
                bAsInt = exports.tryParseInt(b);

            if (aAsInt !== null) {
                if (bAsInt !== null) {
                    return aAsInt - bAsInt == 0 ? a.length - b.length : aAsInt - bAsInt;
                } else {
                    return -1;
                }
            } else if (bAsInt !== null) {
                return 1;
            } else {
                return a < b ? -1 : 1;
            }
        }
    };

    exports.stringCompare = function (a, b) {
        if (a === b) {
            return 0;
        } else if (a < b) {
            return -1;
        } else {
            return 1;
        }
    };

    exports.requireKey = function (key, obj) {
        if (obj && key in obj) {
            return obj[key];
        } else {
            throw new Error('Missing required key (' + key + ') in object: ' + util_6.stringify(obj));
        }
    };

    exports.ObjectToUniqueKey = function (obj) {
        if (typeof obj !== 'object' || obj === null) return util_6.stringify(obj);
        var keys = [];

        for (var k in obj) {
            keys.push(k);
        }

        keys.sort();
        var key = '{';

        for (var i = 0; i < keys.length; i++) {
            if (i !== 0) key += ',';
            key += util_6.stringify(keys[i]);
            key += ':';
            key += exports.ObjectToUniqueKey(obj[keys[i]]);
        }

        key += '}';
        return key;
    };

    exports.splitStringBySize = function (str, segsize) {
        var len = str.length;

        if (len <= segsize) {
            return [str];
        }

        var dataSegs = [];

        for (var c = 0; c < len; c += segsize) {
            if (c + segsize > len) {
                dataSegs.push(str.substring(c, len));
            } else {
                dataSegs.push(str.substring(c, c + segsize));
            }
        }

        return dataSegs;
    };

    exports.each = function (obj, fn) {
        if (Array.isArray(obj)) {
            for (var i = 0; i < obj.length; ++i) {
                fn(i, obj[i]);
            }
        } else {
            util_2.forEach(obj, function (key, val) {
                return fn(val, key);
            });
        }
    };

    exports.bindCallback = function (callback, context) {
        return context ? callback.bind(context) : callback;
    };

    exports.doubleToIEEE754String = function (v) {
        util_1.assert(!exports.isInvalidJSONNumber(v), 'Invalid JSON number');
        var ebits = 11,
            fbits = 52;
        var bias = (1 << ebits - 1) - 1,
            s,
            e,
            f,
            ln,
            i,
            bits,
            str;

        if (v === 0) {
            e = 0;
            f = 0;
            s = 1 / v === -Infinity ? 1 : 0;
        } else {
            s = v < 0;
            v = Math.abs(v);

            if (v >= Math.pow(2, 1 - bias)) {
                ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);
                e = ln + bias;
                f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));
            } else {
                e = 0;
                f = Math.round(v / Math.pow(2, 1 - bias - fbits));
            }
        }

        bits = [];

        for (i = fbits; i; i -= 1) {
            bits.push(f % 2 ? 1 : 0);
            f = Math.floor(f / 2);
        }

        for (i = ebits; i; i -= 1) {
            bits.push(e % 2 ? 1 : 0);
            e = Math.floor(e / 2);
        }

        bits.push(s ? 1 : 0);
        bits.reverse();
        str = bits.join('');
        var hexByteString = '';

        for (i = 0; i < 64; i += 8) {
            var hexByte = parseInt(str.substr(i, 8), 2).toString(16);
            if (hexByte.length === 1) hexByte = '0' + hexByte;
            hexByteString = hexByteString + hexByte;
        }

        return hexByteString.toLowerCase();
    };

    exports.isChromeExtensionContentScript = function () {
        return !!(typeof window === 'object' && window['chrome'] && window['chrome']['extension'] && !/^chrome/.test(window.location.href));
    };

    exports.isWindowsStoreApp = function () {
        return typeof Windows === 'object' && typeof Windows.UI === 'object';
    };

    exports.errorForServerCode = function (code, query) {
        var reason = 'Unknown Error';

        if (code === 'too_big') {
            reason = 'The data requested exceeds the maximum size ' + 'that can be accessed with a single request.';
        } else if (code == 'permission_denied') {
            reason = "Client doesn't have permission to access the desired data.";
        } else if (code == 'unavailable') {
            reason = 'The service is unavailable';
        }

        var error = new Error(code + ' at ' + query.path.toString() + ': ' + reason);
        error.code = code.toUpperCase();
        return error;
    };

    exports.INTEGER_REGEXP_ = new RegExp('^-?\\d{1,10}$');

    exports.tryParseInt = function (str) {
        if (exports.INTEGER_REGEXP_.test(str)) {
            var intVal = Number(str);

            if (intVal >= -2147483648 && intVal <= 2147483647) {
                return intVal;
            }
        }

        return null;
    };

    exports.exceptionGuard = function (fn) {
        try {
            fn();
        } catch (e) {
            setTimeout(function () {
                var stack = e.stack || '';
                exports.warn('Exception was thrown by user callback.', stack);
                throw e;
            }, Math.floor(0));
        }
    };

    exports.callUserCallback = function (callback) {
        var var_args = [];

        for (var _i = 1; _i < arguments.length; _i++) {
            var_args[_i - 1] = arguments[_i];
        }

        if (typeof callback === 'function') {
            exports.exceptionGuard(function () {
                callback.apply(void 0, var_args);
            });
        }
    };

    exports.beingCrawled = function () {
        var userAgent = typeof window === 'object' && window['navigator'] && window['navigator']['userAgent'] || '';
        return userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0;
    };

    exports.exportPropGetter = function (object, name, fnGet) {
        Object.defineProperty(object, name, {
            get: fnGet
        });
    };

    exports.setTimeoutNonBlocking = function (fn, time) {
        var timeout = setTimeout(fn, time);

        if (typeof timeout === 'object' && timeout['unref']) {
            timeout['unref']();
        }

        return timeout;
    };
},531,[508,532,535],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\util\\util.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var DOMStorageWrapper_1 = _require(_dependencyMap[0], "./DOMStorageWrapper");

    var MemoryStorage_1 = _require(_dependencyMap[1], "./MemoryStorage");

    var createStoragefor = function createStoragefor(domStorageName) {
        try {
            if (typeof window !== 'undefined' && typeof window[domStorageName] !== 'undefined') {
                var domStorage = window[domStorageName];
                domStorage.setItem('firebase:sentinel', 'cache');
                domStorage.removeItem('firebase:sentinel');
                return new DOMStorageWrapper_1.DOMStorageWrapper(domStorage);
            }
        } catch (e) {}

        return new MemoryStorage_1.MemoryStorage();
    };

    exports.PersistentStorage = createStoragefor('localStorage');
    exports.SessionStorage = createStoragefor('sessionStorage');
},532,[533,534],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\storage\\storage.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "@firebase/util");

    var DOMStorageWrapper = function () {
        function DOMStorageWrapper(domStorage_) {
            this.domStorage_ = domStorage_;
            this.prefix_ = 'firebase:';
        }

        DOMStorageWrapper.prototype.set = function (key, value) {
            if (value == null) {
                this.domStorage_.removeItem(this.prefixedName_(key));
            } else {
                this.domStorage_.setItem(this.prefixedName_(key), util_1.stringify(value));
            }
        };

        DOMStorageWrapper.prototype.get = function (key) {
            var storedVal = this.domStorage_.getItem(this.prefixedName_(key));

            if (storedVal == null) {
                return null;
            } else {
                return util_1.jsonEval(storedVal);
            }
        };

        DOMStorageWrapper.prototype.remove = function (key) {
            this.domStorage_.removeItem(this.prefixedName_(key));
        };

        DOMStorageWrapper.prototype.prefixedName_ = function (name) {
            return this.prefix_ + name;
        };

        DOMStorageWrapper.prototype.toString = function () {
            return this.domStorage_.toString();
        };

        return DOMStorageWrapper;
    }();

    exports.DOMStorageWrapper = DOMStorageWrapper;
},533,[508],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\storage\\DOMStorageWrapper.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "@firebase/util");

    var MemoryStorage = function () {
        function MemoryStorage() {
            this.cache_ = {};
            this.isInMemoryStorage = true;
        }

        MemoryStorage.prototype.set = function (key, value) {
            if (value == null) {
                delete this.cache_[key];
            } else {
                this.cache_[key] = value;
            }
        };

        MemoryStorage.prototype.get = function (key) {
            if (util_1.contains(this.cache_, key)) {
                return this.cache_[key];
            }

            return null;
        };

        MemoryStorage.prototype.remove = function (key) {
            delete this.cache_[key];
        };

        return MemoryStorage;
    }();

    exports.MemoryStorage = MemoryStorage;
},534,[508],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\storage\\MemoryStorage.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var logger_1 = _require(_dependencyMap[0], "./src/logger");

    function setLogLevel(level) {
        logger_1.instances.forEach(function (inst) {
            inst.logLevel = level;
        });
    }

    exports.setLogLevel = setLogLevel;

    var logger_2 = _require(_dependencyMap[0], "./src/logger");

    exports.Logger = logger_2.Logger;
    exports.LogLevel = logger_2.LogLevel;
},535,[536],"node_modules\\@firebase\\logger\\dist\\cjs\\index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.instances = [];
    var LogLevel;

    (function (LogLevel) {
        LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
        LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
        LogLevel[LogLevel["INFO"] = 2] = "INFO";
        LogLevel[LogLevel["WARN"] = 3] = "WARN";
        LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
        LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
    })(LogLevel = exports.LogLevel || (exports.LogLevel = {}));

    var defaultLogLevel = LogLevel.INFO;

    var defaultLogHandler = function defaultLogHandler(instance, logType) {
        var args = [];

        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }

        if (logType < instance.logLevel) return;
        var now = new Date().toISOString();

        switch (logType) {
            case LogLevel.DEBUG:
                console.log.apply(console, ["[" + now + "]  " + instance.name + ":"].concat(args));
                break;

            case LogLevel.VERBOSE:
                console.log.apply(console, ["[" + now + "]  " + instance.name + ":"].concat(args));
                break;

            case LogLevel.INFO:
                console.info.apply(console, ["[" + now + "]  " + instance.name + ":"].concat(args));
                break;

            case LogLevel.WARN:
                console.warn.apply(console, ["[" + now + "]  " + instance.name + ":"].concat(args));
                break;

            case LogLevel.ERROR:
                console.error.apply(console, ["[" + now + "]  " + instance.name + ":"].concat(args));
                break;

            default:
                throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
        }
    };

    var Logger = function () {
        function Logger(name) {
            this.name = name;
            this._logLevel = defaultLogLevel;
            this._logHandler = defaultLogHandler;
            exports.instances.push(this);
        }

        Object.defineProperty(Logger.prototype, "logLevel", {
            get: function get() {
                return this._logLevel;
            },
            set: function set(val) {
                if (!(val in LogLevel)) {
                    throw new TypeError('Invalid value assigned to `logLevel`');
                }

                this._logLevel = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Logger.prototype, "logHandler", {
            get: function get() {
                return this._logHandler;
            },
            set: function set(val) {
                if (typeof val !== 'function') {
                    throw new TypeError('Value assigned to `logHandler` must be a function');
                }

                this._logHandler = val;
            },
            enumerable: true,
            configurable: true
        });

        Logger.prototype.debug = function () {
            var args = [];

            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }

            this._logHandler.apply(this, [this, LogLevel.DEBUG].concat(args));
        };

        Logger.prototype.log = function () {
            var args = [];

            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }

            this._logHandler.apply(this, [this, LogLevel.VERBOSE].concat(args));
        };

        Logger.prototype.info = function () {
            var args = [];

            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }

            this._logHandler.apply(this, [this, LogLevel.INFO].concat(args));
        };

        Logger.prototype.warn = function () {
            var args = [];

            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }

            this._logHandler.apply(this, [this, LogLevel.WARN].concat(args));
        };

        Logger.prototype.error = function () {
            var args = [];

            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }

            this._logHandler.apply(this, [this, LogLevel.ERROR].concat(args));
        };

        return Logger;
    }();

    exports.Logger = Logger;
},536,[],"node_modules\\@firebase\\logger\\dist\\cjs\\src\\logger.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var Path_1 = _require(_dependencyMap[0], "../Path");

    var RepoInfo_1 = _require(_dependencyMap[1], "../../RepoInfo");

    var util_1 = _require(_dependencyMap[2], "../util");

    function decodePath(pathString) {
        var pathStringDecoded = '';
        var pieces = pathString.split('/');

        for (var i = 0; i < pieces.length; i++) {
            if (pieces[i].length > 0) {
                var piece = pieces[i];

                try {
                    piece = decodeURIComponent(piece.replace(/\+/g, ' '));
                } catch (e) {}

                pathStringDecoded += '/' + piece;
            }
        }

        return pathStringDecoded;
    }

    function decodeQuery(queryString) {
        var results = {};

        if (queryString.startsWith('?')) {
            queryString = queryString.substring(1);
        }

        for (var _i = 0, _a = queryString.split('&'); _i < _a.length; _i++) {
            var segment = _a[_i];

            if (segment.length === 0) {
                continue;
            }

            var kv = segment.split('=');

            if (kv.length === 2) {
                results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);
            } else {
                util_1.warn("Invalid query segment '" + segment + "' in query '" + queryString + "'");
            }
        }

        return results;
    }

    exports.parseRepoInfo = function (dataURL) {
        var parsedUrl = exports.parseURL(dataURL),
            namespace = parsedUrl.subdomain;

        if (parsedUrl.domain === 'firebase') {
            util_1.fatal(parsedUrl.host + ' is no longer supported. ' + 'Please use <YOUR FIREBASE>.firebaseio.com instead');
        }

        if ((!namespace || namespace == 'undefined') && parsedUrl.domain !== 'localhost') {
            util_1.fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');
        }

        if (!parsedUrl.secure) {
            util_1.warnIfPageIsSecure();
        }

        var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';
        return {
            repoInfo: new RepoInfo_1.RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly),
            path: new Path_1.Path(parsedUrl.pathString)
        };
    };

    exports.parseURL = function (dataURL) {
        var host = '',
            domain = '',
            subdomain = '',
            pathString = '';
        var secure = true,
            scheme = 'https',
            port = 443;

        if (typeof dataURL === 'string') {
            var colonInd = dataURL.indexOf('//');

            if (colonInd >= 0) {
                scheme = dataURL.substring(0, colonInd - 1);
                dataURL = dataURL.substring(colonInd + 2);
            }

            var slashInd = dataURL.indexOf('/');

            if (slashInd === -1) {
                slashInd = dataURL.length;
            }

            var questionMarkInd = dataURL.indexOf('?');

            if (questionMarkInd === -1) {
                questionMarkInd = dataURL.length;
            }

            host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));

            if (slashInd < questionMarkInd) {
                pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));
            }

            var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));
            colonInd = host.indexOf(':');

            if (colonInd >= 0) {
                secure = scheme === 'https' || scheme === 'wss';
                port = parseInt(host.substring(colonInd + 1), 10);
            } else {
                colonInd = dataURL.length;
            }

            var parts = host.split('.');

            if (parts.length === 3) {
                domain = parts[1];
                subdomain = parts[0].toLowerCase();
            } else if (parts.length === 2) {
                domain = parts[0];
            } else if (parts[0].slice(0, colonInd).toLowerCase() === 'localhost') {
                domain = 'localhost';
            }

            if (subdomain === '' && 'ns' in queryParams) {
                subdomain = queryParams['ns'];
            }
        }

        return {
            host: host,
            port: port,
            domain: domain,
            subdomain: subdomain,
            secure: secure,
            scheme: scheme,
            pathString: pathString
        };
    };
},537,[538,539,531],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\util\\libs\\parser.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "./util");

    var util_2 = _require(_dependencyMap[1], "@firebase/util");

    var Path = function () {
        function Path(pathOrString, pieceNum) {
            if (pieceNum === void 0) {
                this.pieces_ = pathOrString.split('/');
                var copyTo = 0;

                for (var i = 0; i < this.pieces_.length; i++) {
                    if (this.pieces_[i].length > 0) {
                        this.pieces_[copyTo] = this.pieces_[i];
                        copyTo++;
                    }
                }

                this.pieces_.length = copyTo;
                this.pieceNum_ = 0;
            } else {
                this.pieces_ = pathOrString;
                this.pieceNum_ = pieceNum;
            }
        }

        Object.defineProperty(Path, "Empty", {
            get: function get() {
                return new Path('');
            },
            enumerable: true,
            configurable: true
        });

        Path.prototype.getFront = function () {
            if (this.pieceNum_ >= this.pieces_.length) return null;
            return this.pieces_[this.pieceNum_];
        };

        Path.prototype.getLength = function () {
            return this.pieces_.length - this.pieceNum_;
        };

        Path.prototype.popFront = function () {
            var pieceNum = this.pieceNum_;

            if (pieceNum < this.pieces_.length) {
                pieceNum++;
            }

            return new Path(this.pieces_, pieceNum);
        };

        Path.prototype.getBack = function () {
            if (this.pieceNum_ < this.pieces_.length) return this.pieces_[this.pieces_.length - 1];
            return null;
        };

        Path.prototype.toString = function () {
            var pathString = '';

            for (var i = this.pieceNum_; i < this.pieces_.length; i++) {
                if (this.pieces_[i] !== '') pathString += '/' + this.pieces_[i];
            }

            return pathString || '/';
        };

        Path.prototype.toUrlEncodedString = function () {
            var pathString = '';

            for (var i = this.pieceNum_; i < this.pieces_.length; i++) {
                if (this.pieces_[i] !== '') pathString += '/' + encodeURIComponent(String(this.pieces_[i]));
            }

            return pathString || '/';
        };

        Path.prototype.slice = function (begin) {
            if (begin === void 0) {
                begin = 0;
            }

            return this.pieces_.slice(this.pieceNum_ + begin);
        };

        Path.prototype.parent = function () {
            if (this.pieceNum_ >= this.pieces_.length) return null;
            var pieces = [];

            for (var i = this.pieceNum_; i < this.pieces_.length - 1; i++) {
                pieces.push(this.pieces_[i]);
            }

            return new Path(pieces, 0);
        };

        Path.prototype.child = function (childPathObj) {
            var pieces = [];

            for (var i = this.pieceNum_; i < this.pieces_.length; i++) {
                pieces.push(this.pieces_[i]);
            }

            if (childPathObj instanceof Path) {
                for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {
                    pieces.push(childPathObj.pieces_[i]);
                }
            } else {
                var childPieces = childPathObj.split('/');

                for (var i = 0; i < childPieces.length; i++) {
                    if (childPieces[i].length > 0) pieces.push(childPieces[i]);
                }
            }

            return new Path(pieces, 0);
        };

        Path.prototype.isEmpty = function () {
            return this.pieceNum_ >= this.pieces_.length;
        };

        Path.relativePath = function (outerPath, innerPath) {
            var outer = outerPath.getFront(),
                inner = innerPath.getFront();

            if (outer === null) {
                return innerPath;
            } else if (outer === inner) {
                return Path.relativePath(outerPath.popFront(), innerPath.popFront());
            } else {
                throw new Error('INTERNAL ERROR: innerPath (' + innerPath + ') is not within ' + 'outerPath (' + outerPath + ')');
            }
        };

        Path.comparePaths = function (left, right) {
            var leftKeys = left.slice();
            var rightKeys = right.slice();

            for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {
                var cmp = util_1.nameCompare(leftKeys[i], rightKeys[i]);
                if (cmp !== 0) return cmp;
            }

            if (leftKeys.length === rightKeys.length) return 0;
            return leftKeys.length < rightKeys.length ? -1 : 1;
        };

        Path.prototype.equals = function (other) {
            if (this.getLength() !== other.getLength()) {
                return false;
            }

            for (var i = this.pieceNum_, j = other.pieceNum_; i <= this.pieces_.length; i++, j++) {
                if (this.pieces_[i] !== other.pieces_[j]) {
                    return false;
                }
            }

            return true;
        };

        Path.prototype.contains = function (other) {
            var i = this.pieceNum_;
            var j = other.pieceNum_;

            if (this.getLength() > other.getLength()) {
                return false;
            }

            while (i < this.pieces_.length) {
                if (this.pieces_[i] !== other.pieces_[j]) {
                    return false;
                }

                ++i;
                ++j;
            }

            return true;
        };

        return Path;
    }();

    exports.Path = Path;

    var ValidationPath = function () {
        function ValidationPath(path, errorPrefix_) {
            this.errorPrefix_ = errorPrefix_;
            this.parts_ = path.slice();
            this.byteLength_ = Math.max(1, this.parts_.length);

            for (var i = 0; i < this.parts_.length; i++) {
                this.byteLength_ += util_2.stringLength(this.parts_[i]);
            }

            this.checkValid_();
        }

        Object.defineProperty(ValidationPath, "MAX_PATH_DEPTH", {
            get: function get() {
                return 32;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValidationPath, "MAX_PATH_LENGTH_BYTES", {
            get: function get() {
                return 768;
            },
            enumerable: true,
            configurable: true
        });

        ValidationPath.prototype.push = function (child) {
            if (this.parts_.length > 0) {
                this.byteLength_ += 1;
            }

            this.parts_.push(child);
            this.byteLength_ += util_2.stringLength(child);
            this.checkValid_();
        };

        ValidationPath.prototype.pop = function () {
            var last = this.parts_.pop();
            this.byteLength_ -= util_2.stringLength(last);

            if (this.parts_.length > 0) {
                this.byteLength_ -= 1;
            }
        };

        ValidationPath.prototype.checkValid_ = function () {
            if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {
                throw new Error(this.errorPrefix_ + 'has a key path longer than ' + ValidationPath.MAX_PATH_LENGTH_BYTES + ' bytes (' + this.byteLength_ + ').');
            }

            if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {
                throw new Error(this.errorPrefix_ + 'path specified exceeds the maximum depth that can be written (' + ValidationPath.MAX_PATH_DEPTH + ') or object contains a cycle ' + this.toErrorString());
            }
        };

        ValidationPath.prototype.toErrorString = function () {
            if (this.parts_.length == 0) {
                return '';
            }

            return "in property '" + this.parts_.join('.') + "'";
        };

        return ValidationPath;
    }();

    exports.ValidationPath = ValidationPath;
},538,[531,508],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\util\\Path.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "@firebase/util");

    var util_2 = _require(_dependencyMap[0], "@firebase/util");

    var storage_1 = _require(_dependencyMap[1], "./storage/storage");

    var Constants_1 = _require(_dependencyMap[2], "../realtime/Constants");

    var RepoInfo = function () {
        function RepoInfo(host, secure, namespace, webSocketOnly, persistenceKey) {
            if (persistenceKey === void 0) {
                persistenceKey = '';
            }

            this.secure = secure;
            this.namespace = namespace;
            this.webSocketOnly = webSocketOnly;
            this.persistenceKey = persistenceKey;
            this.host = host.toLowerCase();
            this.domain = this.host.substr(this.host.indexOf('.') + 1);
            this.internalHost = storage_1.PersistentStorage.get('host:' + host) || this.host;
        }

        RepoInfo.prototype.needsQueryParam = function () {
            return this.host !== this.internalHost || this.isCustomHost();
        };

        RepoInfo.prototype.isCacheableHost = function () {
            return this.internalHost.substr(0, 2) === 's-';
        };

        RepoInfo.prototype.isDemoHost = function () {
            return this.domain === 'firebaseio-demo.com';
        };

        RepoInfo.prototype.isCustomHost = function () {
            return this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com';
        };

        RepoInfo.prototype.updateHost = function (newHost) {
            if (newHost !== this.internalHost) {
                this.internalHost = newHost;

                if (this.isCacheableHost()) {
                    storage_1.PersistentStorage.set('host:' + this.host, this.internalHost);
                }
            }
        };

        RepoInfo.prototype.connectionURL = function (type, params) {
            util_1.assert(typeof type === 'string', 'typeof type must == string');
            util_1.assert(typeof params === 'object', 'typeof params must == object');
            var connURL;

            if (type === Constants_1.WEBSOCKET) {
                connURL = (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';
            } else if (type === Constants_1.LONG_POLLING) {
                connURL = (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';
            } else {
                throw new Error('Unknown connection type: ' + type);
            }

            if (this.needsQueryParam()) {
                params['ns'] = this.namespace;
            }

            var pairs = [];
            util_2.forEach(params, function (key, value) {
                pairs.push(key + '=' + value);
            });
            return connURL + pairs.join('&');
        };

        RepoInfo.prototype.toString = function () {
            var str = this.toURLString();

            if (this.persistenceKey) {
                str += '<' + this.persistenceKey + '>';
            }

            return str;
        };

        RepoInfo.prototype.toURLString = function () {
            return (this.secure ? 'https://' : 'http://') + this.host;
        };

        return RepoInfo;
    }();

    exports.RepoInfo = RepoInfo;
},539,[508,532,540],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\RepoInfo.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PROTOCOL_VERSION = '5';
  exports.VERSION_PARAM = 'v';
  exports.TRANSPORT_SESSION_PARAM = 's';
  exports.REFERER_PARAM = 'r';
  exports.FORGE_REF = 'f';
  exports.FORGE_DOMAIN = 'firebaseio.com';
  exports.LAST_SESSION_PARAM = 'ls';
  exports.WEBSOCKET = 'websocket';
  exports.LONG_POLLING = 'long_polling';
},540,[],"node_modules\\@firebase\\database\\dist\\cjs\\src\\realtime\\Constants.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var tslib_1 = _require(_dependencyMap[0], "tslib");

    var onDisconnect_1 = _require(_dependencyMap[1], "./onDisconnect");

    var TransactionResult_1 = _require(_dependencyMap[2], "./TransactionResult");

    var util_1 = _require(_dependencyMap[3], "../core/util/util");

    var NextPushId_1 = _require(_dependencyMap[4], "../core/util/NextPushId");

    var Query_1 = _require(_dependencyMap[5], "./Query");

    var Repo_1 = _require(_dependencyMap[6], "../core/Repo");

    var Path_1 = _require(_dependencyMap[7], "../core/util/Path");

    var QueryParams_1 = _require(_dependencyMap[8], "../core/view/QueryParams");

    var validation_1 = _require(_dependencyMap[9], "../core/util/validation");

    var util_2 = _require(_dependencyMap[10], "@firebase/util");

    var util_3 = _require(_dependencyMap[10], "@firebase/util");

    var SyncPoint_1 = _require(_dependencyMap[11], "../core/SyncPoint");

    var Reference = function (_super) {
        tslib_1.__extends(Reference, _super);

        function Reference(repo, path) {
            var _this = this;

            if (!(repo instanceof Repo_1.Repo)) {
                throw new Error('new Reference() no longer supported - use app.database().');
            }

            _this = _super.call(this, repo, path, QueryParams_1.QueryParams.DEFAULT, false) || this;
            return _this;
        }

        Reference.prototype.getKey = function () {
            util_2.validateArgCount('Reference.key', 0, 0, arguments.length);
            if (this.path.isEmpty()) return null;else return this.path.getBack();
        };

        Reference.prototype.child = function (pathString) {
            util_2.validateArgCount('Reference.child', 1, 1, arguments.length);

            if (typeof pathString === 'number') {
                pathString = String(pathString);
            } else if (!(pathString instanceof Path_1.Path)) {
                if (this.path.getFront() === null) validation_1.validateRootPathString('Reference.child', 1, pathString, false);else validation_1.validatePathString('Reference.child', 1, pathString, false);
            }

            return new Reference(this.repo, this.path.child(pathString));
        };

        Reference.prototype.getParent = function () {
            util_2.validateArgCount('Reference.parent', 0, 0, arguments.length);
            var parentPath = this.path.parent();
            return parentPath === null ? null : new Reference(this.repo, parentPath);
        };

        Reference.prototype.getRoot = function () {
            util_2.validateArgCount('Reference.root', 0, 0, arguments.length);
            var ref = this;

            while (ref.getParent() !== null) {
                ref = ref.getParent();
            }

            return ref;
        };

        Reference.prototype.databaseProp = function () {
            return this.repo.database;
        };

        Reference.prototype.set = function (newVal, onComplete) {
            util_2.validateArgCount('Reference.set', 1, 2, arguments.length);
            validation_1.validateWritablePath('Reference.set', this.path);
            validation_1.validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);
            util_2.validateCallback('Reference.set', 2, onComplete, true);
            var deferred = new util_3.Deferred();
            this.repo.setWithPriority(this.path, newVal, null, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };

        Reference.prototype.update = function (objectToMerge, onComplete) {
            util_2.validateArgCount('Reference.update', 1, 2, arguments.length);
            validation_1.validateWritablePath('Reference.update', this.path);

            if (Array.isArray(objectToMerge)) {
                var newObjectToMerge = {};

                for (var i = 0; i < objectToMerge.length; ++i) {
                    newObjectToMerge['' + i] = objectToMerge[i];
                }

                objectToMerge = newObjectToMerge;
                util_1.warn('Passing an Array to Firebase.update() is deprecated. ' + 'Use set() if you want to overwrite the existing data, or ' + 'an Object with integer keys if you really do want to ' + 'only update some of the children.');
            }

            validation_1.validateFirebaseMergeDataArg('Reference.update', 1, objectToMerge, this.path, false);
            util_2.validateCallback('Reference.update', 2, onComplete, true);
            var deferred = new util_3.Deferred();
            this.repo.update(this.path, objectToMerge, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };

        Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {
            util_2.validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);
            validation_1.validateWritablePath('Reference.setWithPriority', this.path);
            validation_1.validateFirebaseDataArg('Reference.setWithPriority', 1, newVal, this.path, false);
            validation_1.validatePriority('Reference.setWithPriority', 2, newPriority, false);
            util_2.validateCallback('Reference.setWithPriority', 3, onComplete, true);
            if (this.getKey() === '.length' || this.getKey() === '.keys') throw 'Reference.setWithPriority failed: ' + this.getKey() + ' is a read-only object.';
            var deferred = new util_3.Deferred();
            this.repo.setWithPriority(this.path, newVal, newPriority, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };

        Reference.prototype.remove = function (onComplete) {
            util_2.validateArgCount('Reference.remove', 0, 1, arguments.length);
            validation_1.validateWritablePath('Reference.remove', this.path);
            util_2.validateCallback('Reference.remove', 1, onComplete, true);
            return this.set(null, onComplete);
        };

        Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {
            util_2.validateArgCount('Reference.transaction', 1, 3, arguments.length);
            validation_1.validateWritablePath('Reference.transaction', this.path);
            util_2.validateCallback('Reference.transaction', 1, transactionUpdate, false);
            util_2.validateCallback('Reference.transaction', 2, onComplete, true);
            validation_1.validateBoolean('Reference.transaction', 3, applyLocally, true);
            if (this.getKey() === '.length' || this.getKey() === '.keys') throw 'Reference.transaction failed: ' + this.getKey() + ' is a read-only object.';
            if (applyLocally === undefined) applyLocally = true;
            var deferred = new util_3.Deferred();

            if (typeof onComplete === 'function') {
                deferred.promise.catch(function () {});
            }

            var promiseComplete = function promiseComplete(error, committed, snapshot) {
                if (error) {
                    deferred.reject(error);
                } else {
                    deferred.resolve(new TransactionResult_1.TransactionResult(committed, snapshot));
                }

                if (typeof onComplete === 'function') {
                    onComplete(error, committed, snapshot);
                }
            };

            this.repo.startTransaction(this.path, transactionUpdate, promiseComplete, applyLocally);
            return deferred.promise;
        };

        Reference.prototype.setPriority = function (priority, onComplete) {
            util_2.validateArgCount('Reference.setPriority', 1, 2, arguments.length);
            validation_1.validateWritablePath('Reference.setPriority', this.path);
            validation_1.validatePriority('Reference.setPriority', 1, priority, false);
            util_2.validateCallback('Reference.setPriority', 2, onComplete, true);
            var deferred = new util_3.Deferred();
            this.repo.setWithPriority(this.path.child('.priority'), priority, null, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };

        Reference.prototype.push = function (value, onComplete) {
            util_2.validateArgCount('Reference.push', 0, 2, arguments.length);
            validation_1.validateWritablePath('Reference.push', this.path);
            validation_1.validateFirebaseDataArg('Reference.push', 1, value, this.path, true);
            util_2.validateCallback('Reference.push', 2, onComplete, true);
            var now = this.repo.serverTime();
            var name = NextPushId_1.nextPushId(now);
            var thennablePushRef = this.child(name);
            var pushRef = this.child(name);
            var promise;

            if (value != null) {
                promise = thennablePushRef.set(value, onComplete).then(function () {
                    return pushRef;
                });
            } else {
                promise = Promise.resolve(pushRef);
            }

            thennablePushRef.then = promise.then.bind(promise);
            thennablePushRef.catch = promise.then.bind(promise, undefined);

            if (typeof onComplete === 'function') {
                promise.catch(function () {});
            }

            return thennablePushRef;
        };

        Reference.prototype.onDisconnect = function () {
            validation_1.validateWritablePath('Reference.onDisconnect', this.path);
            return new onDisconnect_1.OnDisconnect(this.repo, this.path);
        };

        Object.defineProperty(Reference.prototype, "database", {
            get: function get() {
                return this.databaseProp();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "key", {
            get: function get() {
                return this.getKey();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "parent", {
            get: function get() {
                return this.getParent();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "root", {
            get: function get() {
                return this.getRoot();
            },
            enumerable: true,
            configurable: true
        });
        return Reference;
    }(Query_1.Query);

    exports.Reference = Reference;
    Query_1.Query.__referenceConstructor = Reference;
    SyncPoint_1.SyncPoint.__referenceConstructor = Reference;
},541,[521,542,544,531,545,546,564,538,605,543,508,575],"node_modules\\@firebase\\database\\dist\\cjs\\src\\api\\Reference.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "@firebase/util");

    var validation_1 = _require(_dependencyMap[1], "../core/util/validation");

    var util_2 = _require(_dependencyMap[2], "../core/util/util");

    var util_3 = _require(_dependencyMap[0], "@firebase/util");

    var OnDisconnect = function () {
        function OnDisconnect(repo_, path_) {
            this.repo_ = repo_;
            this.path_ = path_;
        }

        OnDisconnect.prototype.cancel = function (onComplete) {
            util_1.validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);
            util_1.validateCallback('OnDisconnect.cancel', 1, onComplete, true);
            var deferred = new util_3.Deferred();
            this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };

        OnDisconnect.prototype.remove = function (onComplete) {
            util_1.validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);
            validation_1.validateWritablePath('OnDisconnect.remove', this.path_);
            util_1.validateCallback('OnDisconnect.remove', 1, onComplete, true);
            var deferred = new util_3.Deferred();
            this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };

        OnDisconnect.prototype.set = function (value, onComplete) {
            util_1.validateArgCount('OnDisconnect.set', 1, 2, arguments.length);
            validation_1.validateWritablePath('OnDisconnect.set', this.path_);
            validation_1.validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);
            util_1.validateCallback('OnDisconnect.set', 2, onComplete, true);
            var deferred = new util_3.Deferred();
            this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };

        OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {
            util_1.validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);
            validation_1.validateWritablePath('OnDisconnect.setWithPriority', this.path_);
            validation_1.validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);
            validation_1.validatePriority('OnDisconnect.setWithPriority', 2, priority, false);
            util_1.validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);
            var deferred = new util_3.Deferred();
            this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };

        OnDisconnect.prototype.update = function (objectToMerge, onComplete) {
            util_1.validateArgCount('OnDisconnect.update', 1, 2, arguments.length);
            validation_1.validateWritablePath('OnDisconnect.update', this.path_);

            if (Array.isArray(objectToMerge)) {
                var newObjectToMerge = {};

                for (var i = 0; i < objectToMerge.length; ++i) {
                    newObjectToMerge['' + i] = objectToMerge[i];
                }

                objectToMerge = newObjectToMerge;
                util_2.warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' + 'existing data, or an Object with integer keys if you really do want to only update some of the children.');
            }

            validation_1.validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);
            util_1.validateCallback('OnDisconnect.update', 2, onComplete, true);
            var deferred = new util_3.Deferred();
            this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };

        return OnDisconnect;
    }();

    exports.OnDisconnect = OnDisconnect;
},542,[508,543,531],"node_modules\\@firebase\\database\\dist\\cjs\\src\\api\\onDisconnect.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var Path_1 = _require(_dependencyMap[0], "./Path");

    var util_1 = _require(_dependencyMap[1], "@firebase/util");

    var util_2 = _require(_dependencyMap[2], "./util");

    var util_3 = _require(_dependencyMap[1], "@firebase/util");

    var util_4 = _require(_dependencyMap[1], "@firebase/util");

    exports.INVALID_KEY_REGEX_ = /[\[\].#$\/\u0000-\u001F\u007F]/;
    exports.INVALID_PATH_REGEX_ = /[\[\].#$\u0000-\u001F\u007F]/;
    exports.MAX_LEAF_SIZE_ = 10 * 1024 * 1024;

    exports.isValidKey = function (key) {
        return typeof key === 'string' && key.length !== 0 && !exports.INVALID_KEY_REGEX_.test(key);
    };

    exports.isValidPathString = function (pathString) {
        return typeof pathString === 'string' && pathString.length !== 0 && !exports.INVALID_PATH_REGEX_.test(pathString);
    };

    exports.isValidRootPathString = function (pathString) {
        if (pathString) {
            pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
        }

        return exports.isValidPathString(pathString);
    };

    exports.isValidPriority = function (priority) {
        return priority === null || typeof priority === 'string' || typeof priority === 'number' && !util_2.isInvalidJSONNumber(priority) || priority && typeof priority === 'object' && util_1.contains(priority, '.sv');
    };

    exports.validateFirebaseDataArg = function (fnName, argumentNumber, data, path, optional) {
        if (optional && data === undefined) return;
        exports.validateFirebaseData(util_3.errorPrefix(fnName, argumentNumber, optional), data, path);
    };

    exports.validateFirebaseData = function (errorPrefix, data, path_) {
        var path = path_ instanceof Path_1.Path ? new Path_1.ValidationPath(path_, errorPrefix) : path_;

        if (data === undefined) {
            throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());
        }

        if (typeof data === 'function') {
            throw new Error(errorPrefix + 'contains a function ' + path.toErrorString() + ' with contents = ' + data.toString());
        }

        if (util_2.isInvalidJSONNumber(data)) {
            throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString());
        }

        if (typeof data === 'string' && data.length > exports.MAX_LEAF_SIZE_ / 3 && util_4.stringLength(data) > exports.MAX_LEAF_SIZE_) {
            throw new Error(errorPrefix + 'contains a string greater than ' + exports.MAX_LEAF_SIZE_ + ' utf8 bytes ' + path.toErrorString() + " ('" + data.substring(0, 50) + "...')");
        }

        if (data && typeof data === 'object') {
            var hasDotValue_1 = false,
                hasActualChild_1 = false;
            util_1.forEach(data, function (key, value) {
                if (key === '.value') {
                    hasDotValue_1 = true;
                } else if (key !== '.priority' && key !== '.sv') {
                    hasActualChild_1 = true;

                    if (!exports.isValidKey(key)) {
                        throw new Error(errorPrefix + ' contains an invalid key (' + key + ') ' + path.toErrorString() + '.  Keys must be non-empty strings ' + 'and can\'t contain ".", "#", "$", "/", "[", or "]"');
                    }
                }

                path.push(key);
                exports.validateFirebaseData(errorPrefix, value, path);
                path.pop();
            });

            if (hasDotValue_1 && hasActualChild_1) {
                throw new Error(errorPrefix + ' contains ".value" child ' + path.toErrorString() + ' in addition to actual children.');
            }
        }
    };

    exports.validateFirebaseMergePaths = function (errorPrefix, mergePaths) {
        var i, curPath;

        for (i = 0; i < mergePaths.length; i++) {
            curPath = mergePaths[i];
            var keys = curPath.slice();

            for (var j = 0; j < keys.length; j++) {
                if (keys[j] === '.priority' && j === keys.length - 1) {} else if (!exports.isValidKey(keys[j])) {
                    throw new Error(errorPrefix + 'contains an invalid key (' + keys[j] + ') in path ' + curPath.toString() + '. Keys must be non-empty strings ' + 'and can\'t contain ".", "#", "$", "/", "[", or "]"');
                }
            }
        }

        mergePaths.sort(Path_1.Path.comparePaths);
        var prevPath = null;

        for (i = 0; i < mergePaths.length; i++) {
            curPath = mergePaths[i];

            if (prevPath !== null && prevPath.contains(curPath)) {
                throw new Error(errorPrefix + 'contains a path ' + prevPath.toString() + ' that is ancestor of another path ' + curPath.toString());
            }

            prevPath = curPath;
        }
    };

    exports.validateFirebaseMergeDataArg = function (fnName, argumentNumber, data, path, optional) {
        if (optional && data === undefined) return;
        var errorPrefix = util_3.errorPrefix(fnName, argumentNumber, optional);

        if (!(data && typeof data === 'object') || Array.isArray(data)) {
            throw new Error(errorPrefix + ' must be an object containing the children to replace.');
        }

        var mergePaths = [];
        util_1.forEach(data, function (key, value) {
            var curPath = new Path_1.Path(key);
            exports.validateFirebaseData(errorPrefix, value, path.child(curPath));

            if (curPath.getBack() === '.priority') {
                if (!exports.isValidPriority(value)) {
                    throw new Error(errorPrefix + "contains an invalid value for '" + curPath.toString() + "', which must be a valid " + 'Firebase priority (a string, finite number, server value, or null).');
                }
            }

            mergePaths.push(curPath);
        });
        exports.validateFirebaseMergePaths(errorPrefix, mergePaths);
    };

    exports.validatePriority = function (fnName, argumentNumber, priority, optional) {
        if (optional && priority === undefined) return;
        if (util_2.isInvalidJSONNumber(priority)) throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) + 'is ' + priority.toString() + ', but must be a valid Firebase priority (a string, finite number, ' + 'server value, or null).');
        if (!exports.isValidPriority(priority)) throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) + 'must be a valid Firebase priority ' + '(a string, finite number, server value, or null).');
    };

    exports.validateEventType = function (fnName, argumentNumber, eventType, optional) {
        if (optional && eventType === undefined) return;

        switch (eventType) {
            case 'value':
            case 'child_added':
            case 'child_removed':
            case 'child_changed':
            case 'child_moved':
                break;

            default:
                throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) + 'must be a valid event type = "value", "child_added", "child_removed", ' + '"child_changed", or "child_moved".');
        }
    };

    exports.validateKey = function (fnName, argumentNumber, key, optional) {
        if (optional && key === undefined) return;
        if (!exports.isValidKey(key)) throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) + 'was an invalid key = "' + key + '".  Firebase keys must be non-empty strings and ' + 'can\'t contain ".", "#", "$", "/", "[", or "]").');
    };

    exports.validatePathString = function (fnName, argumentNumber, pathString, optional) {
        if (optional && pathString === undefined) return;
        if (!exports.isValidPathString(pathString)) throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) + 'was an invalid path = "' + pathString + '". Paths must be non-empty strings and ' + 'can\'t contain ".", "#", "$", "[", or "]"');
    };

    exports.validateRootPathString = function (fnName, argumentNumber, pathString, optional) {
        if (pathString) {
            pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
        }

        exports.validatePathString(fnName, argumentNumber, pathString, optional);
    };

    exports.validateWritablePath = function (fnName, path) {
        if (path.getFront() === '.info') {
            throw new Error(fnName + " failed = Can't modify data under /.info/");
        }
    };

    exports.validateUrl = function (fnName, argumentNumber, parsedUrl) {
        var pathString = parsedUrl.path.toString();

        if (!(typeof parsedUrl.repoInfo.host === 'string') || parsedUrl.repoInfo.host.length === 0 || !exports.isValidKey(parsedUrl.repoInfo.namespace) && parsedUrl.repoInfo.host.split(':')[0] !== 'localhost' || pathString.length !== 0 && !exports.isValidRootPathString(pathString)) {
            throw new Error(util_3.errorPrefix(fnName, argumentNumber, false) + 'must be a valid firebase URL and ' + 'the path can\'t contain ".", "#", "$", "[", or "]".');
        }
    };

    exports.validateCredential = function (fnName, argumentNumber, cred, optional) {
        if (optional && cred === undefined) return;
        if (!(typeof cred === 'string')) throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) + 'must be a valid credential (a string).');
    };

    exports.validateBoolean = function (fnName, argumentNumber, bool, optional) {
        if (optional && bool === undefined) return;
        if (typeof bool !== 'boolean') throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) + 'must be a boolean.');
    };

    exports.validateString = function (fnName, argumentNumber, string, optional) {
        if (optional && string === undefined) return;

        if (!(typeof string === 'string')) {
            throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) + 'must be a valid string.');
        }
    };

    exports.validateObject = function (fnName, argumentNumber, obj, optional) {
        if (optional && obj === undefined) return;

        if (!(obj && typeof obj === 'object') || obj === null) {
            throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) + 'must be a valid object.');
        }
    };

    exports.validateObjectContainsKey = function (fnName, argumentNumber, obj, key, optional, opt_type) {
        var objectContainsKey = obj && typeof obj === 'object' && util_1.contains(obj, key);

        if (!objectContainsKey) {
            if (optional) {
                return;
            } else {
                throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) + 'must contain the key "' + key + '"');
            }
        }

        if (opt_type) {
            var val = util_1.safeGet(obj, key);

            if (opt_type === 'number' && !(typeof val === 'number') || opt_type === 'string' && !(typeof val === 'string') || opt_type === 'boolean' && !(typeof val === 'boolean') || opt_type === 'function' && !(typeof val === 'function') || opt_type === 'object' && !(typeof val === 'object') && val) {
                if (optional) {
                    throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) + 'contains invalid value for key "' + key + '" (must be of type "' + opt_type + '")');
                } else {
                    throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) + 'must contain the key "' + key + '" with type "' + opt_type + '"');
                }
            }
        }
    };
},543,[538,508,531],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\util\\validation.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "@firebase/util");

    var TransactionResult = function () {
        function TransactionResult(committed, snapshot) {
            this.committed = committed;
            this.snapshot = snapshot;
        }

        TransactionResult.prototype.toJSON = function () {
            util_1.validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);
            return {
                committed: this.committed,
                snapshot: this.snapshot.toJSON()
            };
        };

        return TransactionResult;
    }();

    exports.TransactionResult = TransactionResult;
},544,[508],"node_modules\\@firebase\\database\\dist\\cjs\\src\\api\\TransactionResult.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "@firebase/util");

    exports.nextPushId = function () {
        var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';
        var lastPushTime = 0;
        var lastRandChars = [];
        return function (now) {
            var duplicateTime = now === lastPushTime;
            lastPushTime = now;
            var i;
            var timeStampChars = new Array(8);

            for (i = 7; i >= 0; i--) {
                timeStampChars[i] = PUSH_CHARS.charAt(now % 64);
                now = Math.floor(now / 64);
            }

            util_1.assert(now === 0, 'Cannot push at time == 0');
            var id = timeStampChars.join('');

            if (!duplicateTime) {
                for (i = 0; i < 12; i++) {
                    lastRandChars[i] = Math.floor(Math.random() * 64);
                }
            } else {
                for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {
                    lastRandChars[i] = 0;
                }

                lastRandChars[i]++;
            }

            for (i = 0; i < 12; i++) {
                id += PUSH_CHARS.charAt(lastRandChars[i]);
            }

            util_1.assert(id.length === 20, 'nextPushId: Length should be 20.');
            return id;
        };
    }();
},545,[508],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\util\\NextPushId.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "@firebase/util");

    var KeyIndex_1 = _require(_dependencyMap[1], "../core/snap/indexes/KeyIndex");

    var PriorityIndex_1 = _require(_dependencyMap[2], "../core/snap/indexes/PriorityIndex");

    var ValueIndex_1 = _require(_dependencyMap[3], "../core/snap/indexes/ValueIndex");

    var PathIndex_1 = _require(_dependencyMap[4], "../core/snap/indexes/PathIndex");

    var util_2 = _require(_dependencyMap[5], "../core/util/util");

    var Path_1 = _require(_dependencyMap[6], "../core/util/Path");

    var validation_1 = _require(_dependencyMap[7], "../core/util/validation");

    var util_3 = _require(_dependencyMap[0], "@firebase/util");

    var EventRegistration_1 = _require(_dependencyMap[8], "../core/view/EventRegistration");

    var util_4 = _require(_dependencyMap[0], "@firebase/util");

    var __referenceConstructor;

    var Query = function () {
        function Query(repo, path, queryParams_, orderByCalled_) {
            this.repo = repo;
            this.path = path;
            this.queryParams_ = queryParams_;
            this.orderByCalled_ = orderByCalled_;
        }

        Object.defineProperty(Query, "__referenceConstructor", {
            get: function get() {
                util_1.assert(__referenceConstructor, 'Reference.ts has not been loaded');
                return __referenceConstructor;
            },
            set: function set(val) {
                __referenceConstructor = val;
            },
            enumerable: true,
            configurable: true
        });

        Query.validateQueryEndpoints_ = function (params) {
            var startNode = null;
            var endNode = null;

            if (params.hasStart()) {
                startNode = params.getIndexStartValue();
            }

            if (params.hasEnd()) {
                endNode = params.getIndexEndValue();
            }

            if (params.getIndex() === KeyIndex_1.KEY_INDEX) {
                var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' + 'startAt(), endAt(), or equalTo().';
                var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), endAt(),' + 'or equalTo() must be a string.';

                if (params.hasStart()) {
                    var startName = params.getIndexStartName();

                    if (startName != util_2.MIN_NAME) {
                        throw new Error(tooManyArgsError);
                    } else if (typeof startNode !== 'string') {
                        throw new Error(wrongArgTypeError);
                    }
                }

                if (params.hasEnd()) {
                    var endName = params.getIndexEndName();

                    if (endName != util_2.MAX_NAME) {
                        throw new Error(tooManyArgsError);
                    } else if (typeof endNode !== 'string') {
                        throw new Error(wrongArgTypeError);
                    }
                }
            } else if (params.getIndex() === PriorityIndex_1.PRIORITY_INDEX) {
                if (startNode != null && !validation_1.isValidPriority(startNode) || endNode != null && !validation_1.isValidPriority(endNode)) {
                    throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' + 'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).');
                }
            } else {
                util_1.assert(params.getIndex() instanceof PathIndex_1.PathIndex || params.getIndex() === ValueIndex_1.VALUE_INDEX, 'unknown index type.');

                if (startNode != null && typeof startNode === 'object' || endNode != null && typeof endNode === 'object') {
                    throw new Error('Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' + 'an object.');
                }
            }
        };

        Query.validateLimit_ = function (params) {
            if (params.hasStart() && params.hasEnd() && params.hasLimit() && !params.hasAnchoredLimit()) {
                throw new Error("Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.");
            }
        };

        Query.prototype.validateNoPreviousOrderByCall_ = function (fnName) {
            if (this.orderByCalled_ === true) {
                throw new Error(fnName + ": You can't combine multiple orderBy calls.");
            }
        };

        Query.prototype.getQueryParams = function () {
            return this.queryParams_;
        };

        Query.prototype.getRef = function () {
            util_3.validateArgCount('Query.ref', 0, 0, arguments.length);
            return new Query.__referenceConstructor(this.repo, this.path);
        };

        Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {
            util_3.validateArgCount('Query.on', 2, 4, arguments.length);
            validation_1.validateEventType('Query.on', 1, eventType, false);
            util_3.validateCallback('Query.on', 2, callback, false);
            var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);

            if (eventType === 'value') {
                this.onValueEvent(callback, ret.cancel, ret.context);
            } else {
                var callbacks = {};
                callbacks[eventType] = callback;
                this.onChildEvent(callbacks, ret.cancel, ret.context);
            }

            return callback;
        };

        Query.prototype.onValueEvent = function (callback, cancelCallback, context) {
            var container = new EventRegistration_1.ValueEventRegistration(callback, cancelCallback || null, context || null);
            this.repo.addEventCallbackForQuery(this, container);
        };

        Query.prototype.onChildEvent = function (callbacks, cancelCallback, context) {
            var container = new EventRegistration_1.ChildEventRegistration(callbacks, cancelCallback, context);
            this.repo.addEventCallbackForQuery(this, container);
        };

        Query.prototype.off = function (eventType, callback, context) {
            util_3.validateArgCount('Query.off', 0, 3, arguments.length);
            validation_1.validateEventType('Query.off', 1, eventType, true);
            util_3.validateCallback('Query.off', 2, callback, true);
            util_3.validateContextObject('Query.off', 3, context, true);
            var container = null;
            var callbacks = null;

            if (eventType === 'value') {
                var valueCallback = callback || null;
                container = new EventRegistration_1.ValueEventRegistration(valueCallback, null, context || null);
            } else if (eventType) {
                if (callback) {
                    callbacks = {};
                    callbacks[eventType] = callback;
                }

                container = new EventRegistration_1.ChildEventRegistration(callbacks, null, context || null);
            }

            this.repo.removeEventCallbackForQuery(this, container);
        };

        Query.prototype.once = function (eventType, userCallback, cancelOrContext, context) {
            var _this = this;

            util_3.validateArgCount('Query.once', 1, 4, arguments.length);
            validation_1.validateEventType('Query.once', 1, eventType, false);
            util_3.validateCallback('Query.once', 2, userCallback, true);
            var ret = Query.getCancelAndContextArgs_('Query.once', cancelOrContext, context);
            var firstCall = true;
            var deferred = new util_4.Deferred();
            deferred.promise.catch(function () {});

            var onceCallback = function onceCallback(snapshot) {
                if (firstCall) {
                    firstCall = false;

                    _this.off(eventType, onceCallback);

                    if (userCallback) {
                        userCallback.bind(ret.context)(snapshot);
                    }

                    deferred.resolve(snapshot);
                }
            };

            this.on(eventType, onceCallback, function (err) {
                _this.off(eventType, onceCallback);

                if (ret.cancel) ret.cancel.bind(ret.context)(err);
                deferred.reject(err);
            });
            return deferred.promise;
        };

        Query.prototype.limitToFirst = function (limit) {
            util_3.validateArgCount('Query.limitToFirst', 1, 1, arguments.length);

            if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {
                throw new Error('Query.limitToFirst: First argument must be a positive integer.');
            }

            if (this.queryParams_.hasLimit()) {
                throw new Error('Query.limitToFirst: Limit was already set (by another call to limit, ' + 'limitToFirst, or limitToLast).');
            }

            return new Query(this.repo, this.path, this.queryParams_.limitToFirst(limit), this.orderByCalled_);
        };

        Query.prototype.limitToLast = function (limit) {
            util_3.validateArgCount('Query.limitToLast', 1, 1, arguments.length);

            if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {
                throw new Error('Query.limitToLast: First argument must be a positive integer.');
            }

            if (this.queryParams_.hasLimit()) {
                throw new Error('Query.limitToLast: Limit was already set (by another call to limit, ' + 'limitToFirst, or limitToLast).');
            }

            return new Query(this.repo, this.path, this.queryParams_.limitToLast(limit), this.orderByCalled_);
        };

        Query.prototype.orderByChild = function (path) {
            util_3.validateArgCount('Query.orderByChild', 1, 1, arguments.length);

            if (path === '$key') {
                throw new Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');
            } else if (path === '$priority') {
                throw new Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');
            } else if (path === '$value') {
                throw new Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');
            }

            validation_1.validatePathString('Query.orderByChild', 1, path, false);
            this.validateNoPreviousOrderByCall_('Query.orderByChild');
            var parsedPath = new Path_1.Path(path);

            if (parsedPath.isEmpty()) {
                throw new Error('Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.');
            }

            var index = new PathIndex_1.PathIndex(parsedPath);
            var newParams = this.queryParams_.orderBy(index);
            Query.validateQueryEndpoints_(newParams);
            return new Query(this.repo, this.path, newParams, true);
        };

        Query.prototype.orderByKey = function () {
            util_3.validateArgCount('Query.orderByKey', 0, 0, arguments.length);
            this.validateNoPreviousOrderByCall_('Query.orderByKey');
            var newParams = this.queryParams_.orderBy(KeyIndex_1.KEY_INDEX);
            Query.validateQueryEndpoints_(newParams);
            return new Query(this.repo, this.path, newParams, true);
        };

        Query.prototype.orderByPriority = function () {
            util_3.validateArgCount('Query.orderByPriority', 0, 0, arguments.length);
            this.validateNoPreviousOrderByCall_('Query.orderByPriority');
            var newParams = this.queryParams_.orderBy(PriorityIndex_1.PRIORITY_INDEX);
            Query.validateQueryEndpoints_(newParams);
            return new Query(this.repo, this.path, newParams, true);
        };

        Query.prototype.orderByValue = function () {
            util_3.validateArgCount('Query.orderByValue', 0, 0, arguments.length);
            this.validateNoPreviousOrderByCall_('Query.orderByValue');
            var newParams = this.queryParams_.orderBy(ValueIndex_1.VALUE_INDEX);
            Query.validateQueryEndpoints_(newParams);
            return new Query(this.repo, this.path, newParams, true);
        };

        Query.prototype.startAt = function (value, name) {
            if (value === void 0) {
                value = null;
            }

            util_3.validateArgCount('Query.startAt', 0, 2, arguments.length);
            validation_1.validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);
            validation_1.validateKey('Query.startAt', 2, name, true);
            var newParams = this.queryParams_.startAt(value, name);
            Query.validateLimit_(newParams);
            Query.validateQueryEndpoints_(newParams);

            if (this.queryParams_.hasStart()) {
                throw new Error('Query.startAt: Starting point was already set (by another call to startAt ' + 'or equalTo).');
            }

            if (value === undefined) {
                value = null;
                name = null;
            }

            return new Query(this.repo, this.path, newParams, this.orderByCalled_);
        };

        Query.prototype.endAt = function (value, name) {
            if (value === void 0) {
                value = null;
            }

            util_3.validateArgCount('Query.endAt', 0, 2, arguments.length);
            validation_1.validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);
            validation_1.validateKey('Query.endAt', 2, name, true);
            var newParams = this.queryParams_.endAt(value, name);
            Query.validateLimit_(newParams);
            Query.validateQueryEndpoints_(newParams);

            if (this.queryParams_.hasEnd()) {
                throw new Error('Query.endAt: Ending point was already set (by another call to endAt or ' + 'equalTo).');
            }

            return new Query(this.repo, this.path, newParams, this.orderByCalled_);
        };

        Query.prototype.equalTo = function (value, name) {
            util_3.validateArgCount('Query.equalTo', 1, 2, arguments.length);
            validation_1.validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);
            validation_1.validateKey('Query.equalTo', 2, name, true);

            if (this.queryParams_.hasStart()) {
                throw new Error('Query.equalTo: Starting point was already set (by another call to startAt or ' + 'equalTo).');
            }

            if (this.queryParams_.hasEnd()) {
                throw new Error('Query.equalTo: Ending point was already set (by another call to endAt or ' + 'equalTo).');
            }

            return this.startAt(value, name).endAt(value, name);
        };

        Query.prototype.toString = function () {
            util_3.validateArgCount('Query.toString', 0, 0, arguments.length);
            return this.repo.toString() + this.path.toUrlEncodedString();
        };

        Query.prototype.toJSON = function () {
            util_3.validateArgCount('Query.toJSON', 0, 1, arguments.length);
            return this.toString();
        };

        Query.prototype.queryObject = function () {
            return this.queryParams_.getQueryObject();
        };

        Query.prototype.queryIdentifier = function () {
            var obj = this.queryObject();
            var id = util_2.ObjectToUniqueKey(obj);
            return id === '{}' ? 'default' : id;
        };

        Query.prototype.isEqual = function (other) {
            util_3.validateArgCount('Query.isEqual', 1, 1, arguments.length);

            if (!(other instanceof Query)) {
                var error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';
                throw new Error(error);
            }

            var sameRepo = this.repo === other.repo;
            var samePath = this.path.equals(other.path);
            var sameQueryIdentifier = this.queryIdentifier() === other.queryIdentifier();
            return sameRepo && samePath && sameQueryIdentifier;
        };

        Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {
            var ret = {
                cancel: null,
                context: null
            };

            if (cancelOrContext && context) {
                ret.cancel = cancelOrContext;
                util_3.validateCallback(fnName, 3, ret.cancel, true);
                ret.context = context;
                util_3.validateContextObject(fnName, 4, ret.context, true);
            } else if (cancelOrContext) {
                if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {
                    ret.context = cancelOrContext;
                } else if (typeof cancelOrContext === 'function') {
                    ret.cancel = cancelOrContext;
                } else {
                    throw new Error(util_3.errorPrefix(fnName, 3, true) + ' must either be a cancel callback or a context object.');
                }
            }

            return ret;
        };

        Object.defineProperty(Query.prototype, "ref", {
            get: function get() {
                return this.getRef();
            },
            enumerable: true,
            configurable: true
        });
        return Query;
    }();

    exports.Query = Query;
},546,[508,547,550,553,560,531,538,543,561],"node_modules\\@firebase\\database\\dist\\cjs\\src\\api\\Query.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var tslib_1 = _require(_dependencyMap[0], "tslib");

    var Index_1 = _require(_dependencyMap[1], "./Index");

    var Node_1 = _require(_dependencyMap[2], "../Node");

    var util_1 = _require(_dependencyMap[3], "../../util/util");

    var util_2 = _require(_dependencyMap[4], "@firebase/util");

    var __EMPTY_NODE;

    var KeyIndex = function (_super) {
        tslib_1.__extends(KeyIndex, _super);

        function KeyIndex() {
            return _super !== null && _super.apply(this, arguments) || this;
        }

        Object.defineProperty(KeyIndex, "__EMPTY_NODE", {
            get: function get() {
                return __EMPTY_NODE;
            },
            set: function set(val) {
                __EMPTY_NODE = val;
            },
            enumerable: true,
            configurable: true
        });

        KeyIndex.prototype.compare = function (a, b) {
            return util_1.nameCompare(a.name, b.name);
        };

        KeyIndex.prototype.isDefinedOn = function (node) {
            throw util_2.assertionError('KeyIndex.isDefinedOn not expected to be called.');
        };

        KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
            return false;
        };

        KeyIndex.prototype.minPost = function () {
            return Node_1.NamedNode.MIN;
        };

        KeyIndex.prototype.maxPost = function () {
            return new Node_1.NamedNode(util_1.MAX_NAME, __EMPTY_NODE);
        };

        KeyIndex.prototype.makePost = function (indexValue, name) {
            util_2.assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');
            return new Node_1.NamedNode(indexValue, __EMPTY_NODE);
        };

        KeyIndex.prototype.toString = function () {
            return '.key';
        };

        return KeyIndex;
    }(Index_1.Index);

    exports.KeyIndex = KeyIndex;
    exports.KEY_INDEX = new KeyIndex();
},547,[521,548,549,531,508],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\snap\\indexes\\KeyIndex.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var Node_1 = _require(_dependencyMap[0], "../Node");

  var util_1 = _require(_dependencyMap[1], "../../util/util");

  var Index = function () {
    function Index() {}

    Index.prototype.getCompare = function () {
      return this.compare.bind(this);
    };

    Index.prototype.indexedValueChanged = function (oldNode, newNode) {
      var oldWrapped = new Node_1.NamedNode(util_1.MIN_NAME, oldNode);
      var newWrapped = new Node_1.NamedNode(util_1.MIN_NAME, newNode);
      return this.compare(oldWrapped, newWrapped) !== 0;
    };

    Index.prototype.minPost = function () {
      return Node_1.NamedNode.MIN;
    };

    return Index;
  }();

  exports.Index = Index;
},548,[549,531],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\snap\\indexes\\Index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var NamedNode = function () {
    function NamedNode(name, node) {
      this.name = name;
      this.node = node;
    }

    NamedNode.Wrap = function (name, node) {
      return new NamedNode(name, node);
    };

    return NamedNode;
  }();

  exports.NamedNode = NamedNode;
},549,[],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\snap\\Node.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var tslib_1 = _require(_dependencyMap[0], "tslib");

    var Index_1 = _require(_dependencyMap[1], "./Index");

    var util_1 = _require(_dependencyMap[2], "../../util/util");

    var Node_1 = _require(_dependencyMap[3], "../Node");

    var LeafNode_1 = _require(_dependencyMap[4], "../LeafNode");

    var nodeFromJSON;
    var MAX_NODE;

    function setNodeFromJSON(val) {
        nodeFromJSON = val;
    }

    exports.setNodeFromJSON = setNodeFromJSON;

    function setMaxNode(val) {
        MAX_NODE = val;
    }

    exports.setMaxNode = setMaxNode;

    var PriorityIndex = function (_super) {
        tslib_1.__extends(PriorityIndex, _super);

        function PriorityIndex() {
            return _super !== null && _super.apply(this, arguments) || this;
        }

        PriorityIndex.prototype.compare = function (a, b) {
            var aPriority = a.node.getPriority();
            var bPriority = b.node.getPriority();
            var indexCmp = aPriority.compareTo(bPriority);

            if (indexCmp === 0) {
                return util_1.nameCompare(a.name, b.name);
            } else {
                return indexCmp;
            }
        };

        PriorityIndex.prototype.isDefinedOn = function (node) {
            return !node.getPriority().isEmpty();
        };

        PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
            return !oldNode.getPriority().equals(newNode.getPriority());
        };

        PriorityIndex.prototype.minPost = function () {
            return Node_1.NamedNode.MIN;
        };

        PriorityIndex.prototype.maxPost = function () {
            return new Node_1.NamedNode(util_1.MAX_NAME, new LeafNode_1.LeafNode('[PRIORITY-POST]', MAX_NODE));
        };

        PriorityIndex.prototype.makePost = function (indexValue, name) {
            var priorityNode = nodeFromJSON(indexValue);
            return new Node_1.NamedNode(name, new LeafNode_1.LeafNode('[PRIORITY-POST]', priorityNode));
        };

        PriorityIndex.prototype.toString = function () {
            return '.priority';
        };

        return PriorityIndex;
    }(Index_1.Index);

    exports.PriorityIndex = PriorityIndex;
    exports.PRIORITY_INDEX = new PriorityIndex();
},550,[521,548,531,549,551],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\snap\\indexes\\PriorityIndex.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "@firebase/util");

    var util_2 = _require(_dependencyMap[1], "../util/util");

    var snap_1 = _require(_dependencyMap[2], "./snap");

    var __childrenNodeConstructor;

    var LeafNode = function () {
        function LeafNode(value_, priorityNode_) {
            if (priorityNode_ === void 0) {
                priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE;
            }

            this.value_ = value_;
            this.priorityNode_ = priorityNode_;
            this.lazyHash_ = null;
            util_1.assert(this.value_ !== undefined && this.value_ !== null, "LeafNode shouldn't be created with null/undefined value.");
            snap_1.validatePriorityNode(this.priorityNode_);
        }

        Object.defineProperty(LeafNode, "__childrenNodeConstructor", {
            get: function get() {
                return __childrenNodeConstructor;
            },
            set: function set(val) {
                __childrenNodeConstructor = val;
            },
            enumerable: true,
            configurable: true
        });

        LeafNode.prototype.isLeafNode = function () {
            return true;
        };

        LeafNode.prototype.getPriority = function () {
            return this.priorityNode_;
        };

        LeafNode.prototype.updatePriority = function (newPriorityNode) {
            return new LeafNode(this.value_, newPriorityNode);
        };

        LeafNode.prototype.getImmediateChild = function (childName) {
            if (childName === '.priority') {
                return this.priorityNode_;
            } else {
                return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
            }
        };

        LeafNode.prototype.getChild = function (path) {
            if (path.isEmpty()) {
                return this;
            } else if (path.getFront() === '.priority') {
                return this.priorityNode_;
            } else {
                return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
            }
        };

        LeafNode.prototype.hasChild = function () {
            return false;
        };

        LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {
            return null;
        };

        LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {
            if (childName === '.priority') {
                return this.updatePriority(newChildNode);
            } else if (newChildNode.isEmpty() && childName !== '.priority') {
                return this;
            } else {
                return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);
            }
        };

        LeafNode.prototype.updateChild = function (path, newChildNode) {
            var front = path.getFront();

            if (front === null) {
                return newChildNode;
            } else if (newChildNode.isEmpty() && front !== '.priority') {
                return this;
            } else {
                util_1.assert(front !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');
                return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(), newChildNode));
            }
        };

        LeafNode.prototype.isEmpty = function () {
            return false;
        };

        LeafNode.prototype.numChildren = function () {
            return 0;
        };

        LeafNode.prototype.forEachChild = function (index, action) {
            return false;
        };

        LeafNode.prototype.val = function (exportFormat) {
            if (exportFormat && !this.getPriority().isEmpty()) return {
                '.value': this.getValue(),
                '.priority': this.getPriority().val()
            };else return this.getValue();
        };

        LeafNode.prototype.hash = function () {
            if (this.lazyHash_ === null) {
                var toHash = '';
                if (!this.priorityNode_.isEmpty()) toHash += 'priority:' + snap_1.priorityHashText(this.priorityNode_.val()) + ':';
                var type = typeof this.value_;
                toHash += type + ':';

                if (type === 'number') {
                    toHash += util_2.doubleToIEEE754String(this.value_);
                } else {
                    toHash += this.value_;
                }

                this.lazyHash_ = util_2.sha1(toHash);
            }

            return this.lazyHash_;
        };

        LeafNode.prototype.getValue = function () {
            return this.value_;
        };

        LeafNode.prototype.compareTo = function (other) {
            if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {
                return 1;
            } else if (other instanceof LeafNode.__childrenNodeConstructor) {
                return -1;
            } else {
                util_1.assert(other.isLeafNode(), 'Unknown node type');
                return this.compareToLeafNode_(other);
            }
        };

        LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {
            var otherLeafType = typeof otherLeaf.value_;
            var thisLeafType = typeof this.value_;
            var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);
            var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);
            util_1.assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);
            util_1.assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);

            if (otherIndex === thisIndex) {
                if (thisLeafType === 'object') {
                    return 0;
                } else {
                    if (this.value_ < otherLeaf.value_) {
                        return -1;
                    } else if (this.value_ === otherLeaf.value_) {
                        return 0;
                    } else {
                        return 1;
                    }
                }
            } else {
                return thisIndex - otherIndex;
            }
        };

        LeafNode.prototype.withIndex = function () {
            return this;
        };

        LeafNode.prototype.isIndexed = function () {
            return true;
        };

        LeafNode.prototype.equals = function (other) {
            if (other === this) {
                return true;
            } else if (other.isLeafNode()) {
                var otherLeaf = other;
                return this.value_ === otherLeaf.value_ && this.priorityNode_.equals(otherLeaf.priorityNode_);
            } else {
                return false;
            }
        };

        LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];
        return LeafNode;
    }();

    exports.LeafNode = LeafNode;
},551,[508,531,552],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\snap\\LeafNode.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "@firebase/util");

    var util_2 = _require(_dependencyMap[1], "../util/util");

    var util_3 = _require(_dependencyMap[0], "@firebase/util");

    var MAX_NODE;

    function setMaxNode(val) {
        MAX_NODE = val;
    }

    exports.setMaxNode = setMaxNode;

    exports.priorityHashText = function (priority) {
        if (typeof priority === 'number') return 'number:' + util_2.doubleToIEEE754String(priority);else return 'string:' + priority;
    };

    exports.validatePriorityNode = function (priorityNode) {
        if (priorityNode.isLeafNode()) {
            var val = priorityNode.val();
            util_1.assert(typeof val === 'string' || typeof val === 'number' || typeof val === 'object' && util_3.contains(val, '.sv'), 'Priority must be a string or number.');
        } else {
            util_1.assert(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');
        }

        util_1.assert(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), "Priority nodes can't have a priority of their own.");
    };
},552,[508,531],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\snap\\snap.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var tslib_1 = _require(_dependencyMap[0], "tslib");

    var Index_1 = _require(_dependencyMap[1], "./Index");

    var Node_1 = _require(_dependencyMap[2], "../Node");

    var util_1 = _require(_dependencyMap[3], "../../util/util");

    var nodeFromJSON_1 = _require(_dependencyMap[4], "../nodeFromJSON");

    var ValueIndex = function (_super) {
        tslib_1.__extends(ValueIndex, _super);

        function ValueIndex() {
            return _super !== null && _super.apply(this, arguments) || this;
        }

        ValueIndex.prototype.compare = function (a, b) {
            var indexCmp = a.node.compareTo(b.node);

            if (indexCmp === 0) {
                return util_1.nameCompare(a.name, b.name);
            } else {
                return indexCmp;
            }
        };

        ValueIndex.prototype.isDefinedOn = function (node) {
            return true;
        };

        ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
            return !oldNode.equals(newNode);
        };

        ValueIndex.prototype.minPost = function () {
            return Node_1.NamedNode.MIN;
        };

        ValueIndex.prototype.maxPost = function () {
            return Node_1.NamedNode.MAX;
        };

        ValueIndex.prototype.makePost = function (indexValue, name) {
            var valueNode = nodeFromJSON_1.nodeFromJSON(indexValue);
            return new Node_1.NamedNode(name, valueNode);
        };

        ValueIndex.prototype.toString = function () {
            return '.value';
        };

        return ValueIndex;
    }(Index_1.Index);

    exports.ValueIndex = ValueIndex;
    exports.VALUE_INDEX = new ValueIndex();
},553,[521,548,549,531,554],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\snap\\indexes\\ValueIndex.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var ChildrenNode_1 = _require(_dependencyMap[0], "./ChildrenNode");

    var LeafNode_1 = _require(_dependencyMap[1], "./LeafNode");

    var Node_1 = _require(_dependencyMap[2], "./Node");

    var util_1 = _require(_dependencyMap[3], "@firebase/util");

    var util_2 = _require(_dependencyMap[3], "@firebase/util");

    var childSet_1 = _require(_dependencyMap[4], "./childSet");

    var comparators_1 = _require(_dependencyMap[5], "./comparators");

    var IndexMap_1 = _require(_dependencyMap[6], "./IndexMap");

    var PriorityIndex_1 = _require(_dependencyMap[7], "./indexes/PriorityIndex");

    var USE_HINZE = true;

    function nodeFromJSON(json, priority) {
        if (priority === void 0) {
            priority = null;
        }

        if (json === null) {
            return ChildrenNode_1.ChildrenNode.EMPTY_NODE;
        }

        if (typeof json === 'object' && '.priority' in json) {
            priority = json['.priority'];
        }

        util_2.assert(priority === null || typeof priority === 'string' || typeof priority === 'number' || typeof priority === 'object' && '.sv' in priority, 'Invalid priority type found: ' + typeof priority);

        if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {
            json = json['.value'];
        }

        if (typeof json !== 'object' || '.sv' in json) {
            var jsonLeaf = json;
            return new LeafNode_1.LeafNode(jsonLeaf, nodeFromJSON(priority));
        }

        if (!(json instanceof Array) && USE_HINZE) {
            var children_1 = [];
            var childrenHavePriority_1 = false;
            var hinzeJsonObj_1 = json;
            util_1.forEach(hinzeJsonObj_1, function (key, child) {
                if (typeof key !== 'string' || key.substring(0, 1) !== '.') {
                    var childNode = nodeFromJSON(hinzeJsonObj_1[key]);

                    if (!childNode.isEmpty()) {
                        childrenHavePriority_1 = childrenHavePriority_1 || !childNode.getPriority().isEmpty();
                        children_1.push(new Node_1.NamedNode(key, childNode));
                    }
                }
            });

            if (children_1.length == 0) {
                return ChildrenNode_1.ChildrenNode.EMPTY_NODE;
            }

            var childSet = childSet_1.buildChildSet(children_1, comparators_1.NAME_ONLY_COMPARATOR, function (namedNode) {
                return namedNode.name;
            }, comparators_1.NAME_COMPARATOR);

            if (childrenHavePriority_1) {
                var sortedChildSet = childSet_1.buildChildSet(children_1, PriorityIndex_1.PRIORITY_INDEX.getCompare());
                return new ChildrenNode_1.ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap_1.IndexMap({
                    '.priority': sortedChildSet
                }, {
                    '.priority': PriorityIndex_1.PRIORITY_INDEX
                }));
            } else {
                return new ChildrenNode_1.ChildrenNode(childSet, nodeFromJSON(priority), IndexMap_1.IndexMap.Default);
            }
        } else {
            var node_1 = ChildrenNode_1.ChildrenNode.EMPTY_NODE;
            var jsonObj_1 = json;
            util_1.forEach(jsonObj_1, function (key, childData) {
                if (util_1.contains(jsonObj_1, key)) {
                    if (key.substring(0, 1) !== '.') {
                        var childNode = nodeFromJSON(childData);
                        if (childNode.isLeafNode() || !childNode.isEmpty()) node_1 = node_1.updateImmediateChild(key, childNode);
                    }
                }
            });
            return node_1.updatePriority(nodeFromJSON(priority));
        }
    }

    exports.nodeFromJSON = nodeFromJSON;
    PriorityIndex_1.setNodeFromJSON(nodeFromJSON);
},554,[555,551,549,508,558,559,557,550],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\snap\\nodeFromJSON.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var tslib_1 = _require(_dependencyMap[0], "tslib");

    var util_1 = _require(_dependencyMap[1], "@firebase/util");

    var util_2 = _require(_dependencyMap[2], "../util/util");

    var SortedMap_1 = _require(_dependencyMap[3], "../util/SortedMap");

    var Node_1 = _require(_dependencyMap[4], "./Node");

    var snap_1 = _require(_dependencyMap[5], "./snap");

    var PriorityIndex_1 = _require(_dependencyMap[6], "./indexes/PriorityIndex");

    var KeyIndex_1 = _require(_dependencyMap[7], "./indexes/KeyIndex");

    var IndexMap_1 = _require(_dependencyMap[8], "./IndexMap");

    var LeafNode_1 = _require(_dependencyMap[9], "./LeafNode");

    var comparators_1 = _require(_dependencyMap[10], "./comparators");

    var EMPTY_NODE;

    var ChildrenNode = function () {
        function ChildrenNode(children_, priorityNode_, indexMap_) {
            this.children_ = children_;
            this.priorityNode_ = priorityNode_;
            this.indexMap_ = indexMap_;
            this.lazyHash_ = null;

            if (this.priorityNode_) {
                snap_1.validatePriorityNode(this.priorityNode_);
            }

            if (this.children_.isEmpty()) {
                util_1.assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');
            }
        }

        Object.defineProperty(ChildrenNode, "EMPTY_NODE", {
            get: function get() {
                return EMPTY_NODE || (EMPTY_NODE = new ChildrenNode(new SortedMap_1.SortedMap(comparators_1.NAME_COMPARATOR), null, IndexMap_1.IndexMap.Default));
            },
            enumerable: true,
            configurable: true
        });

        ChildrenNode.prototype.isLeafNode = function () {
            return false;
        };

        ChildrenNode.prototype.getPriority = function () {
            return this.priorityNode_ || EMPTY_NODE;
        };

        ChildrenNode.prototype.updatePriority = function (newPriorityNode) {
            if (this.children_.isEmpty()) {
                return this;
            } else {
                return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);
            }
        };

        ChildrenNode.prototype.getImmediateChild = function (childName) {
            if (childName === '.priority') {
                return this.getPriority();
            } else {
                var child = this.children_.get(childName);
                return child === null ? EMPTY_NODE : child;
            }
        };

        ChildrenNode.prototype.getChild = function (path) {
            var front = path.getFront();
            if (front === null) return this;
            return this.getImmediateChild(front).getChild(path.popFront());
        };

        ChildrenNode.prototype.hasChild = function (childName) {
            return this.children_.get(childName) !== null;
        };

        ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {
            util_1.assert(newChildNode, 'We should always be passing snapshot nodes');

            if (childName === '.priority') {
                return this.updatePriority(newChildNode);
            } else {
                var namedNode = new Node_1.NamedNode(childName, newChildNode);
                var newChildren = void 0,
                    newIndexMap = void 0,
                    newPriority = void 0;

                if (newChildNode.isEmpty()) {
                    newChildren = this.children_.remove(childName);
                    newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);
                } else {
                    newChildren = this.children_.insert(childName, newChildNode);
                    newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);
                }

                newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;
                return new ChildrenNode(newChildren, newPriority, newIndexMap);
            }
        };

        ChildrenNode.prototype.updateChild = function (path, newChildNode) {
            var front = path.getFront();

            if (front === null) {
                return newChildNode;
            } else {
                util_1.assert(path.getFront() !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');
                var newImmediateChild = this.getImmediateChild(front).updateChild(path.popFront(), newChildNode);
                return this.updateImmediateChild(front, newImmediateChild);
            }
        };

        ChildrenNode.prototype.isEmpty = function () {
            return this.children_.isEmpty();
        };

        ChildrenNode.prototype.numChildren = function () {
            return this.children_.count();
        };

        ChildrenNode.prototype.val = function (exportFormat) {
            if (this.isEmpty()) return null;
            var obj = {};
            var numKeys = 0,
                maxKey = 0,
                allIntegerKeys = true;
            this.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, childNode) {
                obj[key] = childNode.val(exportFormat);
                numKeys++;

                if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {
                    maxKey = Math.max(maxKey, Number(key));
                } else {
                    allIntegerKeys = false;
                }
            });

            if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {
                var array = [];

                for (var key in obj) {
                    array[key] = obj[key];
                }

                return array;
            } else {
                if (exportFormat && !this.getPriority().isEmpty()) {
                    obj['.priority'] = this.getPriority().val();
                }

                return obj;
            }
        };

        ChildrenNode.prototype.hash = function () {
            if (this.lazyHash_ === null) {
                var toHash_1 = '';
                if (!this.getPriority().isEmpty()) toHash_1 += 'priority:' + snap_1.priorityHashText(this.getPriority().val()) + ':';
                this.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, childNode) {
                    var childHash = childNode.hash();
                    if (childHash !== '') toHash_1 += ':' + key + ':' + childHash;
                });
                this.lazyHash_ = toHash_1 === '' ? '' : util_2.sha1(toHash_1);
            }

            return this.lazyHash_;
        };

        ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {
            var idx = this.resolveIndex_(index);

            if (idx) {
                var predecessor = idx.getPredecessorKey(new Node_1.NamedNode(childName, childNode));
                return predecessor ? predecessor.name : null;
            } else {
                return this.children_.getPredecessorKey(childName);
            }
        };

        ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {
            var idx = this.resolveIndex_(indexDefinition);

            if (idx) {
                var minKey = idx.minKey();
                return minKey && minKey.name;
            } else {
                return this.children_.minKey();
            }
        };

        ChildrenNode.prototype.getFirstChild = function (indexDefinition) {
            var minKey = this.getFirstChildName(indexDefinition);

            if (minKey) {
                return new Node_1.NamedNode(minKey, this.children_.get(minKey));
            } else {
                return null;
            }
        };

        ChildrenNode.prototype.getLastChildName = function (indexDefinition) {
            var idx = this.resolveIndex_(indexDefinition);

            if (idx) {
                var maxKey = idx.maxKey();
                return maxKey && maxKey.name;
            } else {
                return this.children_.maxKey();
            }
        };

        ChildrenNode.prototype.getLastChild = function (indexDefinition) {
            var maxKey = this.getLastChildName(indexDefinition);

            if (maxKey) {
                return new Node_1.NamedNode(maxKey, this.children_.get(maxKey));
            } else {
                return null;
            }
        };

        ChildrenNode.prototype.forEachChild = function (index, action) {
            var idx = this.resolveIndex_(index);

            if (idx) {
                return idx.inorderTraversal(function (wrappedNode) {
                    return action(wrappedNode.name, wrappedNode.node);
                });
            } else {
                return this.children_.inorderTraversal(action);
            }
        };

        ChildrenNode.prototype.getIterator = function (indexDefinition) {
            return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);
        };

        ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {
            var idx = this.resolveIndex_(indexDefinition);

            if (idx) {
                return idx.getIteratorFrom(startPost, function (key) {
                    return key;
                });
            } else {
                var iterator = this.children_.getIteratorFrom(startPost.name, Node_1.NamedNode.Wrap);
                var next = iterator.peek();

                while (next != null && indexDefinition.compare(next, startPost) < 0) {
                    iterator.getNext();
                    next = iterator.peek();
                }

                return iterator;
            }
        };

        ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {
            return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);
        };

        ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {
            var idx = this.resolveIndex_(indexDefinition);

            if (idx) {
                return idx.getReverseIteratorFrom(endPost, function (key) {
                    return key;
                });
            } else {
                var iterator = this.children_.getReverseIteratorFrom(endPost.name, Node_1.NamedNode.Wrap);
                var next = iterator.peek();

                while (next != null && indexDefinition.compare(next, endPost) > 0) {
                    iterator.getNext();
                    next = iterator.peek();
                }

                return iterator;
            }
        };

        ChildrenNode.prototype.compareTo = function (other) {
            if (this.isEmpty()) {
                if (other.isEmpty()) {
                    return 0;
                } else {
                    return -1;
                }
            } else if (other.isLeafNode() || other.isEmpty()) {
                return 1;
            } else if (other === exports.MAX_NODE) {
                return -1;
            } else {
                return 0;
            }
        };

        ChildrenNode.prototype.withIndex = function (indexDefinition) {
            if (indexDefinition === KeyIndex_1.KEY_INDEX || this.indexMap_.hasIndex(indexDefinition)) {
                return this;
            } else {
                var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);
                return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);
            }
        };

        ChildrenNode.prototype.isIndexed = function (index) {
            return index === KeyIndex_1.KEY_INDEX || this.indexMap_.hasIndex(index);
        };

        ChildrenNode.prototype.equals = function (other) {
            if (other === this) {
                return true;
            } else if (other.isLeafNode()) {
                return false;
            } else {
                var otherChildrenNode = other;

                if (!this.getPriority().equals(otherChildrenNode.getPriority())) {
                    return false;
                } else if (this.children_.count() === otherChildrenNode.children_.count()) {
                    var thisIter = this.getIterator(PriorityIndex_1.PRIORITY_INDEX);
                    var otherIter = otherChildrenNode.getIterator(PriorityIndex_1.PRIORITY_INDEX);
                    var thisCurrent = thisIter.getNext();
                    var otherCurrent = otherIter.getNext();

                    while (thisCurrent && otherCurrent) {
                        if (thisCurrent.name !== otherCurrent.name || !thisCurrent.node.equals(otherCurrent.node)) {
                            return false;
                        }

                        thisCurrent = thisIter.getNext();
                        otherCurrent = otherIter.getNext();
                    }

                    return thisCurrent === null && otherCurrent === null;
                } else {
                    return false;
                }
            }
        };

        ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {
            if (indexDefinition === KeyIndex_1.KEY_INDEX) {
                return null;
            } else {
                return this.indexMap_.get(indexDefinition.toString());
            }
        };

        ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\d*)$/;
        return ChildrenNode;
    }();

    exports.ChildrenNode = ChildrenNode;

    var MaxNode = function (_super) {
        tslib_1.__extends(MaxNode, _super);

        function MaxNode() {
            return _super.call(this, new SortedMap_1.SortedMap(comparators_1.NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap_1.IndexMap.Default) || this;
        }

        MaxNode.prototype.compareTo = function (other) {
            if (other === this) {
                return 0;
            } else {
                return 1;
            }
        };

        MaxNode.prototype.equals = function (other) {
            return other === this;
        };

        MaxNode.prototype.getPriority = function () {
            return this;
        };

        MaxNode.prototype.getImmediateChild = function (childName) {
            return ChildrenNode.EMPTY_NODE;
        };

        MaxNode.prototype.isEmpty = function () {
            return false;
        };

        return MaxNode;
    }(ChildrenNode);

    exports.MaxNode = MaxNode;
    exports.MAX_NODE = new MaxNode();
    Object.defineProperties(Node_1.NamedNode, {
        MIN: {
            value: new Node_1.NamedNode(util_2.MIN_NAME, ChildrenNode.EMPTY_NODE)
        },
        MAX: {
            value: new Node_1.NamedNode(util_2.MAX_NAME, exports.MAX_NODE)
        }
    });
    KeyIndex_1.KeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;
    LeafNode_1.LeafNode.__childrenNodeConstructor = ChildrenNode;
    snap_1.setMaxNode(exports.MAX_NODE);
    PriorityIndex_1.setMaxNode(exports.MAX_NODE);
},555,[521,508,531,556,549,552,550,547,557,551,559],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\snap\\ChildrenNode.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var SortedMapIterator = function () {
        function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {
            if (resultGenerator_ === void 0) {
                resultGenerator_ = null;
            }

            this.isReverse_ = isReverse_;
            this.resultGenerator_ = resultGenerator_;
            this.nodeStack_ = [];
            var cmp = 1;

            while (!node.isEmpty()) {
                node = node;
                cmp = startKey ? comparator(node.key, startKey) : 1;
                if (isReverse_) cmp *= -1;

                if (cmp < 0) {
                    if (this.isReverse_) {
                        node = node.left;
                    } else {
                        node = node.right;
                    }
                } else if (cmp === 0) {
                    this.nodeStack_.push(node);
                    break;
                } else {
                    this.nodeStack_.push(node);

                    if (this.isReverse_) {
                        node = node.right;
                    } else {
                        node = node.left;
                    }
                }
            }
        }

        SortedMapIterator.prototype.getNext = function () {
            if (this.nodeStack_.length === 0) return null;
            var node = this.nodeStack_.pop();
            var result;
            if (this.resultGenerator_) result = this.resultGenerator_(node.key, node.value);else result = {
                key: node.key,
                value: node.value
            };

            if (this.isReverse_) {
                node = node.left;

                while (!node.isEmpty()) {
                    this.nodeStack_.push(node);
                    node = node.right;
                }
            } else {
                node = node.right;

                while (!node.isEmpty()) {
                    this.nodeStack_.push(node);
                    node = node.left;
                }
            }

            return result;
        };

        SortedMapIterator.prototype.hasNext = function () {
            return this.nodeStack_.length > 0;
        };

        SortedMapIterator.prototype.peek = function () {
            if (this.nodeStack_.length === 0) return null;
            var node = this.nodeStack_[this.nodeStack_.length - 1];

            if (this.resultGenerator_) {
                return this.resultGenerator_(node.key, node.value);
            } else {
                return {
                    key: node.key,
                    value: node.value
                };
            }
        };

        return SortedMapIterator;
    }();

    exports.SortedMapIterator = SortedMapIterator;

    var LLRBNode = function () {
        function LLRBNode(key, value, color, left, right) {
            this.key = key;
            this.value = value;
            this.color = color != null ? color : LLRBNode.RED;
            this.left = left != null ? left : SortedMap.EMPTY_NODE;
            this.right = right != null ? right : SortedMap.EMPTY_NODE;
        }

        LLRBNode.prototype.copy = function (key, value, color, left, right) {
            return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);
        };

        LLRBNode.prototype.count = function () {
            return this.left.count() + 1 + this.right.count();
        };

        LLRBNode.prototype.isEmpty = function () {
            return false;
        };

        LLRBNode.prototype.inorderTraversal = function (action) {
            return this.left.inorderTraversal(action) || action(this.key, this.value) || this.right.inorderTraversal(action);
        };

        LLRBNode.prototype.reverseTraversal = function (action) {
            return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);
        };

        LLRBNode.prototype.min_ = function () {
            if (this.left.isEmpty()) {
                return this;
            } else {
                return this.left.min_();
            }
        };

        LLRBNode.prototype.minKey = function () {
            return this.min_().key;
        };

        LLRBNode.prototype.maxKey = function () {
            if (this.right.isEmpty()) {
                return this.key;
            } else {
                return this.right.maxKey();
            }
        };

        LLRBNode.prototype.insert = function (key, value, comparator) {
            var cmp, n;
            n = this;
            cmp = comparator(key, n.key);

            if (cmp < 0) {
                n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);
            } else if (cmp === 0) {
                n = n.copy(null, value, null, null, null);
            } else {
                n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));
            }

            return n.fixUp_();
        };

        LLRBNode.prototype.removeMin_ = function () {
            if (this.left.isEmpty()) {
                return SortedMap.EMPTY_NODE;
            }

            var n = this;
            if (!n.left.isRed_() && !n.left.left.isRed_()) n = n.moveRedLeft_();
            n = n.copy(null, null, null, n.left.removeMin_(), null);
            return n.fixUp_();
        };

        LLRBNode.prototype.remove = function (key, comparator) {
            var n, smallest;
            n = this;

            if (comparator(key, n.key) < 0) {
                if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {
                    n = n.moveRedLeft_();
                }

                n = n.copy(null, null, null, n.left.remove(key, comparator), null);
            } else {
                if (n.left.isRed_()) n = n.rotateRight_();

                if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {
                    n = n.moveRedRight_();
                }

                if (comparator(key, n.key) === 0) {
                    if (n.right.isEmpty()) {
                        return SortedMap.EMPTY_NODE;
                    } else {
                        smallest = n.right.min_();
                        n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());
                    }
                }

                n = n.copy(null, null, null, null, n.right.remove(key, comparator));
            }

            return n.fixUp_();
        };

        LLRBNode.prototype.isRed_ = function () {
            return this.color;
        };

        LLRBNode.prototype.fixUp_ = function () {
            var n = this;
            if (n.right.isRed_() && !n.left.isRed_()) n = n.rotateLeft_();
            if (n.left.isRed_() && n.left.left.isRed_()) n = n.rotateRight_();
            if (n.left.isRed_() && n.right.isRed_()) n = n.colorFlip_();
            return n;
        };

        LLRBNode.prototype.moveRedLeft_ = function () {
            var n = this.colorFlip_();

            if (n.right.left.isRed_()) {
                n = n.copy(null, null, null, null, n.right.rotateRight_());
                n = n.rotateLeft_();
                n = n.colorFlip_();
            }

            return n;
        };

        LLRBNode.prototype.moveRedRight_ = function () {
            var n = this.colorFlip_();

            if (n.left.left.isRed_()) {
                n = n.rotateRight_();
                n = n.colorFlip_();
            }

            return n;
        };

        LLRBNode.prototype.rotateLeft_ = function () {
            var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);
            return this.right.copy(null, null, this.color, nl, null);
        };

        LLRBNode.prototype.rotateRight_ = function () {
            var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);
            return this.left.copy(null, null, this.color, null, nr);
        };

        LLRBNode.prototype.colorFlip_ = function () {
            var left = this.left.copy(null, null, !this.left.color, null, null);
            var right = this.right.copy(null, null, !this.right.color, null, null);
            return this.copy(null, null, !this.color, left, right);
        };

        LLRBNode.prototype.checkMaxDepth_ = function () {
            var blackDepth = this.check_();
            return Math.pow(2.0, blackDepth) <= this.count() + 1;
        };

        LLRBNode.prototype.check_ = function () {
            var blackDepth;

            if (this.isRed_() && this.left.isRed_()) {
                throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');
            }

            if (this.right.isRed_()) {
                throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');
            }

            blackDepth = this.left.check_();

            if (blackDepth !== this.right.check_()) {
                throw new Error('Black depths differ');
            } else {
                return blackDepth + (this.isRed_() ? 0 : 1);
            }
        };

        LLRBNode.RED = true;
        LLRBNode.BLACK = false;
        return LLRBNode;
    }();

    exports.LLRBNode = LLRBNode;

    var LLRBEmptyNode = function () {
        function LLRBEmptyNode() {}

        LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {
            return this;
        };

        LLRBEmptyNode.prototype.insert = function (key, value, comparator) {
            return new LLRBNode(key, value, null);
        };

        LLRBEmptyNode.prototype.remove = function (key, comparator) {
            return this;
        };

        LLRBEmptyNode.prototype.count = function () {
            return 0;
        };

        LLRBEmptyNode.prototype.isEmpty = function () {
            return true;
        };

        LLRBEmptyNode.prototype.inorderTraversal = function (action) {
            return false;
        };

        LLRBEmptyNode.prototype.reverseTraversal = function (action) {
            return false;
        };

        LLRBEmptyNode.prototype.minKey = function () {
            return null;
        };

        LLRBEmptyNode.prototype.maxKey = function () {
            return null;
        };

        LLRBEmptyNode.prototype.check_ = function () {
            return 0;
        };

        LLRBEmptyNode.prototype.isRed_ = function () {
            return false;
        };

        return LLRBEmptyNode;
    }();

    exports.LLRBEmptyNode = LLRBEmptyNode;

    var SortedMap = function () {
        function SortedMap(comparator_, root_) {
            if (root_ === void 0) {
                root_ = SortedMap.EMPTY_NODE;
            }

            this.comparator_ = comparator_;
            this.root_ = root_;
        }

        SortedMap.prototype.insert = function (key, value) {
            return new SortedMap(this.comparator_, this.root_.insert(key, value, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));
        };

        SortedMap.prototype.remove = function (key) {
            return new SortedMap(this.comparator_, this.root_.remove(key, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));
        };

        SortedMap.prototype.get = function (key) {
            var cmp;
            var node = this.root_;

            while (!node.isEmpty()) {
                cmp = this.comparator_(key, node.key);

                if (cmp === 0) {
                    return node.value;
                } else if (cmp < 0) {
                    node = node.left;
                } else if (cmp > 0) {
                    node = node.right;
                }
            }

            return null;
        };

        SortedMap.prototype.getPredecessorKey = function (key) {
            var cmp,
                node = this.root_,
                rightParent = null;

            while (!node.isEmpty()) {
                cmp = this.comparator_(key, node.key);

                if (cmp === 0) {
                    if (!node.left.isEmpty()) {
                        node = node.left;

                        while (!node.right.isEmpty()) {
                            node = node.right;
                        }

                        return node.key;
                    } else if (rightParent) {
                        return rightParent.key;
                    } else {
                        return null;
                    }
                } else if (cmp < 0) {
                    node = node.left;
                } else if (cmp > 0) {
                    rightParent = node;
                    node = node.right;
                }
            }

            throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');
        };

        SortedMap.prototype.isEmpty = function () {
            return this.root_.isEmpty();
        };

        SortedMap.prototype.count = function () {
            return this.root_.count();
        };

        SortedMap.prototype.minKey = function () {
            return this.root_.minKey();
        };

        SortedMap.prototype.maxKey = function () {
            return this.root_.maxKey();
        };

        SortedMap.prototype.inorderTraversal = function (action) {
            return this.root_.inorderTraversal(action);
        };

        SortedMap.prototype.reverseTraversal = function (action) {
            return this.root_.reverseTraversal(action);
        };

        SortedMap.prototype.getIterator = function (resultGenerator) {
            return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);
        };

        SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {
            return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);
        };

        SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {
            return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);
        };

        SortedMap.prototype.getReverseIterator = function (resultGenerator) {
            return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);
        };

        SortedMap.EMPTY_NODE = new LLRBEmptyNode();
        return SortedMap;
    }();

    exports.SortedMap = SortedMap;
},556,[],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\util\\SortedMap.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "@firebase/util");

    var childSet_1 = _require(_dependencyMap[1], "./childSet");

    var util_2 = _require(_dependencyMap[0], "@firebase/util");

    var Node_1 = _require(_dependencyMap[2], "./Node");

    var PriorityIndex_1 = _require(_dependencyMap[3], "./indexes/PriorityIndex");

    var KeyIndex_1 = _require(_dependencyMap[4], "./indexes/KeyIndex");

    var _defaultIndexMap;

    var fallbackObject = {};

    var IndexMap = function () {
        function IndexMap(indexes_, indexSet_) {
            this.indexes_ = indexes_;
            this.indexSet_ = indexSet_;
        }

        Object.defineProperty(IndexMap, "Default", {
            get: function get() {
                util_1.assert(fallbackObject && PriorityIndex_1.PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');
                _defaultIndexMap = _defaultIndexMap || new IndexMap({
                    '.priority': fallbackObject
                }, {
                    '.priority': PriorityIndex_1.PRIORITY_INDEX
                });
                return _defaultIndexMap;
            },
            enumerable: true,
            configurable: true
        });

        IndexMap.prototype.get = function (indexKey) {
            var sortedMap = util_2.safeGet(this.indexes_, indexKey);
            if (!sortedMap) throw new Error('No index defined for ' + indexKey);

            if (sortedMap === fallbackObject) {
                return null;
            } else {
                return sortedMap;
            }
        };

        IndexMap.prototype.hasIndex = function (indexDefinition) {
            return util_2.contains(this.indexSet_, indexDefinition.toString());
        };

        IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {
            util_1.assert(indexDefinition !== KeyIndex_1.KEY_INDEX, "KeyIndex always exists and isn't meant to be added to the IndexMap.");
            var childList = [];
            var sawIndexedValue = false;
            var iter = existingChildren.getIterator(Node_1.NamedNode.Wrap);
            var next = iter.getNext();

            while (next) {
                sawIndexedValue = sawIndexedValue || indexDefinition.isDefinedOn(next.node);
                childList.push(next);
                next = iter.getNext();
            }

            var newIndex;

            if (sawIndexedValue) {
                newIndex = childSet_1.buildChildSet(childList, indexDefinition.getCompare());
            } else {
                newIndex = fallbackObject;
            }

            var indexName = indexDefinition.toString();
            var newIndexSet = util_2.clone(this.indexSet_);
            newIndexSet[indexName] = indexDefinition;
            var newIndexes = util_2.clone(this.indexes_);
            newIndexes[indexName] = newIndex;
            return new IndexMap(newIndexes, newIndexSet);
        };

        IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {
            var _this = this;

            var newIndexes = util_2.map(this.indexes_, function (indexedChildren, indexName) {
                var index = util_2.safeGet(_this.indexSet_, indexName);
                util_1.assert(index, 'Missing index implementation for ' + indexName);

                if (indexedChildren === fallbackObject) {
                    if (index.isDefinedOn(namedNode.node)) {
                        var childList = [];
                        var iter = existingChildren.getIterator(Node_1.NamedNode.Wrap);
                        var next = iter.getNext();

                        while (next) {
                            if (next.name != namedNode.name) {
                                childList.push(next);
                            }

                            next = iter.getNext();
                        }

                        childList.push(namedNode);
                        return childSet_1.buildChildSet(childList, index.getCompare());
                    } else {
                        return fallbackObject;
                    }
                } else {
                    var existingSnap = existingChildren.get(namedNode.name);
                    var newChildren = indexedChildren;

                    if (existingSnap) {
                        newChildren = newChildren.remove(new Node_1.NamedNode(namedNode.name, existingSnap));
                    }

                    return newChildren.insert(namedNode, namedNode.node);
                }
            });
            return new IndexMap(newIndexes, this.indexSet_);
        };

        IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {
            var newIndexes = util_2.map(this.indexes_, function (indexedChildren) {
                if (indexedChildren === fallbackObject) {
                    return indexedChildren;
                } else {
                    var existingSnap = existingChildren.get(namedNode.name);

                    if (existingSnap) {
                        return indexedChildren.remove(new Node_1.NamedNode(namedNode.name, existingSnap));
                    } else {
                        return indexedChildren;
                    }
                }
            });
            return new IndexMap(newIndexes, this.indexSet_);
        };

        return IndexMap;
    }();

    exports.IndexMap = IndexMap;
},557,[508,558,549,550,547],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\snap\\IndexMap.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var SortedMap_1 = _require(_dependencyMap[0], "../util/SortedMap");

    var SortedMap_2 = _require(_dependencyMap[0], "../util/SortedMap");

    var LOG_2 = Math.log(2);

    var Base12Num = function () {
        function Base12Num(length) {
            var logBase2 = function logBase2(num) {
                return parseInt(Math.log(num) / LOG_2, 10);
            };

            var bitMask = function bitMask(bits) {
                return parseInt(Array(bits + 1).join('1'), 2);
            };

            this.count = logBase2(length + 1);
            this.current_ = this.count - 1;
            var mask = bitMask(this.count);
            this.bits_ = length + 1 & mask;
        }

        Base12Num.prototype.nextBitIsOne = function () {
            var result = !(this.bits_ & 0x1 << this.current_);
            this.current_--;
            return result;
        };

        return Base12Num;
    }();

    exports.buildChildSet = function (childList, cmp, keyFn, mapSortFn) {
        childList.sort(cmp);

        var buildBalancedTree = function buildBalancedTree(low, high) {
            var length = high - low;
            var namedNode;
            var key;

            if (length == 0) {
                return null;
            } else if (length == 1) {
                namedNode = childList[low];
                key = keyFn ? keyFn(namedNode) : namedNode;
                return new SortedMap_1.LLRBNode(key, namedNode.node, SortedMap_1.LLRBNode.BLACK, null, null);
            } else {
                var middle = parseInt(length / 2, 10) + low;
                var left = buildBalancedTree(low, middle);
                var right = buildBalancedTree(middle + 1, high);
                namedNode = childList[middle];
                key = keyFn ? keyFn(namedNode) : namedNode;
                return new SortedMap_1.LLRBNode(key, namedNode.node, SortedMap_1.LLRBNode.BLACK, left, right);
            }
        };

        var buildFrom12Array = function buildFrom12Array(base12) {
            var node = null;
            var root = null;
            var index = childList.length;

            var buildPennant = function buildPennant(chunkSize, color) {
                var low = index - chunkSize;
                var high = index;
                index -= chunkSize;
                var childTree = buildBalancedTree(low + 1, high);
                var namedNode = childList[low];
                var key = keyFn ? keyFn(namedNode) : namedNode;
                attachPennant(new SortedMap_1.LLRBNode(key, namedNode.node, color, null, childTree));
            };

            var attachPennant = function attachPennant(pennant) {
                if (node) {
                    node.left = pennant;
                    node = pennant;
                } else {
                    root = pennant;
                    node = pennant;
                }
            };

            for (var i = 0; i < base12.count; ++i) {
                var isOne = base12.nextBitIsOne();
                var chunkSize = Math.pow(2, base12.count - (i + 1));

                if (isOne) {
                    buildPennant(chunkSize, SortedMap_1.LLRBNode.BLACK);
                } else {
                    buildPennant(chunkSize, SortedMap_1.LLRBNode.BLACK);
                    buildPennant(chunkSize, SortedMap_1.LLRBNode.RED);
                }
            }

            return root;
        };

        var base12 = new Base12Num(childList.length);
        var root = buildFrom12Array(base12);
        return new SortedMap_2.SortedMap(mapSortFn || cmp, root);
    };
},558,[556],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\snap\\childSet.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "../util/util");

    function NAME_ONLY_COMPARATOR(left, right) {
        return util_1.nameCompare(left.name, right.name);
    }

    exports.NAME_ONLY_COMPARATOR = NAME_ONLY_COMPARATOR;

    function NAME_COMPARATOR(left, right) {
        return util_1.nameCompare(left, right);
    }

    exports.NAME_COMPARATOR = NAME_COMPARATOR;
},559,[531],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\snap\\comparators.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var tslib_1 = _require(_dependencyMap[0], "tslib");

    var util_1 = _require(_dependencyMap[1], "@firebase/util");

    var util_2 = _require(_dependencyMap[2], "../../util/util");

    var Index_1 = _require(_dependencyMap[3], "./Index");

    var ChildrenNode_1 = _require(_dependencyMap[4], "../ChildrenNode");

    var Node_1 = _require(_dependencyMap[5], "../Node");

    var nodeFromJSON_1 = _require(_dependencyMap[6], "../nodeFromJSON");

    var PathIndex = function (_super) {
        tslib_1.__extends(PathIndex, _super);

        function PathIndex(indexPath_) {
            var _this = _super.call(this) || this;

            _this.indexPath_ = indexPath_;
            util_1.assert(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', "Can't create PathIndex with empty path or .priority key");
            return _this;
        }

        PathIndex.prototype.extractChild = function (snap) {
            return snap.getChild(this.indexPath_);
        };

        PathIndex.prototype.isDefinedOn = function (node) {
            return !node.getChild(this.indexPath_).isEmpty();
        };

        PathIndex.prototype.compare = function (a, b) {
            var aChild = this.extractChild(a.node);
            var bChild = this.extractChild(b.node);
            var indexCmp = aChild.compareTo(bChild);

            if (indexCmp === 0) {
                return util_2.nameCompare(a.name, b.name);
            } else {
                return indexCmp;
            }
        };

        PathIndex.prototype.makePost = function (indexValue, name) {
            var valueNode = nodeFromJSON_1.nodeFromJSON(indexValue);
            var node = ChildrenNode_1.ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);
            return new Node_1.NamedNode(name, node);
        };

        PathIndex.prototype.maxPost = function () {
            var node = ChildrenNode_1.ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, ChildrenNode_1.MAX_NODE);
            return new Node_1.NamedNode(util_2.MAX_NAME, node);
        };

        PathIndex.prototype.toString = function () {
            return this.indexPath_.slice().join('/');
        };

        return PathIndex;
    }(Index_1.Index);

    exports.PathIndex = PathIndex;
},560,[521,508,531,548,555,549,554],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\snap\\indexes\\PathIndex.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var DataSnapshot_1 = _require(_dependencyMap[0], "../../api/DataSnapshot");

    var Event_1 = _require(_dependencyMap[1], "./Event");

    var util_1 = _require(_dependencyMap[2], "@firebase/util");

    var util_2 = _require(_dependencyMap[2], "@firebase/util");

    var ValueEventRegistration = function () {
        function ValueEventRegistration(callback_, cancelCallback_, context_) {
            this.callback_ = callback_;
            this.cancelCallback_ = cancelCallback_;
            this.context_ = context_;
        }

        ValueEventRegistration.prototype.respondsTo = function (eventType) {
            return eventType === 'value';
        };

        ValueEventRegistration.prototype.createEvent = function (change, query) {
            var index = query.getQueryParams().getIndex();
            return new Event_1.DataEvent('value', this, new DataSnapshot_1.DataSnapshot(change.snapshotNode, query.getRef(), index));
        };

        ValueEventRegistration.prototype.getEventRunner = function (eventData) {
            var ctx = this.context_;

            if (eventData.getEventType() === 'cancel') {
                util_2.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');
                var cancelCB_1 = this.cancelCallback_;
                return function () {
                    cancelCB_1.call(ctx, eventData.error);
                };
            } else {
                var cb_1 = this.callback_;
                return function () {
                    cb_1.call(ctx, eventData.snapshot);
                };
            }
        };

        ValueEventRegistration.prototype.createCancelEvent = function (error, path) {
            if (this.cancelCallback_) {
                return new Event_1.CancelEvent(this, error, path);
            } else {
                return null;
            }
        };

        ValueEventRegistration.prototype.matches = function (other) {
            if (!(other instanceof ValueEventRegistration)) {
                return false;
            } else if (!other.callback_ || !this.callback_) {
                return true;
            } else {
                return other.callback_ === this.callback_ && other.context_ === this.context_;
            }
        };

        ValueEventRegistration.prototype.hasAnyCallback = function () {
            return this.callback_ !== null;
        };

        return ValueEventRegistration;
    }();

    exports.ValueEventRegistration = ValueEventRegistration;

    var ChildEventRegistration = function () {
        function ChildEventRegistration(callbacks_, cancelCallback_, context_) {
            this.callbacks_ = callbacks_;
            this.cancelCallback_ = cancelCallback_;
            this.context_ = context_;
        }

        ChildEventRegistration.prototype.respondsTo = function (eventType) {
            var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;
            eventToCheck = eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;
            return util_1.contains(this.callbacks_, eventToCheck);
        };

        ChildEventRegistration.prototype.createCancelEvent = function (error, path) {
            if (this.cancelCallback_) {
                return new Event_1.CancelEvent(this, error, path);
            } else {
                return null;
            }
        };

        ChildEventRegistration.prototype.createEvent = function (change, query) {
            util_2.assert(change.childName != null, 'Child events should have a childName.');
            var ref = query.getRef().child(change.childName);
            var index = query.getQueryParams().getIndex();
            return new Event_1.DataEvent(change.type, this, new DataSnapshot_1.DataSnapshot(change.snapshotNode, ref, index), change.prevName);
        };

        ChildEventRegistration.prototype.getEventRunner = function (eventData) {
            var ctx = this.context_;

            if (eventData.getEventType() === 'cancel') {
                util_2.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');
                var cancelCB_2 = this.cancelCallback_;
                return function () {
                    cancelCB_2.call(ctx, eventData.error);
                };
            } else {
                var cb_2 = this.callbacks_[eventData.eventType];
                return function () {
                    cb_2.call(ctx, eventData.snapshot, eventData.prevName);
                };
            }
        };

        ChildEventRegistration.prototype.matches = function (other) {
            if (other instanceof ChildEventRegistration) {
                if (!this.callbacks_ || !other.callbacks_) {
                    return true;
                } else if (this.context_ === other.context_) {
                    var otherCount = util_1.getCount(other.callbacks_);
                    var thisCount = util_1.getCount(this.callbacks_);

                    if (otherCount === thisCount) {
                        if (otherCount === 1) {
                            var otherKey = util_1.getAnyKey(other.callbacks_);
                            var thisKey = util_1.getAnyKey(this.callbacks_);
                            return thisKey === otherKey && (!other.callbacks_[otherKey] || !this.callbacks_[thisKey] || other.callbacks_[otherKey] === this.callbacks_[thisKey]);
                        } else {
                            return util_1.every(this.callbacks_, function (eventType, cb) {
                                return other.callbacks_[eventType] === cb;
                            });
                        }
                    }
                }
            }

            return false;
        };

        ChildEventRegistration.prototype.hasAnyCallback = function () {
            return this.callbacks_ !== null;
        };

        return ChildEventRegistration;
    }();

    exports.ChildEventRegistration = ChildEventRegistration;
},561,[562,563,508],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\view\\EventRegistration.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "@firebase/util");

    var validation_1 = _require(_dependencyMap[1], "../core/util/validation");

    var Path_1 = _require(_dependencyMap[2], "../core/util/Path");

    var PriorityIndex_1 = _require(_dependencyMap[3], "../core/snap/indexes/PriorityIndex");

    var DataSnapshot = function () {
        function DataSnapshot(node_, ref_, index_) {
            this.node_ = node_;
            this.ref_ = ref_;
            this.index_ = index_;
        }

        DataSnapshot.prototype.val = function () {
            util_1.validateArgCount('DataSnapshot.val', 0, 0, arguments.length);
            return this.node_.val();
        };

        DataSnapshot.prototype.exportVal = function () {
            util_1.validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);
            return this.node_.val(true);
        };

        DataSnapshot.prototype.toJSON = function () {
            util_1.validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);
            return this.exportVal();
        };

        DataSnapshot.prototype.exists = function () {
            util_1.validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);
            return !this.node_.isEmpty();
        };

        DataSnapshot.prototype.child = function (childPathString) {
            util_1.validateArgCount('DataSnapshot.child', 0, 1, arguments.length);
            childPathString = String(childPathString);
            validation_1.validatePathString('DataSnapshot.child', 1, childPathString, false);
            var childPath = new Path_1.Path(childPathString);
            var childRef = this.ref_.child(childPath);
            return new DataSnapshot(this.node_.getChild(childPath), childRef, PriorityIndex_1.PRIORITY_INDEX);
        };

        DataSnapshot.prototype.hasChild = function (childPathString) {
            util_1.validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);
            validation_1.validatePathString('DataSnapshot.hasChild', 1, childPathString, false);
            var childPath = new Path_1.Path(childPathString);
            return !this.node_.getChild(childPath).isEmpty();
        };

        DataSnapshot.prototype.getPriority = function () {
            util_1.validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);
            return this.node_.getPriority().val();
        };

        DataSnapshot.prototype.forEach = function (action) {
            var _this = this;

            util_1.validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);
            util_1.validateCallback('DataSnapshot.forEach', 1, action, false);
            if (this.node_.isLeafNode()) return false;
            var childrenNode = this.node_;
            return !!childrenNode.forEachChild(this.index_, function (key, node) {
                return action(new DataSnapshot(node, _this.ref_.child(key), PriorityIndex_1.PRIORITY_INDEX));
            });
        };

        DataSnapshot.prototype.hasChildren = function () {
            util_1.validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);
            if (this.node_.isLeafNode()) return false;else return !this.node_.isEmpty();
        };

        Object.defineProperty(DataSnapshot.prototype, "key", {
            get: function get() {
                return this.ref_.getKey();
            },
            enumerable: true,
            configurable: true
        });

        DataSnapshot.prototype.numChildren = function () {
            util_1.validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);
            return this.node_.numChildren();
        };

        DataSnapshot.prototype.getRef = function () {
            util_1.validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);
            return this.ref_;
        };

        Object.defineProperty(DataSnapshot.prototype, "ref", {
            get: function get() {
                return this.getRef();
            },
            enumerable: true,
            configurable: true
        });
        return DataSnapshot;
    }();

    exports.DataSnapshot = DataSnapshot;
},562,[508,543,538,550],"node_modules\\@firebase\\database\\dist\\cjs\\src\\api\\DataSnapshot.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "@firebase/util");

    var DataEvent = function () {
        function DataEvent(eventType, eventRegistration, snapshot, prevName) {
            this.eventType = eventType;
            this.eventRegistration = eventRegistration;
            this.snapshot = snapshot;
            this.prevName = prevName;
        }

        DataEvent.prototype.getPath = function () {
            var ref = this.snapshot.getRef();

            if (this.eventType === 'value') {
                return ref.path;
            } else {
                return ref.getParent().path;
            }
        };

        DataEvent.prototype.getEventType = function () {
            return this.eventType;
        };

        DataEvent.prototype.getEventRunner = function () {
            return this.eventRegistration.getEventRunner(this);
        };

        DataEvent.prototype.toString = function () {
            return this.getPath().toString() + ':' + this.eventType + ':' + util_1.stringify(this.snapshot.exportVal());
        };

        return DataEvent;
    }();

    exports.DataEvent = DataEvent;

    var CancelEvent = function () {
        function CancelEvent(eventRegistration, error, path) {
            this.eventRegistration = eventRegistration;
            this.error = error;
            this.path = path;
        }

        CancelEvent.prototype.getPath = function () {
            return this.path;
        };

        CancelEvent.prototype.getEventType = function () {
            return 'cancel';
        };

        CancelEvent.prototype.getEventRunner = function () {
            return this.eventRegistration.getEventRunner(this);
        };

        CancelEvent.prototype.toString = function () {
            return this.path.toString() + ':cancel';
        };

        return CancelEvent;
    }();

    exports.CancelEvent = CancelEvent;
},563,[508],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\view\\Event.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var ServerValues_1 = _require(_dependencyMap[0], "./util/ServerValues");

    var nodeFromJSON_1 = _require(_dependencyMap[1], "./snap/nodeFromJSON");

    var Path_1 = _require(_dependencyMap[2], "./util/Path");

    var SparseSnapshotTree_1 = _require(_dependencyMap[3], "./SparseSnapshotTree");

    var SyncTree_1 = _require(_dependencyMap[4], "./SyncTree");

    var SnapshotHolder_1 = _require(_dependencyMap[5], "./SnapshotHolder");

    var util_1 = _require(_dependencyMap[6], "@firebase/util");

    var util_2 = _require(_dependencyMap[7], "./util/util");

    var util_3 = _require(_dependencyMap[6], "@firebase/util");

    var AuthTokenProvider_1 = _require(_dependencyMap[8], "./AuthTokenProvider");

    var StatsManager_1 = _require(_dependencyMap[9], "./stats/StatsManager");

    var StatsReporter_1 = _require(_dependencyMap[10], "./stats/StatsReporter");

    var StatsListener_1 = _require(_dependencyMap[11], "./stats/StatsListener");

    var EventQueue_1 = _require(_dependencyMap[12], "./view/EventQueue");

    var PersistentConnection_1 = _require(_dependencyMap[13], "./PersistentConnection");

    var ReadonlyRestClient_1 = _require(_dependencyMap[14], "./ReadonlyRestClient");

    var Database_1 = _require(_dependencyMap[15], "../api/Database");

    var INTERRUPT_REASON = 'repo_interrupt';

    var Repo = function () {
        function Repo(repoInfo_, forceRestClient, app) {
            var _this = this;

            this.repoInfo_ = repoInfo_;
            this.app = app;
            this.dataUpdateCount = 0;
            this.statsListener_ = null;
            this.eventQueue_ = new EventQueue_1.EventQueue();
            this.nextWriteId_ = 1;
            this.interceptServerDataCallback_ = null;
            this.onDisconnect_ = new SparseSnapshotTree_1.SparseSnapshotTree();
            this.persistentConnection_ = null;
            var authTokenProvider = new AuthTokenProvider_1.AuthTokenProvider(app);
            this.stats_ = StatsManager_1.StatsManager.getCollection(repoInfo_);

            if (forceRestClient || util_2.beingCrawled()) {
                this.server_ = new ReadonlyRestClient_1.ReadonlyRestClient(this.repoInfo_, this.onDataUpdate_.bind(this), authTokenProvider);
                setTimeout(this.onConnectStatus_.bind(this, true), 0);
            } else {
                var authOverride = app.options['databaseAuthVariableOverride'];

                if (typeof authOverride !== 'undefined' && authOverride !== null) {
                    if (typeof authOverride !== 'object') {
                        throw new Error('Only objects are supported for option databaseAuthVariableOverride');
                    }

                    try {
                        util_1.stringify(authOverride);
                    } catch (e) {
                        throw new Error('Invalid authOverride provided: ' + e);
                    }
                }

                this.persistentConnection_ = new PersistentConnection_1.PersistentConnection(this.repoInfo_, this.onDataUpdate_.bind(this), this.onConnectStatus_.bind(this), this.onServerInfoUpdate_.bind(this), authTokenProvider, authOverride);
                this.server_ = this.persistentConnection_;
            }

            authTokenProvider.addTokenChangeListener(function (token) {
                _this.server_.refreshAuthToken(token);
            });
            this.statsReporter_ = StatsManager_1.StatsManager.getOrCreateReporter(repoInfo_, function () {
                return new StatsReporter_1.StatsReporter(_this.stats_, _this.server_);
            });
            this.transactions_init_();
            this.infoData_ = new SnapshotHolder_1.SnapshotHolder();
            this.infoSyncTree_ = new SyncTree_1.SyncTree({
                startListening: function startListening(query, tag, currentHashFn, onComplete) {
                    var infoEvents = [];

                    var node = _this.infoData_.getNode(query.path);

                    if (!node.isEmpty()) {
                        infoEvents = _this.infoSyncTree_.applyServerOverwrite(query.path, node);
                        setTimeout(function () {
                            onComplete('ok');
                        }, 0);
                    }

                    return infoEvents;
                },
                stopListening: function stopListening() {}
            });
            this.updateInfo_('connected', false);
            this.serverSyncTree_ = new SyncTree_1.SyncTree({
                startListening: function startListening(query, tag, currentHashFn, onComplete) {
                    _this.server_.listen(query, currentHashFn, tag, function (status, data) {
                        var events = onComplete(status, data);

                        _this.eventQueue_.raiseEventsForChangedPath(query.path, events);
                    });

                    return [];
                },
                stopListening: function stopListening(query, tag) {
                    _this.server_.unlisten(query, tag);
                }
            });
        }

        Repo.prototype.toString = function () {
            return (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host;
        };

        Repo.prototype.name = function () {
            return this.repoInfo_.namespace;
        };

        Repo.prototype.serverTime = function () {
            var offsetNode = this.infoData_.getNode(new Path_1.Path('.info/serverTimeOffset'));
            var offset = offsetNode.val() || 0;
            return new Date().getTime() + offset;
        };

        Repo.prototype.generateServerValues = function () {
            return ServerValues_1.generateWithValues({
                timestamp: this.serverTime()
            });
        };

        Repo.prototype.onDataUpdate_ = function (pathString, data, isMerge, tag) {
            this.dataUpdateCount++;
            var path = new Path_1.Path(pathString);
            data = this.interceptServerDataCallback_ ? this.interceptServerDataCallback_(pathString, data) : data;
            var events = [];

            if (tag) {
                if (isMerge) {
                    var taggedChildren = util_3.map(data, function (raw) {
                        return nodeFromJSON_1.nodeFromJSON(raw);
                    });
                    events = this.serverSyncTree_.applyTaggedQueryMerge(path, taggedChildren, tag);
                } else {
                    var taggedSnap = nodeFromJSON_1.nodeFromJSON(data);
                    events = this.serverSyncTree_.applyTaggedQueryOverwrite(path, taggedSnap, tag);
                }
            } else if (isMerge) {
                var changedChildren = util_3.map(data, function (raw) {
                    return nodeFromJSON_1.nodeFromJSON(raw);
                });
                events = this.serverSyncTree_.applyServerMerge(path, changedChildren);
            } else {
                var snap = nodeFromJSON_1.nodeFromJSON(data);
                events = this.serverSyncTree_.applyServerOverwrite(path, snap);
            }

            var affectedPath = path;

            if (events.length > 0) {
                affectedPath = this.rerunTransactions_(path);
            }

            this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);
        };

        Repo.prototype.interceptServerData_ = function (callback) {
            this.interceptServerDataCallback_ = callback;
        };

        Repo.prototype.onConnectStatus_ = function (connectStatus) {
            this.updateInfo_('connected', connectStatus);

            if (connectStatus === false) {
                this.runOnDisconnectEvents_();
            }
        };

        Repo.prototype.onServerInfoUpdate_ = function (updates) {
            var _this = this;

            util_2.each(updates, function (value, key) {
                _this.updateInfo_(key, value);
            });
        };

        Repo.prototype.updateInfo_ = function (pathString, value) {
            var path = new Path_1.Path('/.info/' + pathString);
            var newNode = nodeFromJSON_1.nodeFromJSON(value);
            this.infoData_.updateSnapshot(path, newNode);
            var events = this.infoSyncTree_.applyServerOverwrite(path, newNode);
            this.eventQueue_.raiseEventsForChangedPath(path, events);
        };

        Repo.prototype.getNextWriteId_ = function () {
            return this.nextWriteId_++;
        };

        Repo.prototype.setWithPriority = function (path, newVal, newPriority, onComplete) {
            var _this = this;

            this.log_('set', {
                path: path.toString(),
                value: newVal,
                priority: newPriority
            });
            var serverValues = this.generateServerValues();
            var newNodeUnresolved = nodeFromJSON_1.nodeFromJSON(newVal, newPriority);
            var newNode = ServerValues_1.resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);
            var writeId = this.getNextWriteId_();
            var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, writeId, true);
            this.eventQueue_.queueEvents(events);
            this.server_.put(path.toString(), newNodeUnresolved.val(true), function (status, errorReason) {
                var success = status === 'ok';

                if (!success) {
                    util_2.warn('set at ' + path + ' failed: ' + status);
                }

                var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId, !success);

                _this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);

                _this.callOnCompleteCallback(onComplete, status, errorReason);
            });
            var affectedPath = this.abortTransactions_(path);
            this.rerunTransactions_(affectedPath);
            this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);
        };

        Repo.prototype.update = function (path, childrenToMerge, onComplete) {
            var _this = this;

            this.log_('update', {
                path: path.toString(),
                value: childrenToMerge
            });
            var empty = true;
            var serverValues = this.generateServerValues();
            var changedChildren = {};
            util_3.forEach(childrenToMerge, function (changedKey, changedValue) {
                empty = false;
                var newNodeUnresolved = nodeFromJSON_1.nodeFromJSON(changedValue);
                changedChildren[changedKey] = ServerValues_1.resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);
            });

            if (!empty) {
                var writeId_1 = this.getNextWriteId_();
                var events = this.serverSyncTree_.applyUserMerge(path, changedChildren, writeId_1);
                this.eventQueue_.queueEvents(events);
                this.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {
                    var success = status === 'ok';

                    if (!success) {
                        util_2.warn('update at ' + path + ' failed: ' + status);
                    }

                    var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId_1, !success);

                    var affectedPath = clearEvents.length > 0 ? _this.rerunTransactions_(path) : path;

                    _this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);

                    _this.callOnCompleteCallback(onComplete, status, errorReason);
                });
                util_3.forEach(childrenToMerge, function (changedPath) {
                    var affectedPath = _this.abortTransactions_(path.child(changedPath));

                    _this.rerunTransactions_(affectedPath);
                });
                this.eventQueue_.raiseEventsForChangedPath(path, []);
            } else {
                util_2.log("update() called with empty data.  Don't do anything.");
                this.callOnCompleteCallback(onComplete, 'ok');
            }
        };

        Repo.prototype.runOnDisconnectEvents_ = function () {
            var _this = this;

            this.log_('onDisconnectEvents');
            var serverValues = this.generateServerValues();
            var resolvedOnDisconnectTree = ServerValues_1.resolveDeferredValueTree(this.onDisconnect_, serverValues);
            var events = [];
            resolvedOnDisconnectTree.forEachTree(Path_1.Path.Empty, function (path, snap) {
                events = events.concat(_this.serverSyncTree_.applyServerOverwrite(path, snap));

                var affectedPath = _this.abortTransactions_(path);

                _this.rerunTransactions_(affectedPath);
            });
            this.onDisconnect_ = new SparseSnapshotTree_1.SparseSnapshotTree();
            this.eventQueue_.raiseEventsForChangedPath(Path_1.Path.Empty, events);
        };

        Repo.prototype.onDisconnectCancel = function (path, onComplete) {
            var _this = this;

            this.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {
                if (status === 'ok') {
                    _this.onDisconnect_.forget(path);
                }

                _this.callOnCompleteCallback(onComplete, status, errorReason);
            });
        };

        Repo.prototype.onDisconnectSet = function (path, value, onComplete) {
            var _this = this;

            var newNode = nodeFromJSON_1.nodeFromJSON(value);
            this.server_.onDisconnectPut(path.toString(), newNode.val(true), function (status, errorReason) {
                if (status === 'ok') {
                    _this.onDisconnect_.remember(path, newNode);
                }

                _this.callOnCompleteCallback(onComplete, status, errorReason);
            });
        };

        Repo.prototype.onDisconnectSetWithPriority = function (path, value, priority, onComplete) {
            var _this = this;

            var newNode = nodeFromJSON_1.nodeFromJSON(value, priority);
            this.server_.onDisconnectPut(path.toString(), newNode.val(true), function (status, errorReason) {
                if (status === 'ok') {
                    _this.onDisconnect_.remember(path, newNode);
                }

                _this.callOnCompleteCallback(onComplete, status, errorReason);
            });
        };

        Repo.prototype.onDisconnectUpdate = function (path, childrenToMerge, onComplete) {
            var _this = this;

            if (util_3.isEmpty(childrenToMerge)) {
                util_2.log("onDisconnect().update() called with empty data.  Don't do anything.");
                this.callOnCompleteCallback(onComplete, 'ok');
                return;
            }

            this.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {
                if (status === 'ok') {
                    util_3.forEach(childrenToMerge, function (childName, childNode) {
                        var newChildNode = nodeFromJSON_1.nodeFromJSON(childNode);

                        _this.onDisconnect_.remember(path.child(childName), newChildNode);
                    });
                }

                _this.callOnCompleteCallback(onComplete, status, errorReason);
            });
        };

        Repo.prototype.addEventCallbackForQuery = function (query, eventRegistration) {
            var events;

            if (query.path.getFront() === '.info') {
                events = this.infoSyncTree_.addEventRegistration(query, eventRegistration);
            } else {
                events = this.serverSyncTree_.addEventRegistration(query, eventRegistration);
            }

            this.eventQueue_.raiseEventsAtPath(query.path, events);
        };

        Repo.prototype.removeEventCallbackForQuery = function (query, eventRegistration) {
            var events;

            if (query.path.getFront() === '.info') {
                events = this.infoSyncTree_.removeEventRegistration(query, eventRegistration);
            } else {
                events = this.serverSyncTree_.removeEventRegistration(query, eventRegistration);
            }

            this.eventQueue_.raiseEventsAtPath(query.path, events);
        };

        Repo.prototype.interrupt = function () {
            if (this.persistentConnection_) {
                this.persistentConnection_.interrupt(INTERRUPT_REASON);
            }
        };

        Repo.prototype.resume = function () {
            if (this.persistentConnection_) {
                this.persistentConnection_.resume(INTERRUPT_REASON);
            }
        };

        Repo.prototype.stats = function (showDelta) {
            if (showDelta === void 0) {
                showDelta = false;
            }

            if (typeof console === 'undefined') return;
            var stats;

            if (showDelta) {
                if (!this.statsListener_) this.statsListener_ = new StatsListener_1.StatsListener(this.stats_);
                stats = this.statsListener_.get();
            } else {
                stats = this.stats_.get();
            }

            var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {
                return Math.max(currentValue.length, previousValue);
            }, 0);
            util_3.forEach(stats, function (stat, value) {
                for (var i = stat.length; i < longestName + 2; i++) {
                    stat += ' ';
                }

                console.log(stat + value);
            });
        };

        Repo.prototype.statsIncrementCounter = function (metric) {
            this.stats_.incrementCounter(metric);
            this.statsReporter_.includeStat(metric);
        };

        Repo.prototype.log_ = function () {
            var var_args = [];

            for (var _i = 0; _i < arguments.length; _i++) {
                var_args[_i] = arguments[_i];
            }

            var prefix = '';

            if (this.persistentConnection_) {
                prefix = this.persistentConnection_.id + ':';
            }

            util_2.log.apply(void 0, [prefix].concat(var_args));
        };

        Repo.prototype.callOnCompleteCallback = function (callback, status, errorReason) {
            if (callback) {
                util_2.exceptionGuard(function () {
                    if (status == 'ok') {
                        callback(null);
                    } else {
                        var code = (status || 'error').toUpperCase();
                        var message = code;
                        if (errorReason) message += ': ' + errorReason;
                        var error = new Error(message);
                        error.code = code;
                        callback(error);
                    }
                });
            }
        };

        Object.defineProperty(Repo.prototype, "database", {
            get: function get() {
                return this.__database || (this.__database = new Database_1.Database(this));
            },
            enumerable: true,
            configurable: true
        });
        return Repo;
    }();

    exports.Repo = Repo;
},564,[565,554,538,566,568,587,508,531,588,589,591,592,593,594,604,530],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\Repo.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "@firebase/util");

    var Path_1 = _require(_dependencyMap[1], "./Path");

    var SparseSnapshotTree_1 = _require(_dependencyMap[2], "../SparseSnapshotTree");

    var LeafNode_1 = _require(_dependencyMap[3], "../snap/LeafNode");

    var nodeFromJSON_1 = _require(_dependencyMap[4], "../snap/nodeFromJSON");

    var PriorityIndex_1 = _require(_dependencyMap[5], "../snap/indexes/PriorityIndex");

    exports.generateWithValues = function (values) {
        values = values || {};
        values['timestamp'] = values['timestamp'] || new Date().getTime();
        return values;
    };

    exports.resolveDeferredValue = function (value, serverValues) {
        if (!value || typeof value !== 'object') {
            return value;
        } else {
            util_1.assert('.sv' in value, 'Unexpected leaf node or priority contents');
            return serverValues[value['.sv']];
        }
    };

    exports.resolveDeferredValueTree = function (tree, serverValues) {
        var resolvedTree = new SparseSnapshotTree_1.SparseSnapshotTree();
        tree.forEachTree(new Path_1.Path(''), function (path, node) {
            resolvedTree.remember(path, exports.resolveDeferredValueSnapshot(node, serverValues));
        });
        return resolvedTree;
    };

    exports.resolveDeferredValueSnapshot = function (node, serverValues) {
        var rawPri = node.getPriority().val();
        var priority = exports.resolveDeferredValue(rawPri, serverValues);
        var newNode;

        if (node.isLeafNode()) {
            var leafNode = node;
            var value = exports.resolveDeferredValue(leafNode.getValue(), serverValues);

            if (value !== leafNode.getValue() || priority !== leafNode.getPriority().val()) {
                return new LeafNode_1.LeafNode(value, nodeFromJSON_1.nodeFromJSON(priority));
            } else {
                return node;
            }
        } else {
            var childrenNode = node;
            newNode = childrenNode;

            if (priority !== childrenNode.getPriority().val()) {
                newNode = newNode.updatePriority(new LeafNode_1.LeafNode(priority));
            }

            childrenNode.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (childName, childNode) {
                var newChildNode = exports.resolveDeferredValueSnapshot(childNode, serverValues);

                if (newChildNode !== childNode) {
                    newNode = newNode.updateImmediateChild(childName, newChildNode);
                }
            });
            return newNode;
        }
    };
},565,[508,538,566,551,554,550],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\util\\ServerValues.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var Path_1 = _require(_dependencyMap[0], "./util/Path");

    var PriorityIndex_1 = _require(_dependencyMap[1], "./snap/indexes/PriorityIndex");

    var CountedSet_1 = _require(_dependencyMap[2], "./util/CountedSet");

    var SparseSnapshotTree = function () {
        function SparseSnapshotTree() {
            this.value_ = null;
            this.children_ = null;
        }

        SparseSnapshotTree.prototype.find = function (path) {
            if (this.value_ != null) {
                return this.value_.getChild(path);
            } else if (!path.isEmpty() && this.children_ != null) {
                var childKey = path.getFront();
                path = path.popFront();

                if (this.children_.contains(childKey)) {
                    var childTree = this.children_.get(childKey);
                    return childTree.find(path);
                } else {
                    return null;
                }
            } else {
                return null;
            }
        };

        SparseSnapshotTree.prototype.remember = function (path, data) {
            if (path.isEmpty()) {
                this.value_ = data;
                this.children_ = null;
            } else if (this.value_ !== null) {
                this.value_ = this.value_.updateChild(path, data);
            } else {
                if (this.children_ == null) {
                    this.children_ = new CountedSet_1.CountedSet();
                }

                var childKey = path.getFront();

                if (!this.children_.contains(childKey)) {
                    this.children_.add(childKey, new SparseSnapshotTree());
                }

                var child = this.children_.get(childKey);
                path = path.popFront();
                child.remember(path, data);
            }
        };

        SparseSnapshotTree.prototype.forget = function (path) {
            if (path.isEmpty()) {
                this.value_ = null;
                this.children_ = null;
                return true;
            } else {
                if (this.value_ !== null) {
                    if (this.value_.isLeafNode()) {
                        return false;
                    } else {
                        var value = this.value_;
                        this.value_ = null;
                        var self_1 = this;
                        value.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, tree) {
                            self_1.remember(new Path_1.Path(key), tree);
                        });
                        return this.forget(path);
                    }
                } else if (this.children_ !== null) {
                    var childKey = path.getFront();
                    path = path.popFront();

                    if (this.children_.contains(childKey)) {
                        var safeToRemove = this.children_.get(childKey).forget(path);

                        if (safeToRemove) {
                            this.children_.remove(childKey);
                        }
                    }

                    if (this.children_.isEmpty()) {
                        this.children_ = null;
                        return true;
                    } else {
                        return false;
                    }
                } else {
                    return true;
                }
            }
        };

        SparseSnapshotTree.prototype.forEachTree = function (prefixPath, func) {
            if (this.value_ !== null) {
                func(prefixPath, this.value_);
            } else {
                this.forEachChild(function (key, tree) {
                    var path = new Path_1.Path(prefixPath.toString() + '/' + key);
                    tree.forEachTree(path, func);
                });
            }
        };

        SparseSnapshotTree.prototype.forEachChild = function (func) {
            if (this.children_ !== null) {
                this.children_.each(function (key, tree) {
                    func(key, tree);
                });
            }
        };

        return SparseSnapshotTree;
    }();

    exports.SparseSnapshotTree = SparseSnapshotTree;
},566,[538,550,567],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\SparseSnapshotTree.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "@firebase/util");

    var CountedSet = function () {
        function CountedSet() {
            this.set = {};
        }

        CountedSet.prototype.add = function (item, val) {
            this.set[item] = val !== null ? val : true;
        };

        CountedSet.prototype.contains = function (key) {
            return util_1.contains(this.set, key);
        };

        CountedSet.prototype.get = function (item) {
            return this.contains(item) ? this.set[item] : undefined;
        };

        CountedSet.prototype.remove = function (item) {
            delete this.set[item];
        };

        CountedSet.prototype.clear = function () {
            this.set = {};
        };

        CountedSet.prototype.isEmpty = function () {
            return util_1.isEmpty(this.set);
        };

        CountedSet.prototype.count = function () {
            return util_1.getCount(this.set);
        };

        CountedSet.prototype.each = function (fn) {
            util_1.forEach(this.set, function (k, v) {
                return fn(k, v);
            });
        };

        CountedSet.prototype.keys = function () {
            var keys = [];
            util_1.forEach(this.set, function (k) {
                keys.push(k);
            });
            return keys;
        };

        return CountedSet;
    }();

    exports.CountedSet = CountedSet;
},567,[508],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\util\\CountedSet.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "@firebase/util");

    var util_2 = _require(_dependencyMap[1], "./util/util");

    var AckUserWrite_1 = _require(_dependencyMap[2], "./operation/AckUserWrite");

    var ChildrenNode_1 = _require(_dependencyMap[3], "./snap/ChildrenNode");

    var util_3 = _require(_dependencyMap[0], "@firebase/util");

    var ImmutableTree_1 = _require(_dependencyMap[4], "./util/ImmutableTree");

    var ListenComplete_1 = _require(_dependencyMap[5], "./operation/ListenComplete");

    var Merge_1 = _require(_dependencyMap[6], "./operation/Merge");

    var Operation_1 = _require(_dependencyMap[7], "./operation/Operation");

    var Overwrite_1 = _require(_dependencyMap[8], "./operation/Overwrite");

    var Path_1 = _require(_dependencyMap[9], "./util/Path");

    var SyncPoint_1 = _require(_dependencyMap[10], "./SyncPoint");

    var WriteTree_1 = _require(_dependencyMap[11], "./WriteTree");

    var SyncTree = function () {
        function SyncTree(listenProvider_) {
            this.listenProvider_ = listenProvider_;
            this.syncPointTree_ = ImmutableTree_1.ImmutableTree.Empty;
            this.pendingWriteTree_ = new WriteTree_1.WriteTree();
            this.tagToQueryMap_ = {};
            this.queryToTagMap_ = {};
        }

        SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {
            this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);

            if (!visible) {
                return [];
            } else {
                return this.applyOperationToSyncPoints_(new Overwrite_1.Overwrite(Operation_1.OperationSource.User, path, newData));
            }
        };

        SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {
            this.pendingWriteTree_.addMerge(path, changedChildren, writeId);
            var changeTree = ImmutableTree_1.ImmutableTree.fromObject(changedChildren);
            return this.applyOperationToSyncPoints_(new Merge_1.Merge(Operation_1.OperationSource.User, path, changeTree));
        };

        SyncTree.prototype.ackUserWrite = function (writeId, revert) {
            if (revert === void 0) {
                revert = false;
            }

            var write = this.pendingWriteTree_.getWrite(writeId);
            var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);

            if (!needToReevaluate) {
                return [];
            } else {
                var affectedTree_1 = ImmutableTree_1.ImmutableTree.Empty;

                if (write.snap != null) {
                    affectedTree_1 = affectedTree_1.set(Path_1.Path.Empty, true);
                } else {
                    util_3.forEach(write.children, function (pathString, node) {
                        affectedTree_1 = affectedTree_1.set(new Path_1.Path(pathString), node);
                    });
                }

                return this.applyOperationToSyncPoints_(new AckUserWrite_1.AckUserWrite(write.path, affectedTree_1, revert));
            }
        };

        SyncTree.prototype.applyServerOverwrite = function (path, newData) {
            return this.applyOperationToSyncPoints_(new Overwrite_1.Overwrite(Operation_1.OperationSource.Server, path, newData));
        };

        SyncTree.prototype.applyServerMerge = function (path, changedChildren) {
            var changeTree = ImmutableTree_1.ImmutableTree.fromObject(changedChildren);
            return this.applyOperationToSyncPoints_(new Merge_1.Merge(Operation_1.OperationSource.Server, path, changeTree));
        };

        SyncTree.prototype.applyListenComplete = function (path) {
            return this.applyOperationToSyncPoints_(new ListenComplete_1.ListenComplete(Operation_1.OperationSource.Server, path));
        };

        SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {
            var queryKey = this.queryKeyForTag_(tag);

            if (queryKey != null) {
                var r = SyncTree.parseQueryKey_(queryKey);
                var queryPath = r.path,
                    queryId = r.queryId;
                var relativePath = Path_1.Path.relativePath(queryPath, path);
                var op = new Overwrite_1.Overwrite(Operation_1.OperationSource.forServerTaggedQuery(queryId), relativePath, snap);
                return this.applyTaggedOperation_(queryPath, op);
            } else {
                return [];
            }
        };

        SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {
            var queryKey = this.queryKeyForTag_(tag);

            if (queryKey) {
                var r = SyncTree.parseQueryKey_(queryKey);
                var queryPath = r.path,
                    queryId = r.queryId;
                var relativePath = Path_1.Path.relativePath(queryPath, path);
                var changeTree = ImmutableTree_1.ImmutableTree.fromObject(changedChildren);
                var op = new Merge_1.Merge(Operation_1.OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);
                return this.applyTaggedOperation_(queryPath, op);
            } else {
                return [];
            }
        };

        SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {
            var queryKey = this.queryKeyForTag_(tag);

            if (queryKey) {
                var r = SyncTree.parseQueryKey_(queryKey);
                var queryPath = r.path,
                    queryId = r.queryId;
                var relativePath = Path_1.Path.relativePath(queryPath, path);
                var op = new ListenComplete_1.ListenComplete(Operation_1.OperationSource.forServerTaggedQuery(queryId), relativePath);
                return this.applyTaggedOperation_(queryPath, op);
            } else {
                return [];
            }
        };

        SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {
            var path = query.path;
            var serverCache = null;
            var foundAncestorDefaultView = false;
            this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {
                var relativePath = Path_1.Path.relativePath(pathToSyncPoint, path);
                serverCache = serverCache || sp.getCompleteServerCache(relativePath);
                foundAncestorDefaultView = foundAncestorDefaultView || sp.hasCompleteView();
            });
            var syncPoint = this.syncPointTree_.get(path);

            if (!syncPoint) {
                syncPoint = new SyncPoint_1.SyncPoint();
                this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);
            } else {
                foundAncestorDefaultView = foundAncestorDefaultView || syncPoint.hasCompleteView();
                serverCache = serverCache || syncPoint.getCompleteServerCache(Path_1.Path.Empty);
            }

            var serverCacheComplete;

            if (serverCache != null) {
                serverCacheComplete = true;
            } else {
                serverCacheComplete = false;
                serverCache = ChildrenNode_1.ChildrenNode.EMPTY_NODE;
                var subtree = this.syncPointTree_.subtree(path);
                subtree.foreachChild(function (childName, childSyncPoint) {
                    var completeCache = childSyncPoint.getCompleteServerCache(Path_1.Path.Empty);

                    if (completeCache) {
                        serverCache = serverCache.updateImmediateChild(childName, completeCache);
                    }
                });
            }

            var viewAlreadyExists = syncPoint.viewExistsForQuery(query);

            if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {
                var queryKey = SyncTree.makeQueryKey_(query);
                util_1.assert(!(queryKey in this.queryToTagMap_), 'View does not exist, but we have a tag');
                var tag = SyncTree.getNextQueryTag_();
                this.queryToTagMap_[queryKey] = tag;
                this.tagToQueryMap_['_' + tag] = queryKey;
            }

            var writesCache = this.pendingWriteTree_.childWrites(path);
            var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);

            if (!viewAlreadyExists && !foundAncestorDefaultView) {
                var view = syncPoint.viewForQuery(query);
                events = events.concat(this.setupListener_(query, view));
            }

            return events;
        };

        SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {
            var _this = this;

            var path = query.path;
            var maybeSyncPoint = this.syncPointTree_.get(path);
            var cancelEvents = [];

            if (maybeSyncPoint && (query.queryIdentifier() === 'default' || maybeSyncPoint.viewExistsForQuery(query))) {
                var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);

                if (maybeSyncPoint.isEmpty()) {
                    this.syncPointTree_ = this.syncPointTree_.remove(path);
                }

                var removed = removedAndEvents.removed;
                cancelEvents = removedAndEvents.events;
                var removingDefault = -1 !== removed.findIndex(function (query) {
                    return query.getQueryParams().loadsAllData();
                });
                var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {
                    return parentSyncPoint.hasCompleteView();
                });

                if (removingDefault && !covered) {
                    var subtree = this.syncPointTree_.subtree(path);

                    if (!subtree.isEmpty()) {
                        var newViews = this.collectDistinctViewsForSubTree_(subtree);

                        for (var i = 0; i < newViews.length; ++i) {
                            var view = newViews[i],
                                newQuery = view.getQuery();
                            var listener = this.createListenerForView_(view);
                            this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);
                        }
                    } else {}
                }

                if (!covered && removed.length > 0 && !cancelError) {
                    if (removingDefault) {
                        var defaultTag = null;
                        this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);
                    } else {
                        removed.forEach(function (queryToRemove) {
                            var tagToRemove = _this.queryToTagMap_[SyncTree.makeQueryKey_(queryToRemove)];

                            _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);
                        });
                    }
                }

                this.removeTags_(removed);
            } else {}

            return cancelEvents;
        };

        SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {
            var includeHiddenSets = true;
            var writeTree = this.pendingWriteTree_;
            var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {
                var relativePath = Path_1.Path.relativePath(pathSoFar, path);
                var serverCache = syncPoint.getCompleteServerCache(relativePath);

                if (serverCache) {
                    return serverCache;
                }
            });
            return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);
        };

        SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {
            return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {
                if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {
                    var completeView = maybeChildSyncPoint.getCompleteView();
                    return [completeView];
                } else {
                    var views_1 = [];

                    if (maybeChildSyncPoint) {
                        views_1 = maybeChildSyncPoint.getQueryViews();
                    }

                    util_3.forEach(childMap, function (key, childViews) {
                        views_1 = views_1.concat(childViews);
                    });
                    return views_1;
                }
            });
        };

        SyncTree.prototype.removeTags_ = function (queries) {
            for (var j = 0; j < queries.length; ++j) {
                var removedQuery = queries[j];

                if (!removedQuery.getQueryParams().loadsAllData()) {
                    var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);
                    var removedQueryTag = this.queryToTagMap_[removedQueryKey];
                    delete this.queryToTagMap_[removedQueryKey];
                    delete this.tagToQueryMap_['_' + removedQueryTag];
                }
            }
        };

        SyncTree.queryForListening_ = function (query) {
            if (query.getQueryParams().loadsAllData() && !query.getQueryParams().isDefault()) {
                return query.getRef();
            } else {
                return query;
            }
        };

        SyncTree.prototype.setupListener_ = function (query, view) {
            var path = query.path;
            var tag = this.tagForQuery_(query);
            var listener = this.createListenerForView_(view);
            var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);
            var subtree = this.syncPointTree_.subtree(path);

            if (tag) {
                util_1.assert(!subtree.value.hasCompleteView(), "If we're adding a query, it shouldn't be shadowed");
            } else {
                var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {
                    if (!relativePath.isEmpty() && maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {
                        return [maybeChildSyncPoint.getCompleteView().getQuery()];
                    } else {
                        var queries_1 = [];

                        if (maybeChildSyncPoint) {
                            queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) {
                                return view.getQuery();
                            }));
                        }

                        util_3.forEach(childMap, function (key, childQueries) {
                            queries_1 = queries_1.concat(childQueries);
                        });
                        return queries_1;
                    }
                });

                for (var i = 0; i < queriesToStop.length; ++i) {
                    var queryToStop = queriesToStop[i];
                    this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));
                }
            }

            return events;
        };

        SyncTree.prototype.createListenerForView_ = function (view) {
            var _this = this;

            var query = view.getQuery();
            var tag = this.tagForQuery_(query);
            return {
                hashFn: function hashFn() {
                    var cache = view.getServerCache() || ChildrenNode_1.ChildrenNode.EMPTY_NODE;
                    return cache.hash();
                },
                onComplete: function onComplete(status) {
                    if (status === 'ok') {
                        if (tag) {
                            return _this.applyTaggedListenComplete(query.path, tag);
                        } else {
                            return _this.applyListenComplete(query.path);
                        }
                    } else {
                        var error = util_2.errorForServerCode(status, query);
                        return _this.removeEventRegistration(query, null, error);
                    }
                }
            };
        };

        SyncTree.makeQueryKey_ = function (query) {
            return query.path.toString() + '$' + query.queryIdentifier();
        };

        SyncTree.parseQueryKey_ = function (queryKey) {
            var splitIndex = queryKey.indexOf('$');
            util_1.assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');
            return {
                queryId: queryKey.substr(splitIndex + 1),
                path: new Path_1.Path(queryKey.substr(0, splitIndex))
            };
        };

        SyncTree.prototype.queryKeyForTag_ = function (tag) {
            return this.tagToQueryMap_['_' + tag];
        };

        SyncTree.prototype.tagForQuery_ = function (query) {
            var queryKey = SyncTree.makeQueryKey_(query);
            return util_3.safeGet(this.queryToTagMap_, queryKey);
        };

        SyncTree.getNextQueryTag_ = function () {
            return SyncTree.nextQueryTag_++;
        };

        SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {
            var syncPoint = this.syncPointTree_.get(queryPath);
            util_1.assert(syncPoint, "Missing sync point for query tag that we're tracking");
            var writesCache = this.pendingWriteTree_.childWrites(queryPath);
            return syncPoint.applyOperation(operation, writesCache, null);
        };

        SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {
            return this.applyOperationHelper_(operation, this.syncPointTree_, null, this.pendingWriteTree_.childWrites(Path_1.Path.Empty));
        };

        SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {
            if (operation.path.isEmpty()) {
                return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);
            } else {
                var syncPoint = syncPointTree.get(Path_1.Path.Empty);

                if (serverCache == null && syncPoint != null) {
                    serverCache = syncPoint.getCompleteServerCache(Path_1.Path.Empty);
                }

                var events = [];
                var childName = operation.path.getFront();
                var childOperation = operation.operationForChild(childName);
                var childTree = syncPointTree.children.get(childName);

                if (childTree && childOperation) {
                    var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;
                    var childWritesCache = writesCache.child(childName);
                    events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));
                }

                if (syncPoint) {
                    events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));
                }

                return events;
            }
        };

        SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {
            var _this = this;

            var syncPoint = syncPointTree.get(Path_1.Path.Empty);

            if (serverCache == null && syncPoint != null) {
                serverCache = syncPoint.getCompleteServerCache(Path_1.Path.Empty);
            }

            var events = [];
            syncPointTree.children.inorderTraversal(function (childName, childTree) {
                var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;
                var childWritesCache = writesCache.child(childName);
                var childOperation = operation.operationForChild(childName);

                if (childOperation) {
                    events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));
                }
            });

            if (syncPoint) {
                events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));
            }

            return events;
        };

        SyncTree.nextQueryTag_ = 1;
        return SyncTree;
    }();

    exports.SyncTree = SyncTree;
},568,[508,531,569,555,571,572,573,570,574,538,575,585],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\SyncTree.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "@firebase/util");

    var Path_1 = _require(_dependencyMap[1], "../util/Path");

    var Operation_1 = _require(_dependencyMap[2], "./Operation");

    var AckUserWrite = function () {
        function AckUserWrite(path, affectedTree, revert) {
            this.path = path;
            this.affectedTree = affectedTree;
            this.revert = revert;
            this.type = Operation_1.OperationType.ACK_USER_WRITE;
            this.source = Operation_1.OperationSource.User;
        }

        AckUserWrite.prototype.operationForChild = function (childName) {
            if (!this.path.isEmpty()) {
                util_1.assert(this.path.getFront() === childName, 'operationForChild called for unrelated child.');
                return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);
            } else if (this.affectedTree.value != null) {
                util_1.assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');
                return this;
            } else {
                var childTree = this.affectedTree.subtree(new Path_1.Path(childName));
                return new AckUserWrite(Path_1.Path.Empty, childTree, this.revert);
            }
        };

        return AckUserWrite;
    }();

    exports.AckUserWrite = AckUserWrite;
},569,[508,538,570],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\operation\\AckUserWrite.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var util_1 = _require(_dependencyMap[0], "@firebase/util");

  var OperationType;

  (function (OperationType) {
    OperationType[OperationType["OVERWRITE"] = 0] = "OVERWRITE";
    OperationType[OperationType["MERGE"] = 1] = "MERGE";
    OperationType[OperationType["ACK_USER_WRITE"] = 2] = "ACK_USER_WRITE";
    OperationType[OperationType["LISTEN_COMPLETE"] = 3] = "LISTEN_COMPLETE";
  })(OperationType = exports.OperationType || (exports.OperationType = {}));

  var OperationSource = function () {
    function OperationSource(fromUser, fromServer, queryId, tagged) {
      this.fromUser = fromUser;
      this.fromServer = fromServer;
      this.queryId = queryId;
      this.tagged = tagged;
      util_1.assert(!tagged || fromServer, 'Tagged queries must be from server.');
    }

    OperationSource.User = new OperationSource(true, false, null, false);
    OperationSource.Server = new OperationSource(false, true, null, false);

    OperationSource.forServerTaggedQuery = function (queryId) {
      return new OperationSource(false, true, queryId, true);
    };

    return OperationSource;
  }();

  exports.OperationSource = OperationSource;
},570,[508],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\operation\\Operation.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var SortedMap_1 = _require(_dependencyMap[0], "./SortedMap");

    var Path_1 = _require(_dependencyMap[1], "./Path");

    var util_1 = _require(_dependencyMap[2], "./util");

    var util_2 = _require(_dependencyMap[3], "@firebase/util");

    var emptyChildrenSingleton;

    var EmptyChildren = function EmptyChildren() {
        if (!emptyChildrenSingleton) {
            emptyChildrenSingleton = new SortedMap_1.SortedMap(util_1.stringCompare);
        }

        return emptyChildrenSingleton;
    };

    var ImmutableTree = function () {
        function ImmutableTree(value, children) {
            if (children === void 0) {
                children = EmptyChildren();
            }

            this.value = value;
            this.children = children;
        }

        ImmutableTree.fromObject = function (obj) {
            var tree = ImmutableTree.Empty;
            util_2.forEach(obj, function (childPath, childSnap) {
                tree = tree.set(new Path_1.Path(childPath), childSnap);
            });
            return tree;
        };

        ImmutableTree.prototype.isEmpty = function () {
            return this.value === null && this.children.isEmpty();
        };

        ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {
            if (this.value != null && predicate(this.value)) {
                return {
                    path: Path_1.Path.Empty,
                    value: this.value
                };
            } else {
                if (relativePath.isEmpty()) {
                    return null;
                } else {
                    var front = relativePath.getFront();
                    var child = this.children.get(front);

                    if (child !== null) {
                        var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(relativePath.popFront(), predicate);

                        if (childExistingPathAndValue != null) {
                            var fullPath = new Path_1.Path(front).child(childExistingPathAndValue.path);
                            return {
                                path: fullPath,
                                value: childExistingPathAndValue.value
                            };
                        } else {
                            return null;
                        }
                    } else {
                        return null;
                    }
                }
            }
        };

        ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {
            return this.findRootMostMatchingPathAndValue(relativePath, function () {
                return true;
            });
        };

        ImmutableTree.prototype.subtree = function (relativePath) {
            if (relativePath.isEmpty()) {
                return this;
            } else {
                var front = relativePath.getFront();
                var childTree = this.children.get(front);

                if (childTree !== null) {
                    return childTree.subtree(relativePath.popFront());
                } else {
                    return ImmutableTree.Empty;
                }
            }
        };

        ImmutableTree.prototype.set = function (relativePath, toSet) {
            if (relativePath.isEmpty()) {
                return new ImmutableTree(toSet, this.children);
            } else {
                var front = relativePath.getFront();
                var child = this.children.get(front) || ImmutableTree.Empty;
                var newChild = child.set(relativePath.popFront(), toSet);
                var newChildren = this.children.insert(front, newChild);
                return new ImmutableTree(this.value, newChildren);
            }
        };

        ImmutableTree.prototype.remove = function (relativePath) {
            if (relativePath.isEmpty()) {
                if (this.children.isEmpty()) {
                    return ImmutableTree.Empty;
                } else {
                    return new ImmutableTree(null, this.children);
                }
            } else {
                var front = relativePath.getFront();
                var child = this.children.get(front);

                if (child) {
                    var newChild = child.remove(relativePath.popFront());
                    var newChildren = void 0;

                    if (newChild.isEmpty()) {
                        newChildren = this.children.remove(front);
                    } else {
                        newChildren = this.children.insert(front, newChild);
                    }

                    if (this.value === null && newChildren.isEmpty()) {
                        return ImmutableTree.Empty;
                    } else {
                        return new ImmutableTree(this.value, newChildren);
                    }
                } else {
                    return this;
                }
            }
        };

        ImmutableTree.prototype.get = function (relativePath) {
            if (relativePath.isEmpty()) {
                return this.value;
            } else {
                var front = relativePath.getFront();
                var child = this.children.get(front);

                if (child) {
                    return child.get(relativePath.popFront());
                } else {
                    return null;
                }
            }
        };

        ImmutableTree.prototype.setTree = function (relativePath, newTree) {
            if (relativePath.isEmpty()) {
                return newTree;
            } else {
                var front = relativePath.getFront();
                var child = this.children.get(front) || ImmutableTree.Empty;
                var newChild = child.setTree(relativePath.popFront(), newTree);
                var newChildren = void 0;

                if (newChild.isEmpty()) {
                    newChildren = this.children.remove(front);
                } else {
                    newChildren = this.children.insert(front, newChild);
                }

                return new ImmutableTree(this.value, newChildren);
            }
        };

        ImmutableTree.prototype.fold = function (fn) {
            return this.fold_(Path_1.Path.Empty, fn);
        };

        ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {
            var accum = {};
            this.children.inorderTraversal(function (childKey, childTree) {
                accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);
            });
            return fn(pathSoFar, this.value, accum);
        };

        ImmutableTree.prototype.findOnPath = function (path, f) {
            return this.findOnPath_(path, Path_1.Path.Empty, f);
        };

        ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {
            var result = this.value ? f(pathSoFar, this.value) : false;

            if (result) {
                return result;
            } else {
                if (pathToFollow.isEmpty()) {
                    return null;
                } else {
                    var front = pathToFollow.getFront();
                    var nextChild = this.children.get(front);

                    if (nextChild) {
                        return nextChild.findOnPath_(pathToFollow.popFront(), pathSoFar.child(front), f);
                    } else {
                        return null;
                    }
                }
            }
        };

        ImmutableTree.prototype.foreachOnPath = function (path, f) {
            return this.foreachOnPath_(path, Path_1.Path.Empty, f);
        };

        ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {
            if (pathToFollow.isEmpty()) {
                return this;
            } else {
                if (this.value) {
                    f(currentRelativePath, this.value);
                }

                var front = pathToFollow.getFront();
                var nextChild = this.children.get(front);

                if (nextChild) {
                    return nextChild.foreachOnPath_(pathToFollow.popFront(), currentRelativePath.child(front), f);
                } else {
                    return ImmutableTree.Empty;
                }
            }
        };

        ImmutableTree.prototype.foreach = function (f) {
            this.foreach_(Path_1.Path.Empty, f);
        };

        ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {
            this.children.inorderTraversal(function (childName, childTree) {
                childTree.foreach_(currentRelativePath.child(childName), f);
            });

            if (this.value) {
                f(currentRelativePath, this.value);
            }
        };

        ImmutableTree.prototype.foreachChild = function (f) {
            this.children.inorderTraversal(function (childName, childTree) {
                if (childTree.value) {
                    f(childName, childTree.value);
                }
            });
        };

        ImmutableTree.Empty = new ImmutableTree(null);
        return ImmutableTree;
    }();

    exports.ImmutableTree = ImmutableTree;
},571,[556,538,531,508],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\util\\ImmutableTree.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var Path_1 = _require(_dependencyMap[0], "../util/Path");

    var Operation_1 = _require(_dependencyMap[1], "./Operation");

    var ListenComplete = function () {
        function ListenComplete(source, path) {
            this.source = source;
            this.path = path;
            this.type = Operation_1.OperationType.LISTEN_COMPLETE;
        }

        ListenComplete.prototype.operationForChild = function (childName) {
            if (this.path.isEmpty()) {
                return new ListenComplete(this.source, Path_1.Path.Empty);
            } else {
                return new ListenComplete(this.source, this.path.popFront());
            }
        };

        return ListenComplete;
    }();

    exports.ListenComplete = ListenComplete;
},572,[538,570],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\operation\\ListenComplete.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var Operation_1 = _require(_dependencyMap[0], "./Operation");

    var Overwrite_1 = _require(_dependencyMap[1], "./Overwrite");

    var Path_1 = _require(_dependencyMap[2], "../util/Path");

    var util_1 = _require(_dependencyMap[3], "@firebase/util");

    var Merge = function () {
        function Merge(source, path, children) {
            this.source = source;
            this.path = path;
            this.children = children;
            this.type = Operation_1.OperationType.MERGE;
        }

        Merge.prototype.operationForChild = function (childName) {
            if (this.path.isEmpty()) {
                var childTree = this.children.subtree(new Path_1.Path(childName));

                if (childTree.isEmpty()) {
                    return null;
                } else if (childTree.value) {
                    return new Overwrite_1.Overwrite(this.source, Path_1.Path.Empty, childTree.value);
                } else {
                    return new Merge(this.source, Path_1.Path.Empty, childTree);
                }
            } else {
                util_1.assert(this.path.getFront() === childName, "Can't get a merge for a child not on the path of the operation");
                return new Merge(this.source, this.path.popFront(), this.children);
            }
        };

        Merge.prototype.toString = function () {
            return 'Operation(' + this.path + ': ' + this.source.toString() + ' merge: ' + this.children.toString() + ')';
        };

        return Merge;
    }();

    exports.Merge = Merge;
},573,[570,574,538,508],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\operation\\Merge.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var Operation_1 = _require(_dependencyMap[0], "./Operation");

    var Path_1 = _require(_dependencyMap[1], "../util/Path");

    var Overwrite = function () {
        function Overwrite(source, path, snap) {
            this.source = source;
            this.path = path;
            this.snap = snap;
            this.type = Operation_1.OperationType.OVERWRITE;
        }

        Overwrite.prototype.operationForChild = function (childName) {
            if (this.path.isEmpty()) {
                return new Overwrite(this.source, Path_1.Path.Empty, this.snap.getImmediateChild(childName));
            } else {
                return new Overwrite(this.source, this.path.popFront(), this.snap);
            }
        };

        return Overwrite;
    }();

    exports.Overwrite = Overwrite;
},574,[570,538],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\operation\\Overwrite.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var CacheNode_1 = _require(_dependencyMap[0], "./view/CacheNode");

    var ChildrenNode_1 = _require(_dependencyMap[1], "./snap/ChildrenNode");

    var util_1 = _require(_dependencyMap[2], "@firebase/util");

    var util_2 = _require(_dependencyMap[2], "@firebase/util");

    var ViewCache_1 = _require(_dependencyMap[3], "./view/ViewCache");

    var View_1 = _require(_dependencyMap[4], "./view/View");

    var __referenceConstructor;

    var SyncPoint = function () {
        function SyncPoint() {
            this.views_ = {};
        }

        Object.defineProperty(SyncPoint, "__referenceConstructor", {
            get: function get() {
                util_1.assert(__referenceConstructor, 'Reference.ts has not been loaded');
                return __referenceConstructor;
            },
            set: function set(val) {
                util_1.assert(!__referenceConstructor, '__referenceConstructor has already been defined');
                __referenceConstructor = val;
            },
            enumerable: true,
            configurable: true
        });

        SyncPoint.prototype.isEmpty = function () {
            return util_2.isEmpty(this.views_);
        };

        SyncPoint.prototype.applyOperation = function (operation, writesCache, optCompleteServerCache) {
            var queryId = operation.source.queryId;

            if (queryId !== null) {
                var view = util_2.safeGet(this.views_, queryId);
                util_1.assert(view != null, 'SyncTree gave us an op for an invalid query.');
                return view.applyOperation(operation, writesCache, optCompleteServerCache);
            } else {
                var events_1 = [];
                util_2.forEach(this.views_, function (key, view) {
                    events_1 = events_1.concat(view.applyOperation(operation, writesCache, optCompleteServerCache));
                });
                return events_1;
            }
        };

        SyncPoint.prototype.addEventRegistration = function (query, eventRegistration, writesCache, serverCache, serverCacheComplete) {
            var queryId = query.queryIdentifier();
            var view = util_2.safeGet(this.views_, queryId);

            if (!view) {
                var eventCache = writesCache.calcCompleteEventCache(serverCacheComplete ? serverCache : null);
                var eventCacheComplete = false;

                if (eventCache) {
                    eventCacheComplete = true;
                } else if (serverCache instanceof ChildrenNode_1.ChildrenNode) {
                    eventCache = writesCache.calcCompleteEventChildren(serverCache);
                    eventCacheComplete = false;
                } else {
                    eventCache = ChildrenNode_1.ChildrenNode.EMPTY_NODE;
                    eventCacheComplete = false;
                }

                var viewCache = new ViewCache_1.ViewCache(new CacheNode_1.CacheNode(eventCache, eventCacheComplete, false), new CacheNode_1.CacheNode(serverCache, serverCacheComplete, false));
                view = new View_1.View(query, viewCache);
                this.views_[queryId] = view;
            }

            view.addEventRegistration(eventRegistration);
            return view.getInitialEvents(eventRegistration);
        };

        SyncPoint.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {
            var queryId = query.queryIdentifier();
            var removed = [];
            var cancelEvents = [];
            var hadCompleteView = this.hasCompleteView();

            if (queryId === 'default') {
                var self_1 = this;
                util_2.forEach(this.views_, function (viewQueryId, view) {
                    cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));

                    if (view.isEmpty()) {
                        delete self_1.views_[viewQueryId];

                        if (!view.getQuery().getQueryParams().loadsAllData()) {
                            removed.push(view.getQuery());
                        }
                    }
                });
            } else {
                var view = util_2.safeGet(this.views_, queryId);

                if (view) {
                    cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));

                    if (view.isEmpty()) {
                        delete this.views_[queryId];

                        if (!view.getQuery().getQueryParams().loadsAllData()) {
                            removed.push(view.getQuery());
                        }
                    }
                }
            }

            if (hadCompleteView && !this.hasCompleteView()) {
                removed.push(new SyncPoint.__referenceConstructor(query.repo, query.path));
            }

            return {
                removed: removed,
                events: cancelEvents
            };
        };

        SyncPoint.prototype.getQueryViews = function () {
            var _this = this;

            var values = Object.keys(this.views_).map(function (key) {
                return _this.views_[key];
            });
            return values.filter(function (view) {
                return !view.getQuery().getQueryParams().loadsAllData();
            });
        };

        SyncPoint.prototype.getCompleteServerCache = function (path) {
            var serverCache = null;
            util_2.forEach(this.views_, function (key, view) {
                serverCache = serverCache || view.getCompleteServerCache(path);
            });
            return serverCache;
        };

        SyncPoint.prototype.viewForQuery = function (query) {
            var params = query.getQueryParams();

            if (params.loadsAllData()) {
                return this.getCompleteView();
            } else {
                var queryId = query.queryIdentifier();
                return util_2.safeGet(this.views_, queryId);
            }
        };

        SyncPoint.prototype.viewExistsForQuery = function (query) {
            return this.viewForQuery(query) != null;
        };

        SyncPoint.prototype.hasCompleteView = function () {
            return this.getCompleteView() != null;
        };

        SyncPoint.prototype.getCompleteView = function () {
            var completeView = util_2.findValue(this.views_, function (view) {
                return view.getQuery().getQueryParams().loadsAllData();
            });
            return completeView || null;
        };

        return SyncPoint;
    }();

    exports.SyncPoint = SyncPoint;
},575,[576,555,508,577,578],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\SyncPoint.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var CacheNode = function () {
    function CacheNode(node_, fullyInitialized_, filtered_) {
      this.node_ = node_;
      this.fullyInitialized_ = fullyInitialized_;
      this.filtered_ = filtered_;
    }

    CacheNode.prototype.isFullyInitialized = function () {
      return this.fullyInitialized_;
    };

    CacheNode.prototype.isFiltered = function () {
      return this.filtered_;
    };

    CacheNode.prototype.isCompleteForPath = function (path) {
      if (path.isEmpty()) {
        return this.isFullyInitialized() && !this.filtered_;
      }

      var childKey = path.getFront();
      return this.isCompleteForChild(childKey);
    };

    CacheNode.prototype.isCompleteForChild = function (key) {
      return this.isFullyInitialized() && !this.filtered_ || this.node_.hasChild(key);
    };

    CacheNode.prototype.getNode = function () {
      return this.node_;
    };

    return CacheNode;
  }();

  exports.CacheNode = CacheNode;
},576,[],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\view\\CacheNode.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var ChildrenNode_1 = _require(_dependencyMap[0], "../snap/ChildrenNode");

  var CacheNode_1 = _require(_dependencyMap[1], "./CacheNode");

  var ViewCache = function () {
    function ViewCache(eventCache_, serverCache_) {
      this.eventCache_ = eventCache_;
      this.serverCache_ = serverCache_;
    }

    ViewCache.prototype.updateEventSnap = function (eventSnap, complete, filtered) {
      return new ViewCache(new CacheNode_1.CacheNode(eventSnap, complete, filtered), this.serverCache_);
    };

    ViewCache.prototype.updateServerSnap = function (serverSnap, complete, filtered) {
      return new ViewCache(this.eventCache_, new CacheNode_1.CacheNode(serverSnap, complete, filtered));
    };

    ViewCache.prototype.getEventCache = function () {
      return this.eventCache_;
    };

    ViewCache.prototype.getCompleteEventSnap = function () {
      return this.eventCache_.isFullyInitialized() ? this.eventCache_.getNode() : null;
    };

    ViewCache.prototype.getServerCache = function () {
      return this.serverCache_;
    };

    ViewCache.prototype.getCompleteServerSnap = function () {
      return this.serverCache_.isFullyInitialized() ? this.serverCache_.getNode() : null;
    };

    ViewCache.Empty = new ViewCache(new CacheNode_1.CacheNode(ChildrenNode_1.ChildrenNode.EMPTY_NODE, false, false), new CacheNode_1.CacheNode(ChildrenNode_1.ChildrenNode.EMPTY_NODE, false, false));
    return ViewCache;
  }();

  exports.ViewCache = ViewCache;
},577,[555,576],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\view\\ViewCache.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var IndexedFilter_1 = _require(_dependencyMap[0], "./filter/IndexedFilter");

    var ViewProcessor_1 = _require(_dependencyMap[1], "./ViewProcessor");

    var ChildrenNode_1 = _require(_dependencyMap[2], "../snap/ChildrenNode");

    var CacheNode_1 = _require(_dependencyMap[3], "./CacheNode");

    var ViewCache_1 = _require(_dependencyMap[4], "./ViewCache");

    var EventGenerator_1 = _require(_dependencyMap[5], "./EventGenerator");

    var util_1 = _require(_dependencyMap[6], "@firebase/util");

    var Operation_1 = _require(_dependencyMap[7], "../operation/Operation");

    var Change_1 = _require(_dependencyMap[8], "./Change");

    var PriorityIndex_1 = _require(_dependencyMap[9], "../snap/indexes/PriorityIndex");

    var View = function () {
        function View(query_, initialViewCache) {
            this.query_ = query_;
            this.eventRegistrations_ = [];
            var params = this.query_.getQueryParams();
            var indexFilter = new IndexedFilter_1.IndexedFilter(params.getIndex());
            var filter = params.getNodeFilter();
            this.processor_ = new ViewProcessor_1.ViewProcessor(filter);
            var initialServerCache = initialViewCache.getServerCache();
            var initialEventCache = initialViewCache.getEventCache();
            var serverSnap = indexFilter.updateFullNode(ChildrenNode_1.ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);
            var eventSnap = filter.updateFullNode(ChildrenNode_1.ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);
            var newServerCache = new CacheNode_1.CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());
            var newEventCache = new CacheNode_1.CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());
            this.viewCache_ = new ViewCache_1.ViewCache(newEventCache, newServerCache);
            this.eventGenerator_ = new EventGenerator_1.EventGenerator(this.query_);
        }

        View.prototype.getQuery = function () {
            return this.query_;
        };

        View.prototype.getServerCache = function () {
            return this.viewCache_.getServerCache().getNode();
        };

        View.prototype.getCompleteServerCache = function (path) {
            var cache = this.viewCache_.getCompleteServerSnap();

            if (cache) {
                if (this.query_.getQueryParams().loadsAllData() || !path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty()) {
                    return cache.getChild(path);
                }
            }

            return null;
        };

        View.prototype.isEmpty = function () {
            return this.eventRegistrations_.length === 0;
        };

        View.prototype.addEventRegistration = function (eventRegistration) {
            this.eventRegistrations_.push(eventRegistration);
        };

        View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {
            var cancelEvents = [];

            if (cancelError) {
                util_1.assert(eventRegistration == null, 'A cancel should cancel all event registrations.');
                var path_1 = this.query_.path;
                this.eventRegistrations_.forEach(function (registration) {
                    cancelError = cancelError;
                    var maybeEvent = registration.createCancelEvent(cancelError, path_1);

                    if (maybeEvent) {
                        cancelEvents.push(maybeEvent);
                    }
                });
            }

            if (eventRegistration) {
                var remaining = [];

                for (var i = 0; i < this.eventRegistrations_.length; ++i) {
                    var existing = this.eventRegistrations_[i];

                    if (!existing.matches(eventRegistration)) {
                        remaining.push(existing);
                    } else if (eventRegistration.hasAnyCallback()) {
                        remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));
                        break;
                    }
                }

                this.eventRegistrations_ = remaining;
            } else {
                this.eventRegistrations_ = [];
            }

            return cancelEvents;
        };

        View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {
            if (operation.type === Operation_1.OperationType.MERGE && operation.source.queryId !== null) {
                util_1.assert(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');
                util_1.assert(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');
            }

            var oldViewCache = this.viewCache_;
            var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);
            this.processor_.assertIndexed(result.viewCache);
            util_1.assert(result.viewCache.getServerCache().isFullyInitialized() || !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');
            this.viewCache_ = result.viewCache;
            return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);
        };

        View.prototype.getInitialEvents = function (registration) {
            var eventSnap = this.viewCache_.getEventCache();
            var initialChanges = [];

            if (!eventSnap.getNode().isLeafNode()) {
                var eventNode = eventSnap.getNode();
                eventNode.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, childNode) {
                    initialChanges.push(Change_1.Change.childAddedChange(key, childNode));
                });
            }

            if (eventSnap.isFullyInitialized()) {
                initialChanges.push(Change_1.Change.valueChange(eventSnap.getNode()));
            }

            return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);
        };

        View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {
            var registrations = eventRegistration ? [eventRegistration] : this.eventRegistrations_;
            return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);
        };

        return View;
    }();

    exports.View = View;
},578,[579,581,555,576,577,584,508,570,580,550],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\view\\View.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "@firebase/util");

    var Change_1 = _require(_dependencyMap[1], "../Change");

    var ChildrenNode_1 = _require(_dependencyMap[2], "../../snap/ChildrenNode");

    var PriorityIndex_1 = _require(_dependencyMap[3], "../../snap/indexes/PriorityIndex");

    var IndexedFilter = function () {
        function IndexedFilter(index_) {
            this.index_ = index_;
        }

        IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
            util_1.assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');
            var oldChild = snap.getImmediateChild(key);

            if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {
                if (oldChild.isEmpty() == newChild.isEmpty()) {
                    return snap;
                }
            }

            if (optChangeAccumulator != null) {
                if (newChild.isEmpty()) {
                    if (snap.hasChild(key)) {
                        optChangeAccumulator.trackChildChange(Change_1.Change.childRemovedChange(key, oldChild));
                    } else {
                        util_1.assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');
                    }
                } else if (oldChild.isEmpty()) {
                    optChangeAccumulator.trackChildChange(Change_1.Change.childAddedChange(key, newChild));
                } else {
                    optChangeAccumulator.trackChildChange(Change_1.Change.childChangedChange(key, newChild, oldChild));
                }
            }

            if (snap.isLeafNode() && newChild.isEmpty()) {
                return snap;
            } else {
                return snap.updateImmediateChild(key, newChild).withIndex(this.index_);
            }
        };

        IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
            if (optChangeAccumulator != null) {
                if (!oldSnap.isLeafNode()) {
                    oldSnap.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, childNode) {
                        if (!newSnap.hasChild(key)) {
                            optChangeAccumulator.trackChildChange(Change_1.Change.childRemovedChange(key, childNode));
                        }
                    });
                }

                if (!newSnap.isLeafNode()) {
                    newSnap.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, childNode) {
                        if (oldSnap.hasChild(key)) {
                            var oldChild = oldSnap.getImmediateChild(key);

                            if (!oldChild.equals(childNode)) {
                                optChangeAccumulator.trackChildChange(Change_1.Change.childChangedChange(key, childNode, oldChild));
                            }
                        } else {
                            optChangeAccumulator.trackChildChange(Change_1.Change.childAddedChange(key, childNode));
                        }
                    });
                }
            }

            return newSnap.withIndex(this.index_);
        };

        IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
            if (oldSnap.isEmpty()) {
                return ChildrenNode_1.ChildrenNode.EMPTY_NODE;
            } else {
                return oldSnap.updatePriority(newPriority);
            }
        };

        IndexedFilter.prototype.filtersNodes = function () {
            return false;
        };

        IndexedFilter.prototype.getIndexedFilter = function () {
            return this;
        };

        IndexedFilter.prototype.getIndex = function () {
            return this.index_;
        };

        return IndexedFilter;
    }();

    exports.IndexedFilter = IndexedFilter;
},579,[508,580,555,550],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\view\\filter\\IndexedFilter.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var Change = function () {
    function Change(type, snapshotNode, childName, oldSnap, prevName) {
      this.type = type;
      this.snapshotNode = snapshotNode;
      this.childName = childName;
      this.oldSnap = oldSnap;
      this.prevName = prevName;
    }

    Change.valueChange = function (snapshot) {
      return new Change(Change.VALUE, snapshot);
    };

    Change.childAddedChange = function (childKey, snapshot) {
      return new Change(Change.CHILD_ADDED, snapshot, childKey);
    };

    Change.childRemovedChange = function (childKey, snapshot) {
      return new Change(Change.CHILD_REMOVED, snapshot, childKey);
    };

    Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {
      return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);
    };

    Change.childMovedChange = function (childKey, snapshot) {
      return new Change(Change.CHILD_MOVED, snapshot, childKey);
    };

    Change.CHILD_ADDED = 'child_added';
    Change.CHILD_REMOVED = 'child_removed';
    Change.CHILD_CHANGED = 'child_changed';
    Change.CHILD_MOVED = 'child_moved';
    Change.VALUE = 'value';
    return Change;
  }();

  exports.Change = Change;
},580,[],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\view\\Change.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var Operation_1 = _require(_dependencyMap[0], "../operation/Operation");

    var util_1 = _require(_dependencyMap[1], "@firebase/util");

    var ChildChangeAccumulator_1 = _require(_dependencyMap[2], "./ChildChangeAccumulator");

    var Change_1 = _require(_dependencyMap[3], "./Change");

    var ChildrenNode_1 = _require(_dependencyMap[4], "../snap/ChildrenNode");

    var KeyIndex_1 = _require(_dependencyMap[5], "../snap/indexes/KeyIndex");

    var ImmutableTree_1 = _require(_dependencyMap[6], "../util/ImmutableTree");

    var Path_1 = _require(_dependencyMap[7], "../util/Path");

    var CompleteChildSource_1 = _require(_dependencyMap[8], "./CompleteChildSource");

    var ProcessorResult = function () {
        function ProcessorResult(viewCache, changes) {
            this.viewCache = viewCache;
            this.changes = changes;
        }

        return ProcessorResult;
    }();

    exports.ProcessorResult = ProcessorResult;

    var ViewProcessor = function () {
        function ViewProcessor(filter_) {
            this.filter_ = filter_;
        }

        ViewProcessor.prototype.assertIndexed = function (viewCache) {
            util_1.assert(viewCache.getEventCache().getNode().isIndexed(this.filter_.getIndex()), 'Event snap not indexed');
            util_1.assert(viewCache.getServerCache().getNode().isIndexed(this.filter_.getIndex()), 'Server snap not indexed');
        };

        ViewProcessor.prototype.applyOperation = function (oldViewCache, operation, writesCache, completeCache) {
            var accumulator = new ChildChangeAccumulator_1.ChildChangeAccumulator();
            var newViewCache, filterServerNode;

            if (operation.type === Operation_1.OperationType.OVERWRITE) {
                var overwrite = operation;

                if (overwrite.source.fromUser) {
                    newViewCache = this.applyUserOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);
                } else {
                    util_1.assert(overwrite.source.fromServer, 'Unknown source.');
                    filterServerNode = overwrite.source.tagged || oldViewCache.getServerCache().isFiltered() && !overwrite.path.isEmpty();
                    newViewCache = this.applyServerOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);
                }
            } else if (operation.type === Operation_1.OperationType.MERGE) {
                var merge = operation;

                if (merge.source.fromUser) {
                    newViewCache = this.applyUserMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);
                } else {
                    util_1.assert(merge.source.fromServer, 'Unknown source.');
                    filterServerNode = merge.source.tagged || oldViewCache.getServerCache().isFiltered();
                    newViewCache = this.applyServerMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);
                }
            } else if (operation.type === Operation_1.OperationType.ACK_USER_WRITE) {
                var ackUserWrite = operation;

                if (!ackUserWrite.revert) {
                    newViewCache = this.ackUserWrite_(oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);
                } else {
                    newViewCache = this.revertUserWrite_(oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);
                }
            } else if (operation.type === Operation_1.OperationType.LISTEN_COMPLETE) {
                newViewCache = this.listenComplete_(oldViewCache, operation.path, writesCache, accumulator);
            } else {
                throw util_1.assertionError('Unknown operation type: ' + operation.type);
            }

            var changes = accumulator.getChanges();
            ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);
            return new ProcessorResult(newViewCache, changes);
        };

        ViewProcessor.maybeAddValueEvent_ = function (oldViewCache, newViewCache, accumulator) {
            var eventSnap = newViewCache.getEventCache();

            if (eventSnap.isFullyInitialized()) {
                var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();
                var oldCompleteSnap = oldViewCache.getCompleteEventSnap();

                if (accumulator.length > 0 || !oldViewCache.getEventCache().isFullyInitialized() || isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap) || !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {
                    accumulator.push(Change_1.Change.valueChange(newViewCache.getCompleteEventSnap()));
                }
            }
        };

        ViewProcessor.prototype.generateEventCacheAfterServerEvent_ = function (viewCache, changePath, writesCache, source, accumulator) {
            var oldEventSnap = viewCache.getEventCache();

            if (writesCache.shadowingWrite(changePath) != null) {
                return viewCache;
            } else {
                var newEventCache = void 0,
                    serverNode = void 0;

                if (changePath.isEmpty()) {
                    util_1.assert(viewCache.getServerCache().isFullyInitialized(), 'If change path is empty, we must have complete server data');

                    if (viewCache.getServerCache().isFiltered()) {
                        var serverCache = viewCache.getCompleteServerSnap();
                        var completeChildren = serverCache instanceof ChildrenNode_1.ChildrenNode ? serverCache : ChildrenNode_1.ChildrenNode.EMPTY_NODE;
                        var completeEventChildren = writesCache.calcCompleteEventChildren(completeChildren);
                        newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeEventChildren, accumulator);
                    } else {
                        var completeNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
                        newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeNode, accumulator);
                    }
                } else {
                    var childKey = changePath.getFront();

                    if (childKey == '.priority') {
                        util_1.assert(changePath.getLength() == 1, "Can't have a priority with additional path components");
                        var oldEventNode = oldEventSnap.getNode();
                        serverNode = viewCache.getServerCache().getNode();
                        var updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventNode, serverNode);

                        if (updatedPriority != null) {
                            newEventCache = this.filter_.updatePriority(oldEventNode, updatedPriority);
                        } else {
                            newEventCache = oldEventSnap.getNode();
                        }
                    } else {
                        var childChangePath = changePath.popFront();
                        var newEventChild = void 0;

                        if (oldEventSnap.isCompleteForChild(childKey)) {
                            serverNode = viewCache.getServerCache().getNode();
                            var eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventSnap.getNode(), serverNode);

                            if (eventChildUpdate != null) {
                                newEventChild = oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath, eventChildUpdate);
                            } else {
                                newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);
                            }
                        } else {
                            newEventChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());
                        }

                        if (newEventChild != null) {
                            newEventCache = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);
                        } else {
                            newEventCache = oldEventSnap.getNode();
                        }
                    }
                }

                return viewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized() || changePath.isEmpty(), this.filter_.filtersNodes());
            }
        };

        ViewProcessor.prototype.applyServerOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {
            var oldServerSnap = oldViewCache.getServerCache();
            var newServerCache;
            var serverFilter = filterServerNode ? this.filter_ : this.filter_.getIndexedFilter();

            if (changePath.isEmpty()) {
                newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);
            } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {
                var newServerNode = oldServerSnap.getNode().updateChild(changePath, changedSnap);
                newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);
            } else {
                var childKey = changePath.getFront();

                if (!oldServerSnap.isCompleteForPath(changePath) && changePath.getLength() > 1) {
                    return oldViewCache;
                }

                var childChangePath = changePath.popFront();
                var childNode = oldServerSnap.getNode().getImmediateChild(childKey);
                var newChildNode = childNode.updateChild(childChangePath, changedSnap);

                if (childKey == '.priority') {
                    newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);
                } else {
                    newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, CompleteChildSource_1.NO_COMPLETE_CHILD_SOURCE, null);
                }
            }

            var newViewCache = oldViewCache.updateServerSnap(newServerCache, oldServerSnap.isFullyInitialized() || changePath.isEmpty(), serverFilter.filtersNodes());
            var source = new CompleteChildSource_1.WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);
            return this.generateEventCacheAfterServerEvent_(newViewCache, changePath, writesCache, source, accumulator);
        };

        ViewProcessor.prototype.applyUserOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {
            var oldEventSnap = oldViewCache.getEventCache();
            var newViewCache, newEventCache;
            var source = new CompleteChildSource_1.WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);

            if (changePath.isEmpty()) {
                newEventCache = this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(), changedSnap, accumulator);
                newViewCache = oldViewCache.updateEventSnap(newEventCache, true, this.filter_.filtersNodes());
            } else {
                var childKey = changePath.getFront();

                if (childKey === '.priority') {
                    newEventCache = this.filter_.updatePriority(oldViewCache.getEventCache().getNode(), changedSnap);
                    newViewCache = oldViewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());
                } else {
                    var childChangePath = changePath.popFront();
                    var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);
                    var newChild = void 0;

                    if (childChangePath.isEmpty()) {
                        newChild = changedSnap;
                    } else {
                        var childNode = source.getCompleteChild(childKey);

                        if (childNode != null) {
                            if (childChangePath.getBack() === '.priority' && childNode.getChild(childChangePath.parent()).isEmpty()) {
                                newChild = childNode;
                            } else {
                                newChild = childNode.updateChild(childChangePath, changedSnap);
                            }
                        } else {
                            newChild = ChildrenNode_1.ChildrenNode.EMPTY_NODE;
                        }
                    }

                    if (!oldChild.equals(newChild)) {
                        var newEventSnap = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);
                        newViewCache = oldViewCache.updateEventSnap(newEventSnap, oldEventSnap.isFullyInitialized(), this.filter_.filtersNodes());
                    } else {
                        newViewCache = oldViewCache;
                    }
                }
            }

            return newViewCache;
        };

        ViewProcessor.cacheHasChild_ = function (viewCache, childKey) {
            return viewCache.getEventCache().isCompleteForChild(childKey);
        };

        ViewProcessor.prototype.applyUserMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, accumulator) {
            var _this = this;

            var curViewCache = viewCache;
            changedChildren.foreach(function (relativePath, childNode) {
                var writePath = path.child(relativePath);

                if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {
                    curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
                }
            });
            changedChildren.foreach(function (relativePath, childNode) {
                var writePath = path.child(relativePath);

                if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {
                    curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
                }
            });
            return curViewCache;
        };

        ViewProcessor.prototype.applyMerge_ = function (node, merge) {
            merge.foreach(function (relativePath, childNode) {
                node = node.updateChild(relativePath, childNode);
            });
            return node;
        };

        ViewProcessor.prototype.applyServerMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {
            var _this = this;

            if (viewCache.getServerCache().getNode().isEmpty() && !viewCache.getServerCache().isFullyInitialized()) {
                return viewCache;
            }

            var curViewCache = viewCache;
            var viewMergeTree;

            if (path.isEmpty()) {
                viewMergeTree = changedChildren;
            } else {
                viewMergeTree = ImmutableTree_1.ImmutableTree.Empty.setTree(path, changedChildren);
            }

            var serverNode = viewCache.getServerCache().getNode();
            viewMergeTree.children.inorderTraversal(function (childKey, childTree) {
                if (serverNode.hasChild(childKey)) {
                    var serverChild = viewCache.getServerCache().getNode().getImmediateChild(childKey);

                    var newChild = _this.applyMerge_(serverChild, childTree);

                    curViewCache = _this.applyServerOverwrite_(curViewCache, new Path_1.Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
                }
            });
            viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {
                var isUnknownDeepMerge = !viewCache.getServerCache().isCompleteForChild(childKey) && childMergeTree.value == null;

                if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {
                    var serverChild = viewCache.getServerCache().getNode().getImmediateChild(childKey);

                    var newChild = _this.applyMerge_(serverChild, childMergeTree);

                    curViewCache = _this.applyServerOverwrite_(curViewCache, new Path_1.Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
                }
            });
            return curViewCache;
        };

        ViewProcessor.prototype.ackUserWrite_ = function (viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {
            if (writesCache.shadowingWrite(ackPath) != null) {
                return viewCache;
            }

            var filterServerNode = viewCache.getServerCache().isFiltered();
            var serverCache = viewCache.getServerCache();

            if (affectedTree.value != null) {
                if (ackPath.isEmpty() && serverCache.isFullyInitialized() || serverCache.isCompleteForPath(ackPath)) {
                    return this.applyServerOverwrite_(viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);
                } else if (ackPath.isEmpty()) {
                    var changedChildren_1 = ImmutableTree_1.ImmutableTree.Empty;
                    serverCache.getNode().forEachChild(KeyIndex_1.KEY_INDEX, function (name, node) {
                        changedChildren_1 = changedChildren_1.set(new Path_1.Path(name), node);
                    });
                    return this.applyServerMerge_(viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);
                } else {
                    return viewCache;
                }
            } else {
                var changedChildren_2 = ImmutableTree_1.ImmutableTree.Empty;
                affectedTree.foreach(function (mergePath, value) {
                    var serverCachePath = ackPath.child(mergePath);

                    if (serverCache.isCompleteForPath(serverCachePath)) {
                        changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));
                    }
                });
                return this.applyServerMerge_(viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);
            }
        };

        ViewProcessor.prototype.listenComplete_ = function (viewCache, path, writesCache, accumulator) {
            var oldServerNode = viewCache.getServerCache();
            var newViewCache = viewCache.updateServerSnap(oldServerNode.getNode(), oldServerNode.isFullyInitialized() || path.isEmpty(), oldServerNode.isFiltered());
            return this.generateEventCacheAfterServerEvent_(newViewCache, path, writesCache, CompleteChildSource_1.NO_COMPLETE_CHILD_SOURCE, accumulator);
        };

        ViewProcessor.prototype.revertUserWrite_ = function (viewCache, path, writesCache, completeServerCache, accumulator) {
            var complete;

            if (writesCache.shadowingWrite(path) != null) {
                return viewCache;
            } else {
                var source = new CompleteChildSource_1.WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);
                var oldEventCache = viewCache.getEventCache().getNode();
                var newEventCache = void 0;

                if (path.isEmpty() || path.getFront() === '.priority') {
                    var newNode = void 0;

                    if (viewCache.getServerCache().isFullyInitialized()) {
                        newNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
                    } else {
                        var serverChildren = viewCache.getServerCache().getNode();
                        util_1.assert(serverChildren instanceof ChildrenNode_1.ChildrenNode, 'serverChildren would be complete if leaf node');
                        newNode = writesCache.calcCompleteEventChildren(serverChildren);
                    }

                    newNode = newNode;
                    newEventCache = this.filter_.updateFullNode(oldEventCache, newNode, accumulator);
                } else {
                    var childKey = path.getFront();
                    var newChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());

                    if (newChild == null && viewCache.getServerCache().isCompleteForChild(childKey)) {
                        newChild = oldEventCache.getImmediateChild(childKey);
                    }

                    if (newChild != null) {
                        newEventCache = this.filter_.updateChild(oldEventCache, childKey, newChild, path.popFront(), source, accumulator);
                    } else if (viewCache.getEventCache().getNode().hasChild(childKey)) {
                        newEventCache = this.filter_.updateChild(oldEventCache, childKey, ChildrenNode_1.ChildrenNode.EMPTY_NODE, path.popFront(), source, accumulator);
                    } else {
                        newEventCache = oldEventCache;
                    }

                    if (newEventCache.isEmpty() && viewCache.getServerCache().isFullyInitialized()) {
                        complete = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());

                        if (complete.isLeafNode()) {
                            newEventCache = this.filter_.updateFullNode(newEventCache, complete, accumulator);
                        }
                    }
                }

                complete = viewCache.getServerCache().isFullyInitialized() || writesCache.shadowingWrite(Path_1.Path.Empty) != null;
                return viewCache.updateEventSnap(newEventCache, complete, this.filter_.filtersNodes());
            }
        };

        return ViewProcessor;
    }();

    exports.ViewProcessor = ViewProcessor;
},581,[570,508,582,580,555,547,571,538,583],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\view\\ViewProcessor.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "@firebase/util");

    var Change_1 = _require(_dependencyMap[1], "./Change");

    var util_2 = _require(_dependencyMap[0], "@firebase/util");

    var ChildChangeAccumulator = function () {
        function ChildChangeAccumulator() {
            this.changeMap_ = {};
        }

        ChildChangeAccumulator.prototype.trackChildChange = function (change) {
            var type = change.type;
            var childKey = change.childName;
            util_2.assert(type == Change_1.Change.CHILD_ADDED || type == Change_1.Change.CHILD_CHANGED || type == Change_1.Change.CHILD_REMOVED, 'Only child changes supported for tracking');
            util_2.assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');
            var oldChange = util_1.safeGet(this.changeMap_, childKey);

            if (oldChange) {
                var oldType = oldChange.type;

                if (type == Change_1.Change.CHILD_ADDED && oldType == Change_1.Change.CHILD_REMOVED) {
                    this.changeMap_[childKey] = Change_1.Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode);
                } else if (type == Change_1.Change.CHILD_REMOVED && oldType == Change_1.Change.CHILD_ADDED) {
                    delete this.changeMap_[childKey];
                } else if (type == Change_1.Change.CHILD_REMOVED && oldType == Change_1.Change.CHILD_CHANGED) {
                    this.changeMap_[childKey] = Change_1.Change.childRemovedChange(childKey, oldChange.oldSnap);
                } else if (type == Change_1.Change.CHILD_CHANGED && oldType == Change_1.Change.CHILD_ADDED) {
                    this.changeMap_[childKey] = Change_1.Change.childAddedChange(childKey, change.snapshotNode);
                } else if (type == Change_1.Change.CHILD_CHANGED && oldType == Change_1.Change.CHILD_CHANGED) {
                    this.changeMap_[childKey] = Change_1.Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap);
                } else {
                    throw util_2.assertionError('Illegal combination of changes: ' + change + ' occurred after ' + oldChange);
                }
            } else {
                this.changeMap_[childKey] = change;
            }
        };

        ChildChangeAccumulator.prototype.getChanges = function () {
            return util_1.getValues(this.changeMap_);
        };

        return ChildChangeAccumulator;
    }();

    exports.ChildChangeAccumulator = ChildChangeAccumulator;
},582,[508,580],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\view\\ChildChangeAccumulator.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var CacheNode_1 = _require(_dependencyMap[0], "./CacheNode");

    var NoCompleteChildSource_ = function () {
        function NoCompleteChildSource_() {}

        NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {
            return null;
        };

        NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {
            return null;
        };

        return NoCompleteChildSource_;
    }();

    exports.NoCompleteChildSource_ = NoCompleteChildSource_;
    exports.NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();

    var WriteTreeCompleteChildSource = function () {
        function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {
            if (optCompleteServerCache_ === void 0) {
                optCompleteServerCache_ = null;
            }

            this.writes_ = writes_;
            this.viewCache_ = viewCache_;
            this.optCompleteServerCache_ = optCompleteServerCache_;
        }

        WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {
            var node = this.viewCache_.getEventCache();

            if (node.isCompleteForChild(childKey)) {
                return node.getNode().getImmediateChild(childKey);
            } else {
                var serverNode = this.optCompleteServerCache_ != null ? new CacheNode_1.CacheNode(this.optCompleteServerCache_, true, false) : this.viewCache_.getServerCache();
                return this.writes_.calcCompleteChild(childKey, serverNode);
            }
        };

        WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {
            var completeServerData = this.optCompleteServerCache_ != null ? this.optCompleteServerCache_ : this.viewCache_.getCompleteServerSnap();
            var nodes = this.writes_.calcIndexedSlice(completeServerData, child, 1, reverse, index);

            if (nodes.length === 0) {
                return null;
            } else {
                return nodes[0];
            }
        };

        return WriteTreeCompleteChildSource;
    }();

    exports.WriteTreeCompleteChildSource = WriteTreeCompleteChildSource;
},583,[576],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\view\\CompleteChildSource.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var Node_1 = _require(_dependencyMap[0], "../snap/Node");

    var Change_1 = _require(_dependencyMap[1], "./Change");

    var util_1 = _require(_dependencyMap[2], "@firebase/util");

    var EventGenerator = function () {
        function EventGenerator(query_) {
            this.query_ = query_;
            this.index_ = this.query_.getQueryParams().getIndex();
        }

        EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {
            var _this = this;

            var events = [];
            var moves = [];
            changes.forEach(function (change) {
                if (change.type === Change_1.Change.CHILD_CHANGED && _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {
                    moves.push(Change_1.Change.childMovedChange(change.childName, change.snapshotNode));
                }
            });
            this.generateEventsForType_(events, Change_1.Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);
            this.generateEventsForType_(events, Change_1.Change.CHILD_ADDED, changes, eventRegistrations, eventCache);
            this.generateEventsForType_(events, Change_1.Change.CHILD_MOVED, moves, eventRegistrations, eventCache);
            this.generateEventsForType_(events, Change_1.Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);
            this.generateEventsForType_(events, Change_1.Change.VALUE, changes, eventRegistrations, eventCache);
            return events;
        };

        EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {
            var _this = this;

            var filteredChanges = changes.filter(function (change) {
                return change.type === eventType;
            });
            filteredChanges.sort(this.compareChanges_.bind(this));
            filteredChanges.forEach(function (change) {
                var materializedChange = _this.materializeSingleChange_(change, eventCache);

                registrations.forEach(function (registration) {
                    if (registration.respondsTo(change.type)) {
                        events.push(registration.createEvent(materializedChange, _this.query_));
                    }
                });
            });
        };

        EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {
            if (change.type === 'value' || change.type === 'child_removed') {
                return change;
            } else {
                change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, this.index_);
                return change;
            }
        };

        EventGenerator.prototype.compareChanges_ = function (a, b) {
            if (a.childName == null || b.childName == null) {
                throw util_1.assertionError('Should only compare child_ events.');
            }

            var aWrapped = new Node_1.NamedNode(a.childName, a.snapshotNode);
            var bWrapped = new Node_1.NamedNode(b.childName, b.snapshotNode);
            return this.index_.compare(aWrapped, bWrapped);
        };

        return EventGenerator;
    }();

    exports.EventGenerator = EventGenerator;
},584,[549,580,508],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\view\\EventGenerator.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "@firebase/util");

    var util_2 = _require(_dependencyMap[0], "@firebase/util");

    var Path_1 = _require(_dependencyMap[1], "./util/Path");

    var CompoundWrite_1 = _require(_dependencyMap[2], "./CompoundWrite");

    var PriorityIndex_1 = _require(_dependencyMap[3], "./snap/indexes/PriorityIndex");

    var ChildrenNode_1 = _require(_dependencyMap[4], "./snap/ChildrenNode");

    var WriteTree = function () {
        function WriteTree() {
            this.visibleWrites_ = CompoundWrite_1.CompoundWrite.Empty;
            this.allWrites_ = [];
            this.lastWriteId_ = -1;
        }

        WriteTree.prototype.childWrites = function (path) {
            return new WriteTreeRef(path, this);
        };

        WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {
            util_2.assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');

            if (visible === undefined) {
                visible = true;
            }

            this.allWrites_.push({
                path: path,
                snap: snap,
                writeId: writeId,
                visible: visible
            });

            if (visible) {
                this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);
            }

            this.lastWriteId_ = writeId;
        };

        WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {
            util_2.assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');
            this.allWrites_.push({
                path: path,
                children: changedChildren,
                writeId: writeId,
                visible: true
            });
            this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);
            this.lastWriteId_ = writeId;
        };

        WriteTree.prototype.getWrite = function (writeId) {
            for (var i = 0; i < this.allWrites_.length; i++) {
                var record = this.allWrites_[i];

                if (record.writeId === writeId) {
                    return record;
                }
            }

            return null;
        };

        WriteTree.prototype.removeWrite = function (writeId) {
            var _this = this;

            var idx = this.allWrites_.findIndex(function (s) {
                return s.writeId === writeId;
            });
            util_2.assert(idx >= 0, 'removeWrite called with nonexistent writeId.');
            var writeToRemove = this.allWrites_[idx];
            this.allWrites_.splice(idx, 1);
            var removedWriteWasVisible = writeToRemove.visible;
            var removedWriteOverlapsWithOtherWrites = false;
            var i = this.allWrites_.length - 1;

            while (removedWriteWasVisible && i >= 0) {
                var currentWrite = this.allWrites_[i];

                if (currentWrite.visible) {
                    if (i >= idx && this.recordContainsPath_(currentWrite, writeToRemove.path)) {
                        removedWriteWasVisible = false;
                    } else if (writeToRemove.path.contains(currentWrite.path)) {
                        removedWriteOverlapsWithOtherWrites = true;
                    }
                }

                i--;
            }

            if (!removedWriteWasVisible) {
                return false;
            } else if (removedWriteOverlapsWithOtherWrites) {
                this.resetTree_();
                return true;
            } else {
                if (writeToRemove.snap) {
                    this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);
                } else {
                    var children = writeToRemove.children;
                    util_1.forEach(children, function (childName) {
                        _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));
                    });
                }

                return true;
            }
        };

        WriteTree.prototype.getCompleteWriteData = function (path) {
            return this.visibleWrites_.getCompleteNode(path);
        };

        WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {
            if (!writeIdsToExclude && !includeHiddenWrites) {
                var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);

                if (shadowingNode != null) {
                    return shadowingNode;
                } else {
                    var subMerge = this.visibleWrites_.childCompoundWrite(treePath);

                    if (subMerge.isEmpty()) {
                        return completeServerCache;
                    } else if (completeServerCache == null && !subMerge.hasCompleteWrite(Path_1.Path.Empty)) {
                        return null;
                    } else {
                        var layeredCache = completeServerCache || ChildrenNode_1.ChildrenNode.EMPTY_NODE;
                        return subMerge.apply(layeredCache);
                    }
                }
            } else {
                var merge = this.visibleWrites_.childCompoundWrite(treePath);

                if (!includeHiddenWrites && merge.isEmpty()) {
                    return completeServerCache;
                } else {
                    if (!includeHiddenWrites && completeServerCache == null && !merge.hasCompleteWrite(Path_1.Path.Empty)) {
                        return null;
                    } else {
                        var filter = function filter(write) {
                            return (write.visible || includeHiddenWrites) && (!writeIdsToExclude || !~writeIdsToExclude.indexOf(write.writeId)) && (write.path.contains(treePath) || treePath.contains(write.path));
                        };

                        var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);
                        var layeredCache = completeServerCache || ChildrenNode_1.ChildrenNode.EMPTY_NODE;
                        return mergeAtPath.apply(layeredCache);
                    }
                }
            }
        };

        WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {
            var completeChildren = ChildrenNode_1.ChildrenNode.EMPTY_NODE;
            var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);

            if (topLevelSet) {
                if (!topLevelSet.isLeafNode()) {
                    topLevelSet.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (childName, childSnap) {
                        completeChildren = completeChildren.updateImmediateChild(childName, childSnap);
                    });
                }

                return completeChildren;
            } else if (completeServerChildren) {
                var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);
                completeServerChildren.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (childName, childNode) {
                    var node = merge_1.childCompoundWrite(new Path_1.Path(childName)).apply(childNode);
                    completeChildren = completeChildren.updateImmediateChild(childName, node);
                });
                merge_1.getCompleteChildren().forEach(function (namedNode) {
                    completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
                });
                return completeChildren;
            } else {
                var merge = this.visibleWrites_.childCompoundWrite(treePath);
                merge.getCompleteChildren().forEach(function (namedNode) {
                    completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
                });
                return completeChildren;
            }
        };

        WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {
            util_2.assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');
            var path = treePath.child(childPath);

            if (this.visibleWrites_.hasCompleteWrite(path)) {
                return null;
            } else {
                var childMerge = this.visibleWrites_.childCompoundWrite(path);

                if (childMerge.isEmpty()) {
                    return existingServerSnap.getChild(childPath);
                } else {
                    return childMerge.apply(existingServerSnap.getChild(childPath));
                }
            }
        };

        WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {
            var path = treePath.child(childKey);
            var shadowingNode = this.visibleWrites_.getCompleteNode(path);

            if (shadowingNode != null) {
                return shadowingNode;
            } else {
                if (existingServerSnap.isCompleteForChild(childKey)) {
                    var childMerge = this.visibleWrites_.childCompoundWrite(path);
                    return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));
                } else {
                    return null;
                }
            }
        };

        WriteTree.prototype.shadowingWrite = function (path) {
            return this.visibleWrites_.getCompleteNode(path);
        };

        WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {
            var toIterate;
            var merge = this.visibleWrites_.childCompoundWrite(treePath);
            var shadowingNode = merge.getCompleteNode(Path_1.Path.Empty);

            if (shadowingNode != null) {
                toIterate = shadowingNode;
            } else if (completeServerData != null) {
                toIterate = merge.apply(completeServerData);
            } else {
                return [];
            }

            toIterate = toIterate.withIndex(index);

            if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {
                var nodes = [];
                var cmp = index.getCompare();
                var iter = reverse ? toIterate.getReverseIteratorFrom(startPost, index) : toIterate.getIteratorFrom(startPost, index);
                var next = iter.getNext();

                while (next && nodes.length < count) {
                    if (cmp(next, startPost) !== 0) {
                        nodes.push(next);
                    }

                    next = iter.getNext();
                }

                return nodes;
            } else {
                return [];
            }
        };

        WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {
            if (writeRecord.snap) {
                return writeRecord.path.contains(path);
            } else {
                return !!util_1.findKey(writeRecord.children, function (childSnap, childName) {
                    return writeRecord.path.child(childName).contains(path);
                });
            }
        };

        WriteTree.prototype.resetTree_ = function () {
            this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path_1.Path.Empty);

            if (this.allWrites_.length > 0) {
                this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;
            } else {
                this.lastWriteId_ = -1;
            }
        };

        WriteTree.DefaultFilter_ = function (write) {
            return write.visible;
        };

        WriteTree.layerTree_ = function (writes, filter, treeRoot) {
            var compoundWrite = CompoundWrite_1.CompoundWrite.Empty;

            for (var i = 0; i < writes.length; ++i) {
                var write = writes[i];

                if (filter(write)) {
                    var writePath = write.path;
                    var relativePath = void 0;

                    if (write.snap) {
                        if (treeRoot.contains(writePath)) {
                            relativePath = Path_1.Path.relativePath(treeRoot, writePath);
                            compoundWrite = compoundWrite.addWrite(relativePath, write.snap);
                        } else if (writePath.contains(treeRoot)) {
                            relativePath = Path_1.Path.relativePath(writePath, treeRoot);
                            compoundWrite = compoundWrite.addWrite(Path_1.Path.Empty, write.snap.getChild(relativePath));
                        } else {}
                    } else if (write.children) {
                        if (treeRoot.contains(writePath)) {
                            relativePath = Path_1.Path.relativePath(treeRoot, writePath);
                            compoundWrite = compoundWrite.addWrites(relativePath, write.children);
                        } else if (writePath.contains(treeRoot)) {
                            relativePath = Path_1.Path.relativePath(writePath, treeRoot);

                            if (relativePath.isEmpty()) {
                                compoundWrite = compoundWrite.addWrites(Path_1.Path.Empty, write.children);
                            } else {
                                var child = util_1.safeGet(write.children, relativePath.getFront());

                                if (child) {
                                    var deepNode = child.getChild(relativePath.popFront());
                                    compoundWrite = compoundWrite.addWrite(Path_1.Path.Empty, deepNode);
                                }
                            }
                        } else {}
                    } else {
                        throw util_2.assertionError('WriteRecord should have .snap or .children');
                    }
                }
            }

            return compoundWrite;
        };

        return WriteTree;
    }();

    exports.WriteTree = WriteTree;

    var WriteTreeRef = function () {
        function WriteTreeRef(path, writeTree) {
            this.treePath_ = path;
            this.writeTree_ = writeTree;
        }

        WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {
            return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);
        };

        WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {
            return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);
        };

        WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {
            return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);
        };

        WriteTreeRef.prototype.shadowingWrite = function (path) {
            return this.writeTree_.shadowingWrite(this.treePath_.child(path));
        };

        WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {
            return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);
        };

        WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {
            return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);
        };

        WriteTreeRef.prototype.child = function (childName) {
            return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);
        };

        return WriteTreeRef;
    }();

    exports.WriteTreeRef = WriteTreeRef;
},585,[508,538,586,550,555],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\WriteTree.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var ImmutableTree_1 = _require(_dependencyMap[0], "./util/ImmutableTree");

    var Path_1 = _require(_dependencyMap[1], "./util/Path");

    var util_1 = _require(_dependencyMap[2], "@firebase/util");

    var Node_1 = _require(_dependencyMap[3], "./snap/Node");

    var PriorityIndex_1 = _require(_dependencyMap[4], "./snap/indexes/PriorityIndex");

    var util_2 = _require(_dependencyMap[2], "@firebase/util");

    var CompoundWrite = function () {
        function CompoundWrite(writeTree_) {
            this.writeTree_ = writeTree_;
        }

        CompoundWrite.prototype.addWrite = function (path, node) {
            if (path.isEmpty()) {
                return new CompoundWrite(new ImmutableTree_1.ImmutableTree(node));
            } else {
                var rootmost = this.writeTree_.findRootMostValueAndPath(path);

                if (rootmost != null) {
                    var rootMostPath = rootmost.path;
                    var value = rootmost.value;
                    var relativePath = Path_1.Path.relativePath(rootMostPath, path);
                    value = value.updateChild(relativePath, node);
                    return new CompoundWrite(this.writeTree_.set(rootMostPath, value));
                } else {
                    var subtree = new ImmutableTree_1.ImmutableTree(node);
                    var newWriteTree = this.writeTree_.setTree(path, subtree);
                    return new CompoundWrite(newWriteTree);
                }
            }
        };

        CompoundWrite.prototype.addWrites = function (path, updates) {
            var newWrite = this;
            util_1.forEach(updates, function (childKey, node) {
                newWrite = newWrite.addWrite(path.child(childKey), node);
            });
            return newWrite;
        };

        CompoundWrite.prototype.removeWrite = function (path) {
            if (path.isEmpty()) {
                return CompoundWrite.Empty;
            } else {
                var newWriteTree = this.writeTree_.setTree(path, ImmutableTree_1.ImmutableTree.Empty);
                return new CompoundWrite(newWriteTree);
            }
        };

        CompoundWrite.prototype.hasCompleteWrite = function (path) {
            return this.getCompleteNode(path) != null;
        };

        CompoundWrite.prototype.getCompleteNode = function (path) {
            var rootmost = this.writeTree_.findRootMostValueAndPath(path);

            if (rootmost != null) {
                return this.writeTree_.get(rootmost.path).getChild(Path_1.Path.relativePath(rootmost.path, path));
            } else {
                return null;
            }
        };

        CompoundWrite.prototype.getCompleteChildren = function () {
            var children = [];
            var node = this.writeTree_.value;

            if (node != null) {
                if (!node.isLeafNode()) {
                    node.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (childName, childNode) {
                        children.push(new Node_1.NamedNode(childName, childNode));
                    });
                }
            } else {
                this.writeTree_.children.inorderTraversal(function (childName, childTree) {
                    if (childTree.value != null) {
                        children.push(new Node_1.NamedNode(childName, childTree.value));
                    }
                });
            }

            return children;
        };

        CompoundWrite.prototype.childCompoundWrite = function (path) {
            if (path.isEmpty()) {
                return this;
            } else {
                var shadowingNode = this.getCompleteNode(path);

                if (shadowingNode != null) {
                    return new CompoundWrite(new ImmutableTree_1.ImmutableTree(shadowingNode));
                } else {
                    return new CompoundWrite(this.writeTree_.subtree(path));
                }
            }
        };

        CompoundWrite.prototype.isEmpty = function () {
            return this.writeTree_.isEmpty();
        };

        CompoundWrite.prototype.apply = function (node) {
            return CompoundWrite.applySubtreeWrite_(Path_1.Path.Empty, this.writeTree_, node);
        };

        CompoundWrite.Empty = new CompoundWrite(new ImmutableTree_1.ImmutableTree(null));

        CompoundWrite.applySubtreeWrite_ = function (relativePath, writeTree, node) {
            if (writeTree.value != null) {
                return node.updateChild(relativePath, writeTree.value);
            } else {
                var priorityWrite_1 = null;
                writeTree.children.inorderTraversal(function (childKey, childTree) {
                    if (childKey === '.priority') {
                        util_2.assert(childTree.value !== null, 'Priority writes must always be leaf nodes');
                        priorityWrite_1 = childTree.value;
                    } else {
                        node = CompoundWrite.applySubtreeWrite_(relativePath.child(childKey), childTree, node);
                    }
                });

                if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {
                    node = node.updateChild(relativePath.child('.priority'), priorityWrite_1);
                }

                return node;
            }
        };

        return CompoundWrite;
    }();

    exports.CompoundWrite = CompoundWrite;
},586,[571,538,508,549,550],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\CompoundWrite.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var ChildrenNode_1 = _require(_dependencyMap[0], "./snap/ChildrenNode");

    var SnapshotHolder = function () {
        function SnapshotHolder() {
            this.rootNode_ = ChildrenNode_1.ChildrenNode.EMPTY_NODE;
        }

        SnapshotHolder.prototype.getNode = function (path) {
            return this.rootNode_.getChild(path);
        };

        SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {
            this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);
        };

        return SnapshotHolder;
    }();

    exports.SnapshotHolder = SnapshotHolder;
},587,[555],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\SnapshotHolder.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "./util/util");

    var AuthTokenProvider = function () {
        function AuthTokenProvider(app_) {
            this.app_ = app_;
        }

        AuthTokenProvider.prototype.getToken = function (forceRefresh) {
            return this.app_['INTERNAL']['getToken'](forceRefresh).then(null, function (error) {
                if (error && error.code === 'auth/token-not-initialized') {
                    util_1.log('Got auth/token-not-initialized error.  Treating as null token.');
                    return null;
                } else {
                    return Promise.reject(error);
                }
            });
        };

        AuthTokenProvider.prototype.addTokenChangeListener = function (listener) {
            this.app_['INTERNAL']['addAuthTokenListener'](listener);
        };

        AuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {
            this.app_['INTERNAL']['removeAuthTokenListener'](listener);
        };

        AuthTokenProvider.prototype.notifyForInvalidToken = function () {
            var errorMessage = 'Provided authentication credentials for the app named "' + this.app_.name + '" are invalid. This usually indicates your app was not ' + 'initialized correctly. ';

            if ('credential' in this.app_.options) {
                errorMessage += 'Make sure the "credential" property provided to initializeApp() ' + 'is authorized to access the specified "databaseURL" and is from the correct ' + 'project.';
            } else if ('serviceAccount' in this.app_.options) {
                errorMessage += 'Make sure the "serviceAccount" property provided to initializeApp() ' + 'is authorized to access the specified "databaseURL" and is from the correct ' + 'project.';
            } else {
                errorMessage += 'Make sure the "apiKey" and "databaseURL" properties provided to ' + 'initializeApp() match the values provided for your app at ' + 'https://console.firebase.google.com/.';
            }

            util_1.warn(errorMessage);
        };

        return AuthTokenProvider;
    }();

    exports.AuthTokenProvider = AuthTokenProvider;
},588,[531],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\AuthTokenProvider.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var StatsCollection_1 = _require(_dependencyMap[0], "./StatsCollection");

    var StatsManager = function () {
        function StatsManager() {}

        StatsManager.getCollection = function (repoInfo) {
            var hashString = repoInfo.toString();

            if (!this.collections_[hashString]) {
                this.collections_[hashString] = new StatsCollection_1.StatsCollection();
            }

            return this.collections_[hashString];
        };

        StatsManager.getOrCreateReporter = function (repoInfo, creatorFunction) {
            var hashString = repoInfo.toString();

            if (!this.reporters_[hashString]) {
                this.reporters_[hashString] = creatorFunction();
            }

            return this.reporters_[hashString];
        };

        StatsManager.collections_ = {};
        StatsManager.reporters_ = {};
        return StatsManager;
    }();

    exports.StatsManager = StatsManager;
},589,[590],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\stats\\StatsManager.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "@firebase/util");

    var util_2 = _require(_dependencyMap[0], "@firebase/util");

    var StatsCollection = function () {
        function StatsCollection() {
            this.counters_ = {};
        }

        StatsCollection.prototype.incrementCounter = function (name, amount) {
            if (amount === void 0) {
                amount = 1;
            }

            if (!util_2.contains(this.counters_, name)) this.counters_[name] = 0;
            this.counters_[name] += amount;
        };

        StatsCollection.prototype.get = function () {
            return util_1.deepCopy(this.counters_);
        };

        return StatsCollection;
    }();

    exports.StatsCollection = StatsCollection;
},590,[508],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\stats\\StatsCollection.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "@firebase/util");

    var util_2 = _require(_dependencyMap[1], "../util/util");

    var StatsListener_1 = _require(_dependencyMap[2], "./StatsListener");

    var FIRST_STATS_MIN_TIME = 10 * 1000;
    var FIRST_STATS_MAX_TIME = 30 * 1000;
    var REPORT_STATS_INTERVAL = 5 * 60 * 1000;

    var StatsReporter = function () {
        function StatsReporter(collection, server_) {
            this.server_ = server_;
            this.statsToReport_ = {};
            this.statsListener_ = new StatsListener_1.StatsListener(collection);
            var timeout = FIRST_STATS_MIN_TIME + (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();
            util_2.setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));
        }

        StatsReporter.prototype.includeStat = function (stat) {
            this.statsToReport_[stat] = true;
        };

        StatsReporter.prototype.reportStats_ = function () {
            var _this = this;

            var stats = this.statsListener_.get();
            var reportedStats = {};
            var haveStatsToReport = false;
            util_1.forEach(stats, function (stat, value) {
                if (value > 0 && util_1.contains(_this.statsToReport_, stat)) {
                    reportedStats[stat] = value;
                    haveStatsToReport = true;
                }
            });

            if (haveStatsToReport) {
                this.server_.reportStats(reportedStats);
            }

            util_2.setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));
        };

        return StatsReporter;
    }();

    exports.StatsReporter = StatsReporter;
},591,[508,531,592],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\stats\\StatsReporter.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "@firebase/util");

    var StatsListener = function () {
        function StatsListener(collection_) {
            this.collection_ = collection_;
            this.last_ = null;
        }

        StatsListener.prototype.get = function () {
            var newStats = this.collection_.get();
            var delta = util_1.clone(newStats);

            if (this.last_) {
                util_1.forEach(this.last_, function (stat, value) {
                    delta[stat] = delta[stat] - value;
                });
            }

            this.last_ = newStats;
            return delta;
        };

        return StatsListener;
    }();

    exports.StatsListener = StatsListener;
},592,[508],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\stats\\StatsListener.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "../util/util");

    var EventQueue = function () {
        function EventQueue() {
            this.eventLists_ = [];
            this.recursionDepth_ = 0;
        }

        EventQueue.prototype.queueEvents = function (eventDataList) {
            var currList = null;

            for (var i = 0; i < eventDataList.length; i++) {
                var eventData = eventDataList[i];
                var eventPath = eventData.getPath();

                if (currList !== null && !eventPath.equals(currList.getPath())) {
                    this.eventLists_.push(currList);
                    currList = null;
                }

                if (currList === null) {
                    currList = new EventList(eventPath);
                }

                currList.add(eventData);
            }

            if (currList) {
                this.eventLists_.push(currList);
            }
        };

        EventQueue.prototype.raiseEventsAtPath = function (path, eventDataList) {
            this.queueEvents(eventDataList);
            this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {
                return eventPath.equals(path);
            });
        };

        EventQueue.prototype.raiseEventsForChangedPath = function (changedPath, eventDataList) {
            this.queueEvents(eventDataList);
            this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {
                return eventPath.contains(changedPath) || changedPath.contains(eventPath);
            });
        };

        EventQueue.prototype.raiseQueuedEventsMatchingPredicate_ = function (predicate) {
            this.recursionDepth_++;
            var sentAll = true;

            for (var i = 0; i < this.eventLists_.length; i++) {
                var eventList = this.eventLists_[i];

                if (eventList) {
                    var eventPath = eventList.getPath();

                    if (predicate(eventPath)) {
                        this.eventLists_[i].raise();
                        this.eventLists_[i] = null;
                    } else {
                        sentAll = false;
                    }
                }
            }

            if (sentAll) {
                this.eventLists_ = [];
            }

            this.recursionDepth_--;
        };

        return EventQueue;
    }();

    exports.EventQueue = EventQueue;

    var EventList = function () {
        function EventList(path_) {
            this.path_ = path_;
            this.events_ = [];
        }

        EventList.prototype.add = function (eventData) {
            this.events_.push(eventData);
        };

        EventList.prototype.raise = function () {
            for (var i = 0; i < this.events_.length; i++) {
                var eventData = this.events_[i];

                if (eventData !== null) {
                    this.events_[i] = null;
                    var eventFn = eventData.getEventRunner();

                    if (util_1.logger) {
                        util_1.log('event: ' + eventData.toString());
                    }

                    util_1.exceptionGuard(eventFn);
                }
            }
        };

        EventList.prototype.getPath = function () {
            return this.path_;
        };

        return EventList;
    }();

    exports.EventList = EventList;
},593,[531],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\view\\EventQueue.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var tslib_1 = _require(_dependencyMap[0], "tslib");

    var app_1 = _require(_dependencyMap[1], "@firebase/app");

    var util_1 = _require(_dependencyMap[2], "@firebase/util");

    var util_2 = _require(_dependencyMap[2], "@firebase/util");

    var util_3 = _require(_dependencyMap[2], "@firebase/util");

    var util_4 = _require(_dependencyMap[3], "./util/util");

    var Path_1 = _require(_dependencyMap[4], "./util/Path");

    var VisibilityMonitor_1 = _require(_dependencyMap[5], "./util/VisibilityMonitor");

    var OnlineMonitor_1 = _require(_dependencyMap[6], "./util/OnlineMonitor");

    var util_5 = _require(_dependencyMap[2], "@firebase/util");

    var Connection_1 = _require(_dependencyMap[7], "../realtime/Connection");

    var util_6 = _require(_dependencyMap[2], "@firebase/util");

    var util_7 = _require(_dependencyMap[2], "@firebase/util");

    var ServerActions_1 = _require(_dependencyMap[8], "./ServerActions");

    var RECONNECT_MIN_DELAY = 1000;
    var RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000;
    var RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000;
    var RECONNECT_DELAY_MULTIPLIER = 1.3;
    var RECONNECT_DELAY_RESET_TIMEOUT = 30000;
    var SERVER_KILL_INTERRUPT_REASON = 'server_kill';
    var INVALID_AUTH_TOKEN_THRESHOLD = 3;

    var PersistentConnection = function (_super) {
        tslib_1.__extends(PersistentConnection, _super);

        function PersistentConnection(repoInfo_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, authOverride_) {
            var _this = _super.call(this) || this;

            _this.repoInfo_ = repoInfo_;
            _this.onDataUpdate_ = onDataUpdate_;
            _this.onConnectStatus_ = onConnectStatus_;
            _this.onServerInfoUpdate_ = onServerInfoUpdate_;
            _this.authTokenProvider_ = authTokenProvider_;
            _this.authOverride_ = authOverride_;
            _this.id = PersistentConnection.nextPersistentConnectionId_++;
            _this.log_ = util_4.logWrapper('p:' + _this.id + ':');
            _this.interruptReasons_ = {};
            _this.listens_ = {};
            _this.outstandingPuts_ = [];
            _this.outstandingPutCount_ = 0;
            _this.onDisconnectRequestQueue_ = [];
            _this.connected_ = false;
            _this.reconnectDelay_ = RECONNECT_MIN_DELAY;
            _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;
            _this.securityDebugCallback_ = null;
            _this.lastSessionId = null;
            _this.establishConnectionTimer_ = null;
            _this.visible_ = false;
            _this.requestCBHash_ = {};
            _this.requestNumber_ = 0;
            _this.realtime_ = null;
            _this.authToken_ = null;
            _this.forceTokenRefresh_ = false;
            _this.invalidAuthTokenCount_ = 0;
            _this.firstConnection_ = true;
            _this.lastConnectionAttemptTime_ = null;
            _this.lastConnectionEstablishedTime_ = null;

            if (authOverride_ && !util_7.isNodeSdk()) {
                throw new Error('Auth override specified in options, but not supported on non Node.js platforms');
            }

            _this.scheduleConnect_(0);

            VisibilityMonitor_1.VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);

            if (repoInfo_.host.indexOf('fblocal') === -1) {
                OnlineMonitor_1.OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);
            }

            return _this;
        }

        PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {
            var curReqNum = ++this.requestNumber_;
            var msg = {
                r: curReqNum,
                a: action,
                b: body
            };
            this.log_(util_2.stringify(msg));
            util_3.assert(this.connected_, "sendRequest call when we're not connected not allowed.");
            this.realtime_.sendRequest(msg);

            if (onResponse) {
                this.requestCBHash_[curReqNum] = onResponse;
            }
        };

        PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {
            var queryId = query.queryIdentifier();
            var pathString = query.path.toString();
            this.log_('Listen called for ' + pathString + ' ' + queryId);
            this.listens_[pathString] = this.listens_[pathString] || {};
            util_3.assert(query.getQueryParams().isDefault() || !query.getQueryParams().loadsAllData(), 'listen() called for non-default but complete query');
            util_3.assert(!this.listens_[pathString][queryId], 'listen() called twice for same path/queryId.');
            var listenSpec = {
                onComplete: onComplete,
                hashFn: currentHashFn,
                query: query,
                tag: tag
            };
            this.listens_[pathString][queryId] = listenSpec;

            if (this.connected_) {
                this.sendListen_(listenSpec);
            }
        };

        PersistentConnection.prototype.sendListen_ = function (listenSpec) {
            var _this = this;

            var query = listenSpec.query;
            var pathString = query.path.toString();
            var queryId = query.queryIdentifier();
            this.log_('Listen on ' + pathString + ' for ' + queryId);
            var req = {
                p: pathString
            };
            var action = 'q';

            if (listenSpec.tag) {
                req['q'] = query.queryObject();
                req['t'] = listenSpec.tag;
            }

            req['h'] = listenSpec.hashFn();
            this.sendRequest(action, req, function (message) {
                var payload = message['d'];
                var status = message['s'];
                PersistentConnection.warnOnListenWarnings_(payload, query);
                var currentListenSpec = _this.listens_[pathString] && _this.listens_[pathString][queryId];

                if (currentListenSpec === listenSpec) {
                    _this.log_('listen response', message);

                    if (status !== 'ok') {
                        _this.removeListen_(pathString, queryId);
                    }

                    if (listenSpec.onComplete) {
                        listenSpec.onComplete(status, payload);
                    }
                }
            });
        };

        PersistentConnection.warnOnListenWarnings_ = function (payload, query) {
            if (payload && typeof payload === 'object' && util_1.contains(payload, 'w')) {
                var warnings = util_1.safeGet(payload, 'w');

                if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {
                    var indexSpec = '".indexOn": "' + query.getQueryParams().getIndex().toString() + '"';
                    var indexPath = query.path.toString();
                    util_4.warn("Using an unspecified index. Your data will be downloaded and " + ("filtered on the client. Consider adding " + indexSpec + " at ") + (indexPath + " to your security rules for better performance."));
                }
            }
        };

        PersistentConnection.prototype.refreshAuthToken = function (token) {
            this.authToken_ = token;
            this.log_('Auth token refreshed');

            if (this.authToken_) {
                this.tryAuth();
            } else {
                if (this.connected_) {
                    this.sendRequest('unauth', {}, function () {});
                }
            }

            this.reduceReconnectDelayIfAdminCredential_(token);
        };

        PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {
            var isFirebaseSecret = credential && credential.length === 40;

            if (isFirebaseSecret || util_5.isAdmin(credential)) {
                this.log_('Admin auth credential detected.  Reducing max reconnect time.');
                this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
            }
        };

        PersistentConnection.prototype.tryAuth = function () {
            var _this = this;

            if (this.connected_ && this.authToken_) {
                var token_1 = this.authToken_;
                var authMethod = util_5.isValidFormat(token_1) ? 'auth' : 'gauth';
                var requestData = {
                    cred: token_1
                };

                if (this.authOverride_ === null) {
                    requestData['noauth'] = true;
                } else if (typeof this.authOverride_ === 'object') {
                    requestData['authvar'] = this.authOverride_;
                }

                this.sendRequest(authMethod, requestData, function (res) {
                    var status = res['s'];
                    var data = res['d'] || 'error';

                    if (_this.authToken_ === token_1) {
                        if (status === 'ok') {
                            _this.invalidAuthTokenCount_ = 0;
                        } else {
                            _this.onAuthRevoked_(status, data);
                        }
                    }
                });
            }
        };

        PersistentConnection.prototype.unlisten = function (query, tag) {
            var pathString = query.path.toString();
            var queryId = query.queryIdentifier();
            this.log_('Unlisten called for ' + pathString + ' ' + queryId);
            util_3.assert(query.getQueryParams().isDefault() || !query.getQueryParams().loadsAllData(), 'unlisten() called for non-default but complete query');
            var listen = this.removeListen_(pathString, queryId);

            if (listen && this.connected_) {
                this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);
            }
        };

        PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {
            this.log_('Unlisten on ' + pathString + ' for ' + queryId);
            var req = {
                p: pathString
            };
            var action = 'n';

            if (tag) {
                req['q'] = queryObj;
                req['t'] = tag;
            }

            this.sendRequest(action, req);
        };

        PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {
            if (this.connected_) {
                this.sendOnDisconnect_('o', pathString, data, onComplete);
            } else {
                this.onDisconnectRequestQueue_.push({
                    pathString: pathString,
                    action: 'o',
                    data: data,
                    onComplete: onComplete
                });
            }
        };

        PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {
            if (this.connected_) {
                this.sendOnDisconnect_('om', pathString, data, onComplete);
            } else {
                this.onDisconnectRequestQueue_.push({
                    pathString: pathString,
                    action: 'om',
                    data: data,
                    onComplete: onComplete
                });
            }
        };

        PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {
            if (this.connected_) {
                this.sendOnDisconnect_('oc', pathString, null, onComplete);
            } else {
                this.onDisconnectRequestQueue_.push({
                    pathString: pathString,
                    action: 'oc',
                    data: null,
                    onComplete: onComplete
                });
            }
        };

        PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {
            var request = {
                p: pathString,
                d: data
            };
            this.log_('onDisconnect ' + action, request);
            this.sendRequest(action, request, function (response) {
                if (onComplete) {
                    setTimeout(function () {
                        onComplete(response['s'], response['d']);
                    }, Math.floor(0));
                }
            });
        };

        PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {
            this.putInternal('p', pathString, data, onComplete, hash);
        };

        PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {
            this.putInternal('m', pathString, data, onComplete, hash);
        };

        PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {
            var request = {
                p: pathString,
                d: data
            };
            if (hash !== undefined) request['h'] = hash;
            this.outstandingPuts_.push({
                action: action,
                request: request,
                onComplete: onComplete
            });
            this.outstandingPutCount_++;
            var index = this.outstandingPuts_.length - 1;

            if (this.connected_) {
                this.sendPut_(index);
            } else {
                this.log_('Buffering put: ' + pathString);
            }
        };

        PersistentConnection.prototype.sendPut_ = function (index) {
            var _this = this;

            var action = this.outstandingPuts_[index].action;
            var request = this.outstandingPuts_[index].request;
            var onComplete = this.outstandingPuts_[index].onComplete;
            this.outstandingPuts_[index].queued = this.connected_;
            this.sendRequest(action, request, function (message) {
                _this.log_(action + ' response', message);

                delete _this.outstandingPuts_[index];
                _this.outstandingPutCount_--;

                if (_this.outstandingPutCount_ === 0) {
                    _this.outstandingPuts_ = [];
                }

                if (onComplete) onComplete(message['s'], message['d']);
            });
        };

        PersistentConnection.prototype.reportStats = function (stats) {
            var _this = this;

            if (this.connected_) {
                var request = {
                    c: stats
                };
                this.log_('reportStats', request);
                this.sendRequest('s', request, function (result) {
                    var status = result['s'];

                    if (status !== 'ok') {
                        var errorReason = result['d'];

                        _this.log_('reportStats', 'Error sending stats: ' + errorReason);
                    }
                });
            }
        };

        PersistentConnection.prototype.onDataMessage_ = function (message) {
            if ('r' in message) {
                this.log_('from server: ' + util_2.stringify(message));
                var reqNum = message['r'];
                var onResponse = this.requestCBHash_[reqNum];

                if (onResponse) {
                    delete this.requestCBHash_[reqNum];
                    onResponse(message['b']);
                }
            } else if ('error' in message) {
                throw 'A server-side error has occurred: ' + message['error'];
            } else if ('a' in message) {
                this.onDataPush_(message['a'], message['b']);
            }
        };

        PersistentConnection.prototype.onDataPush_ = function (action, body) {
            this.log_('handleServerMessage', action, body);
            if (action === 'd') this.onDataUpdate_(body['p'], body['d'], false, body['t']);else if (action === 'm') this.onDataUpdate_(body['p'], body['d'], true, body['t']);else if (action === 'c') this.onListenRevoked_(body['p'], body['q']);else if (action === 'ac') this.onAuthRevoked_(body['s'], body['d']);else if (action === 'sd') this.onSecurityDebugPacket_(body);else util_4.error('Unrecognized action received from server: ' + util_2.stringify(action) + '\nAre you using the latest client?');
        };

        PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {
            this.log_('connection ready');
            this.connected_ = true;
            this.lastConnectionEstablishedTime_ = new Date().getTime();
            this.handleTimestamp_(timestamp);
            this.lastSessionId = sessionId;

            if (this.firstConnection_) {
                this.sendConnectStats_();
            }

            this.restoreState_();
            this.firstConnection_ = false;
            this.onConnectStatus_(true);
        };

        PersistentConnection.prototype.scheduleConnect_ = function (timeout) {
            var _this = this;

            util_3.assert(!this.realtime_, "Scheduling a connect when we're already connected/ing?");

            if (this.establishConnectionTimer_) {
                clearTimeout(this.establishConnectionTimer_);
            }

            this.establishConnectionTimer_ = setTimeout(function () {
                _this.establishConnectionTimer_ = null;

                _this.establishConnection_();
            }, Math.floor(timeout));
        };

        PersistentConnection.prototype.onVisible_ = function (visible) {
            if (visible && !this.visible_ && this.reconnectDelay_ === this.maxReconnectDelay_) {
                this.log_('Window became visible.  Reducing delay.');
                this.reconnectDelay_ = RECONNECT_MIN_DELAY;

                if (!this.realtime_) {
                    this.scheduleConnect_(0);
                }
            }

            this.visible_ = visible;
        };

        PersistentConnection.prototype.onOnline_ = function (online) {
            if (online) {
                this.log_('Browser went online.');
                this.reconnectDelay_ = RECONNECT_MIN_DELAY;

                if (!this.realtime_) {
                    this.scheduleConnect_(0);
                }
            } else {
                this.log_('Browser went offline.  Killing connection.');

                if (this.realtime_) {
                    this.realtime_.close();
                }
            }
        };

        PersistentConnection.prototype.onRealtimeDisconnect_ = function () {
            this.log_('data client disconnected');
            this.connected_ = false;
            this.realtime_ = null;
            this.cancelSentTransactions_();
            this.requestCBHash_ = {};

            if (this.shouldReconnect_()) {
                if (!this.visible_) {
                    this.log_("Window isn't visible.  Delaying reconnect.");
                    this.reconnectDelay_ = this.maxReconnectDelay_;
                    this.lastConnectionAttemptTime_ = new Date().getTime();
                } else if (this.lastConnectionEstablishedTime_) {
                    var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;
                    if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) this.reconnectDelay_ = RECONNECT_MIN_DELAY;
                    this.lastConnectionEstablishedTime_ = null;
                }

                var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;
                var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);
                reconnectDelay = Math.random() * reconnectDelay;
                this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');
                this.scheduleConnect_(reconnectDelay);
                this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);
            }

            this.onConnectStatus_(false);
        };

        PersistentConnection.prototype.establishConnection_ = function () {
            if (this.shouldReconnect_()) {
                this.log_('Making a connection attempt');
                this.lastConnectionAttemptTime_ = new Date().getTime();
                this.lastConnectionEstablishedTime_ = null;
                var onDataMessage_1 = this.onDataMessage_.bind(this);
                var onReady_1 = this.onReady_.bind(this);
                var onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);
                var connId_1 = this.id + ':' + PersistentConnection.nextConnectionId_++;
                var self_1 = this;
                var lastSessionId_1 = this.lastSessionId;
                var canceled_1 = false;
                var connection_1 = null;

                var closeFn_1 = function closeFn_1() {
                    if (connection_1) {
                        connection_1.close();
                    } else {
                        canceled_1 = true;
                        onDisconnect_1();
                    }
                };

                var sendRequestFn = function sendRequestFn(msg) {
                    util_3.assert(connection_1, "sendRequest call when we're not connected not allowed.");
                    connection_1.sendRequest(msg);
                };

                this.realtime_ = {
                    close: closeFn_1,
                    sendRequest: sendRequestFn
                };
                var forceRefresh = this.forceTokenRefresh_;
                this.forceTokenRefresh_ = false;
                this.authTokenProvider_.getToken(forceRefresh).then(function (result) {
                    if (!canceled_1) {
                        util_4.log('getToken() completed. Creating connection.');
                        self_1.authToken_ = result && result.accessToken;
                        connection_1 = new Connection_1.Connection(connId_1, self_1.repoInfo_, onDataMessage_1, onReady_1, onDisconnect_1, function (reason) {
                            util_4.warn(reason + ' (' + self_1.repoInfo_.toString() + ')');
                            self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);
                        }, lastSessionId_1);
                    } else {
                        util_4.log('getToken() completed but was canceled');
                    }
                }).then(null, function (error) {
                    self_1.log_('Failed to get token: ' + error);

                    if (!canceled_1) {
                        if (util_6.CONSTANTS.NODE_ADMIN) {
                            util_4.warn(error);
                        }

                        closeFn_1();
                    }
                });
            }
        };

        PersistentConnection.prototype.interrupt = function (reason) {
            util_4.log('Interrupting connection for reason: ' + reason);
            this.interruptReasons_[reason] = true;

            if (this.realtime_) {
                this.realtime_.close();
            } else {
                if (this.establishConnectionTimer_) {
                    clearTimeout(this.establishConnectionTimer_);
                    this.establishConnectionTimer_ = null;
                }

                if (this.connected_) {
                    this.onRealtimeDisconnect_();
                }
            }
        };

        PersistentConnection.prototype.resume = function (reason) {
            util_4.log('Resuming connection for reason: ' + reason);
            delete this.interruptReasons_[reason];

            if (util_1.isEmpty(this.interruptReasons_)) {
                this.reconnectDelay_ = RECONNECT_MIN_DELAY;

                if (!this.realtime_) {
                    this.scheduleConnect_(0);
                }
            }
        };

        PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {
            var delta = timestamp - new Date().getTime();
            this.onServerInfoUpdate_({
                serverTimeOffset: delta
            });
        };

        PersistentConnection.prototype.cancelSentTransactions_ = function () {
            for (var i = 0; i < this.outstandingPuts_.length; i++) {
                var put = this.outstandingPuts_[i];

                if (put && 'h' in put.request && put.queued) {
                    if (put.onComplete) put.onComplete('disconnect');
                    delete this.outstandingPuts_[i];
                    this.outstandingPutCount_--;
                }
            }

            if (this.outstandingPutCount_ === 0) this.outstandingPuts_ = [];
        };

        PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {
            var queryId;

            if (!query) {
                queryId = 'default';
            } else {
                queryId = query.map(function (q) {
                    return util_4.ObjectToUniqueKey(q);
                }).join('$');
            }

            var listen = this.removeListen_(pathString, queryId);
            if (listen && listen.onComplete) listen.onComplete('permission_denied');
        };

        PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {
            var normalizedPathString = new Path_1.Path(pathString).toString();
            var listen;

            if (this.listens_[normalizedPathString] !== undefined) {
                listen = this.listens_[normalizedPathString][queryId];
                delete this.listens_[normalizedPathString][queryId];

                if (util_1.getCount(this.listens_[normalizedPathString]) === 0) {
                    delete this.listens_[normalizedPathString];
                }
            } else {
                listen = undefined;
            }

            return listen;
        };

        PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {
            util_4.log('Auth token revoked: ' + statusCode + '/' + explanation);
            this.authToken_ = null;
            this.forceTokenRefresh_ = true;
            this.realtime_.close();

            if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {
                this.invalidAuthTokenCount_++;

                if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {
                    this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
                    this.authTokenProvider_.notifyForInvalidToken();
                }
            }
        };

        PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {
            if (this.securityDebugCallback_) {
                this.securityDebugCallback_(body);
            } else {
                if ('msg' in body) {
                    console.log('FIREBASE: ' + body['msg'].replace('\n', '\nFIREBASE: '));
                }
            }
        };

        PersistentConnection.prototype.restoreState_ = function () {
            var _this = this;

            this.tryAuth();
            util_1.forEach(this.listens_, function (pathString, queries) {
                util_1.forEach(queries, function (key, listenSpec) {
                    _this.sendListen_(listenSpec);
                });
            });

            for (var i = 0; i < this.outstandingPuts_.length; i++) {
                if (this.outstandingPuts_[i]) this.sendPut_(i);
            }

            while (this.onDisconnectRequestQueue_.length) {
                var request = this.onDisconnectRequestQueue_.shift();
                this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);
            }
        };

        PersistentConnection.prototype.sendConnectStats_ = function () {
            var stats = {};
            var clientName = 'js';

            if (util_6.CONSTANTS.NODE_ADMIN) {
                clientName = 'admin_node';
            } else if (util_6.CONSTANTS.NODE_CLIENT) {
                clientName = 'node';
            }

            stats['sdk.' + clientName + '.' + app_1.default.SDK_VERSION.replace(/\./g, '-')] = 1;

            if (util_7.isMobileCordova()) {
                stats['framework.cordova'] = 1;
            } else if (util_7.isReactNative()) {
                stats['framework.reactnative'] = 1;
            }

            this.reportStats(stats);
        };

        PersistentConnection.prototype.shouldReconnect_ = function () {
            var online = OnlineMonitor_1.OnlineMonitor.getInstance().currentlyOnline();
            return util_1.isEmpty(this.interruptReasons_) && online;
        };

        PersistentConnection.nextPersistentConnectionId_ = 0;
        PersistentConnection.nextConnectionId_ = 0;
        return PersistentConnection;
    }(ServerActions_1.ServerActions);

    exports.PersistentConnection = PersistentConnection;
},594,[521,506,508,531,538,595,597,598,603],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\PersistentConnection.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var tslib_1 = _require(_dependencyMap[0], "tslib");

    var EventEmitter_1 = _require(_dependencyMap[1], "./EventEmitter");

    var util_1 = _require(_dependencyMap[2], "@firebase/util");

    var VisibilityMonitor = function (_super) {
        tslib_1.__extends(VisibilityMonitor, _super);

        function VisibilityMonitor() {
            var _this = _super.call(this, ['visible']) || this;

            var hidden;
            var visibilityChange;

            if (typeof document !== 'undefined' && typeof document.addEventListener !== 'undefined') {
                if (typeof document['hidden'] !== 'undefined') {
                    visibilityChange = 'visibilitychange';
                    hidden = 'hidden';
                } else if (typeof document['mozHidden'] !== 'undefined') {
                    visibilityChange = 'mozvisibilitychange';
                    hidden = 'mozHidden';
                } else if (typeof document['msHidden'] !== 'undefined') {
                    visibilityChange = 'msvisibilitychange';
                    hidden = 'msHidden';
                } else if (typeof document['webkitHidden'] !== 'undefined') {
                    visibilityChange = 'webkitvisibilitychange';
                    hidden = 'webkitHidden';
                }
            }

            _this.visible_ = true;

            if (visibilityChange) {
                document.addEventListener(visibilityChange, function () {
                    var visible = !document[hidden];

                    if (visible !== _this.visible_) {
                        _this.visible_ = visible;

                        _this.trigger('visible', visible);
                    }
                }, false);
            }

            return _this;
        }

        VisibilityMonitor.getInstance = function () {
            return new VisibilityMonitor();
        };

        VisibilityMonitor.prototype.getInitialEvent = function (eventType) {
            util_1.assert(eventType === 'visible', 'Unknown event type: ' + eventType);
            return [this.visible_];
        };

        return VisibilityMonitor;
    }(EventEmitter_1.EventEmitter);

    exports.VisibilityMonitor = VisibilityMonitor;
},595,[521,596,508],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\util\\VisibilityMonitor.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "@firebase/util");

    var EventEmitter = function () {
        function EventEmitter(allowedEvents_) {
            this.allowedEvents_ = allowedEvents_;
            this.listeners_ = {};
            util_1.assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');
        }

        EventEmitter.prototype.trigger = function (eventType) {
            var var_args = [];

            for (var _i = 1; _i < arguments.length; _i++) {
                var_args[_i - 1] = arguments[_i];
            }

            if (Array.isArray(this.listeners_[eventType])) {
                var listeners = this.listeners_[eventType].slice();

                for (var i = 0; i < listeners.length; i++) {
                    listeners[i].callback.apply(listeners[i].context, var_args);
                }
            }
        };

        EventEmitter.prototype.on = function (eventType, callback, context) {
            this.validateEventType_(eventType);
            this.listeners_[eventType] = this.listeners_[eventType] || [];
            this.listeners_[eventType].push({
                callback: callback,
                context: context
            });
            var eventData = this.getInitialEvent(eventType);

            if (eventData) {
                callback.apply(context, eventData);
            }
        };

        EventEmitter.prototype.off = function (eventType, callback, context) {
            this.validateEventType_(eventType);
            var listeners = this.listeners_[eventType] || [];

            for (var i = 0; i < listeners.length; i++) {
                if (listeners[i].callback === callback && (!context || context === listeners[i].context)) {
                    listeners.splice(i, 1);
                    return;
                }
            }
        };

        EventEmitter.prototype.validateEventType_ = function (eventType) {
            util_1.assert(this.allowedEvents_.find(function (et) {
                return et === eventType;
            }), 'Unknown event: ' + eventType);
        };

        return EventEmitter;
    }();

    exports.EventEmitter = EventEmitter;
},596,[508],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\util\\EventEmitter.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var tslib_1 = _require(_dependencyMap[0], "tslib");

    var util_1 = _require(_dependencyMap[1], "@firebase/util");

    var EventEmitter_1 = _require(_dependencyMap[2], "./EventEmitter");

    var util_2 = _require(_dependencyMap[1], "@firebase/util");

    var OnlineMonitor = function (_super) {
        tslib_1.__extends(OnlineMonitor, _super);

        function OnlineMonitor() {
            var _this = _super.call(this, ['online']) || this;

            _this.online_ = true;

            if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined' && !util_2.isMobileCordova()) {
                window.addEventListener('online', function () {
                    if (!_this.online_) {
                        _this.online_ = true;

                        _this.trigger('online', true);
                    }
                }, false);
                window.addEventListener('offline', function () {
                    if (_this.online_) {
                        _this.online_ = false;

                        _this.trigger('online', false);
                    }
                }, false);
            }

            return _this;
        }

        OnlineMonitor.getInstance = function () {
            return new OnlineMonitor();
        };

        OnlineMonitor.prototype.getInitialEvent = function (eventType) {
            util_1.assert(eventType === 'online', 'Unknown event type: ' + eventType);
            return [this.online_];
        };

        OnlineMonitor.prototype.currentlyOnline = function () {
            return this.online_;
        };

        return OnlineMonitor;
    }(EventEmitter_1.EventEmitter);

    exports.OnlineMonitor = OnlineMonitor;
},597,[521,508,596],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\util\\OnlineMonitor.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "../core/util/util");

    var storage_1 = _require(_dependencyMap[1], "../core/storage/storage");

    var Constants_1 = _require(_dependencyMap[2], "./Constants");

    var TransportManager_1 = _require(_dependencyMap[3], "./TransportManager");

    var UPGRADE_TIMEOUT = 60000;
    var DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;
    var BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;
    var BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;
    var MESSAGE_TYPE = 't';
    var MESSAGE_DATA = 'd';
    var CONTROL_SHUTDOWN = 's';
    var CONTROL_RESET = 'r';
    var CONTROL_ERROR = 'e';
    var CONTROL_PONG = 'o';
    var SWITCH_ACK = 'a';
    var END_TRANSMISSION = 'n';
    var PING = 'p';
    var SERVER_HELLO = 'h';

    var Connection = function () {
        function Connection(id, repoInfo_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {
            this.id = id;
            this.repoInfo_ = repoInfo_;
            this.onMessage_ = onMessage_;
            this.onReady_ = onReady_;
            this.onDisconnect_ = onDisconnect_;
            this.onKill_ = onKill_;
            this.lastSessionId = lastSessionId;
            this.connectionCount = 0;
            this.pendingDataMessages = [];
            this.state_ = 0;
            this.log_ = util_1.logWrapper('c:' + this.id + ':');
            this.transportManager_ = new TransportManager_1.TransportManager(repoInfo_);
            this.log_('Connection created');
            this.start_();
        }

        Connection.prototype.start_ = function () {
            var _this = this;

            var conn = this.transportManager_.initialTransport();
            this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, undefined, this.lastSessionId);
            this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;
            var onMessageReceived = this.connReceiver_(this.conn_);
            var onConnectionLost = this.disconnReceiver_(this.conn_);
            this.tx_ = this.conn_;
            this.rx_ = this.conn_;
            this.secondaryConn_ = null;
            this.isHealthy_ = false;
            setTimeout(function () {
                _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);
            }, Math.floor(0));
            var healthyTimeout_ms = conn['healthyTimeout'] || 0;

            if (healthyTimeout_ms > 0) {
                this.healthyTimeout_ = util_1.setTimeoutNonBlocking(function () {
                    _this.healthyTimeout_ = null;

                    if (!_this.isHealthy_) {
                        if (_this.conn_ && _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {
                            _this.log_('Connection exceeded healthy timeout but has received ' + _this.conn_.bytesReceived + ' bytes.  Marking connection healthy.');

                            _this.isHealthy_ = true;

                            _this.conn_.markConnectionHealthy();
                        } else if (_this.conn_ && _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {
                            _this.log_('Connection exceeded healthy timeout but has sent ' + _this.conn_.bytesSent + ' bytes.  Leaving connection alive.');
                        } else {
                            _this.log_('Closing unhealthy connection after timeout.');

                            _this.close();
                        }
                    }
                }, Math.floor(healthyTimeout_ms));
            }
        };

        Connection.prototype.nextTransportId_ = function () {
            return 'c:' + this.id + ':' + this.connectionCount++;
        };

        Connection.prototype.disconnReceiver_ = function (conn) {
            var _this = this;

            return function (everConnected) {
                if (conn === _this.conn_) {
                    _this.onConnectionLost_(everConnected);
                } else if (conn === _this.secondaryConn_) {
                    _this.log_('Secondary connection lost.');

                    _this.onSecondaryConnectionLost_();
                } else {
                    _this.log_('closing an old connection');
                }
            };
        };

        Connection.prototype.connReceiver_ = function (conn) {
            var _this = this;

            return function (message) {
                if (_this.state_ != 2) {
                        if (conn === _this.rx_) {
                            _this.onPrimaryMessageReceived_(message);
                        } else if (conn === _this.secondaryConn_) {
                            _this.onSecondaryMessageReceived_(message);
                        } else {
                            _this.log_('message on old connection');
                        }
                    }
            };
        };

        Connection.prototype.sendRequest = function (dataMsg) {
            var msg = {
                t: 'd',
                d: dataMsg
            };
            this.sendData_(msg);
        };

        Connection.prototype.tryCleanupConnection = function () {
            if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {
                this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);
                this.conn_ = this.secondaryConn_;
                this.secondaryConn_ = null;
            }
        };

        Connection.prototype.onSecondaryControl_ = function (controlData) {
            if (MESSAGE_TYPE in controlData) {
                var cmd = controlData[MESSAGE_TYPE];

                if (cmd === SWITCH_ACK) {
                    this.upgradeIfSecondaryHealthy_();
                } else if (cmd === CONTROL_RESET) {
                    this.log_('Got a reset on secondary, closing it');
                    this.secondaryConn_.close();

                    if (this.tx_ === this.secondaryConn_ || this.rx_ === this.secondaryConn_) {
                        this.close();
                    }
                } else if (cmd === CONTROL_PONG) {
                    this.log_('got pong on secondary.');
                    this.secondaryResponsesRequired_--;
                    this.upgradeIfSecondaryHealthy_();
                }
            }
        };

        Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {
            var layer = util_1.requireKey('t', parsedData);
            var data = util_1.requireKey('d', parsedData);

            if (layer == 'c') {
                this.onSecondaryControl_(data);
            } else if (layer == 'd') {
                this.pendingDataMessages.push(data);
            } else {
                throw new Error('Unknown protocol layer: ' + layer);
            }
        };

        Connection.prototype.upgradeIfSecondaryHealthy_ = function () {
            if (this.secondaryResponsesRequired_ <= 0) {
                this.log_('Secondary connection is healthy.');
                this.isHealthy_ = true;
                this.secondaryConn_.markConnectionHealthy();
                this.proceedWithUpgrade_();
            } else {
                this.log_('sending ping on secondary.');
                this.secondaryConn_.send({
                    t: 'c',
                    d: {
                        t: PING,
                        d: {}
                    }
                });
            }
        };

        Connection.prototype.proceedWithUpgrade_ = function () {
            this.secondaryConn_.start();
            this.log_('sending client ack on secondary');
            this.secondaryConn_.send({
                t: 'c',
                d: {
                    t: SWITCH_ACK,
                    d: {}
                }
            });
            this.log_('Ending transmission on primary');
            this.conn_.send({
                t: 'c',
                d: {
                    t: END_TRANSMISSION,
                    d: {}
                }
            });
            this.tx_ = this.secondaryConn_;
            this.tryCleanupConnection();
        };

        Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {
            var layer = util_1.requireKey('t', parsedData);
            var data = util_1.requireKey('d', parsedData);

            if (layer == 'c') {
                this.onControl_(data);
            } else if (layer == 'd') {
                this.onDataMessage_(data);
            }
        };

        Connection.prototype.onDataMessage_ = function (message) {
            this.onPrimaryResponse_();
            this.onMessage_(message);
        };

        Connection.prototype.onPrimaryResponse_ = function () {
            if (!this.isHealthy_) {
                this.primaryResponsesRequired_--;

                if (this.primaryResponsesRequired_ <= 0) {
                    this.log_('Primary connection is healthy.');
                    this.isHealthy_ = true;
                    this.conn_.markConnectionHealthy();
                }
            }
        };

        Connection.prototype.onControl_ = function (controlData) {
            var cmd = util_1.requireKey(MESSAGE_TYPE, controlData);

            if (MESSAGE_DATA in controlData) {
                var payload = controlData[MESSAGE_DATA];

                if (cmd === SERVER_HELLO) {
                    this.onHandshake_(payload);
                } else if (cmd === END_TRANSMISSION) {
                    this.log_('recvd end transmission on primary');
                    this.rx_ = this.secondaryConn_;

                    for (var i = 0; i < this.pendingDataMessages.length; ++i) {
                        this.onDataMessage_(this.pendingDataMessages[i]);
                    }

                    this.pendingDataMessages = [];
                    this.tryCleanupConnection();
                } else if (cmd === CONTROL_SHUTDOWN) {
                    this.onConnectionShutdown_(payload);
                } else if (cmd === CONTROL_RESET) {
                    this.onReset_(payload);
                } else if (cmd === CONTROL_ERROR) {
                    util_1.error('Server Error: ' + payload);
                } else if (cmd === CONTROL_PONG) {
                    this.log_('got pong on primary.');
                    this.onPrimaryResponse_();
                    this.sendPingOnPrimaryIfNecessary_();
                } else {
                    util_1.error('Unknown control packet command: ' + cmd);
                }
            }
        };

        Connection.prototype.onHandshake_ = function (handshake) {
            var timestamp = handshake.ts;
            var version = handshake.v;
            var host = handshake.h;
            this.sessionId = handshake.s;
            this.repoInfo_.updateHost(host);

            if (this.state_ == 0) {
                    this.conn_.start();
                    this.onConnectionEstablished_(this.conn_, timestamp);

                    if (Constants_1.PROTOCOL_VERSION !== version) {
                        util_1.warn('Protocol version mismatch detected');
                    }

                    this.tryStartUpgrade_();
                }
        };

        Connection.prototype.tryStartUpgrade_ = function () {
            var conn = this.transportManager_.upgradeTransport();

            if (conn) {
                this.startUpgrade_(conn);
            }
        };

        Connection.prototype.startUpgrade_ = function (conn) {
            var _this = this;

            this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.sessionId);
            this.secondaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;
            var onMessage = this.connReceiver_(this.secondaryConn_);
            var onDisconnect = this.disconnReceiver_(this.secondaryConn_);
            this.secondaryConn_.open(onMessage, onDisconnect);
            util_1.setTimeoutNonBlocking(function () {
                if (_this.secondaryConn_) {
                    _this.log_('Timed out trying to upgrade.');

                    _this.secondaryConn_.close();
                }
            }, Math.floor(UPGRADE_TIMEOUT));
        };

        Connection.prototype.onReset_ = function (host) {
            this.log_('Reset packet received.  New host: ' + host);
            this.repoInfo_.updateHost(host);

            if (this.state_ === 1) {
                    this.close();
                } else {
                this.closeConnections_();
                this.start_();
            }
        };

        Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {
            var _this = this;

            this.log_('Realtime connection established.');
            this.conn_ = conn;
            this.state_ = 1;

            if (this.onReady_) {
                this.onReady_(timestamp, this.sessionId);
                this.onReady_ = null;
            }

            if (this.primaryResponsesRequired_ === 0) {
                this.log_('Primary connection is healthy.');
                this.isHealthy_ = true;
            } else {
                util_1.setTimeoutNonBlocking(function () {
                    _this.sendPingOnPrimaryIfNecessary_();
                }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));
            }
        };

        Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {
            if (!this.isHealthy_ && this.state_ === 1) {
                    this.log_('sending ping on primary.');
                    this.sendData_({
                        t: 'c',
                        d: {
                            t: PING,
                            d: {}
                        }
                    });
                }
        };

        Connection.prototype.onSecondaryConnectionLost_ = function () {
            var conn = this.secondaryConn_;
            this.secondaryConn_ = null;

            if (this.tx_ === conn || this.rx_ === conn) {
                this.close();
            }
        };

        Connection.prototype.onConnectionLost_ = function (everConnected) {
            this.conn_ = null;

            if (!everConnected && this.state_ === 0) {
                    this.log_('Realtime connection failed.');

                    if (this.repoInfo_.isCacheableHost()) {
                        storage_1.PersistentStorage.remove('host:' + this.repoInfo_.host);
                        this.repoInfo_.internalHost = this.repoInfo_.host;
                    }
                } else if (this.state_ === 1) {
                    this.log_('Realtime connection lost.');
                }

            this.close();
        };

        Connection.prototype.onConnectionShutdown_ = function (reason) {
            this.log_('Connection shutdown command received. Shutting down...');

            if (this.onKill_) {
                this.onKill_(reason);
                this.onKill_ = null;
            }

            this.onDisconnect_ = null;
            this.close();
        };

        Connection.prototype.sendData_ = function (data) {
            if (this.state_ !== 1) {
                    throw 'Connection is not connected';
                } else {
                this.tx_.send(data);
            }
        };

        Connection.prototype.close = function () {
            if (this.state_ !== 2) {
                    this.log_('Closing realtime connection.');
                    this.state_ = 2;
                    this.closeConnections_();

                    if (this.onDisconnect_) {
                        this.onDisconnect_();
                        this.onDisconnect_ = null;
                    }
                }
        };

        Connection.prototype.closeConnections_ = function () {
            this.log_('Shutting down all connections');

            if (this.conn_) {
                this.conn_.close();
                this.conn_ = null;
            }

            if (this.secondaryConn_) {
                this.secondaryConn_.close();
                this.secondaryConn_ = null;
            }

            if (this.healthyTimeout_) {
                clearTimeout(this.healthyTimeout_);
                this.healthyTimeout_ = null;
            }
        };

        return Connection;
    }();

    exports.Connection = Connection;
},598,[531,532,540,599],"node_modules\\@firebase\\database\\dist\\cjs\\src\\realtime\\Connection.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var BrowserPollConnection_1 = _require(_dependencyMap[0], "./BrowserPollConnection");

    var WebSocketConnection_1 = _require(_dependencyMap[1], "./WebSocketConnection");

    var util_1 = _require(_dependencyMap[2], "../core/util/util");

    var TransportManager = function () {
        function TransportManager(repoInfo) {
            this.initTransports_(repoInfo);
        }

        Object.defineProperty(TransportManager, "ALL_TRANSPORTS", {
            get: function get() {
                return [BrowserPollConnection_1.BrowserPollConnection, WebSocketConnection_1.WebSocketConnection];
            },
            enumerable: true,
            configurable: true
        });

        TransportManager.prototype.initTransports_ = function (repoInfo) {
            var isWebSocketsAvailable = WebSocketConnection_1.WebSocketConnection && WebSocketConnection_1.WebSocketConnection['isAvailable']();
            var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection_1.WebSocketConnection.previouslyFailed();

            if (repoInfo.webSocketOnly) {
                if (!isWebSocketsAvailable) util_1.warn("wss:// URL used, but browser isn't known to support websockets.  Trying anyway.");
                isSkipPollConnection = true;
            }

            if (isSkipPollConnection) {
                this.transports_ = [WebSocketConnection_1.WebSocketConnection];
            } else {
                var transports_1 = this.transports_ = [];
                util_1.each(TransportManager.ALL_TRANSPORTS, function (i, transport) {
                    if (transport && transport['isAvailable']()) {
                        transports_1.push(transport);
                    }
                });
            }
        };

        TransportManager.prototype.initialTransport = function () {
            if (this.transports_.length > 0) {
                return this.transports_[0];
            } else {
                throw new Error('No transports available');
            }
        };

        TransportManager.prototype.upgradeTransport = function () {
            if (this.transports_.length > 1) {
                return this.transports_[1];
            } else {
                return null;
            }
        };

        return TransportManager;
    }();

    exports.TransportManager = TransportManager;
},599,[600,602,531],"node_modules\\@firebase\\database\\dist\\cjs\\src\\realtime\\TransportManager.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "../core/util/util");

    var CountedSet_1 = _require(_dependencyMap[1], "../core/util/CountedSet");

    var StatsManager_1 = _require(_dependencyMap[2], "../core/stats/StatsManager");

    var PacketReceiver_1 = _require(_dependencyMap[3], "./polling/PacketReceiver");

    var Constants_1 = _require(_dependencyMap[4], "./Constants");

    var util_2 = _require(_dependencyMap[5], "@firebase/util");

    var util_3 = _require(_dependencyMap[5], "@firebase/util");

    exports.FIREBASE_LONGPOLL_START_PARAM = 'start';
    exports.FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';
    exports.FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';
    exports.FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';
    exports.FIREBASE_LONGPOLL_ID_PARAM = 'id';
    exports.FIREBASE_LONGPOLL_PW_PARAM = 'pw';
    exports.FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';
    exports.FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';
    exports.FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';
    exports.FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';
    exports.FIREBASE_LONGPOLL_DATA_PARAM = 'd';
    exports.FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';
    exports.FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';
    var MAX_URL_DATA_SIZE = 1870;
    var SEG_HEADER_SIZE = 30;
    var MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;
    var KEEPALIVE_REQUEST_INTERVAL = 25000;
    var LP_CONNECT_TIMEOUT = 30000;

    var BrowserPollConnection = function () {
        function BrowserPollConnection(connId, repoInfo, transportSessionId, lastSessionId) {
            this.connId = connId;
            this.repoInfo = repoInfo;
            this.transportSessionId = transportSessionId;
            this.lastSessionId = lastSessionId;
            this.bytesSent = 0;
            this.bytesReceived = 0;
            this.everConnected_ = false;
            this.log_ = util_1.logWrapper(connId);
            this.stats_ = StatsManager_1.StatsManager.getCollection(repoInfo);

            this.urlFn = function (params) {
                return repoInfo.connectionURL(Constants_1.LONG_POLLING, params);
            };
        }

        BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {
            var _this = this;

            this.curSegmentNum = 0;
            this.onDisconnect_ = onDisconnect;
            this.myPacketOrderer = new PacketReceiver_1.PacketReceiver(onMessage);
            this.isClosed_ = false;
            this.connectTimeoutTimer_ = setTimeout(function () {
                _this.log_('Timed out trying to connect.');

                _this.onClosed_();

                _this.connectTimeoutTimer_ = null;
            }, Math.floor(LP_CONNECT_TIMEOUT));
            util_1.executeWhenDOMReady(function () {
                if (_this.isClosed_) return;
                _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {
                    var args = [];

                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }

                    var command = args[0],
                        arg1 = args[1],
                        arg2 = args[2],
                        arg3 = args[3],
                        arg4 = args[4];

                    _this.incrementIncomingBytes_(args);

                    if (!_this.scriptTagHolder) return;

                    if (_this.connectTimeoutTimer_) {
                        clearTimeout(_this.connectTimeoutTimer_);
                        _this.connectTimeoutTimer_ = null;
                    }

                    _this.everConnected_ = true;

                    if (command == exports.FIREBASE_LONGPOLL_START_PARAM) {
                        _this.id = arg1;
                        _this.password = arg2;
                    } else if (command === exports.FIREBASE_LONGPOLL_CLOSE_COMMAND) {
                        if (arg1) {
                            _this.scriptTagHolder.sendNewPolls = false;

                            _this.myPacketOrderer.closeAfter(arg1, function () {
                                _this.onClosed_();
                            });
                        } else {
                            _this.onClosed_();
                        }
                    } else {
                        throw new Error('Unrecognized command received: ' + command);
                    }
                }, function () {
                    var args = [];

                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }

                    var pN = args[0],
                        data = args[1];

                    _this.incrementIncomingBytes_(args);

                    _this.myPacketOrderer.handleResponse(pN, data);
                }, function () {
                    _this.onClosed_();
                }, _this.urlFn);
                var urlParams = {};
                urlParams[exports.FIREBASE_LONGPOLL_START_PARAM] = 't';
                urlParams[exports.FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);
                if (_this.scriptTagHolder.uniqueCallbackIdentifier) urlParams[exports.FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;
                urlParams[Constants_1.VERSION_PARAM] = Constants_1.PROTOCOL_VERSION;

                if (_this.transportSessionId) {
                    urlParams[Constants_1.TRANSPORT_SESSION_PARAM] = _this.transportSessionId;
                }

                if (_this.lastSessionId) {
                    urlParams[Constants_1.LAST_SESSION_PARAM] = _this.lastSessionId;
                }

                if (!util_3.isNodeSdk() && typeof location !== 'undefined' && location.href && location.href.indexOf(Constants_1.FORGE_DOMAIN) !== -1) {
                    urlParams[Constants_1.REFERER_PARAM] = Constants_1.FORGE_REF;
                }

                var connectURL = _this.urlFn(urlParams);

                _this.log_('Connecting via long-poll to ' + connectURL);

                _this.scriptTagHolder.addTag(connectURL, function () {});
            });
        };

        BrowserPollConnection.prototype.start = function () {
            this.scriptTagHolder.startLongPoll(this.id, this.password);
            this.addDisconnectPingFrame(this.id, this.password);
        };

        BrowserPollConnection.forceAllow = function () {
            BrowserPollConnection.forceAllow_ = true;
        };

        BrowserPollConnection.forceDisallow = function () {
            BrowserPollConnection.forceDisallow_ = true;
        };

        BrowserPollConnection.isAvailable = function () {
            return BrowserPollConnection.forceAllow_ || !BrowserPollConnection.forceDisallow_ && typeof document !== 'undefined' && document.createElement != null && !util_1.isChromeExtensionContentScript() && !util_1.isWindowsStoreApp() && !util_3.isNodeSdk();
        };

        BrowserPollConnection.prototype.markConnectionHealthy = function () {};

        BrowserPollConnection.prototype.shutdown_ = function () {
            this.isClosed_ = true;

            if (this.scriptTagHolder) {
                this.scriptTagHolder.close();
                this.scriptTagHolder = null;
            }

            if (this.myDisconnFrame) {
                document.body.removeChild(this.myDisconnFrame);
                this.myDisconnFrame = null;
            }

            if (this.connectTimeoutTimer_) {
                clearTimeout(this.connectTimeoutTimer_);
                this.connectTimeoutTimer_ = null;
            }
        };

        BrowserPollConnection.prototype.onClosed_ = function () {
            if (!this.isClosed_) {
                this.log_('Longpoll is closing itself');
                this.shutdown_();

                if (this.onDisconnect_) {
                    this.onDisconnect_(this.everConnected_);
                    this.onDisconnect_ = null;
                }
            }
        };

        BrowserPollConnection.prototype.close = function () {
            if (!this.isClosed_) {
                this.log_('Longpoll is being closed.');
                this.shutdown_();
            }
        };

        BrowserPollConnection.prototype.send = function (data) {
            var dataStr = util_2.stringify(data);
            this.bytesSent += dataStr.length;
            this.stats_.incrementCounter('bytes_sent', dataStr.length);
            var base64data = util_2.base64Encode(dataStr);
            var dataSegs = util_1.splitStringBySize(base64data, MAX_PAYLOAD_SIZE);

            for (var i = 0; i < dataSegs.length; i++) {
                this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);
                this.curSegmentNum++;
            }
        };

        BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {
            if (util_3.isNodeSdk()) return;
            this.myDisconnFrame = document.createElement('iframe');
            var urlParams = {};
            urlParams[exports.FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';
            urlParams[exports.FIREBASE_LONGPOLL_ID_PARAM] = id;
            urlParams[exports.FIREBASE_LONGPOLL_PW_PARAM] = pw;
            this.myDisconnFrame.src = this.urlFn(urlParams);
            this.myDisconnFrame.style.display = 'none';
            document.body.appendChild(this.myDisconnFrame);
        };

        BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {
            var bytesReceived = util_2.stringify(args).length;
            this.bytesReceived += bytesReceived;
            this.stats_.incrementCounter('bytes_received', bytesReceived);
        };

        return BrowserPollConnection;
    }();

    exports.BrowserPollConnection = BrowserPollConnection;

    var FirebaseIFrameScriptHolder = function () {
        function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {
            this.onDisconnect = onDisconnect;
            this.urlFn = urlFn;
            this.outstandingRequests = new CountedSet_1.CountedSet();
            this.pendingSegs = [];
            this.currentSerial = Math.floor(Math.random() * 100000000);
            this.sendNewPolls = true;

            if (!util_3.isNodeSdk()) {
                this.uniqueCallbackIdentifier = util_1.LUIDGenerator();
                window[exports.FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;
                window[exports.FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;
                this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();
                var script = '';

                if (this.myIFrame.src && this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {
                    var currentDomain = document.domain;
                    script = '<script>document.domain="' + currentDomain + '";</script>';
                }

                var iframeContents = '<html><body>' + script + '</body></html>';

                try {
                    this.myIFrame.doc.open();
                    this.myIFrame.doc.write(iframeContents);
                    this.myIFrame.doc.close();
                } catch (e) {
                    util_1.log('frame writing exception');

                    if (e.stack) {
                        util_1.log(e.stack);
                    }

                    util_1.log(e);
                }
            } else {
                this.commandCB = commandCB;
                this.onMessageCB = onMessageCB;
            }
        }

        FirebaseIFrameScriptHolder.createIFrame_ = function () {
            var iframe = document.createElement('iframe');
            iframe.style.display = 'none';

            if (document.body) {
                document.body.appendChild(iframe);

                try {
                    var a = iframe.contentWindow.document;

                    if (!a) {
                        util_1.log('No IE domain setting required');
                    }
                } catch (e) {
                    var domain = document.domain;
                    iframe.src = "javascript:void((function(){document.open();document.domain='" + domain + "';document.close();})())";
                }
            } else {
                throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';
            }

            if (iframe.contentDocument) {
                iframe.doc = iframe.contentDocument;
            } else if (iframe.contentWindow) {
                iframe.doc = iframe.contentWindow.document;
            } else if (iframe.document) {
                iframe.doc = iframe.document;
            }

            return iframe;
        };

        FirebaseIFrameScriptHolder.prototype.close = function () {
            var _this = this;

            this.alive = false;

            if (this.myIFrame) {
                this.myIFrame.doc.body.innerHTML = '';
                setTimeout(function () {
                    if (_this.myIFrame !== null) {
                        document.body.removeChild(_this.myIFrame);
                        _this.myIFrame = null;
                    }
                }, Math.floor(0));
            }

            if (util_3.isNodeSdk() && this.myID) {
                var urlParams = {};
                urlParams[exports.FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM] = 't';
                urlParams[exports.FIREBASE_LONGPOLL_ID_PARAM] = this.myID;
                urlParams[exports.FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;
                var theURL = this.urlFn(urlParams);
                FirebaseIFrameScriptHolder.nodeRestRequest(theURL);
            }

            var onDisconnect = this.onDisconnect;

            if (onDisconnect) {
                this.onDisconnect = null;
                onDisconnect();
            }
        };

        FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {
            this.myID = id;
            this.myPW = pw;
            this.alive = true;

            while (this.newRequest_()) {}
        };

        FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {
            if (this.alive && this.sendNewPolls && this.outstandingRequests.count() < (this.pendingSegs.length > 0 ? 2 : 1)) {
                this.currentSerial++;
                var urlParams = {};
                urlParams[exports.FIREBASE_LONGPOLL_ID_PARAM] = this.myID;
                urlParams[exports.FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;
                urlParams[exports.FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;
                var theURL = this.urlFn(urlParams);
                var curDataString = '';
                var i = 0;

                while (this.pendingSegs.length > 0) {
                    var nextSeg = this.pendingSegs[0];

                    if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <= MAX_URL_DATA_SIZE) {
                        var theSeg = this.pendingSegs.shift();
                        curDataString = curDataString + '&' + exports.FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM + i + '=' + theSeg.seg + '&' + exports.FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET + i + '=' + theSeg.ts + '&' + exports.FIREBASE_LONGPOLL_DATA_PARAM + i + '=' + theSeg.d;
                        i++;
                    } else {
                        break;
                    }
                }

                theURL = theURL + curDataString;
                this.addLongPollTag_(theURL, this.currentSerial);
                return true;
            } else {
                return false;
            }
        };

        FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {
            this.pendingSegs.push({
                seg: segnum,
                ts: totalsegs,
                d: data
            });

            if (this.alive) {
                this.newRequest_();
            }
        };

        FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {
            var _this = this;

            this.outstandingRequests.add(serial, 1);

            var doNewRequest = function doNewRequest() {
                _this.outstandingRequests.remove(serial);

                _this.newRequest_();
            };

            var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));

            var readyStateCB = function readyStateCB() {
                clearTimeout(keepaliveTimeout);
                doNewRequest();
            };

            this.addTag(url, readyStateCB);
        };

        FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {
            var _this = this;

            if (util_3.isNodeSdk()) {
                this.doNodeLongPoll(url, loadCB);
            } else {
                setTimeout(function () {
                    try {
                        if (!_this.sendNewPolls) return;

                        var newScript_1 = _this.myIFrame.doc.createElement('script');

                        newScript_1.type = 'text/javascript';
                        newScript_1.async = true;
                        newScript_1.src = url;

                        newScript_1.onload = newScript_1.onreadystatechange = function () {
                            var rstate = newScript_1.readyState;

                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {
                                newScript_1.onload = newScript_1.onreadystatechange = null;

                                if (newScript_1.parentNode) {
                                    newScript_1.parentNode.removeChild(newScript_1);
                                }

                                loadCB();
                            }
                        };

                        newScript_1.onerror = function () {
                            util_1.log('Long-poll script failed to load: ' + url);
                            _this.sendNewPolls = false;

                            _this.close();
                        };

                        _this.myIFrame.doc.body.appendChild(newScript_1);
                    } catch (e) {}
                }, Math.floor(1));
            }
        };

        return FirebaseIFrameScriptHolder;
    }();

    exports.FirebaseIFrameScriptHolder = FirebaseIFrameScriptHolder;
},600,[531,567,589,601,540,508],"node_modules\\@firebase\\database\\dist\\cjs\\src\\realtime\\BrowserPollConnection.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "../../core/util/util");

    var PacketReceiver = function () {
        function PacketReceiver(onMessage_) {
            this.onMessage_ = onMessage_;
            this.pendingResponses = [];
            this.currentResponseNum = 0;
            this.closeAfterResponse = -1;
            this.onClose = null;
        }

        PacketReceiver.prototype.closeAfter = function (responseNum, callback) {
            this.closeAfterResponse = responseNum;
            this.onClose = callback;

            if (this.closeAfterResponse < this.currentResponseNum) {
                this.onClose();
                this.onClose = null;
            }
        };

        PacketReceiver.prototype.handleResponse = function (requestNum, data) {
            var _this = this;

            this.pendingResponses[requestNum] = data;

            var _loop_1 = function _loop_1() {
                var toProcess = this_1.pendingResponses[this_1.currentResponseNum];
                delete this_1.pendingResponses[this_1.currentResponseNum];

                var _loop_2 = function _loop_2(i) {
                    if (toProcess[i]) {
                        util_1.exceptionGuard(function () {
                            _this.onMessage_(toProcess[i]);
                        });
                    }
                };

                for (var i = 0; i < toProcess.length; ++i) {
                    _loop_2(i);
                }

                if (this_1.currentResponseNum === this_1.closeAfterResponse) {
                    if (this_1.onClose) {
                        this_1.onClose();
                        this_1.onClose = null;
                    }

                    return "break";
                }

                this_1.currentResponseNum++;
            };

            var this_1 = this;

            while (this.pendingResponses[this.currentResponseNum]) {
                var state_1 = _loop_1();

                if (state_1 === "break") break;
            }
        };

        return PacketReceiver;
    }();

    exports.PacketReceiver = PacketReceiver;
},601,[531],"node_modules\\@firebase\\database\\dist\\cjs\\src\\realtime\\polling\\PacketReceiver.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var app_1 = _require(_dependencyMap[0], "@firebase/app");

    var util_1 = _require(_dependencyMap[1], "@firebase/util");

    var util_2 = _require(_dependencyMap[2], "../core/util/util");

    var StatsManager_1 = _require(_dependencyMap[3], "../core/stats/StatsManager");

    var Constants_1 = _require(_dependencyMap[4], "./Constants");

    var util_3 = _require(_dependencyMap[1], "@firebase/util");

    var storage_1 = _require(_dependencyMap[5], "../core/storage/storage");

    var util_4 = _require(_dependencyMap[1], "@firebase/util");

    var util_5 = _require(_dependencyMap[1], "@firebase/util");

    var WEBSOCKET_MAX_FRAME_SIZE = 16384;
    var WEBSOCKET_KEEPALIVE_INTERVAL = 45000;
    var WebSocketImpl = null;

    if (typeof MozWebSocket !== 'undefined') {
        WebSocketImpl = MozWebSocket;
    } else if (typeof WebSocket !== 'undefined') {
        WebSocketImpl = WebSocket;
    }

    function setWebSocketImpl(impl) {
        WebSocketImpl = impl;
    }

    exports.setWebSocketImpl = setWebSocketImpl;

    var WebSocketConnection = function () {
        function WebSocketConnection(connId, repoInfo, transportSessionId, lastSessionId) {
            this.connId = connId;
            this.keepaliveTimer = null;
            this.frames = null;
            this.totalFrames = 0;
            this.bytesSent = 0;
            this.bytesReceived = 0;
            this.log_ = util_2.logWrapper(this.connId);
            this.stats_ = StatsManager_1.StatsManager.getCollection(repoInfo);
            this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId);
        }

        WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId) {
            var urlParams = {};
            urlParams[Constants_1.VERSION_PARAM] = Constants_1.PROTOCOL_VERSION;

            if (!util_5.isNodeSdk() && typeof location !== 'undefined' && location.href && location.href.indexOf(Constants_1.FORGE_DOMAIN) !== -1) {
                urlParams[Constants_1.REFERER_PARAM] = Constants_1.FORGE_REF;
            }

            if (transportSessionId) {
                urlParams[Constants_1.TRANSPORT_SESSION_PARAM] = transportSessionId;
            }

            if (lastSessionId) {
                urlParams[Constants_1.LAST_SESSION_PARAM] = lastSessionId;
            }

            return repoInfo.connectionURL(Constants_1.WEBSOCKET, urlParams);
        };

        WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {
            var _this = this;

            this.onDisconnect = onDisconnect;
            this.onMessage = onMessage;
            this.log_('Websocket connecting to ' + this.connURL);
            this.everConnected_ = false;
            storage_1.PersistentStorage.set('previous_websocket_failure', true);

            try {
                if (util_5.isNodeSdk()) {
                    var device = util_3.CONSTANTS.NODE_ADMIN ? 'AdminNode' : 'Node';
                    var options = {
                        headers: {
                            'User-Agent': "Firebase/" + Constants_1.PROTOCOL_VERSION + "/" + app_1.default.SDK_VERSION + "/" + process.platform + "/" + device
                        }
                    };
                    var env = process['env'];
                    var proxy = this.connURL.indexOf('wss://') == 0 ? env['HTTPS_PROXY'] || env['https_proxy'] : env['HTTP_PROXY'] || env['http_proxy'];

                    if (proxy) {
                        options['proxy'] = {
                            origin: proxy
                        };
                    }

                    this.mySock = new WebSocketImpl(this.connURL, [], options);
                } else {
                    this.mySock = new WebSocketImpl(this.connURL);
                }
            } catch (e) {
                this.log_('Error instantiating WebSocket.');
                var error = e.message || e.data;

                if (error) {
                    this.log_(error);
                }

                this.onClosed_();
                return;
            }

            this.mySock.onopen = function () {
                _this.log_('Websocket connected.');

                _this.everConnected_ = true;
            };

            this.mySock.onclose = function () {
                _this.log_('Websocket connection was disconnected.');

                _this.mySock = null;

                _this.onClosed_();
            };

            this.mySock.onmessage = function (m) {
                _this.handleIncomingFrame(m);
            };

            this.mySock.onerror = function (e) {
                _this.log_('WebSocket error.  Closing connection.');

                var error = e.message || e.data;

                if (error) {
                    _this.log_(error);
                }

                _this.onClosed_();
            };
        };

        WebSocketConnection.prototype.start = function () {};

        WebSocketConnection.forceDisallow = function () {
            WebSocketConnection.forceDisallow_ = true;
        };

        WebSocketConnection.isAvailable = function () {
            var isOldAndroid = false;

            if (typeof navigator !== 'undefined' && navigator.userAgent) {
                var oldAndroidRegex = /Android ([0-9]{0,}\.[0-9]{0,})/;
                var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);

                if (oldAndroidMatch && oldAndroidMatch.length > 1) {
                    if (parseFloat(oldAndroidMatch[1]) < 4.4) {
                        isOldAndroid = true;
                    }
                }
            }

            return !isOldAndroid && WebSocketImpl !== null && !WebSocketConnection.forceDisallow_;
        };

        WebSocketConnection.previouslyFailed = function () {
            return storage_1.PersistentStorage.isInMemoryStorage || storage_1.PersistentStorage.get('previous_websocket_failure') === true;
        };

        WebSocketConnection.prototype.markConnectionHealthy = function () {
            storage_1.PersistentStorage.remove('previous_websocket_failure');
        };

        WebSocketConnection.prototype.appendFrame_ = function (data) {
            this.frames.push(data);

            if (this.frames.length == this.totalFrames) {
                var fullMess = this.frames.join('');
                this.frames = null;
                var jsonMess = util_4.jsonEval(fullMess);
                this.onMessage(jsonMess);
            }
        };

        WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {
            this.totalFrames = frameCount;
            this.frames = [];
        };

        WebSocketConnection.prototype.extractFrameCount_ = function (data) {
            util_1.assert(this.frames === null, 'We already have a frame buffer');

            if (data.length <= 6) {
                var frameCount = Number(data);

                if (!isNaN(frameCount)) {
                    this.handleNewFrameCount_(frameCount);
                    return null;
                }
            }

            this.handleNewFrameCount_(1);
            return data;
        };

        WebSocketConnection.prototype.handleIncomingFrame = function (mess) {
            if (this.mySock === null) return;
            var data = mess['data'];
            this.bytesReceived += data.length;
            this.stats_.incrementCounter('bytes_received', data.length);
            this.resetKeepAlive();

            if (this.frames !== null) {
                this.appendFrame_(data);
            } else {
                var remainingData = this.extractFrameCount_(data);

                if (remainingData !== null) {
                    this.appendFrame_(remainingData);
                }
            }
        };

        WebSocketConnection.prototype.send = function (data) {
            this.resetKeepAlive();
            var dataStr = util_4.stringify(data);
            this.bytesSent += dataStr.length;
            this.stats_.incrementCounter('bytes_sent', dataStr.length);
            var dataSegs = util_2.splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);

            if (dataSegs.length > 1) {
                this.sendString_(String(dataSegs.length));
            }

            for (var i = 0; i < dataSegs.length; i++) {
                this.sendString_(dataSegs[i]);
            }
        };

        WebSocketConnection.prototype.shutdown_ = function () {
            this.isClosed_ = true;

            if (this.keepaliveTimer) {
                clearInterval(this.keepaliveTimer);
                this.keepaliveTimer = null;
            }

            if (this.mySock) {
                this.mySock.close();
                this.mySock = null;
            }
        };

        WebSocketConnection.prototype.onClosed_ = function () {
            if (!this.isClosed_) {
                this.log_('WebSocket is closing itself');
                this.shutdown_();

                if (this.onDisconnect) {
                    this.onDisconnect(this.everConnected_);
                    this.onDisconnect = null;
                }
            }
        };

        WebSocketConnection.prototype.close = function () {
            if (!this.isClosed_) {
                this.log_('WebSocket is being closed');
                this.shutdown_();
            }
        };

        WebSocketConnection.prototype.resetKeepAlive = function () {
            var _this = this;

            clearInterval(this.keepaliveTimer);
            this.keepaliveTimer = setInterval(function () {
                if (_this.mySock) {
                    _this.sendString_('0');
                }

                _this.resetKeepAlive();
            }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));
        };

        WebSocketConnection.prototype.sendString_ = function (str) {
            try {
                this.mySock.send(str);
            } catch (e) {
                this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');
                setTimeout(this.onClosed_.bind(this), 0);
            }
        };

        WebSocketConnection.responsesRequiredToBeHealthy = 2;
        WebSocketConnection.healthyTimeout = 30000;
        return WebSocketConnection;
    }();

    exports.WebSocketConnection = WebSocketConnection;
},602,[506,508,531,589,540,532],"node_modules\\@firebase\\database\\dist\\cjs\\src\\realtime\\WebSocketConnection.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var ServerActions = function () {
    function ServerActions() {}

    ServerActions.prototype.put = function (pathString, data, onComplete, hash) {};

    ServerActions.prototype.merge = function (pathString, data, onComplete, hash) {};

    ServerActions.prototype.refreshAuthToken = function (token) {};

    ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) {};

    ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) {};

    ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) {};

    ServerActions.prototype.reportStats = function (stats) {};

    return ServerActions;
  }();

  exports.ServerActions = ServerActions;
},603,[],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\ServerActions.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var tslib_1 = _require(_dependencyMap[0], "tslib");

    var util_1 = _require(_dependencyMap[1], "@firebase/util");

    var util_2 = _require(_dependencyMap[2], "./util/util");

    var util_3 = _require(_dependencyMap[1], "@firebase/util");

    var util_4 = _require(_dependencyMap[1], "@firebase/util");

    var util_5 = _require(_dependencyMap[1], "@firebase/util");

    var ServerActions_1 = _require(_dependencyMap[3], "./ServerActions");

    var ReadonlyRestClient = function (_super) {
        tslib_1.__extends(ReadonlyRestClient, _super);

        function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_) {
            var _this = _super.call(this) || this;

            _this.repoInfo_ = repoInfo_;
            _this.onDataUpdate_ = onDataUpdate_;
            _this.authTokenProvider_ = authTokenProvider_;
            _this.log_ = util_2.logWrapper('p:rest:');
            _this.listens_ = {};
            return _this;
        }

        ReadonlyRestClient.prototype.reportStats = function (stats) {
            throw new Error('Method not implemented.');
        };

        ReadonlyRestClient.getListenId_ = function (query, tag) {
            if (tag !== undefined) {
                return 'tag$' + tag;
            } else {
                util_1.assert(query.getQueryParams().isDefault(), "should have a tag if it's not a default query.");
                return query.path.toString();
            }
        };

        ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {
            var _this = this;

            var pathString = query.path.toString();
            this.log_('Listen called for ' + pathString + ' ' + query.queryIdentifier());
            var listenId = ReadonlyRestClient.getListenId_(query, tag);
            var thisListen = {};
            this.listens_[listenId] = thisListen;
            var queryStringParamaters = query.getQueryParams().toRestQueryStringParameters();
            this.restRequest_(pathString + '.json', queryStringParamaters, function (error, result) {
                var data = result;

                if (error === 404) {
                    data = null;
                    error = null;
                }

                if (error === null) {
                    _this.onDataUpdate_(pathString, data, false, tag);
                }

                if (util_4.safeGet(_this.listens_, listenId) === thisListen) {
                    var status_1;

                    if (!error) {
                        status_1 = 'ok';
                    } else if (error == 401) {
                        status_1 = 'permission_denied';
                    } else {
                        status_1 = 'rest_error:' + error;
                    }

                    onComplete(status_1, null);
                }
            });
        };

        ReadonlyRestClient.prototype.unlisten = function (query, tag) {
            var listenId = ReadonlyRestClient.getListenId_(query, tag);
            delete this.listens_[listenId];
        };

        ReadonlyRestClient.prototype.refreshAuthToken = function (token) {};

        ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {
            var _this = this;

            if (queryStringParameters === void 0) {
                queryStringParameters = {};
            }

            queryStringParameters['format'] = 'export';
            this.authTokenProvider_.getToken(false).then(function (authTokenData) {
                var authToken = authTokenData && authTokenData.accessToken;

                if (authToken) {
                    queryStringParameters['auth'] = authToken;
                }

                var url = (_this.repoInfo_.secure ? 'https://' : 'http://') + _this.repoInfo_.host + pathString + '?' + util_5.querystring(queryStringParameters);

                _this.log_('Sending REST request for ' + url);

                var xhr = new XMLHttpRequest();

                xhr.onreadystatechange = function () {
                    if (callback && xhr.readyState === 4) {
                        _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);

                        var res = null;

                        if (xhr.status >= 200 && xhr.status < 300) {
                            try {
                                res = util_3.jsonEval(xhr.responseText);
                            } catch (e) {
                                util_2.warn('Failed to parse JSON response for ' + url + ': ' + xhr.responseText);
                            }

                            callback(null, res);
                        } else {
                            if (xhr.status !== 401 && xhr.status !== 404) {
                                util_2.warn('Got unsuccessful REST response for ' + url + ' Status: ' + xhr.status);
                            }

                            callback(xhr.status);
                        }

                        callback = null;
                    }
                };

                xhr.open('GET', url, true);
                xhr.send();
            });
        };

        return ReadonlyRestClient;
    }(ServerActions_1.ServerActions);

    exports.ReadonlyRestClient = ReadonlyRestClient;
},604,[521,508,531,603],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\ReadonlyRestClient.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "@firebase/util");

    var util_2 = _require(_dependencyMap[1], "../util/util");

    var KeyIndex_1 = _require(_dependencyMap[2], "../snap/indexes/KeyIndex");

    var PriorityIndex_1 = _require(_dependencyMap[3], "../snap/indexes/PriorityIndex");

    var ValueIndex_1 = _require(_dependencyMap[4], "../snap/indexes/ValueIndex");

    var PathIndex_1 = _require(_dependencyMap[5], "../snap/indexes/PathIndex");

    var IndexedFilter_1 = _require(_dependencyMap[6], "./filter/IndexedFilter");

    var LimitedFilter_1 = _require(_dependencyMap[7], "./filter/LimitedFilter");

    var RangedFilter_1 = _require(_dependencyMap[8], "./filter/RangedFilter");

    var util_3 = _require(_dependencyMap[0], "@firebase/util");

    var QueryParams = function () {
        function QueryParams() {
            this.limitSet_ = false;
            this.startSet_ = false;
            this.startNameSet_ = false;
            this.endSet_ = false;
            this.endNameSet_ = false;
            this.limit_ = 0;
            this.viewFrom_ = '';
            this.indexStartValue_ = null;
            this.indexStartName_ = '';
            this.indexEndValue_ = null;
            this.indexEndName_ = '';
            this.index_ = PriorityIndex_1.PRIORITY_INDEX;
        }

        QueryParams.prototype.hasStart = function () {
            return this.startSet_;
        };

        QueryParams.prototype.isViewFromLeft = function () {
            if (this.viewFrom_ === '') {
                return this.startSet_;
            } else {
                return this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;
            }
        };

        QueryParams.prototype.getIndexStartValue = function () {
            util_1.assert(this.startSet_, 'Only valid if start has been set');
            return this.indexStartValue_;
        };

        QueryParams.prototype.getIndexStartName = function () {
            util_1.assert(this.startSet_, 'Only valid if start has been set');

            if (this.startNameSet_) {
                return this.indexStartName_;
            } else {
                return util_2.MIN_NAME;
            }
        };

        QueryParams.prototype.hasEnd = function () {
            return this.endSet_;
        };

        QueryParams.prototype.getIndexEndValue = function () {
            util_1.assert(this.endSet_, 'Only valid if end has been set');
            return this.indexEndValue_;
        };

        QueryParams.prototype.getIndexEndName = function () {
            util_1.assert(this.endSet_, 'Only valid if end has been set');

            if (this.endNameSet_) {
                return this.indexEndName_;
            } else {
                return util_2.MAX_NAME;
            }
        };

        QueryParams.prototype.hasLimit = function () {
            return this.limitSet_;
        };

        QueryParams.prototype.hasAnchoredLimit = function () {
            return this.limitSet_ && this.viewFrom_ !== '';
        };

        QueryParams.prototype.getLimit = function () {
            util_1.assert(this.limitSet_, 'Only valid if limit has been set');
            return this.limit_;
        };

        QueryParams.prototype.getIndex = function () {
            return this.index_;
        };

        QueryParams.prototype.copy_ = function () {
            var copy = new QueryParams();
            copy.limitSet_ = this.limitSet_;
            copy.limit_ = this.limit_;
            copy.startSet_ = this.startSet_;
            copy.indexStartValue_ = this.indexStartValue_;
            copy.startNameSet_ = this.startNameSet_;
            copy.indexStartName_ = this.indexStartName_;
            copy.endSet_ = this.endSet_;
            copy.indexEndValue_ = this.indexEndValue_;
            copy.endNameSet_ = this.endNameSet_;
            copy.indexEndName_ = this.indexEndName_;
            copy.index_ = this.index_;
            copy.viewFrom_ = this.viewFrom_;
            return copy;
        };

        QueryParams.prototype.limit = function (newLimit) {
            var newParams = this.copy_();
            newParams.limitSet_ = true;
            newParams.limit_ = newLimit;
            newParams.viewFrom_ = '';
            return newParams;
        };

        QueryParams.prototype.limitToFirst = function (newLimit) {
            var newParams = this.copy_();
            newParams.limitSet_ = true;
            newParams.limit_ = newLimit;
            newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;
            return newParams;
        };

        QueryParams.prototype.limitToLast = function (newLimit) {
            var newParams = this.copy_();
            newParams.limitSet_ = true;
            newParams.limit_ = newLimit;
            newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;
            return newParams;
        };

        QueryParams.prototype.startAt = function (indexValue, key) {
            var newParams = this.copy_();
            newParams.startSet_ = true;

            if (!(indexValue !== undefined)) {
                indexValue = null;
            }

            newParams.indexStartValue_ = indexValue;

            if (key != null) {
                newParams.startNameSet_ = true;
                newParams.indexStartName_ = key;
            } else {
                newParams.startNameSet_ = false;
                newParams.indexStartName_ = '';
            }

            return newParams;
        };

        QueryParams.prototype.endAt = function (indexValue, key) {
            var newParams = this.copy_();
            newParams.endSet_ = true;

            if (!(indexValue !== undefined)) {
                indexValue = null;
            }

            newParams.indexEndValue_ = indexValue;

            if (key !== undefined) {
                newParams.endNameSet_ = true;
                newParams.indexEndName_ = key;
            } else {
                newParams.endNameSet_ = false;
                newParams.indexEndName_ = '';
            }

            return newParams;
        };

        QueryParams.prototype.orderBy = function (index) {
            var newParams = this.copy_();
            newParams.index_ = index;
            return newParams;
        };

        QueryParams.prototype.getQueryObject = function () {
            var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;
            var obj = {};

            if (this.startSet_) {
                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;

                if (this.startNameSet_) {
                    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;
                }
            }

            if (this.endSet_) {
                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;

                if (this.endNameSet_) {
                    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;
                }
            }

            if (this.limitSet_) {
                obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;
                var viewFrom = this.viewFrom_;

                if (viewFrom === '') {
                    if (this.isViewFromLeft()) {
                        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;
                    } else {
                        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;
                    }
                }

                obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;
            }

            if (this.index_ !== PriorityIndex_1.PRIORITY_INDEX) {
                obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();
            }

            return obj;
        };

        QueryParams.prototype.loadsAllData = function () {
            return !(this.startSet_ || this.endSet_ || this.limitSet_);
        };

        QueryParams.prototype.isDefault = function () {
            return this.loadsAllData() && this.index_ == PriorityIndex_1.PRIORITY_INDEX;
        };

        QueryParams.prototype.getNodeFilter = function () {
            if (this.loadsAllData()) {
                return new IndexedFilter_1.IndexedFilter(this.getIndex());
            } else if (this.hasLimit()) {
                return new LimitedFilter_1.LimitedFilter(this);
            } else {
                return new RangedFilter_1.RangedFilter(this);
            }
        };

        QueryParams.prototype.toRestQueryStringParameters = function () {
            var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;
            var qs = {};

            if (this.isDefault()) {
                return qs;
            }

            var orderBy;

            if (this.index_ === PriorityIndex_1.PRIORITY_INDEX) {
                orderBy = REST_CONSTANTS.PRIORITY_INDEX;
            } else if (this.index_ === ValueIndex_1.VALUE_INDEX) {
                orderBy = REST_CONSTANTS.VALUE_INDEX;
            } else if (this.index_ === KeyIndex_1.KEY_INDEX) {
                orderBy = REST_CONSTANTS.KEY_INDEX;
            } else {
                util_1.assert(this.index_ instanceof PathIndex_1.PathIndex, 'Unrecognized index type!');
                orderBy = this.index_.toString();
            }

            qs[REST_CONSTANTS.ORDER_BY] = util_3.stringify(orderBy);

            if (this.startSet_) {
                qs[REST_CONSTANTS.START_AT] = util_3.stringify(this.indexStartValue_);

                if (this.startNameSet_) {
                    qs[REST_CONSTANTS.START_AT] += ',' + util_3.stringify(this.indexStartName_);
                }
            }

            if (this.endSet_) {
                qs[REST_CONSTANTS.END_AT] = util_3.stringify(this.indexEndValue_);

                if (this.endNameSet_) {
                    qs[REST_CONSTANTS.END_AT] += ',' + util_3.stringify(this.indexEndName_);
                }
            }

            if (this.limitSet_) {
                if (this.isViewFromLeft()) {
                    qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;
                } else {
                    qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;
                }
            }

            return qs;
        };

        QueryParams.WIRE_PROTOCOL_CONSTANTS_ = {
            INDEX_START_VALUE: 'sp',
            INDEX_START_NAME: 'sn',
            INDEX_END_VALUE: 'ep',
            INDEX_END_NAME: 'en',
            LIMIT: 'l',
            VIEW_FROM: 'vf',
            VIEW_FROM_LEFT: 'l',
            VIEW_FROM_RIGHT: 'r',
            INDEX: 'i'
        };
        QueryParams.REST_QUERY_CONSTANTS_ = {
            ORDER_BY: 'orderBy',
            PRIORITY_INDEX: '$priority',
            VALUE_INDEX: '$value',
            KEY_INDEX: '$key',
            START_AT: 'startAt',
            END_AT: 'endAt',
            LIMIT_TO_FIRST: 'limitToFirst',
            LIMIT_TO_LAST: 'limitToLast'
        };
        QueryParams.DEFAULT = new QueryParams();
        return QueryParams;
    }();

    exports.QueryParams = QueryParams;
},605,[508,531,547,550,553,560,579,606,607],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\view\\QueryParams.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var RangedFilter_1 = _require(_dependencyMap[0], "./RangedFilter");

    var ChildrenNode_1 = _require(_dependencyMap[1], "../../snap/ChildrenNode");

    var Node_1 = _require(_dependencyMap[2], "../../snap/Node");

    var util_1 = _require(_dependencyMap[3], "@firebase/util");

    var Change_1 = _require(_dependencyMap[4], "../Change");

    var LimitedFilter = function () {
        function LimitedFilter(params) {
            this.rangedFilter_ = new RangedFilter_1.RangedFilter(params);
            this.index_ = params.getIndex();
            this.limit_ = params.getLimit();
            this.reverse_ = !params.isViewFromLeft();
        }

        LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
            if (!this.rangedFilter_.matches(new Node_1.NamedNode(key, newChild))) {
                newChild = ChildrenNode_1.ChildrenNode.EMPTY_NODE;
            }

            if (snap.getImmediateChild(key).equals(newChild)) {
                return snap;
            } else if (snap.numChildren() < this.limit_) {
                return this.rangedFilter_.getIndexedFilter().updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
            } else {
                return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);
            }
        };

        LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
            var filtered;

            if (newSnap.isLeafNode() || newSnap.isEmpty()) {
                filtered = ChildrenNode_1.ChildrenNode.EMPTY_NODE.withIndex(this.index_);
            } else {
                if (this.limit_ * 2 < newSnap.numChildren() && newSnap.isIndexed(this.index_)) {
                    filtered = ChildrenNode_1.ChildrenNode.EMPTY_NODE.withIndex(this.index_);
                    var iterator = void 0;

                    if (this.reverse_) {
                        iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);
                    } else {
                        iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);
                    }

                    var count = 0;

                    while (iterator.hasNext() && count < this.limit_) {
                        var next = iterator.getNext();
                        var inRange = void 0;

                        if (this.reverse_) {
                            inRange = this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;
                        } else {
                            inRange = this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;
                        }

                        if (inRange) {
                            filtered = filtered.updateImmediateChild(next.name, next.node);
                            count++;
                        } else {
                            break;
                        }
                    }
                } else {
                    filtered = newSnap.withIndex(this.index_);
                    filtered = filtered.updatePriority(ChildrenNode_1.ChildrenNode.EMPTY_NODE);
                    var startPost = void 0;
                    var endPost = void 0;
                    var cmp = void 0;
                    var iterator = void 0;

                    if (this.reverse_) {
                        iterator = filtered.getReverseIterator(this.index_);
                        startPost = this.rangedFilter_.getEndPost();
                        endPost = this.rangedFilter_.getStartPost();
                        var indexCompare_1 = this.index_.getCompare();

                        cmp = function cmp(a, b) {
                            return indexCompare_1(b, a);
                        };
                    } else {
                        iterator = filtered.getIterator(this.index_);
                        startPost = this.rangedFilter_.getStartPost();
                        endPost = this.rangedFilter_.getEndPost();
                        cmp = this.index_.getCompare();
                    }

                    var count = 0;
                    var foundStartPost = false;

                    while (iterator.hasNext()) {
                        var next = iterator.getNext();

                        if (!foundStartPost && cmp(startPost, next) <= 0) {
                            foundStartPost = true;
                        }

                        var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;

                        if (inRange) {
                            count++;
                        } else {
                            filtered = filtered.updateImmediateChild(next.name, ChildrenNode_1.ChildrenNode.EMPTY_NODE);
                        }
                    }
                }
            }

            return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap, filtered, optChangeAccumulator);
        };

        LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
            return oldSnap;
        };

        LimitedFilter.prototype.filtersNodes = function () {
            return true;
        };

        LimitedFilter.prototype.getIndexedFilter = function () {
            return this.rangedFilter_.getIndexedFilter();
        };

        LimitedFilter.prototype.getIndex = function () {
            return this.index_;
        };

        LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {
            var cmp;

            if (this.reverse_) {
                var indexCmp_1 = this.index_.getCompare();

                cmp = function cmp(a, b) {
                    return indexCmp_1(b, a);
                };
            } else {
                cmp = this.index_.getCompare();
            }

            var oldEventCache = snap;
            util_1.assert(oldEventCache.numChildren() == this.limit_, '');
            var newChildNamedNode = new Node_1.NamedNode(childKey, childSnap);
            var windowBoundary = this.reverse_ ? oldEventCache.getFirstChild(this.index_) : oldEventCache.getLastChild(this.index_);
            var inRange = this.rangedFilter_.matches(newChildNamedNode);

            if (oldEventCache.hasChild(childKey)) {
                var oldChildSnap = oldEventCache.getImmediateChild(childKey);
                var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);

                while (nextChild != null && (nextChild.name == childKey || oldEventCache.hasChild(nextChild.name))) {
                    nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);
                }

                var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);
                var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;

                if (remainsInWindow) {
                    if (changeAccumulator != null) {
                        changeAccumulator.trackChildChange(Change_1.Change.childChangedChange(childKey, childSnap, oldChildSnap));
                    }

                    return oldEventCache.updateImmediateChild(childKey, childSnap);
                } else {
                    if (changeAccumulator != null) {
                        changeAccumulator.trackChildChange(Change_1.Change.childRemovedChange(childKey, oldChildSnap));
                    }

                    var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode_1.ChildrenNode.EMPTY_NODE);
                    var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);

                    if (nextChildInRange) {
                        if (changeAccumulator != null) {
                            changeAccumulator.trackChildChange(Change_1.Change.childAddedChange(nextChild.name, nextChild.node));
                        }

                        return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);
                    } else {
                        return newEventCache;
                    }
                }
            } else if (childSnap.isEmpty()) {
                return snap;
            } else if (inRange) {
                if (cmp(windowBoundary, newChildNamedNode) >= 0) {
                    if (changeAccumulator != null) {
                        changeAccumulator.trackChildChange(Change_1.Change.childRemovedChange(windowBoundary.name, windowBoundary.node));
                        changeAccumulator.trackChildChange(Change_1.Change.childAddedChange(childKey, childSnap));
                    }

                    return oldEventCache.updateImmediateChild(childKey, childSnap).updateImmediateChild(windowBoundary.name, ChildrenNode_1.ChildrenNode.EMPTY_NODE);
                } else {
                    return snap;
                }
            } else {
                return snap;
            }
        };

        return LimitedFilter;
    }();

    exports.LimitedFilter = LimitedFilter;
},606,[607,555,549,508,580],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\view\\filter\\LimitedFilter.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var IndexedFilter_1 = _require(_dependencyMap[0], "./IndexedFilter");

    var PriorityIndex_1 = _require(_dependencyMap[1], "../../snap/indexes/PriorityIndex");

    var Node_1 = _require(_dependencyMap[2], "../../../core/snap/Node");

    var ChildrenNode_1 = _require(_dependencyMap[3], "../../snap/ChildrenNode");

    var RangedFilter = function () {
        function RangedFilter(params) {
            this.indexedFilter_ = new IndexedFilter_1.IndexedFilter(params.getIndex());
            this.index_ = params.getIndex();
            this.startPost_ = RangedFilter.getStartPost_(params);
            this.endPost_ = RangedFilter.getEndPost_(params);
        }

        RangedFilter.prototype.getStartPost = function () {
            return this.startPost_;
        };

        RangedFilter.prototype.getEndPost = function () {
            return this.endPost_;
        };

        RangedFilter.prototype.matches = function (node) {
            return this.index_.compare(this.getStartPost(), node) <= 0 && this.index_.compare(node, this.getEndPost()) <= 0;
        };

        RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
            if (!this.matches(new Node_1.NamedNode(key, newChild))) {
                newChild = ChildrenNode_1.ChildrenNode.EMPTY_NODE;
            }

            return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
        };

        RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
            if (newSnap.isLeafNode()) {
                newSnap = ChildrenNode_1.ChildrenNode.EMPTY_NODE;
            }

            var filtered = newSnap.withIndex(this.index_);
            filtered = filtered.updatePriority(ChildrenNode_1.ChildrenNode.EMPTY_NODE);
            var self = this;
            newSnap.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, childNode) {
                if (!self.matches(new Node_1.NamedNode(key, childNode))) {
                    filtered = filtered.updateImmediateChild(key, ChildrenNode_1.ChildrenNode.EMPTY_NODE);
                }
            });
            return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);
        };

        RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
            return oldSnap;
        };

        RangedFilter.prototype.filtersNodes = function () {
            return true;
        };

        RangedFilter.prototype.getIndexedFilter = function () {
            return this.indexedFilter_;
        };

        RangedFilter.prototype.getIndex = function () {
            return this.index_;
        };

        RangedFilter.getStartPost_ = function (params) {
            if (params.hasStart()) {
                var startName = params.getIndexStartName();
                return params.getIndex().makePost(params.getIndexStartValue(), startName);
            } else {
                return params.getIndex().minPost();
            }
        };

        RangedFilter.getEndPost_ = function (params) {
            if (params.hasEnd()) {
                var endName = params.getIndexEndName();
                return params.getIndex().makePost(params.getIndexEndValue(), endName);
            } else {
                return params.getIndex().maxPost();
            }
        };

        return RangedFilter;
    }();

    exports.RangedFilter = RangedFilter;
},607,[579,550,549,555],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\view\\filter\\RangedFilter.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "@firebase/util");

    var Repo_1 = _require(_dependencyMap[1], "./Repo");

    var util_2 = _require(_dependencyMap[2], "./util/util");

    var parser_1 = _require(_dependencyMap[3], "./util/libs/parser");

    var validation_1 = _require(_dependencyMap[4], "./util/validation");

    _require(_dependencyMap[5], "./Repo_transaction");

    var DATABASE_URL_OPTION = 'databaseURL';

    var _staticInstance;

    var RepoManager = function () {
        function RepoManager() {
            this.repos_ = {};
            this.useRestClient_ = false;
        }

        RepoManager.getInstance = function () {
            if (!_staticInstance) {
                _staticInstance = new RepoManager();
            }

            return _staticInstance;
        };

        RepoManager.prototype.interrupt = function () {
            for (var appName in this.repos_) {
                for (var dbUrl in this.repos_[appName]) {
                    this.repos_[appName][dbUrl].interrupt();
                }
            }
        };

        RepoManager.prototype.resume = function () {
            for (var appName in this.repos_) {
                for (var dbUrl in this.repos_[appName]) {
                    this.repos_[appName][dbUrl].resume();
                }
            }
        };

        RepoManager.prototype.databaseFromApp = function (app, url) {
            var dbUrl = url || app.options[DATABASE_URL_OPTION];

            if (dbUrl === undefined) {
                util_2.fatal("Can't determine Firebase Database URL.  Be sure to include " + DATABASE_URL_OPTION + ' option when calling firebase.initializeApp().');
            }

            var parsedUrl = parser_1.parseRepoInfo(dbUrl);
            var repoInfo = parsedUrl.repoInfo;
            validation_1.validateUrl('Invalid Firebase Database URL', 1, parsedUrl);

            if (!parsedUrl.path.isEmpty()) {
                util_2.fatal('Database URL must point to the root of a Firebase Database ' + '(not including a child path).');
            }

            var repo = this.createRepo(repoInfo, app);
            return repo.database;
        };

        RepoManager.prototype.deleteRepo = function (repo) {
            var appRepos = util_1.safeGet(this.repos_, repo.app.name);

            if (!appRepos || util_1.safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {
                util_2.fatal("Database " + repo.app.name + "(" + repo.repoInfo_ + ") has already been deleted.");
            }

            repo.interrupt();
            delete appRepos[repo.repoInfo_.toURLString()];
        };

        RepoManager.prototype.createRepo = function (repoInfo, app) {
            var appRepos = util_1.safeGet(this.repos_, app.name);

            if (!appRepos) {
                appRepos = {};
                this.repos_[app.name] = appRepos;
            }

            var repo = util_1.safeGet(appRepos, repoInfo.toURLString());

            if (repo) {
                util_2.fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');
            }

            repo = new Repo_1.Repo(repoInfo, this.useRestClient_, app);
            appRepos[repoInfo.toURLString()] = repo;
            return repo;
        };

        RepoManager.prototype.forceRestClient = function (forceRestClient) {
            this.useRestClient_ = forceRestClient;
        };

        return RepoManager;
    }();

    exports.RepoManager = RepoManager;
},608,[508,564,531,537,543,609],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\RepoManager.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "@firebase/util");

    var Reference_1 = _require(_dependencyMap[1], "../api/Reference");

    var DataSnapshot_1 = _require(_dependencyMap[2], "../api/DataSnapshot");

    var Path_1 = _require(_dependencyMap[3], "./util/Path");

    var Tree_1 = _require(_dependencyMap[4], "./util/Tree");

    var PriorityIndex_1 = _require(_dependencyMap[5], "./snap/indexes/PriorityIndex");

    var util_2 = _require(_dependencyMap[6], "./util/util");

    var ServerValues_1 = _require(_dependencyMap[7], "./util/ServerValues");

    var validation_1 = _require(_dependencyMap[8], "./util/validation");

    var util_3 = _require(_dependencyMap[0], "@firebase/util");

    var nodeFromJSON_1 = _require(_dependencyMap[9], "./snap/nodeFromJSON");

    var ChildrenNode_1 = _require(_dependencyMap[10], "./snap/ChildrenNode");

    var Repo_1 = _require(_dependencyMap[11], "./Repo");

    var TransactionStatus;

    (function (TransactionStatus) {
        TransactionStatus[TransactionStatus["RUN"] = 0] = "RUN";
        TransactionStatus[TransactionStatus["SENT"] = 1] = "SENT";
        TransactionStatus[TransactionStatus["COMPLETED"] = 2] = "COMPLETED";
        TransactionStatus[TransactionStatus["SENT_NEEDS_ABORT"] = 3] = "SENT_NEEDS_ABORT";
        TransactionStatus[TransactionStatus["NEEDS_ABORT"] = 4] = "NEEDS_ABORT";
    })(TransactionStatus = exports.TransactionStatus || (exports.TransactionStatus = {}));

    Repo_1.Repo.MAX_TRANSACTION_RETRIES_ = 25;

    Repo_1.Repo.prototype.transactions_init_ = function () {
        this.transactionQueueTree_ = new Tree_1.Tree();
    };

    Repo_1.Repo.prototype.startTransaction = function (path, transactionUpdate, onComplete, applyLocally) {
        this.log_('transaction on ' + path);

        var valueCallback = function valueCallback() {};

        var watchRef = new Reference_1.Reference(this, path);
        watchRef.on('value', valueCallback);

        var unwatcher = function unwatcher() {
            watchRef.off('value', valueCallback);
        };

        var transaction = {
            path: path,
            update: transactionUpdate,
            onComplete: onComplete,
            status: null,
            order: util_2.LUIDGenerator(),
            applyLocally: applyLocally,
            retryCount: 0,
            unwatcher: unwatcher,
            abortReason: null,
            currentWriteId: null,
            currentInputSnapshot: null,
            currentOutputSnapshotRaw: null,
            currentOutputSnapshotResolved: null
        };
        var currentState = this.getLatestState_(path);
        transaction.currentInputSnapshot = currentState;
        var newVal = transaction.update(currentState.val());

        if (newVal === undefined) {
            transaction.unwatcher();
            transaction.currentOutputSnapshotRaw = null;
            transaction.currentOutputSnapshotResolved = null;

            if (transaction.onComplete) {
                var snapshot = new DataSnapshot_1.DataSnapshot(transaction.currentInputSnapshot, new Reference_1.Reference(this, transaction.path), PriorityIndex_1.PRIORITY_INDEX);
                transaction.onComplete(null, false, snapshot);
            }
        } else {
            validation_1.validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);
            transaction.status = TransactionStatus.RUN;
            var queueNode = this.transactionQueueTree_.subTree(path);
            var nodeQueue = queueNode.getValue() || [];
            nodeQueue.push(transaction);
            queueNode.setValue(nodeQueue);
            var priorityForNode = void 0;

            if (typeof newVal === 'object' && newVal !== null && util_3.contains(newVal, '.priority')) {
                priorityForNode = util_3.safeGet(newVal, '.priority');
                util_1.assert(validation_1.isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' + 'Priority must be a valid string, finite number, server value, or null.');
            } else {
                var currentNode = this.serverSyncTree_.calcCompleteEventCache(path) || ChildrenNode_1.ChildrenNode.EMPTY_NODE;
                priorityForNode = currentNode.getPriority().val();
            }

            priorityForNode = priorityForNode;
            var serverValues = this.generateServerValues();
            var newNodeUnresolved = nodeFromJSON_1.nodeFromJSON(newVal, priorityForNode);
            var newNode = ServerValues_1.resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);
            transaction.currentOutputSnapshotRaw = newNodeUnresolved;
            transaction.currentOutputSnapshotResolved = newNode;
            transaction.currentWriteId = this.getNextWriteId_();
            var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);
            this.eventQueue_.raiseEventsForChangedPath(path, events);
            this.sendReadyTransactions_();
        }
    };

    Repo_1.Repo.prototype.getLatestState_ = function (path, excludeSets) {
        return this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) || ChildrenNode_1.ChildrenNode.EMPTY_NODE;
    };

    Repo_1.Repo.prototype.sendReadyTransactions_ = function (node) {
        var _this = this;

        if (node === void 0) {
            node = this.transactionQueueTree_;
        }

        if (!node) {
            this.pruneCompletedTransactionsBelowNode_(node);
        }

        if (node.getValue() !== null) {
            var queue = this.buildTransactionQueue_(node);
            util_1.assert(queue.length > 0, 'Sending zero length transaction queue');
            var allRun = queue.every(function (transaction) {
                return transaction.status === TransactionStatus.RUN;
            });

            if (allRun) {
                this.sendTransactionQueue_(node.path(), queue);
            }
        } else if (node.hasChildren()) {
            node.forEachChild(function (childNode) {
                _this.sendReadyTransactions_(childNode);
            });
        }
    };

    Repo_1.Repo.prototype.sendTransactionQueue_ = function (path, queue) {
        var _this = this;

        var setsToIgnore = queue.map(function (txn) {
            return txn.currentWriteId;
        });
        var latestState = this.getLatestState_(path, setsToIgnore);
        var snapToSend = latestState;
        var latestHash = latestState.hash();

        for (var i = 0; i < queue.length; i++) {
            var txn = queue[i];
            util_1.assert(txn.status === TransactionStatus.RUN, 'tryToSendTransactionQueue_: items in queue should all be run.');
            txn.status = TransactionStatus.SENT;
            txn.retryCount++;
            var relativePath = Path_1.Path.relativePath(path, txn.path);
            snapToSend = snapToSend.updateChild(relativePath, txn.currentOutputSnapshotRaw);
        }

        var dataToSend = snapToSend.val(true);
        var pathToSend = path;
        this.server_.put(pathToSend.toString(), dataToSend, function (status) {
            _this.log_('transaction put response', {
                path: pathToSend.toString(),
                status: status
            });

            var events = [];

            if (status === 'ok') {
                var callbacks = [];

                for (var i = 0; i < queue.length; i++) {
                    queue[i].status = TransactionStatus.COMPLETED;
                    events = events.concat(_this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));

                    if (queue[i].onComplete) {
                        var node = queue[i].currentOutputSnapshotResolved;
                        var ref = new Reference_1.Reference(_this, queue[i].path);
                        var snapshot = new DataSnapshot_1.DataSnapshot(node, ref, PriorityIndex_1.PRIORITY_INDEX);
                        callbacks.push(queue[i].onComplete.bind(null, null, true, snapshot));
                    }

                    queue[i].unwatcher();
                }

                _this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path));

                _this.sendReadyTransactions_();

                _this.eventQueue_.raiseEventsForChangedPath(path, events);

                for (var i = 0; i < callbacks.length; i++) {
                    util_2.exceptionGuard(callbacks[i]);
                }
            } else {
                if (status === 'datastale') {
                    for (var i = 0; i < queue.length; i++) {
                        if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) queue[i].status = TransactionStatus.NEEDS_ABORT;else queue[i].status = TransactionStatus.RUN;
                    }
                } else {
                    util_2.warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);

                    for (var i = 0; i < queue.length; i++) {
                        queue[i].status = TransactionStatus.NEEDS_ABORT;
                        queue[i].abortReason = status;
                    }
                }

                _this.rerunTransactions_(path);
            }
        }, latestHash);
    };

    Repo_1.Repo.prototype.rerunTransactions_ = function (changedPath) {
        var rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);
        var path = rootMostTransactionNode.path();
        var queue = this.buildTransactionQueue_(rootMostTransactionNode);
        this.rerunTransactionQueue_(queue, path);
        return path;
    };

    Repo_1.Repo.prototype.rerunTransactionQueue_ = function (queue, path) {
        if (queue.length === 0) {
            return;
        }

        var callbacks = [];
        var events = [];
        var txnsToRerun = queue.filter(function (q) {
            return q.status === TransactionStatus.RUN;
        });
        var setsToIgnore = txnsToRerun.map(function (q) {
            return q.currentWriteId;
        });

        for (var i = 0; i < queue.length; i++) {
            var transaction = queue[i];
            var relativePath = Path_1.Path.relativePath(path, transaction.path);
            var abortTransaction = false,
                abortReason = void 0;
            util_1.assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');

            if (transaction.status === TransactionStatus.NEEDS_ABORT) {
                abortTransaction = true;
                abortReason = transaction.abortReason;
                events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
            } else if (transaction.status === TransactionStatus.RUN) {
                if (transaction.retryCount >= Repo_1.Repo.MAX_TRANSACTION_RETRIES_) {
                    abortTransaction = true;
                    abortReason = 'maxretry';
                    events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
                } else {
                    var currentNode = this.getLatestState_(transaction.path, setsToIgnore);
                    transaction.currentInputSnapshot = currentNode;
                    var newData = queue[i].update(currentNode.val());

                    if (newData !== undefined) {
                        validation_1.validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);
                        var newDataNode = nodeFromJSON_1.nodeFromJSON(newData);
                        var hasExplicitPriority = typeof newData === 'object' && newData != null && util_3.contains(newData, '.priority');

                        if (!hasExplicitPriority) {
                            newDataNode = newDataNode.updatePriority(currentNode.getPriority());
                        }

                        var oldWriteId = transaction.currentWriteId;
                        var serverValues = this.generateServerValues();
                        var newNodeResolved = ServerValues_1.resolveDeferredValueSnapshot(newDataNode, serverValues);
                        transaction.currentOutputSnapshotRaw = newDataNode;
                        transaction.currentOutputSnapshotResolved = newNodeResolved;
                        transaction.currentWriteId = this.getNextWriteId_();
                        setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);
                        events = events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));
                        events = events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId, true));
                    } else {
                        abortTransaction = true;
                        abortReason = 'nodata';
                        events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
                    }
                }
            }

            this.eventQueue_.raiseEventsForChangedPath(path, events);
            events = [];

            if (abortTransaction) {
                queue[i].status = TransactionStatus.COMPLETED;

                (function (unwatcher) {
                    setTimeout(unwatcher, Math.floor(0));
                })(queue[i].unwatcher);

                if (queue[i].onComplete) {
                    if (abortReason === 'nodata') {
                        var ref = new Reference_1.Reference(this, queue[i].path);
                        var lastInput = queue[i].currentInputSnapshot;
                        var snapshot = new DataSnapshot_1.DataSnapshot(lastInput, ref, PriorityIndex_1.PRIORITY_INDEX);
                        callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));
                    } else {
                        callbacks.push(queue[i].onComplete.bind(null, new Error(abortReason), false, null));
                    }
                }
            }
        }

        this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);

        for (var i = 0; i < callbacks.length; i++) {
            util_2.exceptionGuard(callbacks[i]);
        }

        this.sendReadyTransactions_();
    };

    Repo_1.Repo.prototype.getAncestorTransactionNode_ = function (path) {
        var front;
        var transactionNode = this.transactionQueueTree_;

        while ((front = path.getFront()) !== null && transactionNode.getValue() === null) {
            transactionNode = transactionNode.subTree(front);
            path = path.popFront();
        }

        return transactionNode;
    };

    Repo_1.Repo.prototype.buildTransactionQueue_ = function (transactionNode) {
        var transactionQueue = [];
        this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);
        transactionQueue.sort(function (a, b) {
            return a.order - b.order;
        });
        return transactionQueue;
    };

    Repo_1.Repo.prototype.aggregateTransactionQueuesForNode_ = function (node, queue) {
        var _this = this;

        var nodeQueue = node.getValue();

        if (nodeQueue !== null) {
            for (var i = 0; i < nodeQueue.length; i++) {
                queue.push(nodeQueue[i]);
            }
        }

        node.forEachChild(function (child) {
            _this.aggregateTransactionQueuesForNode_(child, queue);
        });
    };

    Repo_1.Repo.prototype.pruneCompletedTransactionsBelowNode_ = function (node) {
        var _this = this;

        var queue = node.getValue();

        if (queue) {
            var to = 0;

            for (var from = 0; from < queue.length; from++) {
                if (queue[from].status !== TransactionStatus.COMPLETED) {
                    queue[to] = queue[from];
                    to++;
                }
            }

            queue.length = to;
            node.setValue(queue.length > 0 ? queue : null);
        }

        node.forEachChild(function (childNode) {
            _this.pruneCompletedTransactionsBelowNode_(childNode);
        });
    };

    Repo_1.Repo.prototype.abortTransactions_ = function (path) {
        var _this = this;

        var affectedPath = this.getAncestorTransactionNode_(path).path();
        var transactionNode = this.transactionQueueTree_.subTree(path);
        transactionNode.forEachAncestor(function (node) {
            _this.abortTransactionsOnNode_(node);
        });
        this.abortTransactionsOnNode_(transactionNode);
        transactionNode.forEachDescendant(function (node) {
            _this.abortTransactionsOnNode_(node);
        });
        return affectedPath;
    };

    Repo_1.Repo.prototype.abortTransactionsOnNode_ = function (node) {
        var queue = node.getValue();

        if (queue !== null) {
            var callbacks = [];
            var events = [];
            var lastSent = -1;

            for (var i = 0; i < queue.length; i++) {
                if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {} else if (queue[i].status === TransactionStatus.SENT) {
                    util_1.assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');
                    lastSent = i;
                    queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;
                    queue[i].abortReason = 'set';
                } else {
                    util_1.assert(queue[i].status === TransactionStatus.RUN, 'Unexpected transaction status in abort');
                    queue[i].unwatcher();
                    events = events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true));

                    if (queue[i].onComplete) {
                        var snapshot = null;
                        callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, snapshot));
                    }
                }
            }

            if (lastSent === -1) {
                node.setValue(null);
            } else {
                queue.length = lastSent + 1;
            }

            this.eventQueue_.raiseEventsForChangedPath(node.path(), events);

            for (var i = 0; i < callbacks.length; i++) {
                util_2.exceptionGuard(callbacks[i]);
            }
        }
    };
},609,[508,541,562,538,610,550,531,565,543,554,555,564],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\Repo_transaction.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = _require(_dependencyMap[0], "@firebase/util");

    var Path_1 = _require(_dependencyMap[1], "./Path");

    var util_2 = _require(_dependencyMap[0], "@firebase/util");

    var TreeNode = function () {
        function TreeNode() {
            this.children = {};
            this.childCount = 0;
            this.value = null;
        }

        return TreeNode;
    }();

    exports.TreeNode = TreeNode;

    var Tree = function () {
        function Tree(name_, parent_, node_) {
            if (name_ === void 0) {
                name_ = '';
            }

            if (parent_ === void 0) {
                parent_ = null;
            }

            if (node_ === void 0) {
                node_ = new TreeNode();
            }

            this.name_ = name_;
            this.parent_ = parent_;
            this.node_ = node_;
        }

        Tree.prototype.subTree = function (pathObj) {
            var path = pathObj instanceof Path_1.Path ? pathObj : new Path_1.Path(pathObj);
            var child = this,
                next;

            while ((next = path.getFront()) !== null) {
                var childNode = util_2.safeGet(child.node_.children, next) || new TreeNode();
                child = new Tree(next, child, childNode);
                path = path.popFront();
            }

            return child;
        };

        Tree.prototype.getValue = function () {
            return this.node_.value;
        };

        Tree.prototype.setValue = function (value) {
            util_1.assert(typeof value !== 'undefined', 'Cannot set value to undefined');
            this.node_.value = value;
            this.updateParents_();
        };

        Tree.prototype.clear = function () {
            this.node_.value = null;
            this.node_.children = {};
            this.node_.childCount = 0;
            this.updateParents_();
        };

        Tree.prototype.hasChildren = function () {
            return this.node_.childCount > 0;
        };

        Tree.prototype.isEmpty = function () {
            return this.getValue() === null && !this.hasChildren();
        };

        Tree.prototype.forEachChild = function (action) {
            var _this = this;

            util_2.forEach(this.node_.children, function (child, childTree) {
                action(new Tree(child, _this, childTree));
            });
        };

        Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {
            if (includeSelf && !childrenFirst) action(this);
            this.forEachChild(function (child) {
                child.forEachDescendant(action, true, childrenFirst);
            });
            if (includeSelf && childrenFirst) action(this);
        };

        Tree.prototype.forEachAncestor = function (action, includeSelf) {
            var node = includeSelf ? this : this.parent();

            while (node !== null) {
                if (action(node)) {
                    return true;
                }

                node = node.parent();
            }

            return false;
        };

        Tree.prototype.forEachImmediateDescendantWithValue = function (action) {
            this.forEachChild(function (child) {
                if (child.getValue() !== null) action(child);else child.forEachImmediateDescendantWithValue(action);
            });
        };

        Tree.prototype.path = function () {
            return new Path_1.Path(this.parent_ === null ? this.name_ : this.parent_.path() + '/' + this.name_);
        };

        Tree.prototype.name = function () {
            return this.name_;
        };

        Tree.prototype.parent = function () {
            return this.parent_;
        };

        Tree.prototype.updateParents_ = function () {
            if (this.parent_ !== null) this.parent_.updateChild_(this.name_, this);
        };

        Tree.prototype.updateChild_ = function (childName, child) {
            var childEmpty = child.isEmpty();
            var childExists = util_2.contains(this.node_.children, childName);

            if (childEmpty && childExists) {
                delete this.node_.children[childName];
                this.node_.childCount--;
                this.updateParents_();
            } else if (!childEmpty && !childExists) {
                this.node_.children[childName] = child.node_;
                this.node_.childCount++;
                this.updateParents_();
            }
        };

        return Tree;
    }();

    exports.Tree = Tree;
},610,[508,538],"node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\util\\Tree.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var WebSocketConnection_1 = _require(_dependencyMap[0], "../realtime/WebSocketConnection");

    var BrowserPollConnection_1 = _require(_dependencyMap[1], "../realtime/BrowserPollConnection");

    exports.forceLongPolling = function () {
        WebSocketConnection_1.WebSocketConnection.forceDisallow();
        BrowserPollConnection_1.BrowserPollConnection.forceAllow();
    };

    exports.forceWebSockets = function () {
        BrowserPollConnection_1.BrowserPollConnection.forceDisallow();
    };

    exports.isWebSocketsAvailable = function () {
        return WebSocketConnection_1.WebSocketConnection['isAvailable']();
    };

    exports.setSecurityDebugCallback = function (ref, callback) {
        ref.repo.persistentConnection_.securityDebugCallback_ = callback;
    };

    exports.stats = function (ref, showDelta) {
        ref.repo.stats(showDelta);
    };

    exports.statsIncrementCounter = function (ref, metric) {
        ref.repo.statsIncrementCounter(metric);
    };

    exports.dataUpdateCount = function (ref) {
        return ref.repo.dataUpdateCount;
    };

    exports.interceptServerData = function (ref, callback) {
        return ref.repo.interceptServerData_(callback);
    };
},611,[602,600],"node_modules\\@firebase\\database\\dist\\cjs\\src\\api\\internal.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var RepoInfo_1 = _require(_dependencyMap[0], "../core/RepoInfo");

    var PersistentConnection_1 = _require(_dependencyMap[1], "../core/PersistentConnection");

    var RepoManager_1 = _require(_dependencyMap[2], "../core/RepoManager");

    var Connection_1 = _require(_dependencyMap[3], "../realtime/Connection");

    exports.DataConnection = PersistentConnection_1.PersistentConnection;

    PersistentConnection_1.PersistentConnection.prototype.simpleListen = function (pathString, onComplete) {
        this.sendRequest('q', {
            p: pathString
        }, onComplete);
    };

    PersistentConnection_1.PersistentConnection.prototype.echo = function (data, onEcho) {
        this.sendRequest('echo', {
            d: data
        }, onEcho);
    };

    exports.RealTimeConnection = Connection_1.Connection;

    exports.hijackHash = function (newHash) {
        var oldPut = PersistentConnection_1.PersistentConnection.prototype.put;

        PersistentConnection_1.PersistentConnection.prototype.put = function (pathString, data, opt_onComplete, opt_hash) {
            if (opt_hash !== undefined) {
                opt_hash = newHash();
            }

            oldPut.call(this, pathString, data, opt_onComplete, opt_hash);
        };

        return function () {
            PersistentConnection_1.PersistentConnection.prototype.put = oldPut;
        };
    };

    exports.ConnectionTarget = RepoInfo_1.RepoInfo;

    exports.queryIdentifier = function (query) {
        return query.queryIdentifier();
    };

    exports.listens = function (firebaseRef) {
        return firebaseRef.repo.persistentConnection_.listens_;
    };

    exports.forceRestClient = function (forceRestClient) {
        RepoManager_1.RepoManager.getInstance().forceRestClient(forceRestClient);
    };
},612,[539,594,608,598],"node_modules\\@firebase\\database\\dist\\cjs\\src\\api\\test_access.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  _require(_dependencyMap[0], '@firebase/storage');
},613,[614],"node_modules\\firebase\\storage\\index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var app_1 = _require(_dependencyMap[0], "@firebase/app");

    var string_1 = _require(_dependencyMap[1], "./src/implementation/string");

    var taskenums_1 = _require(_dependencyMap[2], "./src/implementation/taskenums");

    var taskenums_2 = _require(_dependencyMap[2], "./src/implementation/taskenums");

    var xhriopool_1 = _require(_dependencyMap[3], "./src/implementation/xhriopool");

    var reference_1 = _require(_dependencyMap[4], "./src/reference");

    var service_1 = _require(_dependencyMap[5], "./src/service");

    var STORAGE_TYPE = 'storage';

    function factory(app, unused, opt_url) {
        return new service_1.Service(app, new xhriopool_1.XhrIoPool(), opt_url);
    }

    function registerStorage(instance) {
        var namespaceExports = {
            TaskState: taskenums_2.TaskState,
            TaskEvent: taskenums_1.TaskEvent,
            StringFormat: string_1.StringFormat,
            Storage: service_1.Service,
            Reference: reference_1.Reference
        };
        instance.INTERNAL.registerService(STORAGE_TYPE, factory, namespaceExports, undefined, true);
    }

    exports.registerStorage = registerStorage;
    registerStorage(app_1.default);
},614,[506,615,618,619,625,641],"node_modules\\@firebase\\storage\\dist\\cjs\\index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var errorsExports = _require(_dependencyMap[0], "./error");

    exports.StringFormat = {
        RAW: 'raw',
        BASE64: 'base64',
        BASE64URL: 'base64url',
        DATA_URL: 'data_url'
    };

    function formatValidator(stringFormat) {
        switch (stringFormat) {
            case exports.StringFormat.RAW:
            case exports.StringFormat.BASE64:
            case exports.StringFormat.BASE64URL:
            case exports.StringFormat.DATA_URL:
                return;

            default:
                throw 'Expected one of the event types: [' + exports.StringFormat.RAW + ', ' + exports.StringFormat.BASE64 + ', ' + exports.StringFormat.BASE64URL + ', ' + exports.StringFormat.DATA_URL + '].';
        }
    }

    exports.formatValidator = formatValidator;

    var StringData = function () {
        function StringData(data, opt_contentType) {
            this.data = data;
            this.contentType = opt_contentType || null;
        }

        return StringData;
    }();

    exports.StringData = StringData;

    function dataFromString(format, string) {
        switch (format) {
            case exports.StringFormat.RAW:
                return new StringData(utf8Bytes_(string));

            case exports.StringFormat.BASE64:
            case exports.StringFormat.BASE64URL:
                return new StringData(base64Bytes_(format, string));

            case exports.StringFormat.DATA_URL:
                return new StringData(dataURLBytes_(string), dataURLContentType_(string));
        }

        throw errorsExports.unknown();
    }

    exports.dataFromString = dataFromString;

    function utf8Bytes_(string) {
        var b = [];

        for (var i = 0; i < string.length; i++) {
            var c = string.charCodeAt(i);

            if (c <= 127) {
                b.push(c);
            } else {
                if (c <= 2047) {
                    b.push(192 | c >> 6, 128 | c & 63);
                } else {
                    if ((c & 64512) == 55296) {
                        var valid = i < string.length - 1 && (string.charCodeAt(i + 1) & 64512) == 56320;

                        if (!valid) {
                            b.push(239, 191, 189);
                        } else {
                            var hi = c;
                            var lo = string.charCodeAt(++i);
                            c = 65536 | (hi & 1023) << 10 | lo & 1023;
                            b.push(240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63, 128 | c & 63);
                        }
                    } else {
                        if ((c & 64512) == 56320) {
                            b.push(239, 191, 189);
                        } else {
                            b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);
                        }
                    }
                }
            }
        }

        return new Uint8Array(b);
    }

    exports.utf8Bytes_ = utf8Bytes_;

    function percentEncodedBytes_(string) {
        var decoded;

        try {
            decoded = decodeURIComponent(string);
        } catch (e) {
            throw errorsExports.invalidFormat(exports.StringFormat.DATA_URL, 'Malformed data URL.');
        }

        return utf8Bytes_(decoded);
    }

    exports.percentEncodedBytes_ = percentEncodedBytes_;

    function base64Bytes_(format, string) {
        switch (format) {
            case exports.StringFormat.BASE64:
                {
                    var hasMinus = string.indexOf('-') !== -1;
                    var hasUnder = string.indexOf('_') !== -1;

                    if (hasMinus || hasUnder) {
                        var invalidChar = hasMinus ? '-' : '_';
                        throw errorsExports.invalidFormat(format, "Invalid character '" + invalidChar + "' found: is it base64url encoded?");
                    }

                    break;
                }

            case exports.StringFormat.BASE64URL:
                {
                    var hasPlus = string.indexOf('+') !== -1;
                    var hasSlash = string.indexOf('/') !== -1;

                    if (hasPlus || hasSlash) {
                        var invalidChar = hasPlus ? '+' : '/';
                        throw errorsExports.invalidFormat(format, "Invalid character '" + invalidChar + "' found: is it base64 encoded?");
                    }

                    string = string.replace(/-/g, '+').replace(/_/g, '/');
                    break;
                }
        }

        var bytes;

        try {
            bytes = atob(string);
        } catch (e) {
            throw errorsExports.invalidFormat(format, 'Invalid character found');
        }

        var array = new Uint8Array(bytes.length);

        for (var i = 0; i < bytes.length; i++) {
            array[i] = bytes.charCodeAt(i);
        }

        return array;
    }

    exports.base64Bytes_ = base64Bytes_;

    var DataURLParts = function () {
        function DataURLParts(dataURL) {
            this.base64 = false;
            this.contentType = null;
            var matches = dataURL.match(/^data:([^,]+)?,/);

            if (matches === null) {
                throw errorsExports.invalidFormat(exports.StringFormat.DATA_URL, "Must be formatted 'data:[<mediatype>][;base64],<data>");
            }

            var middle = matches[1] || null;

            if (middle != null) {
                this.base64 = endsWith(middle, ';base64');
                this.contentType = this.base64 ? middle.substring(0, middle.length - ';base64'.length) : middle;
            }

            this.rest = dataURL.substring(dataURL.indexOf(',') + 1);
        }

        return DataURLParts;
    }();

    function dataURLBytes_(string) {
        var parts = new DataURLParts(string);

        if (parts.base64) {
            return base64Bytes_(exports.StringFormat.BASE64, parts.rest);
        } else {
            return percentEncodedBytes_(parts.rest);
        }
    }

    exports.dataURLBytes_ = dataURLBytes_;

    function dataURLContentType_(string) {
        var parts = new DataURLParts(string);
        return parts.contentType;
    }

    exports.dataURLContentType_ = dataURLContentType_;

    function endsWith(s, end) {
        var longEnough = s.length >= end.length;

        if (!longEnough) {
            return false;
        }

        return s.substring(s.length - end.length) === end;
    }
},615,[616],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\implementation\\string.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var constants_1 = _require(_dependencyMap[0], "./constants");

    var FirebaseStorageError = function () {
        function FirebaseStorageError(code, message) {
            this.code_ = prependCode(code);
            this.message_ = 'Firebase Storage: ' + message;
            this.serverResponse_ = null;
            this.name_ = 'FirebaseError';
        }

        FirebaseStorageError.prototype.codeProp = function () {
            return this.code;
        };

        FirebaseStorageError.prototype.codeEquals = function (code) {
            return prependCode(code) === this.codeProp();
        };

        FirebaseStorageError.prototype.serverResponseProp = function () {
            return this.serverResponse_;
        };

        FirebaseStorageError.prototype.setServerResponseProp = function (serverResponse) {
            this.serverResponse_ = serverResponse;
        };

        Object.defineProperty(FirebaseStorageError.prototype, "name", {
            get: function get() {
                return this.name_;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FirebaseStorageError.prototype, "code", {
            get: function get() {
                return this.code_;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FirebaseStorageError.prototype, "message", {
            get: function get() {
                return this.message_;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FirebaseStorageError.prototype, "serverResponse", {
            get: function get() {
                return this.serverResponse_;
            },
            enumerable: true,
            configurable: true
        });
        return FirebaseStorageError;
    }();

    exports.FirebaseStorageError = FirebaseStorageError;
    exports.errors = {};
    exports.Code = {
        UNKNOWN: 'unknown',
        OBJECT_NOT_FOUND: 'object-not-found',
        BUCKET_NOT_FOUND: 'bucket-not-found',
        PROJECT_NOT_FOUND: 'project-not-found',
        QUOTA_EXCEEDED: 'quota-exceeded',
        UNAUTHENTICATED: 'unauthenticated',
        UNAUTHORIZED: 'unauthorized',
        RETRY_LIMIT_EXCEEDED: 'retry-limit-exceeded',
        INVALID_CHECKSUM: 'invalid-checksum',
        CANCELED: 'canceled',
        INVALID_EVENT_NAME: 'invalid-event-name',
        INVALID_URL: 'invalid-url',
        INVALID_DEFAULT_BUCKET: 'invalid-default-bucket',
        NO_DEFAULT_BUCKET: 'no-default-bucket',
        CANNOT_SLICE_BLOB: 'cannot-slice-blob',
        SERVER_FILE_WRONG_SIZE: 'server-file-wrong-size',
        NO_DOWNLOAD_URL: 'no-download-url',
        INVALID_ARGUMENT: 'invalid-argument',
        INVALID_ARGUMENT_COUNT: 'invalid-argument-count',
        APP_DELETED: 'app-deleted',
        INVALID_ROOT_OPERATION: 'invalid-root-operation',
        INVALID_FORMAT: 'invalid-format',
        INTERNAL_ERROR: 'internal-error'
    };

    function prependCode(code) {
        return 'storage/' + code;
    }

    exports.prependCode = prependCode;

    function unknown() {
        var message = 'An unknown error occurred, please check the error payload for ' + 'server response.';
        return new FirebaseStorageError(exports.Code.UNKNOWN, message);
    }

    exports.unknown = unknown;

    function objectNotFound(path) {
        return new FirebaseStorageError(exports.Code.OBJECT_NOT_FOUND, "Object '" + path + "' does not exist.");
    }

    exports.objectNotFound = objectNotFound;

    function bucketNotFound(bucket) {
        return new FirebaseStorageError(exports.Code.BUCKET_NOT_FOUND, "Bucket '" + bucket + "' does not exist.");
    }

    exports.bucketNotFound = bucketNotFound;

    function projectNotFound(project) {
        return new FirebaseStorageError(exports.Code.PROJECT_NOT_FOUND, "Project '" + project + "' does not exist.");
    }

    exports.projectNotFound = projectNotFound;

    function quotaExceeded(bucket) {
        return new FirebaseStorageError(exports.Code.QUOTA_EXCEEDED, "Quota for bucket '" + bucket + "' exceeded, please view quota on " + 'https://firebase.google.com/pricing/.');
    }

    exports.quotaExceeded = quotaExceeded;

    function unauthenticated() {
        var message = 'User is not authenticated, please authenticate using Firebase ' + 'Authentication and try again.';
        return new FirebaseStorageError(exports.Code.UNAUTHENTICATED, message);
    }

    exports.unauthenticated = unauthenticated;

    function unauthorized(path) {
        return new FirebaseStorageError(exports.Code.UNAUTHORIZED, "User does not have permission to access '" + path + "'.");
    }

    exports.unauthorized = unauthorized;

    function retryLimitExceeded() {
        return new FirebaseStorageError(exports.Code.RETRY_LIMIT_EXCEEDED, 'Max retry time for operation exceeded, please try again.');
    }

    exports.retryLimitExceeded = retryLimitExceeded;

    function invalidChecksum(path, checksum, calculated) {
        return new FirebaseStorageError(exports.Code.INVALID_CHECKSUM, "Uploaded/downloaded object '" + path + "' has checksum '" + checksum + "' which does not match '" + calculated + "'. Please retry the upload/download.");
    }

    exports.invalidChecksum = invalidChecksum;

    function canceled() {
        return new FirebaseStorageError(exports.Code.CANCELED, 'User canceled the upload/download.');
    }

    exports.canceled = canceled;

    function invalidEventName(name) {
        return new FirebaseStorageError(exports.Code.INVALID_EVENT_NAME, "Invalid event name '" + name + "'.");
    }

    exports.invalidEventName = invalidEventName;

    function invalidUrl(url) {
        return new FirebaseStorageError(exports.Code.INVALID_URL, "Invalid URL '" + url + "'.");
    }

    exports.invalidUrl = invalidUrl;

    function invalidDefaultBucket(bucket) {
        return new FirebaseStorageError(exports.Code.INVALID_DEFAULT_BUCKET, "Invalid default bucket '" + bucket + "'.");
    }

    exports.invalidDefaultBucket = invalidDefaultBucket;

    function noDefaultBucket() {
        return new FirebaseStorageError(exports.Code.NO_DEFAULT_BUCKET, 'No default bucket ' + "found. Did you set the '" + constants_1.configOption + "' property when initializing the app?");
    }

    exports.noDefaultBucket = noDefaultBucket;

    function cannotSliceBlob() {
        return new FirebaseStorageError(exports.Code.CANNOT_SLICE_BLOB, 'Cannot slice blob for upload. Please retry the upload.');
    }

    exports.cannotSliceBlob = cannotSliceBlob;

    function serverFileWrongSize() {
        return new FirebaseStorageError(exports.Code.SERVER_FILE_WRONG_SIZE, 'Server recorded incorrect upload file size, please retry the upload.');
    }

    exports.serverFileWrongSize = serverFileWrongSize;

    function noDownloadURL() {
        return new FirebaseStorageError(exports.Code.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');
    }

    exports.noDownloadURL = noDownloadURL;

    function invalidArgument(index, fnName, message) {
        return new FirebaseStorageError(exports.Code.INVALID_ARGUMENT, 'Invalid argument in `' + fnName + '` at index ' + index + ': ' + message);
    }

    exports.invalidArgument = invalidArgument;

    function invalidArgumentCount(argMin, argMax, fnName, real) {
        var countPart;
        var plural;

        if (argMin === argMax) {
            countPart = argMin;
            plural = argMin === 1 ? 'argument' : 'arguments';
        } else {
            countPart = 'between ' + argMin + ' and ' + argMax;
            plural = 'arguments';
        }

        return new FirebaseStorageError(exports.Code.INVALID_ARGUMENT_COUNT, 'Invalid argument count in `' + fnName + '`: Expected ' + countPart + ' ' + plural + ', received ' + real + '.');
    }

    exports.invalidArgumentCount = invalidArgumentCount;

    function appDeleted() {
        return new FirebaseStorageError(exports.Code.APP_DELETED, 'The Firebase app was deleted.');
    }

    exports.appDeleted = appDeleted;

    function invalidRootOperation(name) {
        return new FirebaseStorageError(exports.Code.INVALID_ROOT_OPERATION, "The operation '" + name + "' cannot be performed on a root reference, create a non-root " + "reference using child, such as .child('file.png').");
    }

    exports.invalidRootOperation = invalidRootOperation;

    function invalidFormat(format, message) {
        return new FirebaseStorageError(exports.Code.INVALID_FORMAT, "String does not match format '" + format + "': " + message);
    }

    exports.invalidFormat = invalidFormat;

    function internalError(message) {
        throw new FirebaseStorageError(exports.Code.INTERNAL_ERROR, 'Internal error: ' + message);
    }

    exports.internalError = internalError;
},616,[617],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\implementation\\error.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.domainBase = 'https://firebasestorage.googleapis.com';
  exports.downloadBase = 'https://firebasestorage.googleapis.com';
  exports.apiBaseUrl = '/v0';
  exports.apiUploadBaseUrl = '/v0';

  function setDomainBase(domainBase) {
    domainBase = domainBase;
  }

  exports.setDomainBase = setDomainBase;
  exports.configOption = 'storageBucket';
  exports.shortMaxOperationRetryTime = 1 * 60 * 1000;
  exports.defaultMaxOperationRetryTime = 2 * 60 * 1000;
  exports.defaultMaxUploadRetryTime = 10 * 60 * 100;
  exports.minSafeInteger = -9007199254740991;
},617,[],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\implementation\\constants.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.TaskEvent = {
        STATE_CHANGED: 'state_changed'
    };
    exports.InternalTaskState = {
        RUNNING: 'running',
        PAUSING: 'pausing',
        PAUSED: 'paused',
        SUCCESS: 'success',
        CANCELING: 'canceling',
        CANCELED: 'canceled',
        ERROR: 'error'
    };
    exports.TaskState = {
        RUNNING: 'running',
        PAUSED: 'paused',
        SUCCESS: 'success',
        CANCELED: 'canceled',
        ERROR: 'error'
    };

    function taskStateFromInternalTaskState(state) {
        switch (state) {
            case exports.InternalTaskState.RUNNING:
            case exports.InternalTaskState.PAUSING:
            case exports.InternalTaskState.CANCELING:
                return exports.TaskState.RUNNING;

            case exports.InternalTaskState.PAUSED:
                return exports.TaskState.PAUSED;

            case exports.InternalTaskState.SUCCESS:
                return exports.TaskState.SUCCESS;

            case exports.InternalTaskState.CANCELED:
                return exports.TaskState.CANCELED;

            case exports.InternalTaskState.ERROR:
                return exports.TaskState.ERROR;

            default:
                return exports.TaskState.ERROR;
        }
    }

    exports.taskStateFromInternalTaskState = taskStateFromInternalTaskState;
},618,[],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\implementation\\taskenums.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var xhrio_network_1 = _require(_dependencyMap[0], "./xhrio_network");

  var XhrIoPool = function () {
    function XhrIoPool() {}

    XhrIoPool.prototype.createXhrIo = function () {
      return new xhrio_network_1.NetworkXhrIo();
    };

    return XhrIoPool;
  }();

  exports.XhrIoPool = XhrIoPool;
},619,[620],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\implementation\\xhriopool.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var errorsExports = _require(_dependencyMap[0], "./error");

    var object = _require(_dependencyMap[1], "./object");

    var promiseimpl = _require(_dependencyMap[2], "./promise_external");

    var type = _require(_dependencyMap[3], "./type");

    var XhrIoExports = _require(_dependencyMap[4], "./xhrio");

    var NetworkXhrIo = function () {
        function NetworkXhrIo() {
            var _this = this;

            this.sent_ = false;
            this.xhr_ = new XMLHttpRequest();
            this.errorCode_ = XhrIoExports.ErrorCode.NO_ERROR;
            this.sendPromise_ = promiseimpl.make(function (resolve, reject) {
                _this.xhr_.addEventListener('abort', function (event) {
                    _this.errorCode_ = XhrIoExports.ErrorCode.ABORT;
                    resolve(_this);
                });

                _this.xhr_.addEventListener('error', function (event) {
                    _this.errorCode_ = XhrIoExports.ErrorCode.NETWORK_ERROR;
                    resolve(_this);
                });

                _this.xhr_.addEventListener('load', function (event) {
                    resolve(_this);
                });
            });
        }

        NetworkXhrIo.prototype.send = function (url, method, opt_body, opt_headers) {
            var _this = this;

            if (this.sent_) {
                throw errorsExports.internalError('cannot .send() more than once');
            }

            this.sent_ = true;
            this.xhr_.open(method, url, true);

            if (type.isDef(opt_headers)) {
                var headers = opt_headers;
                object.forEach(headers, function (key, val) {
                    _this.xhr_.setRequestHeader(key, val.toString());
                });
            }

            if (type.isDef(opt_body)) {
                this.xhr_.send(opt_body);
            } else {
                this.xhr_.send();
            }

            return this.sendPromise_;
        };

        NetworkXhrIo.prototype.getErrorCode = function () {
            if (!this.sent_) {
                throw errorsExports.internalError('cannot .getErrorCode() before sending');
            }

            return this.errorCode_;
        };

        NetworkXhrIo.prototype.getStatus = function () {
            if (!this.sent_) {
                throw errorsExports.internalError('cannot .getStatus() before sending');
            }

            try {
                return this.xhr_.status;
            } catch (e) {
                return -1;
            }
        };

        NetworkXhrIo.prototype.getResponseText = function () {
            if (!this.sent_) {
                throw errorsExports.internalError('cannot .getResponseText() before sending');
            }

            return this.xhr_.responseText;
        };

        NetworkXhrIo.prototype.abort = function () {
            this.xhr_.abort();
        };

        NetworkXhrIo.prototype.getResponseHeader = function (header) {
            return this.xhr_.getResponseHeader(header);
        };

        NetworkXhrIo.prototype.addUploadProgressListener = function (listener) {
            if (type.isDef(this.xhr_.upload)) {
                this.xhr_.upload.addEventListener('progress', listener);
            }
        };

        NetworkXhrIo.prototype.removeUploadProgressListener = function (listener) {
            if (type.isDef(this.xhr_.upload)) {
                this.xhr_.upload.removeEventListener('progress', listener);
            }
        };

        return NetworkXhrIo;
    }();

    exports.NetworkXhrIo = NetworkXhrIo;
},620,[616,621,622,623,624],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\implementation\\xhrio_network.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    function contains(obj, prop) {
        return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    exports.contains = contains;

    function forEach(obj, f) {
        for (var key in obj) {
            if (contains(obj, key)) {
                f(key, obj[key]);
            }
        }
    }

    exports.forEach = forEach;

    function clone(obj) {
        if (obj == null) {
            return {};
        }

        var c = {};
        forEach(obj, function (key, val) {
            c[key] = val;
        });
        return c;
    }

    exports.clone = clone;
},621,[],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\implementation\\object.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function make(resolver) {
    return new Promise(resolver);
  }

  exports.make = make;

  function resolve(value) {
    return Promise.resolve(value);
  }

  exports.resolve = resolve;

  function reject(error) {
    return Promise.reject(error);
  }

  exports.reject = reject;
},622,[],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\implementation\\promise_external.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    function isDef(p) {
        return p != null;
    }

    exports.isDef = isDef;

    function isJustDef(p) {
        return p !== void 0;
    }

    exports.isJustDef = isJustDef;

    function isFunction(p) {
        return typeof p === 'function';
    }

    exports.isFunction = isFunction;

    function isObject(p) {
        return typeof p === 'object';
    }

    exports.isObject = isObject;

    function isNonNullObject(p) {
        return isObject(p) && p !== null;
    }

    exports.isNonNullObject = isNonNullObject;

    function isNonArrayObject(p) {
        return isObject(p) && !Array.isArray(p);
    }

    exports.isNonArrayObject = isNonArrayObject;

    function isString(p) {
        return typeof p === 'string' || p instanceof String;
    }

    exports.isString = isString;

    function isNumber(p) {
        return typeof p === 'number' || p instanceof Number;
    }

    exports.isNumber = isNumber;

    function isNativeBlob(p) {
        return isNativeBlobDefined() && p instanceof Blob;
    }

    exports.isNativeBlob = isNativeBlob;

    function isNativeBlobDefined() {
        return typeof Blob !== 'undefined';
    }

    exports.isNativeBlobDefined = isNativeBlobDefined;
},623,[],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\implementation\\type.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var ErrorCode;

  (function (ErrorCode) {
    ErrorCode[ErrorCode["NO_ERROR"] = 0] = "NO_ERROR";
    ErrorCode[ErrorCode["NETWORK_ERROR"] = 1] = "NETWORK_ERROR";
    ErrorCode[ErrorCode["ABORT"] = 2] = "ABORT";
  })(ErrorCode = exports.ErrorCode || (exports.ErrorCode = {}));
},624,[],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\implementation\\xhrio.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var args = _require(_dependencyMap[0], "./implementation/args");

    var blob_1 = _require(_dependencyMap[1], "./implementation/blob");

    var errorsExports = _require(_dependencyMap[2], "./implementation/error");

    var location_1 = _require(_dependencyMap[3], "./implementation/location");

    var metadata = _require(_dependencyMap[4], "./implementation/metadata");

    var object = _require(_dependencyMap[5], "./implementation/object");

    var path = _require(_dependencyMap[6], "./implementation/path");

    var requests = _require(_dependencyMap[7], "./implementation/requests");

    var fbsString = _require(_dependencyMap[8], "./implementation/string");

    var string_1 = _require(_dependencyMap[8], "./implementation/string");

    var type = _require(_dependencyMap[9], "./implementation/type");

    var task_1 = _require(_dependencyMap[10], "./task");

    var Reference = function () {
        function Reference(authWrapper, location) {
            this.authWrapper = authWrapper;

            if (location instanceof location_1.Location) {
                this.location = location;
            } else {
                this.location = location_1.Location.makeFromUrl(location);
            }
        }

        Reference.prototype.toString = function () {
            args.validate('toString', [], arguments);
            return 'gs://' + this.location.bucket + '/' + this.location.path;
        };

        Reference.prototype.newRef = function (authWrapper, location) {
            return new Reference(authWrapper, location);
        };

        Reference.prototype.mappings = function () {
            return metadata.getMappings();
        };

        Reference.prototype.child = function (childPath) {
            args.validate('child', [args.stringSpec()], arguments);
            var newPath = path.child(this.location.path, childPath);
            var location = new location_1.Location(this.location.bucket, newPath);
            return this.newRef(this.authWrapper, location);
        };

        Object.defineProperty(Reference.prototype, "parent", {
            get: function get() {
                var newPath = path.parent(this.location.path);

                if (newPath === null) {
                    return null;
                }

                var location = new location_1.Location(this.location.bucket, newPath);
                return this.newRef(this.authWrapper, location);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "root", {
            get: function get() {
                var location = new location_1.Location(this.location.bucket, '');
                return this.newRef(this.authWrapper, location);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "bucket", {
            get: function get() {
                return this.location.bucket;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "fullPath", {
            get: function get() {
                return this.location.path;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "name", {
            get: function get() {
                return path.lastComponent(this.location.path);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "storage", {
            get: function get() {
                return this.authWrapper.service();
            },
            enumerable: true,
            configurable: true
        });

        Reference.prototype.put = function (data, metadata) {
            if (metadata === void 0) {
                metadata = null;
            }

            args.validate('put', [args.uploadDataSpec(), args.metadataSpec(true)], arguments);
            this.throwIfRoot_('put');
            return new task_1.UploadTask(this, this.authWrapper, this.location, this.mappings(), new blob_1.FbsBlob(data), metadata);
        };

        Reference.prototype.putString = function (string, format, opt_metadata) {
            if (format === void 0) {
                format = string_1.StringFormat.RAW;
            }

            args.validate('putString', [args.stringSpec(), args.stringSpec(fbsString.formatValidator, true), args.metadataSpec(true)], arguments);
            this.throwIfRoot_('putString');
            var data = fbsString.dataFromString(format, string);
            var metadata = object.clone(opt_metadata);

            if (!type.isDef(metadata['contentType']) && type.isDef(data.contentType)) {
                metadata['contentType'] = data.contentType;
            }

            return new task_1.UploadTask(this, this.authWrapper, this.location, this.mappings(), new blob_1.FbsBlob(data.data, true), metadata);
        };

        Reference.prototype.delete = function () {
            args.validate('delete', [], arguments);
            this.throwIfRoot_('delete');
            var self = this;
            return this.authWrapper.getAuthToken().then(function (authToken) {
                var requestInfo = requests.deleteObject(self.authWrapper, self.location);
                return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();
            });
        };

        Reference.prototype.getMetadata = function () {
            args.validate('getMetadata', [], arguments);
            this.throwIfRoot_('getMetadata');
            var self = this;
            return this.authWrapper.getAuthToken().then(function (authToken) {
                var requestInfo = requests.getMetadata(self.authWrapper, self.location, self.mappings());
                return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();
            });
        };

        Reference.prototype.updateMetadata = function (metadata) {
            args.validate('updateMetadata', [args.metadataSpec()], arguments);
            this.throwIfRoot_('updateMetadata');
            var self = this;
            return this.authWrapper.getAuthToken().then(function (authToken) {
                var requestInfo = requests.updateMetadata(self.authWrapper, self.location, metadata, self.mappings());
                return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();
            });
        };

        Reference.prototype.getDownloadURL = function () {
            args.validate('getDownloadURL', [], arguments);
            this.throwIfRoot_('getDownloadURL');
            return this.getMetadata().then(function (metadata) {
                var url = metadata['downloadURLs'][0];

                if (type.isDef(url)) {
                    return url;
                } else {
                    throw errorsExports.noDownloadURL();
                }
            });
        };

        Reference.prototype.throwIfRoot_ = function (name) {
            if (this.location.path === '') {
                throw errorsExports.invalidRootOperation(name);
            }
        };

        return Reference;
    }();

    exports.Reference = Reference;
},625,[626,632,616,629,627,621,630,634,615,623,637],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\reference.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var errorsExports = _require(_dependencyMap[0], "./error");

    var MetadataUtils = _require(_dependencyMap[1], "./metadata");

    var type = _require(_dependencyMap[2], "./type");

    function validate(name, specs, passed) {
        var minArgs = specs.length;
        var maxArgs = specs.length;

        for (var i = 0; i < specs.length; i++) {
            if (specs[i].optional) {
                minArgs = i;
                break;
            }
        }

        var validLength = minArgs <= passed.length && passed.length <= maxArgs;

        if (!validLength) {
            throw errorsExports.invalidArgumentCount(minArgs, maxArgs, name, passed.length);
        }

        for (var i = 0; i < passed.length; i++) {
            try {
                specs[i].validator(passed[i]);
            } catch (e) {
                if (e instanceof Error) {
                    throw errorsExports.invalidArgument(i, name, e.message);
                } else {
                    throw errorsExports.invalidArgument(i, name, e);
                }
            }
        }
    }

    exports.validate = validate;

    var ArgSpec = function () {
        function ArgSpec(validator, opt_optional) {
            var self = this;

            this.validator = function (p) {
                if (self.optional && !type.isJustDef(p)) {
                    return;
                }

                validator(p);
            };

            this.optional = !!opt_optional;
        }

        return ArgSpec;
    }();

    exports.ArgSpec = ArgSpec;

    function and_(v1, v2) {
        return function (p) {
            v1(p);
            v2(p);
        };
    }

    exports.and_ = and_;

    function stringSpec(opt_validator, opt_optional) {
        function stringValidator(p) {
            if (!type.isString(p)) {
                throw 'Expected string.';
            }
        }

        var validator;

        if (opt_validator) {
            validator = and_(stringValidator, opt_validator);
        } else {
            validator = stringValidator;
        }

        return new ArgSpec(validator, opt_optional);
    }

    exports.stringSpec = stringSpec;

    function uploadDataSpec() {
        function validator(p) {
            var valid = p instanceof Uint8Array || p instanceof ArrayBuffer || type.isNativeBlobDefined() && p instanceof Blob;

            if (!valid) {
                throw 'Expected Blob or File.';
            }
        }

        return new ArgSpec(validator);
    }

    exports.uploadDataSpec = uploadDataSpec;

    function metadataSpec(opt_optional) {
        return new ArgSpec(MetadataUtils.metadataValidator, opt_optional);
    }

    exports.metadataSpec = metadataSpec;

    function nonNegativeNumberSpec() {
        function validator(p) {
            var valid = type.isNumber(p) && p >= 0;

            if (!valid) {
                throw 'Expected a number 0 or greater.';
            }
        }

        return new ArgSpec(validator);
    }

    exports.nonNegativeNumberSpec = nonNegativeNumberSpec;

    function looseObjectSpec(opt_validator, opt_optional) {
        function validator(p) {
            var isLooseObject = p === null || type.isDef(p) && p instanceof Object;

            if (!isLooseObject) {
                throw 'Expected an Object.';
            }

            if (opt_validator !== undefined && opt_validator !== null) {
                opt_validator(p);
            }
        }

        return new ArgSpec(validator, opt_optional);
    }

    exports.looseObjectSpec = looseObjectSpec;

    function nullFunctionSpec(opt_optional) {
        function validator(p) {
            var valid = p === null || type.isFunction(p);

            if (!valid) {
                throw 'Expected a Function.';
            }
        }

        return new ArgSpec(validator, opt_optional);
    }

    exports.nullFunctionSpec = nullFunctionSpec;
},626,[616,627,623],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\implementation\\args.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var json = _require(_dependencyMap[0], "./json");

    var location_1 = _require(_dependencyMap[1], "./location");

    var path = _require(_dependencyMap[2], "./path");

    var type = _require(_dependencyMap[3], "./type");

    var UrlUtils = _require(_dependencyMap[4], "./url");

    function noXform_(metadata, value) {
        return value;
    }

    exports.noXform_ = noXform_;

    var Mapping = function () {
        function Mapping(server, opt_local, opt_writable, opt_xform) {
            this.server = server;
            this.local = opt_local || server;
            this.writable = !!opt_writable;
            this.xform = opt_xform || noXform_;
        }

        return Mapping;
    }();

    exports.Mapping = Mapping;
    var mappings_ = null;

    function xformPath(fullPath) {
        var valid = type.isString(fullPath);

        if (!valid || fullPath.length < 2) {
            return fullPath;
        } else {
            fullPath = fullPath;
            return path.lastComponent(fullPath);
        }
    }

    exports.xformPath = xformPath;

    function getMappings() {
        if (mappings_) {
            return mappings_;
        }

        var mappings = [];
        mappings.push(new Mapping('bucket'));
        mappings.push(new Mapping('generation'));
        mappings.push(new Mapping('metageneration'));
        mappings.push(new Mapping('name', 'fullPath', true));

        function mappingsXformPath(metadata, fullPath) {
            return xformPath(fullPath);
        }

        var nameMapping = new Mapping('name');
        nameMapping.xform = mappingsXformPath;
        mappings.push(nameMapping);

        function xformSize(metadata, size) {
            if (type.isDef(size)) {
                return +size;
            } else {
                return size;
            }
        }

        var sizeMapping = new Mapping('size');
        sizeMapping.xform = xformSize;
        mappings.push(sizeMapping);
        mappings.push(new Mapping('timeCreated'));
        mappings.push(new Mapping('updated'));
        mappings.push(new Mapping('md5Hash', null, true));
        mappings.push(new Mapping('cacheControl', null, true));
        mappings.push(new Mapping('contentDisposition', null, true));
        mappings.push(new Mapping('contentEncoding', null, true));
        mappings.push(new Mapping('contentLanguage', null, true));
        mappings.push(new Mapping('contentType', null, true));
        mappings.push(new Mapping('metadata', 'customMetadata', true));

        function xformTokens(metadata, tokens) {
            var valid = type.isString(tokens) && tokens.length > 0;

            if (!valid) {
                return [];
            }

            var encode = encodeURIComponent;
            var tokensList = tokens.split(',');
            var urls = tokensList.map(function (token) {
                var bucket = metadata['bucket'];
                var path = metadata['fullPath'];
                var urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);
                var base = UrlUtils.makeDownloadUrl(urlPart);
                var queryString = UrlUtils.makeQueryString({
                    alt: 'media',
                    token: token
                });
                return base + queryString;
            });
            return urls;
        }

        mappings.push(new Mapping('downloadTokens', 'downloadURLs', false, xformTokens));
        mappings_ = mappings;
        return mappings_;
    }

    exports.getMappings = getMappings;

    function addRef(metadata, authWrapper) {
        function generateRef() {
            var bucket = metadata['bucket'];
            var path = metadata['fullPath'];
            var loc = new location_1.Location(bucket, path);
            return authWrapper.makeStorageReference(loc);
        }

        Object.defineProperty(metadata, 'ref', {
            get: generateRef
        });
    }

    exports.addRef = addRef;

    function fromResource(authWrapper, resource, mappings) {
        var metadata = {};
        metadata['type'] = 'file';
        var len = mappings.length;

        for (var i = 0; i < len; i++) {
            var mapping = mappings[i];
            metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);
        }

        addRef(metadata, authWrapper);
        return metadata;
    }

    exports.fromResource = fromResource;

    function fromResourceString(authWrapper, resourceString, mappings) {
        var obj = json.jsonObjectOrNull(resourceString);

        if (obj === null) {
            return null;
        }

        var resource = obj;
        return fromResource(authWrapper, resource, mappings);
    }

    exports.fromResourceString = fromResourceString;

    function toResourceString(metadata, mappings) {
        var resource = {};
        var len = mappings.length;

        for (var i = 0; i < len; i++) {
            var mapping = mappings[i];

            if (mapping.writable) {
                resource[mapping.server] = metadata[mapping.local];
            }
        }

        return JSON.stringify(resource);
    }

    exports.toResourceString = toResourceString;

    function metadataValidator(p) {
        var validType = p && type.isObject(p);

        if (!validType) {
            throw 'Expected Metadata object.';
        }

        for (var key in p) {
            var val = p[key];

            if (key === 'customMetadata') {
                if (!type.isObject(val)) {
                    throw 'Expected object for \'customMetadata\' mapping.';
                }
            } else {
                if (type.isNonNullObject(val)) {
                    throw "Mapping for '" + key + "' cannot be an object.";
                }
            }
        }
    }

    exports.metadataValidator = metadataValidator;
},627,[628,629,630,623,631],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\implementation\\metadata.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var type = _require(_dependencyMap[0], "./type");

    function jsonObjectOrNull(s) {
        var obj;

        try {
            obj = JSON.parse(s);
        } catch (e) {
            return null;
        }

        if (type.isNonArrayObject(obj)) {
            return obj;
        } else {
            return null;
        }
    }

    exports.jsonObjectOrNull = jsonObjectOrNull;
},628,[623],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\implementation\\json.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var errorsExports = _require(_dependencyMap[0], "./error");

    var Location = function () {
        function Location(bucket, path) {
            this.bucket = bucket;
            this.path_ = path;
        }

        Object.defineProperty(Location.prototype, "path", {
            get: function get() {
                return this.path_;
            },
            enumerable: true,
            configurable: true
        });

        Location.prototype.fullServerUrl = function () {
            var encode = encodeURIComponent;
            return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);
        };

        Location.prototype.bucketOnlyServerUrl = function () {
            var encode = encodeURIComponent;
            return '/b/' + encode(this.bucket) + '/o';
        };

        Location.makeFromBucketSpec = function (bucketString) {
            var bucketLocation;

            try {
                bucketLocation = Location.makeFromUrl(bucketString);
            } catch (e) {
                return new Location(bucketString, '');
            }

            if (bucketLocation.path === '') {
                return bucketLocation;
            } else {
                throw errorsExports.invalidDefaultBucket(bucketString);
            }
        };

        Location.makeFromUrl = function (url) {
            var location = null;
            var bucketDomain = '([A-Za-z0-9.\\-]+)';

            function gsModify(loc) {
                if (loc.path.charAt(loc.path.length - 1) === '/') {
                    loc.path_ = loc.path_.slice(0, -1);
                }
            }

            var gsPath = '(/(.*))?$';
            var path = '(/([^?#]*).*)?$';
            var gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');
            var gsIndices = {
                bucket: 1,
                path: 3
            };

            function httpModify(loc) {
                loc.path_ = decodeURIComponent(loc.path);
            }

            var version = 'v[A-Za-z0-9_]+';
            var httpRegex = new RegExp('^https?://firebasestorage\\.googleapis\\.com/' + version + '/b/' + bucketDomain + '/o' + path, 'i');
            var httpIndices = {
                bucket: 1,
                path: 3
            };
            var groups = [{
                regex: gsRegex,
                indices: gsIndices,
                postModify: gsModify
            }, {
                regex: httpRegex,
                indices: httpIndices,
                postModify: httpModify
            }];

            for (var i = 0; i < groups.length; i++) {
                var group = groups[i];
                var captures = group.regex.exec(url);

                if (captures) {
                    var bucketValue = captures[group.indices.bucket];
                    var pathValue = captures[group.indices.path];

                    if (!pathValue) {
                        pathValue = '';
                    }

                    location = new Location(bucketValue, pathValue);
                    group.postModify(location);
                    break;
                }
            }

            if (location == null) {
                throw errorsExports.invalidUrl(url);
            }

            return location;
        };

        return Location;
    }();

    exports.Location = Location;
},629,[616],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\implementation\\location.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    function parent(path) {
        if (path.length == 0) {
            return null;
        }

        var index = path.lastIndexOf('/');

        if (index === -1) {
            return '';
        }

        var newPath = path.slice(0, index);
        return newPath;
    }

    exports.parent = parent;

    function child(path, childPath) {
        var canonicalChildPath = childPath.split('/').filter(function (component) {
            return component.length > 0;
        }).join('/');

        if (path.length === 0) {
            return canonicalChildPath;
        } else {
            return path + '/' + canonicalChildPath;
        }
    }

    exports.child = child;

    function lastComponent(path) {
        var index = path.lastIndexOf('/', path.length - 2);

        if (index === -1) {
            return path;
        } else {
            return path.slice(index + 1);
        }
    }

    exports.lastComponent = lastComponent;
},630,[],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\implementation\\path.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var constants = _require(_dependencyMap[0], "./constants");

    var object = _require(_dependencyMap[1], "./object");

    function makeNormalUrl(urlPart) {
        return constants.domainBase + constants.apiBaseUrl + urlPart;
    }

    exports.makeNormalUrl = makeNormalUrl;

    function makeDownloadUrl(urlPart) {
        return constants.downloadBase + constants.apiBaseUrl + urlPart;
    }

    exports.makeDownloadUrl = makeDownloadUrl;

    function makeUploadUrl(urlPart) {
        return constants.domainBase + constants.apiUploadBaseUrl + urlPart;
    }

    exports.makeUploadUrl = makeUploadUrl;

    function makeQueryString(params) {
        var encode = encodeURIComponent;
        var queryPart = '?';
        object.forEach(params, function (key, val) {
            var nextPart = encode(key) + '=' + encode(val);
            queryPart = queryPart + nextPart + '&';
        });
        queryPart = queryPart.slice(0, -1);
        return queryPart;
    }

    exports.makeQueryString = makeQueryString;
},631,[617,621],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\implementation\\url.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var fs = _require(_dependencyMap[0], "./fs");

    var string = _require(_dependencyMap[1], "./string");

    var string_1 = _require(_dependencyMap[1], "./string");

    var type = _require(_dependencyMap[2], "./type");

    var FbsBlob = function () {
        function FbsBlob(data, opt_elideCopy) {
            var size = 0;
            var blobType = '';

            if (type.isNativeBlob(data)) {
                this.data_ = data;
                size = data.size;
                blobType = data.type;
            } else if (data instanceof ArrayBuffer) {
                if (opt_elideCopy) {
                    this.data_ = new Uint8Array(data);
                } else {
                    this.data_ = new Uint8Array(data.byteLength);
                    this.data_.set(new Uint8Array(data));
                }

                size = this.data_.length;
            } else if (data instanceof Uint8Array) {
                if (opt_elideCopy) {
                    this.data_ = data;
                } else {
                    this.data_ = new Uint8Array(data.length);
                    this.data_.set(data);
                }

                size = data.length;
            }

            this.size_ = size;
            this.type_ = blobType;
        }

        FbsBlob.prototype.size = function () {
            return this.size_;
        };

        FbsBlob.prototype.type = function () {
            return this.type_;
        };

        FbsBlob.prototype.slice = function (startByte, endByte) {
            if (type.isNativeBlob(this.data_)) {
                var realBlob = this.data_;
                var sliced = fs.sliceBlob(realBlob, startByte, endByte);

                if (sliced === null) {
                    return null;
                }

                return new FbsBlob(sliced);
            } else {
                var slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);
                return new FbsBlob(slice, true);
            }
        };

        FbsBlob.getBlob = function () {
            var var_args = [];

            for (var _i = 0; _i < arguments.length; _i++) {
                var_args[_i] = arguments[_i];
            }

            if (type.isNativeBlobDefined()) {
                var blobby = var_args.map(function (val) {
                    if (val instanceof FbsBlob) {
                        return val.data_;
                    } else {
                        return val;
                    }
                });
                return new FbsBlob(fs.getBlob.apply(null, blobby));
            } else {
                var uint8Arrays = var_args.map(function (val) {
                    if (type.isString(val)) {
                        return string.dataFromString(string_1.StringFormat.RAW, val).data;
                    } else {
                        return val.data_;
                    }
                });
                var finalLength_1 = 0;
                uint8Arrays.forEach(function (array) {
                    finalLength_1 += array.byteLength;
                });
                var merged_1 = new Uint8Array(finalLength_1);
                var index_1 = 0;
                uint8Arrays.forEach(function (array) {
                    for (var i = 0; i < array.length; i++) {
                        merged_1[index_1++] = array[i];
                    }
                });
                return new FbsBlob(merged_1, true);
            }
        };

        FbsBlob.prototype.uploadData = function () {
            return this.data_;
        };

        return FbsBlob;
    }();

    exports.FbsBlob = FbsBlob;
},632,[633,615,623],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\implementation\\blob.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var type = _require(_dependencyMap[0], "./type");

    function getBlobBuilder() {
        if (typeof BlobBuilder !== 'undefined') {
            return BlobBuilder;
        } else if (typeof WebKitBlobBuilder !== 'undefined') {
            return WebKitBlobBuilder;
        } else {
            return undefined;
        }
    }

    function getBlob() {
        var var_args = [];

        for (var _i = 0; _i < arguments.length; _i++) {
            var_args[_i] = arguments[_i];
        }

        var BlobBuilder = getBlobBuilder();

        if (BlobBuilder !== undefined) {
            var bb = new BlobBuilder();

            for (var i = 0; i < var_args.length; i++) {
                bb.append(var_args[i]);
            }

            return bb.getBlob();
        } else {
            if (type.isNativeBlobDefined()) {
                return new Blob(var_args);
            } else {
                throw Error("This browser doesn't seem to support creating Blobs");
            }
        }
    }

    exports.getBlob = getBlob;

    function sliceBlob(blob, start, end) {
        if (blob.webkitSlice) {
            return blob.webkitSlice(start, end);
        } else if (blob.mozSlice) {
            return blob.mozSlice(start, end);
        } else if (blob.slice) {
            return blob.slice(start, end);
        }

        return null;
    }

    exports.sliceBlob = sliceBlob;
},633,[623],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\implementation\\fs.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var array = _require(_dependencyMap[0], "./array");

    var blob_1 = _require(_dependencyMap[1], "./blob");

    var errorsExports = _require(_dependencyMap[2], "./error");

    var MetadataUtils = _require(_dependencyMap[3], "./metadata");

    var object = _require(_dependencyMap[4], "./object");

    var requestinfo_1 = _require(_dependencyMap[5], "./requestinfo");

    var type = _require(_dependencyMap[6], "./type");

    var UrlUtils = _require(_dependencyMap[7], "./url");

    function handlerCheck(cndn) {
        if (!cndn) {
            throw errorsExports.unknown();
        }
    }

    exports.handlerCheck = handlerCheck;

    function metadataHandler(authWrapper, mappings) {
        function handler(xhr, text) {
            var metadata = MetadataUtils.fromResourceString(authWrapper, text, mappings);
            handlerCheck(metadata !== null);
            return metadata;
        }

        return handler;
    }

    exports.metadataHandler = metadataHandler;

    function sharedErrorHandler(location) {
        function errorHandler(xhr, err) {
            var newErr;

            if (xhr.getStatus() === 401) {
                newErr = errorsExports.unauthenticated();
            } else {
                if (xhr.getStatus() === 402) {
                    newErr = errorsExports.quotaExceeded(location.bucket);
                } else {
                    if (xhr.getStatus() === 403) {
                        newErr = errorsExports.unauthorized(location.path);
                    } else {
                        newErr = err;
                    }
                }
            }

            newErr.setServerResponseProp(err.serverResponseProp());
            return newErr;
        }

        return errorHandler;
    }

    exports.sharedErrorHandler = sharedErrorHandler;

    function objectErrorHandler(location) {
        var shared = sharedErrorHandler(location);

        function errorHandler(xhr, err) {
            var newErr = shared(xhr, err);

            if (xhr.getStatus() === 404) {
                newErr = errorsExports.objectNotFound(location.path);
            }

            newErr.setServerResponseProp(err.serverResponseProp());
            return newErr;
        }

        return errorHandler;
    }

    exports.objectErrorHandler = objectErrorHandler;

    function getMetadata(authWrapper, location, mappings) {
        var urlPart = location.fullServerUrl();
        var url = UrlUtils.makeNormalUrl(urlPart);
        var method = 'GET';
        var timeout = authWrapper.maxOperationRetryTime();
        var requestInfo = new requestinfo_1.RequestInfo(url, method, metadataHandler(authWrapper, mappings), timeout);
        requestInfo.errorHandler = objectErrorHandler(location);
        return requestInfo;
    }

    exports.getMetadata = getMetadata;

    function updateMetadata(authWrapper, location, metadata, mappings) {
        var urlPart = location.fullServerUrl();
        var url = UrlUtils.makeNormalUrl(urlPart);
        var method = 'PATCH';
        var body = MetadataUtils.toResourceString(metadata, mappings);
        var headers = {
            'Content-Type': 'application/json; charset=utf-8'
        };
        var timeout = authWrapper.maxOperationRetryTime();
        var requestInfo = new requestinfo_1.RequestInfo(url, method, metadataHandler(authWrapper, mappings), timeout);
        requestInfo.headers = headers;
        requestInfo.body = body;
        requestInfo.errorHandler = objectErrorHandler(location);
        return requestInfo;
    }

    exports.updateMetadata = updateMetadata;

    function deleteObject(authWrapper, location) {
        var urlPart = location.fullServerUrl();
        var url = UrlUtils.makeNormalUrl(urlPart);
        var method = 'DELETE';
        var timeout = authWrapper.maxOperationRetryTime();

        function handler(xhr, text) {}

        var requestInfo = new requestinfo_1.RequestInfo(url, method, handler, timeout);
        requestInfo.successCodes = [200, 204];
        requestInfo.errorHandler = objectErrorHandler(location);
        return requestInfo;
    }

    exports.deleteObject = deleteObject;

    function determineContentType_(metadata, blob) {
        return metadata && metadata['contentType'] || blob && blob.type() || 'application/octet-stream';
    }

    exports.determineContentType_ = determineContentType_;

    function metadataForUpload_(location, blob, opt_metadata) {
        var metadata = object.clone(opt_metadata);
        metadata['fullPath'] = location.path;
        metadata['size'] = blob.size();

        if (!metadata['contentType']) {
            metadata['contentType'] = determineContentType_(null, blob);
        }

        return metadata;
    }

    exports.metadataForUpload_ = metadataForUpload_;

    function multipartUpload(authWrapper, location, mappings, blob, opt_metadata) {
        var urlPart = location.bucketOnlyServerUrl();
        var headers = {
            'X-Goog-Upload-Protocol': 'multipart'
        };

        function genBoundary() {
            var str = '';

            for (var i = 0; i < 2; i++) {
                str = str + Math.random().toString().slice(2);
            }

            return str;
        }

        var boundary = genBoundary();
        headers['Content-Type'] = 'multipart/related; boundary=' + boundary;
        var metadata = metadataForUpload_(location, blob, opt_metadata);
        var metadataString = MetadataUtils.toResourceString(metadata, mappings);
        var preBlobPart = '--' + boundary + '\r\n' + 'Content-Type: application/json; charset=utf-8\r\n\r\n' + metadataString + '\r\n--' + boundary + '\r\n' + 'Content-Type: ' + metadata['contentType'] + '\r\n\r\n';
        var postBlobPart = '\r\n--' + boundary + '--';
        var body = blob_1.FbsBlob.getBlob(preBlobPart, blob, postBlobPart);

        if (body === null) {
            throw errorsExports.cannotSliceBlob();
        }

        var urlParams = {
            name: metadata['fullPath']
        };
        var url = UrlUtils.makeUploadUrl(urlPart);
        var method = 'POST';
        var timeout = authWrapper.maxUploadRetryTime();
        var requestInfo = new requestinfo_1.RequestInfo(url, method, metadataHandler(authWrapper, mappings), timeout);
        requestInfo.urlParams = urlParams;
        requestInfo.headers = headers;
        requestInfo.body = body.uploadData();
        requestInfo.errorHandler = sharedErrorHandler(location);
        return requestInfo;
    }

    exports.multipartUpload = multipartUpload;

    var ResumableUploadStatus = function () {
        function ResumableUploadStatus(current, total, finalized, metadata) {
            this.current = current;
            this.total = total;
            this.finalized = !!finalized;
            this.metadata = metadata || null;
        }

        return ResumableUploadStatus;
    }();

    exports.ResumableUploadStatus = ResumableUploadStatus;

    function checkResumeHeader_(xhr, opt_allowed) {
        var status;

        try {
            status = xhr.getResponseHeader('X-Goog-Upload-Status');
        } catch (e) {
            handlerCheck(false);
        }

        var allowed = opt_allowed || ['active'];
        handlerCheck(array.contains(allowed, status));
        return status;
    }

    exports.checkResumeHeader_ = checkResumeHeader_;

    function createResumableUpload(authWrapper, location, mappings, blob, opt_metadata) {
        var urlPart = location.bucketOnlyServerUrl();
        var metadata = metadataForUpload_(location, blob, opt_metadata);
        var urlParams = {
            name: metadata['fullPath']
        };
        var url = UrlUtils.makeUploadUrl(urlPart);
        var method = 'POST';
        var headers = {
            'X-Goog-Upload-Protocol': 'resumable',
            'X-Goog-Upload-Command': 'start',
            'X-Goog-Upload-Header-Content-Length': blob.size(),
            'X-Goog-Upload-Header-Content-Type': metadata['contentType'],
            'Content-Type': 'application/json; charset=utf-8'
        };
        var body = MetadataUtils.toResourceString(metadata, mappings);
        var timeout = authWrapper.maxUploadRetryTime();

        function handler(xhr, text) {
            checkResumeHeader_(xhr);
            var url;

            try {
                url = xhr.getResponseHeader('X-Goog-Upload-URL');
            } catch (e) {
                handlerCheck(false);
            }

            handlerCheck(type.isString(url));
            return url;
        }

        var requestInfo = new requestinfo_1.RequestInfo(url, method, handler, timeout);
        requestInfo.urlParams = urlParams;
        requestInfo.headers = headers;
        requestInfo.body = body;
        requestInfo.errorHandler = sharedErrorHandler(location);
        return requestInfo;
    }

    exports.createResumableUpload = createResumableUpload;

    function getResumableUploadStatus(authWrapper, location, url, blob) {
        var headers = {
            'X-Goog-Upload-Command': 'query'
        };

        function handler(xhr, text) {
            var status = checkResumeHeader_(xhr, ['active', 'final']);
            var sizeString;

            try {
                sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');
            } catch (e) {
                handlerCheck(false);
            }

            var size = parseInt(sizeString, 10);
            handlerCheck(!isNaN(size));
            return new ResumableUploadStatus(size, blob.size(), status === 'final');
        }

        var method = 'POST';
        var timeout = authWrapper.maxUploadRetryTime();
        var requestInfo = new requestinfo_1.RequestInfo(url, method, handler, timeout);
        requestInfo.headers = headers;
        requestInfo.errorHandler = sharedErrorHandler(location);
        return requestInfo;
    }

    exports.getResumableUploadStatus = getResumableUploadStatus;
    exports.resumableUploadChunkSize = 256 * 1024;

    function continueResumableUpload(location, authWrapper, url, blob, chunkSize, mappings, opt_status, opt_progressCallback) {
        var status = new ResumableUploadStatus(0, 0);

        if (opt_status) {
            status.current = opt_status.current;
            status.total = opt_status.total;
        } else {
            status.current = 0;
            status.total = blob.size();
        }

        if (blob.size() !== status.total) {
            throw errorsExports.serverFileWrongSize();
        }

        var bytesLeft = status.total - status.current;
        var bytesToUpload = bytesLeft;

        if (chunkSize > 0) {
            bytesToUpload = Math.min(bytesToUpload, chunkSize);
        }

        var startByte = status.current;
        var endByte = startByte + bytesToUpload;
        var uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';
        var headers = {
            'X-Goog-Upload-Command': uploadCommand,
            'X-Goog-Upload-Offset': status.current
        };
        var body = blob.slice(startByte, endByte);

        if (body === null) {
            throw errorsExports.cannotSliceBlob();
        }

        function handler(xhr, text) {
            var uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);
            var newCurrent = status.current + bytesToUpload;
            var size = blob.size();
            var metadata;

            if (uploadStatus === 'final') {
                metadata = metadataHandler(authWrapper, mappings)(xhr, text);
            } else {
                metadata = null;
            }

            return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);
        }

        var method = 'POST';
        var timeout = authWrapper.maxUploadRetryTime();
        var requestInfo = new requestinfo_1.RequestInfo(url, method, handler, timeout);
        requestInfo.headers = headers;
        requestInfo.body = body.uploadData();
        requestInfo.progressCallback = opt_progressCallback || null;
        requestInfo.errorHandler = sharedErrorHandler(location);
        return requestInfo;
    }

    exports.continueResumableUpload = continueResumableUpload;
},634,[635,632,616,627,621,636,623,631],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\implementation\\requests.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function contains(array, elem) {
    return array.indexOf(elem) !== -1;
  }

  exports.contains = contains;

  function clone(arraylike) {
    return Array.prototype.slice.call(arraylike);
  }

  exports.clone = clone;

  function remove(array, elem) {
    var i = array.indexOf(elem);

    if (i !== -1) {
      array.splice(i, 1);
    }
  }

  exports.remove = remove;
},635,[],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\implementation\\array.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var RequestInfo = function () {
        function RequestInfo(url, method, handler, timeout) {
            this.url = url;
            this.method = method;
            this.handler = handler;
            this.timeout = timeout;
            this.urlParams = {};
            this.headers = {};
            this.body = null;
            this.errorHandler = null;
            this.progressCallback = null;
            this.successCodes = [200];
            this.additionalRetryCodes = [];
        }

        return RequestInfo;
    }();

    exports.RequestInfo = RequestInfo;
},636,[],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\implementation\\requestinfo.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var taskenums_1 = _require(_dependencyMap[0], "./implementation/taskenums");

    var observer_1 = _require(_dependencyMap[1], "./implementation/observer");

    var taskenums_2 = _require(_dependencyMap[0], "./implementation/taskenums");

    var tasksnapshot_1 = _require(_dependencyMap[2], "./tasksnapshot");

    var fbsArgs = _require(_dependencyMap[3], "./implementation/args");

    var fbsArray = _require(_dependencyMap[4], "./implementation/array");

    var async_1 = _require(_dependencyMap[5], "./implementation/async");

    var errors = _require(_dependencyMap[6], "./implementation/error");

    var fbsPromiseimpl = _require(_dependencyMap[7], "./implementation/promise_external");

    var fbsRequests = _require(_dependencyMap[8], "./implementation/requests");

    var fbsTaskEnums = _require(_dependencyMap[0], "./implementation/taskenums");

    var typeUtils = _require(_dependencyMap[9], "./implementation/type");

    var UploadTask = function () {
        function UploadTask(ref, authWrapper, location, mappings, blob, metadata) {
            if (metadata === void 0) {
                metadata = null;
            }

            var _this = this;

            this.transferred_ = 0;
            this.needToFetchStatus_ = false;
            this.needToFetchMetadata_ = false;
            this.observers_ = [];
            this.error_ = null;
            this.uploadUrl_ = null;
            this.request_ = null;
            this.chunkMultiplier_ = 1;
            this.resolve_ = null;
            this.reject_ = null;
            this.ref_ = ref;
            this.authWrapper_ = authWrapper;
            this.location_ = location;
            this.blob_ = blob;
            this.metadata_ = metadata;
            this.mappings_ = mappings;
            this.resumable_ = this.shouldDoResumable_(this.blob_);
            this.state_ = taskenums_1.InternalTaskState.RUNNING;

            this.errorHandler_ = function (error) {
                _this.request_ = null;
                _this.chunkMultiplier_ = 1;

                if (error.codeEquals(errors.Code.CANCELED)) {
                    _this.needToFetchStatus_ = true;

                    _this.completeTransitions_();
                } else {
                    _this.error_ = error;

                    _this.transition_(taskenums_1.InternalTaskState.ERROR);
                }
            };

            this.metadataErrorHandler_ = function (error) {
                _this.request_ = null;

                if (error.codeEquals(errors.Code.CANCELED)) {
                    _this.completeTransitions_();
                } else {
                    _this.error_ = error;

                    _this.transition_(taskenums_1.InternalTaskState.ERROR);
                }
            };

            this.promise_ = fbsPromiseimpl.make(function (resolve, reject) {
                _this.resolve_ = resolve;
                _this.reject_ = reject;

                _this.start_();
            });
            this.promise_.then(null, function () {});
        }

        UploadTask.prototype.makeProgressCallback_ = function () {
            var _this = this;

            var sizeBefore = this.transferred_;
            return function (loaded, total) {
                _this.updateProgress_(sizeBefore + loaded);
            };
        };

        UploadTask.prototype.shouldDoResumable_ = function (blob) {
            return blob.size() > 256 * 1024;
        };

        UploadTask.prototype.start_ = function () {
            if (this.state_ !== taskenums_1.InternalTaskState.RUNNING) {
                return;
            }

            if (this.request_ !== null) {
                return;
            }

            if (this.resumable_) {
                if (this.uploadUrl_ === null) {
                    this.createResumable_();
                } else {
                    if (this.needToFetchStatus_) {
                        this.fetchStatus_();
                    } else {
                        if (this.needToFetchMetadata_) {
                            this.fetchMetadata_();
                        } else {
                            this.continueUpload_();
                        }
                    }
                }
            } else {
                this.oneShotUpload_();
            }
        };

        UploadTask.prototype.resolveToken_ = function (callback) {
            var _this = this;

            this.authWrapper_.getAuthToken().then(function (authToken) {
                switch (_this.state_) {
                    case taskenums_1.InternalTaskState.RUNNING:
                        callback(authToken);
                        break;

                    case taskenums_1.InternalTaskState.CANCELING:
                        _this.transition_(taskenums_1.InternalTaskState.CANCELED);

                        break;

                    case taskenums_1.InternalTaskState.PAUSING:
                        _this.transition_(taskenums_1.InternalTaskState.PAUSED);

                        break;

                    default:}
            });
        };

        UploadTask.prototype.createResumable_ = function () {
            var _this = this;

            this.resolveToken_(function (authToken) {
                var requestInfo = fbsRequests.createResumableUpload(_this.authWrapper_, _this.location_, _this.mappings_, _this.blob_, _this.metadata_);

                var createRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);

                _this.request_ = createRequest;
                createRequest.getPromise().then(function (url) {
                    _this.request_ = null;
                    _this.uploadUrl_ = url;
                    _this.needToFetchStatus_ = false;

                    _this.completeTransitions_();
                }, _this.errorHandler_);
            });
        };

        UploadTask.prototype.fetchStatus_ = function () {
            var _this = this;

            var url = this.uploadUrl_;
            this.resolveToken_(function (authToken) {
                var requestInfo = fbsRequests.getResumableUploadStatus(_this.authWrapper_, _this.location_, url, _this.blob_);

                var statusRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);

                _this.request_ = statusRequest;
                statusRequest.getPromise().then(function (status) {
                    status = status;
                    _this.request_ = null;

                    _this.updateProgress_(status.current);

                    _this.needToFetchStatus_ = false;

                    if (status.finalized) {
                        _this.needToFetchMetadata_ = true;
                    }

                    _this.completeTransitions_();
                }, _this.errorHandler_);
            });
        };

        UploadTask.prototype.continueUpload_ = function () {
            var _this = this;

            var chunkSize = fbsRequests.resumableUploadChunkSize * this.chunkMultiplier_;
            var status = new fbsRequests.ResumableUploadStatus(this.transferred_, this.blob_.size());
            var url = this.uploadUrl_;
            this.resolveToken_(function (authToken) {
                var requestInfo;

                try {
                    requestInfo = fbsRequests.continueResumableUpload(_this.location_, _this.authWrapper_, url, _this.blob_, chunkSize, _this.mappings_, status, _this.makeProgressCallback_());
                } catch (e) {
                    _this.error_ = e;

                    _this.transition_(taskenums_1.InternalTaskState.ERROR);

                    return;
                }

                var uploadRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);

                _this.request_ = uploadRequest;
                uploadRequest.getPromise().then(function (newStatus) {
                    _this.increaseMultiplier_();

                    _this.request_ = null;

                    _this.updateProgress_(newStatus.current);

                    if (newStatus.finalized) {
                        _this.metadata_ = newStatus.metadata;

                        _this.transition_(taskenums_1.InternalTaskState.SUCCESS);
                    } else {
                        _this.completeTransitions_();
                    }
                }, _this.errorHandler_);
            });
        };

        UploadTask.prototype.increaseMultiplier_ = function () {
            var currentSize = fbsRequests.resumableUploadChunkSize * this.chunkMultiplier_;

            if (currentSize < 32 * 1024 * 1024) {
                this.chunkMultiplier_ *= 2;
            }
        };

        UploadTask.prototype.fetchMetadata_ = function () {
            var _this = this;

            this.resolveToken_(function (authToken) {
                var requestInfo = fbsRequests.getMetadata(_this.authWrapper_, _this.location_, _this.mappings_);

                var metadataRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);

                _this.request_ = metadataRequest;
                metadataRequest.getPromise().then(function (metadata) {
                    _this.request_ = null;
                    _this.metadata_ = metadata;

                    _this.transition_(taskenums_1.InternalTaskState.SUCCESS);
                }, _this.metadataErrorHandler_);
            });
        };

        UploadTask.prototype.oneShotUpload_ = function () {
            var _this = this;

            this.resolveToken_(function (authToken) {
                var requestInfo = fbsRequests.multipartUpload(_this.authWrapper_, _this.location_, _this.mappings_, _this.blob_, _this.metadata_);

                var multipartRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);

                _this.request_ = multipartRequest;
                multipartRequest.getPromise().then(function (metadata) {
                    _this.request_ = null;
                    _this.metadata_ = metadata;

                    _this.updateProgress_(_this.blob_.size());

                    _this.transition_(taskenums_1.InternalTaskState.SUCCESS);
                }, _this.errorHandler_);
            });
        };

        UploadTask.prototype.updateProgress_ = function (transferred) {
            var old = this.transferred_;
            this.transferred_ = transferred;

            if (this.transferred_ !== old) {
                this.notifyObservers_();
            }
        };

        UploadTask.prototype.transition_ = function (state) {
            if (this.state_ === state) {
                return;
            }

            switch (state) {
                case taskenums_1.InternalTaskState.CANCELING:
                    this.state_ = state;

                    if (this.request_ !== null) {
                        this.request_.cancel();
                    }

                    break;

                case taskenums_1.InternalTaskState.PAUSING:
                    this.state_ = state;

                    if (this.request_ !== null) {
                        this.request_.cancel();
                    }

                    break;

                case taskenums_1.InternalTaskState.RUNNING:
                    var wasPaused = this.state_ === taskenums_1.InternalTaskState.PAUSED;
                    this.state_ = state;

                    if (wasPaused) {
                        this.notifyObservers_();
                        this.start_();
                    }

                    break;

                case taskenums_1.InternalTaskState.PAUSED:
                    this.state_ = state;
                    this.notifyObservers_();
                    break;

                case taskenums_1.InternalTaskState.CANCELED:
                    this.error_ = errors.canceled();
                    this.state_ = state;
                    this.notifyObservers_();
                    break;

                case taskenums_1.InternalTaskState.ERROR:
                    this.state_ = state;
                    this.notifyObservers_();
                    break;

                case taskenums_1.InternalTaskState.SUCCESS:
                    this.state_ = state;
                    this.notifyObservers_();
                    break;
            }
        };

        UploadTask.prototype.completeTransitions_ = function () {
            switch (this.state_) {
                case taskenums_1.InternalTaskState.PAUSING:
                    this.transition_(taskenums_1.InternalTaskState.PAUSED);
                    break;

                case taskenums_1.InternalTaskState.CANCELING:
                    this.transition_(taskenums_1.InternalTaskState.CANCELED);
                    break;

                case taskenums_1.InternalTaskState.RUNNING:
                    this.start_();
                    break;

                default:
                    break;
            }
        };

        Object.defineProperty(UploadTask.prototype, "snapshot", {
            get: function get() {
                var externalState = fbsTaskEnums.taskStateFromInternalTaskState(this.state_);
                return new tasksnapshot_1.UploadTaskSnapshot(this.transferred_, this.blob_.size(), externalState, this.metadata_, this, this.ref_);
            },
            enumerable: true,
            configurable: true
        });

        UploadTask.prototype.on = function (type, nextOrObserver, error, completed) {
            if (nextOrObserver === void 0) {
                nextOrObserver = undefined;
            }

            if (error === void 0) {
                error = undefined;
            }

            if (completed === void 0) {
                completed = undefined;
            }

            function typeValidator(_p) {
                if (type !== taskenums_2.TaskEvent.STATE_CHANGED) {
                    throw "Expected one of the event types: [" + taskenums_2.TaskEvent.STATE_CHANGED + "].";
                }
            }

            var nextOrObserverMessage = 'Expected a function or an Object with one of ' + '`next`, `error`, `complete` properties.';
            var nextValidator = fbsArgs.nullFunctionSpec(true).validator;
            var observerValidator = fbsArgs.looseObjectSpec(null, true).validator;

            function nextOrObserverValidator(p) {
                try {
                    nextValidator(p);
                    return;
                } catch (e) {}

                try {
                    observerValidator(p);
                    var anyDefined = typeUtils.isJustDef(p['next']) || typeUtils.isJustDef(p['error']) || typeUtils.isJustDef(p['complete']);

                    if (!anyDefined) {
                        throw '';
                    }

                    return;
                } catch (e) {
                    throw nextOrObserverMessage;
                }
            }

            var specs = [fbsArgs.stringSpec(typeValidator), fbsArgs.looseObjectSpec(nextOrObserverValidator, true), fbsArgs.nullFunctionSpec(true), fbsArgs.nullFunctionSpec(true)];
            fbsArgs.validate('on', specs, arguments);
            var self = this;

            function makeBinder(specs) {
                function binder(nextOrObserver, error, opt_complete) {
                    if (specs !== null) {
                        fbsArgs.validate('on', specs, arguments);
                    }

                    var observer = new observer_1.Observer(nextOrObserver, error, completed);
                    self.addObserver_(observer);
                    return function () {
                        self.removeObserver_(observer);
                    };
                }

                return binder;
            }

            function binderNextOrObserverValidator(p) {
                if (p === null) {
                    throw nextOrObserverMessage;
                }

                nextOrObserverValidator(p);
            }

            var binderSpecs = [fbsArgs.looseObjectSpec(binderNextOrObserverValidator), fbsArgs.nullFunctionSpec(true), fbsArgs.nullFunctionSpec(true)];
            var typeOnly = !(typeUtils.isJustDef(nextOrObserver) || typeUtils.isJustDef(error) || typeUtils.isJustDef(completed));

            if (typeOnly) {
                return makeBinder(binderSpecs);
            } else {
                return makeBinder(null)(nextOrObserver, error, completed);
            }
        };

        UploadTask.prototype.then = function (onFulfilled, onRejected) {
            return this.promise_.then(onFulfilled, onRejected);
        };

        UploadTask.prototype.catch = function (onRejected) {
            return this.then(null, onRejected);
        };

        UploadTask.prototype.addObserver_ = function (observer) {
            this.observers_.push(observer);
            this.notifyObserver_(observer);
        };

        UploadTask.prototype.removeObserver_ = function (observer) {
            fbsArray.remove(this.observers_, observer);
        };

        UploadTask.prototype.notifyObservers_ = function () {
            var _this = this;

            this.finishPromise_();
            var observers = fbsArray.clone(this.observers_);
            observers.forEach(function (observer) {
                _this.notifyObserver_(observer);
            });
        };

        UploadTask.prototype.finishPromise_ = function () {
            if (this.resolve_ !== null) {
                var triggered = true;

                switch (fbsTaskEnums.taskStateFromInternalTaskState(this.state_)) {
                    case taskenums_2.TaskState.SUCCESS:
                        async_1.async(this.resolve_.bind(null, this.snapshot))();
                        break;

                    case taskenums_2.TaskState.CANCELED:
                    case taskenums_2.TaskState.ERROR:
                        var toCall = this.reject_;
                        async_1.async(toCall.bind(null, this.error_))();
                        break;

                    default:
                        triggered = false;
                        break;
                }

                if (triggered) {
                    this.resolve_ = null;
                    this.reject_ = null;
                }
            }
        };

        UploadTask.prototype.notifyObserver_ = function (observer) {
            var externalState = fbsTaskEnums.taskStateFromInternalTaskState(this.state_);

            switch (externalState) {
                case taskenums_2.TaskState.RUNNING:
                case taskenums_2.TaskState.PAUSED:
                    if (observer.next !== null) {
                        async_1.async(observer.next.bind(observer, this.snapshot))();
                    }

                    break;

                case taskenums_2.TaskState.SUCCESS:
                    if (observer.complete !== null) {
                        async_1.async(observer.complete.bind(observer))();
                    }

                    break;

                case taskenums_2.TaskState.CANCELED:
                case taskenums_2.TaskState.ERROR:
                    if (observer.error !== null) {
                        async_1.async(observer.error.bind(observer, this.error_))();
                    }

                    break;

                default:
                    if (observer.error !== null) {
                        async_1.async(observer.error.bind(observer, this.error_))();
                    }

            }
        };

        UploadTask.prototype.resume = function () {
            fbsArgs.validate('resume', [], arguments);
            var valid = this.state_ === taskenums_1.InternalTaskState.PAUSED || this.state_ === taskenums_1.InternalTaskState.PAUSING;

            if (valid) {
                this.transition_(taskenums_1.InternalTaskState.RUNNING);
            }

            return valid;
        };

        UploadTask.prototype.pause = function () {
            fbsArgs.validate('pause', [], arguments);
            var valid = this.state_ === taskenums_1.InternalTaskState.RUNNING;

            if (valid) {
                this.transition_(taskenums_1.InternalTaskState.PAUSING);
            }

            return valid;
        };

        UploadTask.prototype.cancel = function () {
            fbsArgs.validate('cancel', [], arguments);
            var valid = this.state_ === taskenums_1.InternalTaskState.RUNNING || this.state_ === taskenums_1.InternalTaskState.PAUSING;

            if (valid) {
                this.transition_(taskenums_1.InternalTaskState.CANCELING);
            }

            return valid;
        };

        return UploadTask;
    }();

    exports.UploadTask = UploadTask;
},637,[618,638,639,626,635,640,616,622,634,623],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\task.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var type = _require(_dependencyMap[0], "./type");

    var Observer = function () {
        function Observer(nextOrObserver, opt_error, opt_complete) {
            var asFunctions = type.isFunction(nextOrObserver) || type.isDef(opt_error) || type.isDef(opt_complete);

            if (asFunctions) {
                this.next = nextOrObserver;
                this.error = opt_error || null;
                this.complete = opt_complete || null;
            } else {
                var observer = nextOrObserver;
                this.next = observer.next || null;
                this.error = observer.error || null;
                this.complete = observer.complete || null;
            }
        }

        return Observer;
    }();

    exports.Observer = Observer;
},638,[623],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\implementation\\observer.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var UploadTaskSnapshot = function () {
        function UploadTaskSnapshot(bytesTransferred, totalBytes, state, metadata, task, ref) {
            this.bytesTransferred = bytesTransferred;
            this.totalBytes = totalBytes;
            this.state = state;
            this.metadata = metadata;
            this.task = task;
            this.ref = ref;
        }

        Object.defineProperty(UploadTaskSnapshot.prototype, "downloadURL", {
            get: function get() {
                if (this.metadata !== null) {
                    var urls = this.metadata['downloadURLs'];

                    if (urls != null && urls[0] != null) {
                        return urls[0];
                    } else {
                        return null;
                    }
                } else {
                    return null;
                }
            },
            enumerable: true,
            configurable: true
        });
        return UploadTaskSnapshot;
    }();

    exports.UploadTaskSnapshot = UploadTaskSnapshot;
},639,[],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\tasksnapshot.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var promiseimpl = _require(_dependencyMap[0], "./promise_external");

    function async(f) {
        return function () {
            var argsToForward = [];

            for (var _i = 0; _i < arguments.length; _i++) {
                argsToForward[_i] = arguments[_i];
            }

            promiseimpl.resolve(true).then(function () {
                f.apply(null, argsToForward);
            });
        };
    }

    exports.async = async;
},640,[622],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\implementation\\async.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var args = _require(_dependencyMap[0], "./implementation/args");

    var authwrapper_1 = _require(_dependencyMap[1], "./implementation/authwrapper");

    var location_1 = _require(_dependencyMap[2], "./implementation/location");

    var fbsPromiseImpl = _require(_dependencyMap[3], "./implementation/promise_external");

    var RequestExports = _require(_dependencyMap[4], "./implementation/request");

    var reference_1 = _require(_dependencyMap[5], "./reference");

    var Service = function () {
        function Service(app, pool, url) {
            this.bucket_ = null;

            function maker(authWrapper, loc) {
                return new reference_1.Reference(authWrapper, loc);
            }

            this.authWrapper_ = new authwrapper_1.AuthWrapper(app, maker, RequestExports.makeRequest, this, pool);
            this.app_ = app;

            if (url != null) {
                this.bucket_ = location_1.Location.makeFromBucketSpec(url);
            } else {
                var authWrapperBucket = this.authWrapper_.bucket();

                if (authWrapperBucket != null) {
                    this.bucket_ = new location_1.Location(authWrapperBucket, '');
                }
            }

            this.internals_ = new ServiceInternals(this);
        }

        Service.prototype.ref = function (path) {
            function validator(path) {
                if (/^[A-Za-z]+:\/\//.test(path)) {
                    throw 'Expected child path but got a URL, use refFromURL instead.';
                }
            }

            args.validate('ref', [args.stringSpec(validator, true)], arguments);

            if (this.bucket_ == null) {
                throw new Error('No Storage Bucket defined in Firebase Options.');
            }

            var ref = new reference_1.Reference(this.authWrapper_, this.bucket_);

            if (path != null) {
                return ref.child(path);
            } else {
                return ref;
            }
        };

        Service.prototype.refFromURL = function (url) {
            function validator(p) {
                if (!/^[A-Za-z]+:\/\//.test(p)) {
                    throw 'Expected full URL but got a child path, use ref instead.';
                }

                try {
                    location_1.Location.makeFromUrl(p);
                } catch (e) {
                    throw 'Expected valid full URL but got an invalid one.';
                }
            }

            args.validate('refFromURL', [args.stringSpec(validator, false)], arguments);
            return new reference_1.Reference(this.authWrapper_, url);
        };

        Object.defineProperty(Service.prototype, "maxUploadRetryTime", {
            get: function get() {
                return this.authWrapper_.maxUploadRetryTime();
            },
            enumerable: true,
            configurable: true
        });

        Service.prototype.setMaxUploadRetryTime = function (time) {
            args.validate('setMaxUploadRetryTime', [args.nonNegativeNumberSpec()], arguments);
            this.authWrapper_.setMaxUploadRetryTime(time);
        };

        Object.defineProperty(Service.prototype, "maxOperationRetryTime", {
            get: function get() {
                return this.authWrapper_.maxOperationRetryTime();
            },
            enumerable: true,
            configurable: true
        });

        Service.prototype.setMaxOperationRetryTime = function (time) {
            args.validate('setMaxOperationRetryTime', [args.nonNegativeNumberSpec()], arguments);
            this.authWrapper_.setMaxOperationRetryTime(time);
        };

        Object.defineProperty(Service.prototype, "app", {
            get: function get() {
                return this.app_;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Service.prototype, "INTERNAL", {
            get: function get() {
                return this.internals_;
            },
            enumerable: true,
            configurable: true
        });
        return Service;
    }();

    exports.Service = Service;

    var ServiceInternals = function () {
        function ServiceInternals(service) {
            this.service_ = service;
        }

        ServiceInternals.prototype.delete = function () {
            this.service_.authWrapper_.deleteApp();
            return fbsPromiseImpl.resolve(undefined);
        };

        return ServiceInternals;
    }();

    exports.ServiceInternals = ServiceInternals;
},641,[626,642,629,622,645,625],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\service.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var constants = _require(_dependencyMap[0], "./constants");

    var errorsExports = _require(_dependencyMap[1], "./error");

    var failrequest_1 = _require(_dependencyMap[2], "./failrequest");

    var location_1 = _require(_dependencyMap[3], "./location");

    var promiseimpl = _require(_dependencyMap[4], "./promise_external");

    var requestmap_1 = _require(_dependencyMap[5], "./requestmap");

    var type = _require(_dependencyMap[6], "./type");

    var AuthWrapper = function () {
        function AuthWrapper(app, maker, requestMaker, service, pool) {
            this.bucket_ = null;
            this.deleted_ = false;
            this.app_ = app;

            if (this.app_ !== null) {
                var options = this.app_.options;

                if (type.isDef(options)) {
                    this.bucket_ = AuthWrapper.extractBucket_(options);
                }
            }

            this.storageRefMaker_ = maker;
            this.requestMaker_ = requestMaker;
            this.pool_ = pool;
            this.service_ = service;
            this.maxOperationRetryTime_ = constants.defaultMaxOperationRetryTime;
            this.maxUploadRetryTime_ = constants.defaultMaxUploadRetryTime;
            this.requestMap_ = new requestmap_1.RequestMap();
        }

        AuthWrapper.extractBucket_ = function (config) {
            var bucketString = config[constants.configOption] || null;

            if (bucketString == null) {
                return null;
            }

            var loc = location_1.Location.makeFromBucketSpec(bucketString);
            return loc.bucket;
        };

        AuthWrapper.prototype.getAuthToken = function () {
            if (this.app_ !== null && type.isDef(this.app_.INTERNAL) && type.isDef(this.app_.INTERNAL.getToken)) {
                return this.app_.INTERNAL.getToken().then(function (response) {
                    if (response !== null) {
                        return response.accessToken;
                    } else {
                        return null;
                    }
                }, function (_error) {
                    return null;
                });
            } else {
                return promiseimpl.resolve(null);
            }
        };

        AuthWrapper.prototype.bucket = function () {
            if (this.deleted_) {
                throw errorsExports.appDeleted();
            } else {
                return this.bucket_;
            }
        };

        AuthWrapper.prototype.service = function () {
            return this.service_;
        };

        AuthWrapper.prototype.makeStorageReference = function (loc) {
            return this.storageRefMaker_(this, loc);
        };

        AuthWrapper.prototype.makeRequest = function (requestInfo, authToken) {
            if (!this.deleted_) {
                var request = this.requestMaker_(requestInfo, authToken, this.pool_);
                this.requestMap_.addRequest(request);
                return request;
            } else {
                return new failrequest_1.FailRequest(errorsExports.appDeleted());
            }
        };

        AuthWrapper.prototype.deleteApp = function () {
            this.deleted_ = true;
            this.app_ = null;
            this.requestMap_.clear();
        };

        AuthWrapper.prototype.maxUploadRetryTime = function () {
            return this.maxUploadRetryTime_;
        };

        AuthWrapper.prototype.setMaxUploadRetryTime = function (time) {
            this.maxUploadRetryTime_ = time;
        };

        AuthWrapper.prototype.maxOperationRetryTime = function () {
            return this.maxOperationRetryTime_;
        };

        AuthWrapper.prototype.setMaxOperationRetryTime = function (time) {
            this.maxOperationRetryTime_ = time;
        };

        return AuthWrapper;
    }();

    exports.AuthWrapper = AuthWrapper;
},642,[617,616,643,629,622,644,623],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\implementation\\authwrapper.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var promiseimpl = _require(_dependencyMap[0], "./promise_external");

    var FailRequest = function () {
        function FailRequest(error) {
            this.promise_ = promiseimpl.reject(error);
        }

        FailRequest.prototype.getPromise = function () {
            return this.promise_;
        };

        FailRequest.prototype.cancel = function (appDelete) {
            if (appDelete === void 0) {
                appDelete = false;
            }
        };

        return FailRequest;
    }();

    exports.FailRequest = FailRequest;
},643,[622],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\implementation\\failrequest.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var object = _require(_dependencyMap[0], "./object");

    var constants = _require(_dependencyMap[1], "./constants");

    var RequestMap = function () {
        function RequestMap() {
            this.map_ = {};
            this.id_ = constants.minSafeInteger;
        }

        RequestMap.prototype.addRequest = function (r) {
            var id = this.id_;
            this.id_++;
            this.map_[id] = r;
            var self = this;

            function unmap() {
                delete self.map_[id];
            }

            r.getPromise().then(unmap, unmap);
        };

        RequestMap.prototype.clear = function () {
            object.forEach(this.map_, function (key, val) {
                if (val) {
                    val.cancel(true);
                }
            });
            this.map_ = {};
        };

        return RequestMap;
    }();

    exports.RequestMap = RequestMap;
},644,[621,617],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\implementation\\requestmap.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var app_1 = _require(_dependencyMap[0], "@firebase/app");

    var array = _require(_dependencyMap[1], "./array");

    var backoff = _require(_dependencyMap[2], "./backoff");

    var errorsExports = _require(_dependencyMap[3], "./error");

    var object = _require(_dependencyMap[4], "./object");

    var promiseimpl = _require(_dependencyMap[5], "./promise_external");

    var type = _require(_dependencyMap[6], "./type");

    var UrlUtils = _require(_dependencyMap[7], "./url");

    var XhrIoExports = _require(_dependencyMap[8], "./xhrio");

    var NetworkRequest = function () {
        function NetworkRequest(url, method, headers, body, successCodes, additionalRetryCodes, callback, errorCallback, timeout, progressCallback, pool) {
            this.pendingXhr_ = null;
            this.backoffId_ = null;
            this.resolve_ = null;
            this.reject_ = null;
            this.canceled_ = false;
            this.appDelete_ = false;
            this.url_ = url;
            this.method_ = method;
            this.headers_ = headers;
            this.body_ = body;
            this.successCodes_ = successCodes.slice();
            this.additionalRetryCodes_ = additionalRetryCodes.slice();
            this.callback_ = callback;
            this.errorCallback_ = errorCallback;
            this.progressCallback_ = progressCallback;
            this.timeout_ = timeout;
            this.pool_ = pool;
            var self = this;
            this.promise_ = promiseimpl.make(function (resolve, reject) {
                self.resolve_ = resolve;
                self.reject_ = reject;
                self.start_();
            });
        }

        NetworkRequest.prototype.start_ = function () {
            var self = this;

            function doTheRequest(backoffCallback, canceled) {
                if (canceled) {
                    backoffCallback(false, new RequestEndStatus(false, null, true));
                    return;
                }

                var xhr = self.pool_.createXhrIo();
                self.pendingXhr_ = xhr;

                function progressListener(progressEvent) {
                    var loaded = progressEvent.loaded;
                    var total = progressEvent.lengthComputable ? progressEvent.total : -1;

                    if (self.progressCallback_ !== null) {
                        self.progressCallback_(loaded, total);
                    }
                }

                if (self.progressCallback_ !== null) {
                    xhr.addUploadProgressListener(progressListener);
                }

                xhr.send(self.url_, self.method_, self.body_, self.headers_).then(function (xhr) {
                    if (self.progressCallback_ !== null) {
                        xhr.removeUploadProgressListener(progressListener);
                    }

                    self.pendingXhr_ = null;
                    xhr = xhr;
                    var hitServer = xhr.getErrorCode() === XhrIoExports.ErrorCode.NO_ERROR;
                    var status = xhr.getStatus();

                    if (!hitServer || self.isRetryStatusCode_(status)) {
                        var wasCanceled = xhr.getErrorCode() === XhrIoExports.ErrorCode.ABORT;
                        backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));
                        return;
                    }

                    var successCode = array.contains(self.successCodes_, status);
                    backoffCallback(true, new RequestEndStatus(successCode, xhr));
                });
            }

            function backoffDone(requestWentThrough, status) {
                var resolve = self.resolve_;
                var reject = self.reject_;
                var xhr = status.xhr;

                if (status.wasSuccessCode) {
                    try {
                        var result = self.callback_(xhr, xhr.getResponseText());

                        if (type.isJustDef(result)) {
                            resolve(result);
                        } else {
                            resolve();
                        }
                    } catch (e) {
                        reject(e);
                    }
                } else {
                    if (xhr !== null) {
                        var err = errorsExports.unknown();
                        err.setServerResponseProp(xhr.getResponseText());

                        if (self.errorCallback_) {
                            reject(self.errorCallback_(xhr, err));
                        } else {
                            reject(err);
                        }
                    } else {
                        if (status.canceled) {
                            var err = self.appDelete_ ? errorsExports.appDeleted() : errorsExports.canceled();
                            reject(err);
                        } else {
                            var err = errorsExports.retryLimitExceeded();
                            reject(err);
                        }
                    }
                }
            }

            if (this.canceled_) {
                backoffDone(false, new RequestEndStatus(false, null, true));
            } else {
                this.backoffId_ = backoff.start(doTheRequest, backoffDone, this.timeout_);
            }
        };

        NetworkRequest.prototype.getPromise = function () {
            return this.promise_;
        };

        NetworkRequest.prototype.cancel = function (appDelete) {
            this.canceled_ = true;
            this.appDelete_ = appDelete || false;

            if (this.backoffId_ !== null) {
                backoff.stop(this.backoffId_);
            }

            if (this.pendingXhr_ !== null) {
                this.pendingXhr_.abort();
            }
        };

        NetworkRequest.prototype.isRetryStatusCode_ = function (status) {
            var isFiveHundredCode = status >= 500 && status < 600;
            var extraRetryCodes = [408, 429];
            var isExtraRetryCode = array.contains(extraRetryCodes, status);
            var isRequestSpecificRetryCode = array.contains(this.additionalRetryCodes_, status);
            return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;
        };

        return NetworkRequest;
    }();

    var RequestEndStatus = function () {
        function RequestEndStatus(wasSuccessCode, xhr, opt_canceled) {
            this.wasSuccessCode = wasSuccessCode;
            this.xhr = xhr;
            this.canceled = !!opt_canceled;
        }

        return RequestEndStatus;
    }();

    exports.RequestEndStatus = RequestEndStatus;

    function addAuthHeader_(headers, authToken) {
        if (authToken !== null && authToken.length > 0) {
            headers['Authorization'] = 'Firebase ' + authToken;
        }
    }

    exports.addAuthHeader_ = addAuthHeader_;

    function addVersionHeader_(headers) {
        var number = typeof app_1.default !== 'undefined' ? app_1.default.SDK_VERSION : 'AppManager';
        headers['X-Firebase-Storage-Version'] = 'webjs/' + number;
    }

    exports.addVersionHeader_ = addVersionHeader_;

    function makeRequest(requestInfo, authToken, pool) {
        var queryPart = UrlUtils.makeQueryString(requestInfo.urlParams);
        var url = requestInfo.url + queryPart;
        var headers = object.clone(requestInfo.headers);
        addAuthHeader_(headers, authToken);
        addVersionHeader_(headers);
        return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, pool);
    }

    exports.makeRequest = makeRequest;
},645,[506,635,646,616,621,622,623,631,624],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\implementation\\request.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    function start(f, callback, timeout) {
        var waitSeconds = 1;
        var timeoutId = null;
        var hitTimeout = false;
        var cancelState = 0;

        function canceled() {
            return cancelState === 2;
        }

        var triggeredCallback = false;

        function triggerCallback() {
            if (!triggeredCallback) {
                triggeredCallback = true;
                callback.apply(null, arguments);
            }
        }

        function callWithDelay(millis) {
            timeoutId = setTimeout(function () {
                timeoutId = null;
                f(handler, canceled());
            }, millis);
        }

        function handler(success) {
            var var_args = [];

            for (var _i = 1; _i < arguments.length; _i++) {
                var_args[_i - 1] = arguments[_i];
            }

            if (triggeredCallback) {
                return;
            }

            if (success) {
                triggerCallback.apply(null, arguments);
                return;
            }

            var mustStop = canceled() || hitTimeout;

            if (mustStop) {
                triggerCallback.apply(null, arguments);
                return;
            }

            if (waitSeconds < 64) {
                waitSeconds *= 2;
            }

            var waitMillis;

            if (cancelState === 1) {
                cancelState = 2;
                waitMillis = 0;
            } else {
                waitMillis = (waitSeconds + Math.random()) * 1000;
            }

            callWithDelay(waitMillis);
        }

        var stopped = false;

        function stop(wasTimeout) {
            if (stopped) {
                return;
            }

            stopped = true;

            if (triggeredCallback) {
                return;
            }

            if (timeoutId !== null) {
                if (!wasTimeout) {
                    cancelState = 2;
                }

                clearTimeout(timeoutId);
                callWithDelay(0);
            } else {
                if (!wasTimeout) {
                    cancelState = 1;
                }
            }
        }

        callWithDelay(0);
        setTimeout(function () {
            hitTimeout = true;
            stop(true);
        }, timeout);
        return stop;
    }

    exports.start = start;

    function stop(id) {
        id(false);
    }

    exports.stop = stop;
},646,[],"node_modules\\@firebase\\storage\\dist\\cjs\\src\\implementation\\backoff.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../../node_modules/react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\src\\Component\\LoginForm.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _reactNative = _require(_dependencyMap[2], "react-native");

    var _firebaseApp = _require(_dependencyMap[3], "./firebaseApp");

    var _Common = _require(_dependencyMap[4], "./Common");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        LoginForm: {
            displayName: "LoginForm"
        }
    };

    var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "d:/Demo/React/ReactAuth/auth/src/Component/LoginForm.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var LoginForm = _wrapComponent("LoginForm")(function (_Component) {
        _inherits(LoginForm, _Component);

        function LoginForm() {
            var _ref;

            var _temp, _this, _ret;

            _classCallCheck(this, LoginForm);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = LoginForm.__proto__ || Object.getPrototypeOf(LoginForm)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                email: '',
                password: '',
                error: '',
                loading: false,
                avataUrl: ''
            }, _temp), _possibleConstructorReturn(_this, _ret);
        }

        _createClass(LoginForm, [{
            key: "onButtonPress",
            value: function onButtonPress() {
                var _this2 = this;

                var _state = this.state,
                    email = _state.email,
                    password = _state.password;
                this.setState({
                    error: '',
                    loading: true
                });

                _firebaseApp.firebaseApp.auth().signInWithEmailAndPassword(email, password).then(function () {
                    _firebaseApp.firebaseApp.auth().currentUser.updateProfile({
                        displayName: _this2.state.email
                    }).then(function () {
                        return _this2.onLoginSuccess.bind(_this2);
                    });
                }).catch(function () {
                    _firebaseApp.firebaseApp.auth().createUserWithEmailAndPassword(email, password).then(function () {
                        return _firebaseApp.firebaseApp.auth().currentUser.updateProfile({
                            displayName: _this2.state.email
                        }).then(function () {
                            return _this2.onLoginSuccess.bind(_this2);
                        });
                    }).catch(_this2.onLoginFail.bind(_this2));
                });
            }
        }, {
            key: "onLoginSuccess",
            value: function onLoginSuccess() {
                console.log(this.state.email);
                this.setState({
                    email: '',
                    password: '',
                    loading: false,
                    error: '',
                    avataUrl: ''
                });
            }
        }, {
            key: "onLoginFail",
            value: function onLoginFail() {
                this.setState({
                    error: 'Authentication Failed',
                    loading: false
                });
            }
        }, {
            key: "renderButton",
            value: function renderButton() {
                if (this.state.loading) {
                    return _react3.default.createElement(_Common.Spinner, {
                        size: "small",
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 56
                        }
                    });
                }

                return _react3.default.createElement(
                    _Common.Button,
                    {
                        onPress: this.onButtonPress.bind(this),
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 60
                        }
                    },
                    " Login "
                );
            }
        }, {
            key: "render",
            value: function render() {
                var _this3 = this;

                return _react3.default.createElement(
                    _Common.Card,
                    {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 66
                        }
                    },
                    _react3.default.createElement(
                        _Common.CardSection,
                        {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 67
                            }
                        },
                        _react3.default.createElement(_Common.Input, {
                            placeholder: "user@gmail.com",
                            value: this.state.email,
                            onChangeText: function onChangeText(email) {
                                return _this3.setState({
                                    email: email
                                });
                            },
                            label: "Email",
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 68
                            }
                        })
                    ),
                    _react3.default.createElement(
                        _Common.CardSection,
                        {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 75
                            }
                        },
                        _react3.default.createElement(_Common.Input, {
                            secureTextEntry: true,
                            placeholder: "password",
                            value: this.state.password,
                            onChangeText: function onChangeText(password) {
                                return _this3.setState({
                                    password: password
                                });
                            },
                            label: "Password",
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 76
                            }
                        })
                    ),
                    _react3.default.createElement(
                        _reactNative.Text,
                        {
                            style: styles.errorTextStyle,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 85
                            }
                        },
                        this.state.error
                    ),
                    _react3.default.createElement(
                        _Common.CardSection,
                        {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 88
                            }
                        },
                        this.renderButton()
                    )
                );
            }
        }]);

        return LoginForm;
    }(_react2.Component));

    exports.default = LoginForm;
    var styles = {
        errorTextStyle: {
            fontSize: 20,
            alignSelf: 'center',
            color: 'red'
        }
    };
},647,[113,179,12,498,491],"src\\Component\\LoginForm.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../../node_modules/react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _jsxFileName = "d:\\Demo\\React\\ReactAuth\\auth\\src\\Component\\ProfileForm.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _reactNativeImagePicker = _require(_dependencyMap[2], "react-native-image-picker");

    var _reactNativeImagePicker2 = _interopRequireDefault(_reactNativeImagePicker);

    var _reactNativeFetchBlob = _require(_dependencyMap[3], "react-native-fetch-blob");

    var _reactNativeFetchBlob2 = _interopRequireDefault(_reactNativeFetchBlob);

    var _reactNative = _require(_dependencyMap[4], "react-native");

    var _Common = _require(_dependencyMap[5], "./Common");

    var _firebaseApp = _require(_dependencyMap[6], "./firebaseApp");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        ProfileForm: {
            displayName: "ProfileForm"
        }
    };

    var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "d:/Demo/React/ReactAuth/auth/src/Component/ProfileForm.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
        };
    }

    _reactNative.YellowBox.ignoreWarnings(['Setting a timer']);

    var Blob = _reactNativeFetchBlob2.default.polyfill.Blob;
    var fs = _reactNativeFetchBlob2.default.fs;
    window.XMLHttpRequest = _reactNativeFetchBlob2.default.polyfill.XMLHttpRequest;
    window.Blob = Blob;

    var uploadImage = function uploadImage(uri) {
        var mime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'application/octet-stream';
        return new Promise(function (resolve, reject) {
            var uploadUri = _reactNative.Platform.OS === 'ios' ? uri.replace('file://', '') : uri;
            var uploadBlob = null;

            var imageRef = _firebaseApp.firebaseApp.storage().ref('Images');

            fs.readFile(uploadUri, 'base64').then(function (data) {
                return Blob.build(data, {
                    type: mime + ";BASE64"
                });
            }).then(function (blob) {
                uploadBlob = blob;
                return imageRef.put(blob, {
                    contentType: mime
                });
            }).then(function () {
                uploadBlob.close();
                return imageRef.getDownloadURL();
            }).then(function (url) {
                resolve(url);
            }).catch(function (error) {
                reject(error);
            });
        });
    };

    var ProfileForm = _wrapComponent("ProfileForm")(function (_Component) {
        _inherits(ProfileForm, _Component);

        function ProfileForm() {
            var _ref;

            var _temp, _this, _ret;

            _classCallCheck(this, ProfileForm);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ProfileForm.__proto__ || Object.getPrototypeOf(ProfileForm)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                displayName: '',
                avataUrl: '',
                user: null
            }, _temp), _possibleConstructorReturn(_this, _ret);
        }

        _createClass(ProfileForm, [{
            key: "componentWillMount",
            value: function componentWillMount() {
                var curentUser = _firebaseApp.firebaseApp.auth().currentUser;

                console.log(curentUser);
                this.setState({
                    user: curentUser,
                    avataUrl: curentUser.photoURL,
                    displayName: curentUser.email
                });
            }
        }, {
            key: "_pickImage",
            value: function _pickImage() {
                var _this2 = this;

                _reactNativeImagePicker2.default.launchImageLibrary({}, function (response) {
                    uploadImage(response.uri).then(function (url) {
                        _firebaseApp.firebaseApp.auth().currentUser.updateProfile({
                            photoURL: url
                        }).then(function () {
                            return _this2.setState({
                                avataUrl: url
                            });
                        });
                    }).catch(function (error) {
                        return console.log(error);
                    });
                });
            }
        }, {
            key: "renderprofile",
            value: function renderprofile() {
                var _state = this.state,
                    displayName = _state.displayName,
                    avataUrl = _state.avataUrl,
                    user = _state.user;

                if (user != null) {
                    return _react3.default.createElement(
                        _Common.Card,
                        {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 64
                            }
                        },
                        _react3.default.createElement(
                            _Common.CardSection,
                            {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 65
                                }
                            },
                            _react3.default.createElement(
                                _reactNative.View,
                                {
                                    style: styles.headerContentStyle,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 66
                                    }
                                },
                                _react3.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: styles.headerTextStyle,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 67
                                        }
                                    },
                                    displayName
                                )
                            )
                        ),
                        _react3.default.createElement(
                            _Common.CardSection,
                            {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 70
                                }
                            },
                            _react3.default.createElement(_reactNative.Image, {
                                style: styles.imageStyle,
                                source: {
                                    uri: avataUrl
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 71
                                }
                            })
                        ),
                        _react3.default.createElement(
                            _Common.CardSection,
                            {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 76
                                }
                            },
                            _react3.default.createElement(
                                _Common.Button,
                                {
                                    onPress: this._pickImage.bind(this),
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 77
                                    }
                                },
                                " Upload "
                            )
                        ),
                        _react3.default.createElement(
                            _Common.CardSection,
                            {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 79
                                }
                            },
                            _react3.default.createElement(
                                _Common.Button,
                                {
                                    onPress: function onPress() {
                                        return _firebaseApp.firebaseApp.auth().signOut();
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 80
                                    }
                                },
                                "Log Out"
                            )
                        )
                    );
                }

                return _react3.default.createElement(
                    _Common.Card,
                    {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 88
                        }
                    },
                    _react3.default.createElement(
                        _Common.CardSection,
                        {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 89
                            }
                        },
                        _react3.default.createElement(
                            _Common.Button,
                            {
                                onPress: function onPress() {
                                    return _firebaseApp.firebaseApp.auth().signOut();
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 90
                                }
                            },
                            "Log Out"
                        )
                    )
                );
            }
        }, {
            key: "render",
            value: function render() {
                return this.renderprofile();
            }
        }]);

        return ProfileForm;
    }(_react2.Component));

    var styles = {
        headerContentStyle: {
            flexDirection: 'column',
            justifyContent: 'space-around'
        },
        headerTextStyle: {
            fontSize: 18
        },
        thumbnailStyle: {
            height: 50,
            width: 50
        },
        thumbnailcontainerStyle: {
            justifyContent: 'center',
            alignItems: 'center',
            marginLeft: 10,
            marginRight: 10
        },
        imageStyle: {
            height: 300,
            flex: 1,
            width: null
        }
    };
    exports.default = ProfileForm;
},648,[113,179,649,650,12,491,498],"src\\Component\\ProfileForm.js");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _require = _require2(_dependencyMap[0], 'react-native'),
      NativeModules = _require.NativeModules;

  var ImagePickerManager = NativeModules.ImagePickerManager;
  var DEFAULT_OPTIONS = {
    title: 'Select a Photo',
    cancelButtonTitle: 'Cancel',
    takePhotoButtonTitle: 'Take Photo…',
    chooseFromLibraryButtonTitle: 'Choose from Library…',
    quality: 1.0,
    allowsEditing: false,
    permissionDenied: {
      title: 'Permission denied',
      text: 'To be able to take pictures with your camera and choose images from your library.',
      reTryTitle: 're-try',
      okTitle: 'I\'m sure'
    }
  };
  module.exports = _extends({}, ImagePickerManager, {
    showImagePicker: function showImagePicker(options, callback) {
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }

      return ImagePickerManager.showImagePicker(_extends({}, DEFAULT_OPTIONS, options), callback);
    }
  });
},649,[12],"node_modules\\react-native-image-picker\\index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0], "react-native");

  var _uri = _require(_dependencyMap[1], "./utils/uri");

  var _uri2 = _interopRequireDefault(_uri);

  var _StatefulPromise = _require(_dependencyMap[2], "./class/StatefulPromise.js");

  var _StatefulPromise2 = _interopRequireDefault(_StatefulPromise);

  var _fs = _require(_dependencyMap[3], "./fs");

  var _fs2 = _interopRequireDefault(_fs);

  var _uuid = _require(_dependencyMap[4], "./utils/uuid");

  var _uuid2 = _interopRequireDefault(_uuid);

  var _base = _require(_dependencyMap[5], "base-64");

  var _base2 = _interopRequireDefault(_base);

  var _polyfill = _require(_dependencyMap[6], "./polyfill");

  var _polyfill2 = _interopRequireDefault(_polyfill);

  var _lodash = _require(_dependencyMap[7], "lodash");

  var _lodash2 = _interopRequireDefault(_lodash);

  var _android = _require(_dependencyMap[8], "./android");

  var _android2 = _interopRequireDefault(_android);

  var _ios = _require(_dependencyMap[9], "./ios");

  var _ios2 = _interopRequireDefault(_ios);

  var _jsonStream = _require(_dependencyMap[10], "./json-stream");

  var _jsonStream2 = _interopRequireDefault(_jsonStream);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  var RNFetchBlobSession = _fs2.default.RNFetchBlobSession,
      readStream = _fs2.default.readStream,
      createFile = _fs2.default.createFile,
      unlink = _fs2.default.unlink,
      exists = _fs2.default.exists,
      mkdir = _fs2.default.mkdir,
      session = _fs2.default.session,
      writeStream = _fs2.default.writeStream,
      readFile = _fs2.default.readFile,
      ls = _fs2.default.ls,
      isDir = _fs2.default.isDir,
      mv = _fs2.default.mv,
      cp = _fs2.default.cp;
  var Blob = _polyfill2.default.Blob;
  var emitter = _reactNative.DeviceEventEmitter;
  var RNFetchBlob = _reactNative.NativeModules.RNFetchBlob;

  if (_reactNative.Platform.OS === 'ios') {
    _reactNative.AppState.addEventListener('change', function (e) {
      if (e === 'active') RNFetchBlob.emitExpiredEvent(function () {});
    });
  }

  emitter.addListener("RNFetchBlobMessage", function (e) {
    if (e.event === 'warn') {
      console.warn(e.detail);
    } else if (e.event === 'error') {
      throw e.detail;
    } else {
      console.log("RNFetchBlob native message", e.detail);
    }
  });

  if (!RNFetchBlob || !RNFetchBlob.fetchBlobForm || !RNFetchBlob.fetchBlob) {
    console.warn('react-native-fetch-blob could not find valid native module.', 'please make sure you have linked native modules using `rnpm link`,', 'and restart RN packager or manually compile IOS/Android project.');
  }

  function wrap(path) {
    return 'RNFetchBlob-file://' + path;
  }

  function config(options) {
    return {
      fetch: fetch.bind(options)
    };
  }

  function fetchFile() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var method = arguments[1];
    var url = arguments[2];
    var headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    var body = arguments[4];

    if (!_uri2.default.isFileURI(url)) {
      throw "could not fetch file from an invalid URI : " + url;
    }

    url = _uri2.default.unwrapFileURI(url);
    var promise = null;
    var cursor = 0;
    var total = -1;
    var cacheData = '';
    var info = null;

    var _progress = void 0,
        _uploadProgress = void 0,
        _stateChange = void 0;

    switch (method.toLowerCase()) {
      case 'post':
        break;

      case 'put':
        break;

      default:
        promise = _fs2.default.stat(url).then(function (stat) {
          total = stat.size;
          return _fs2.default.readStream(url, headers.encoding || 'utf8', Math.floor(headers.bufferSize) || 409600, Math.floor(headers.interval) || 100);
        }).then(function (stream) {
          return new Promise(function (resolve, reject) {
            stream.open();
            info = {
              state: "2",
              headers: {
                'source': 'system-fs'
              },
              status: 200,
              respType: 'text',
              rnfbEncode: headers.encoding || 'utf8'
            };

            _stateChange(info);

            stream.onData(function (chunk) {
              _progress && _progress(cursor, total, chunk);
              if (headers.noCache) return;
              cacheData += chunk;
            });
            stream.onError(function (err) {
              reject(err);
            });
            stream.onEnd(function () {
              resolve(new FetchBlobResponse(null, info, cacheData));
            });
          });
        });
        break;
    }

    promise.progress = function (fn) {
      _progress = fn;
      return promise;
    };

    promise.stateChange = function (fn) {
      _stateChange = fn;
      return promise;
    };

    promise.uploadProgress = function (fn) {
      _uploadProgress = fn;
      return promise;
    };

    return promise;
  }

  function fetch() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var taskId = (0, _uuid2.default)();
    var options = this || {};
    var subscription = void 0,
        subscriptionUpload = void 0,
        stateEvent = void 0,
        partEvent = void 0;
    var respInfo = {};

    var _ref = [].concat(_toConsumableArray(args)),
        method = _ref[0],
        url = _ref[1],
        headers = _ref[2],
        body = _ref[3];

    headers = _lodash2.default.reduce(headers, function (result, value, key) {
      result[key] = value || '';
      return result;
    }, {});

    if (_uri2.default.isFileURI(url)) {
      return fetchFile(options, method, url, headers, body);
    }

    var promise = new Promise(function (resolve, reject) {
      var nativeMethodName = Array.isArray(body) ? 'fetchBlobForm' : 'fetchBlob';
      subscription = emitter.addListener('RNFetchBlobProgress', function (e) {
        if (e.taskId === taskId && promise.onProgress) {
          promise.onProgress(e.written, e.total, e.chunk);
        }
      });
      subscriptionUpload = emitter.addListener('RNFetchBlobProgress-upload', function (e) {
        if (e.taskId === taskId && promise.onUploadProgress) {
          promise.onUploadProgress(e.written, e.total);
        }
      });
      stateEvent = emitter.addListener('RNFetchBlobState', function (e) {
        if (e.taskId === taskId) respInfo = e;
        promise.onStateChange && promise.onStateChange(e);
      });
      subscription = emitter.addListener('RNFetchBlobExpire', function (e) {
        if (e.taskId === taskId && promise.onExpire) {
          promise.onExpire(e);
        }
      });
      partEvent = emitter.addListener('RNFetchBlobServerPush', function (e) {
        if (e.taskId === taskId && promise.onPartData) {
          promise.onPartData(e.chunk);
        }
      });

      if (body instanceof Blob && body.isRNFetchBlobPolyfill) {
        body = body.getRNFetchBlobRef();
      }

      var req = RNFetchBlob[nativeMethodName];
      req(options, taskId, method, url, headers || {}, body, function (err, rawType, data) {
        subscription.remove();
        subscriptionUpload.remove();
        stateEvent.remove();
        partEvent.remove();
        delete promise['progress'];
        delete promise['uploadProgress'];
        delete promise['stateChange'];
        delete promise['part'];
        delete promise['cancel'];

        promise.cancel = function () {};

        if (err) reject(new Error(err, respInfo));else {
          if (options.path || options.fileCache || options.addAndroidDownloads || options.key || options.auto && respInfo.respType === 'blob') {
            if (options.session) session(options.session).add(data);
          }

          respInfo.rnfbEncode = rawType;
          resolve(new FetchBlobResponse(taskId, respInfo, data));
        }
      });
    });

    promise.progress = function () {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var interval = 250;
      var count = -1;

      var fn = function fn() {};

      if (args.length === 2) {
        interval = args[0].interval || interval;
        count = args[0].count || count;
        fn = args[1];
      } else {
        fn = args[0];
      }

      promise.onProgress = fn;
      RNFetchBlob.enableProgressReport(taskId, interval, count);
      return promise;
    };

    promise.uploadProgress = function () {
      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      var interval = 250;
      var count = -1;

      var fn = function fn() {};

      if (args.length === 2) {
        interval = args[0].interval || interval;
        count = args[0].count || count;
        fn = args[1];
      } else {
        fn = args[0];
      }

      promise.onUploadProgress = fn;
      RNFetchBlob.enableUploadProgressReport(taskId, interval, count);
      return promise;
    };

    promise.part = function (fn) {
      promise.onPartData = fn;
      return promise;
    };

    promise.stateChange = function (fn) {
      promise.onStateChange = fn;
      return promise;
    };

    promise.expire = function (fn) {
      promise.onExpire = fn;
      return promise;
    };

    promise.cancel = function (fn) {
      fn = fn || function () {};

      subscription.remove();
      subscriptionUpload.remove();
      stateEvent.remove();
      RNFetchBlob.cancelRequest(taskId, fn);
    };

    promise.taskId = taskId;
    return promise;
  }

  var FetchBlobResponse = function FetchBlobResponse(taskId, info, data) {
    var _this = this;

    _classCallCheck(this, FetchBlobResponse);

    this.data = data;
    this.taskId = taskId;
    this.type = info.rnfbEncode;
    this.respInfo = info;

    this.info = function () {
      return _this.respInfo;
    };

    this.array = function () {
      var cType = info.headers['Content-Type'] || info.headers['content-type'];
      return new Promise(function (resolve, reject) {
        switch (_this.type) {
          case 'base64':
            break;

          case 'path':
            _fs2.default.readFile(_this.data, 'ascii').then(resolve);

            break;

          default:
            break;
        }
      });
    };

    this.blob = function () {
      var Blob = _polyfill2.default.Blob;
      var cType = info.headers['Content-Type'] || info.headers['content-type'];
      return new Promise(function (resolve, reject) {
        switch (_this.type) {
          case 'base64':
            Blob.build(_this.data, {
              type: cType + ';BASE64'
            }).then(resolve);
            break;

          case 'path':
            _polyfill2.default.Blob.build(wrap(_this.data), {
              type: cType
            }).then(resolve);

            break;

          default:
            _polyfill2.default.Blob.build(_this.data, {
              type: 'text/plain'
            }).then(resolve);

            break;
        }
      });
    };

    this.text = function () {
      var res = _this.data;

      switch (_this.type) {
        case 'base64':
          return _base2.default.decode(_this.data);

        case 'path':
          return _fs2.default.readFile(_this.data, 'base64').then(function (b64) {
            return Promise.resolve(_base2.default.decode(b64));
          });

        default:
          return _this.data;
      }
    };

    this.json = function () {
      switch (_this.type) {
        case 'base64':
          return JSON.parse(_base2.default.decode(_this.data));

        case 'path':
          return _fs2.default.readFile(_this.data, 'utf8').then(function (text) {
            return Promise.resolve(JSON.parse(text));
          });

        default:
          return JSON.parse(_this.data);
      }
    };

    this.base64 = function () {
      switch (_this.type) {
        case 'base64':
          return _this.data;

        case 'path':
          return _fs2.default.readFile(_this.data, 'base64');

        default:
          return _base2.default.encode(_this.data);
      }
    };

    this.flush = function () {
      var path = _this.path();

      if (!path || _this.type !== 'path') return;
      return unlink(path);
    };

    this.path = function () {
      if (_this.type === 'path') return _this.data;
      return null;
    };

    this.session = function (name) {
      if (_this.type === 'path') return session(name).add(_this.data);else {
        console.warn('only file paths can be add into session.');
        return null;
      }
    };

    this.readStream = function (encode) {
      if (_this.type === 'path') {
        return readStream(_this.data, encode);
      } else {
        console.warn('RNFetchblob', 'this response data does not contains any available stream');
        return null;
      }
    };

    this.readFile = function (encode) {
      if (_this.type === 'path') {
        encode = encode || 'utf8';
        return readFile(_this.data, encode);
      } else {
        console.warn('RNFetchblob', 'this response does not contains a readable file');
        return null;
      }
    };
  };

  exports.default = {
    fetch: fetch,
    base64: _base2.default,
    android: _android2.default,
    ios: _ios2.default,
    config: config,
    session: session,
    fs: _fs2.default,
    wrap: wrap,
    polyfill: _polyfill2.default,
    JSONStream: _jsonStream2.default
  };
},650,[12,651,652,653,657,659,660,672,673,674,675],"node_modules\\react-native-fetch-blob\\index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    isFileURI: function isFileURI(uri) {
      if (typeof uri !== 'string') return false;
      return (/^RNFetchBlob-file\:\/\//.test(uri)
      );
    },
    isJSONStreamURI: function isJSONStreamURI(uri) {
      if (typeof uri !== 'string') return false;
      return (/^JSONStream\:\/\//.test(uri)
      );
    },
    removeURIScheme: function removeURIScheme(uri, iterations) {
      iterations = iterations || 1;
      var result = uri;

      for (var i = 0; i < iterations; i++) {
        result = String(result).replace(/^[^\:]+\:\/\//, '');
      }

      return String(result);
    },
    unwrapFileURI: function unwrapFileURI(uri) {
      return String(uri).replace(/^RNFetchBlob-file\:\/\//, '');
    }
  };
},651,[],"node_modules\\react-native-fetch-blob\\utils\\uri.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var StatefulPromise = function (_Promise) {
    _inherits(StatefulPromise, _Promise);

    function StatefulPromise() {
      _classCallCheck(this, StatefulPromise);

      return _possibleConstructorReturn(this, (StatefulPromise.__proto__ || Object.getPrototypeOf(StatefulPromise)).apply(this, arguments));
    }

    return StatefulPromise;
  }(Promise);

  exports.default = StatefulPromise;
},652,[],"node_modules\\react-native-fetch-blob\\class\\StatefulPromise.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0], "react-native");

  var _RNFetchBlobSession = _require(_dependencyMap[1], "./class/RNFetchBlobSession");

  var _RNFetchBlobSession2 = _interopRequireDefault(_RNFetchBlobSession);

  var _RNFetchBlobWriteStream = _require(_dependencyMap[2], "./class/RNFetchBlobWriteStream");

  var _RNFetchBlobWriteStream2 = _interopRequireDefault(_RNFetchBlobWriteStream);

  var _RNFetchBlobReadStream = _require(_dependencyMap[3], "./class/RNFetchBlobReadStream");

  var _RNFetchBlobReadStream2 = _interopRequireDefault(_RNFetchBlobReadStream);

  var _RNFetchBlobFile = _require(_dependencyMap[4], "./class/RNFetchBlobFile");

  var _RNFetchBlobFile2 = _interopRequireDefault(_RNFetchBlobFile);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var RNFetchBlob = _reactNative.NativeModules.RNFetchBlob;
  var emitter = _reactNative.DeviceEventEmitter;
  var dirs = {
    DocumentDir: RNFetchBlob.DocumentDir,
    CacheDir: RNFetchBlob.CacheDir,
    PictureDir: RNFetchBlob.PictureDir,
    MusicDir: RNFetchBlob.MusicDir,
    MovieDir: RNFetchBlob.MovieDir,
    DownloadDir: RNFetchBlob.DownloadDir,
    DCIMDir: RNFetchBlob.DCIMDir,
    SDCardDir: RNFetchBlob.SDCardDir,
    SDCardApplicationDir: RNFetchBlob.SDCardApplicationDir,
    MainBundleDir: RNFetchBlob.MainBundleDir,
    LibraryDir: RNFetchBlob.LibraryDir
  };

  function session(name) {
    var s = _RNFetchBlobSession2.default.getSession(name);

    if (s) return new _RNFetchBlobSession2.default(name);else {
      _RNFetchBlobSession2.default.setSession(name, []);

      return new _RNFetchBlobSession2.default(name, []);
    }
  }

  function asset(path) {
    if (_reactNative.Platform.OS === 'ios') {
      if (/^assets-library\:\/\//.test(path)) return path;
    }

    return 'bundle-assets://' + path;
  }

  function createFile(path, data, encoding) {
    encoding = encoding || 'utf8';
    return new Promise(function (resolve, reject) {
      var handler = function handler(err) {
        if (err) reject(new Error(err));else resolve();
      };

      if (encoding.toLowerCase() === 'ascii') {
        if (Array.isArray(data)) RNFetchBlob.createFileASCII(path, data, handler);else reject(new Error('`data` of ASCII file must be an array contains numbers'));
      } else {
        RNFetchBlob.createFile(path, data, encoding, handler);
      }
    });
  }

  function writeStream(path, encoding, append) {
    if (!path) throw Error('RNFetchBlob could not open file stream with empty `path`');
    encoding = encoding || 'utf8';
    append = append || false;
    return new Promise(function (resolve, reject) {
      RNFetchBlob.writeStream(path, encoding || 'base64', append || false, function (err, streamId) {
        if (err) reject(new Error(err));else resolve(new _RNFetchBlobWriteStream2.default(streamId, encoding));
      });
    });
  }

  function readStream(path, encoding, bufferSize) {
    var tick = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;
    return Promise.resolve(new _RNFetchBlobReadStream2.default(path, encoding, bufferSize, tick));
  }

  function mkdir(path) {
    return new Promise(function (resolve, reject) {
      RNFetchBlob.mkdir(path, function (err, res) {
        if (err) reject(new Error(err));else resolve();
      });
    });
  }

  function pathForAppGroup(groupName) {
    return RNFetchBlob.pathForAppGroup(groupName);
  }

  function readFile(path, encoding, bufferSize) {
    if (typeof path !== 'string') return Promise.reject(new Error('Invalid argument "path" '));
    return RNFetchBlob.readFile(path, encoding);
  }

  function writeFile(path, data, encoding) {
    encoding = encoding || 'utf8';
    if (typeof path !== 'string') return Promise.reject('Invalid argument "path" ');

    if (encoding.toLocaleLowerCase() === 'ascii') {
      if (!Array.isArray(data)) return Promise.reject(new Error("Expected \"data\" is an Array when encoding is \"ascii\", however got " + typeof data));else return RNFetchBlob.writeFileArray(path, data, false);
    } else {
      if (typeof data !== 'string') return Promise.reject(new Error("Expected \"data\" is a String when encoding is \"utf8\" or \"base64\", however got " + typeof data));else return RNFetchBlob.writeFile(path, encoding, data, false);
    }
  }

  function appendFile(path, data, encoding) {
    encoding = encoding || 'utf8';
    if (typeof path !== 'string') return Promise.reject('Invalid argument "path" ');

    if (encoding.toLocaleLowerCase() === 'ascii') {
      if (!Array.isArray(data)) return Promise.reject(new Error("Expected \"data\" is an Array when encoding is \"ascii\", however got " + typeof data));else return RNFetchBlob.writeFileArray(path, data, true);
    } else {
      if (typeof data !== 'string') return Promise.reject(new Error("Expected \"data\" is a String when encoding is \"utf8\" or \"base64\", however got " + typeof data));else return RNFetchBlob.writeFile(path, encoding, data, true);
    }
  }

  function stat(path) {
    return new Promise(function (resolve, reject) {
      RNFetchBlob.stat(path, function (err, stat) {
        if (err) reject(new Error(err));else {
          if (stat) {
            stat.size = parseInt(stat.size);
            stat.lastModified = parseInt(stat.lastModified);
          }

          resolve(stat);
        }
      });
    });
  }

  function scanFile(pairs) {
    return new Promise(function (resolve, reject) {
      RNFetchBlob.scanFile(pairs, function (err) {
        if (err) reject(new Error(err));else resolve();
      });
    });
  }

  function cp(path, dest) {
    return new Promise(function (resolve, reject) {
      RNFetchBlob.cp(path, dest, function (err, res) {
        if (err) reject(new Error(err));else resolve(res);
      });
    });
  }

  function mv(path, dest) {
    return new Promise(function (resolve, reject) {
      RNFetchBlob.mv(path, dest, function (err, res) {
        if (err) reject(new Error(err));else resolve(res);
      });
    });
  }

  function lstat(path) {
    return new Promise(function (resolve, reject) {
      RNFetchBlob.lstat(path, function (err, stat) {
        if (err) reject(new Error(err));else resolve(stat);
      });
    });
  }

  function ls(path) {
    return new Promise(function (resolve, reject) {
      RNFetchBlob.ls(path, function (err, res) {
        if (err) reject(new Error(err));else resolve(res);
      });
    });
  }

  function unlink(path) {
    return new Promise(function (resolve, reject) {
      RNFetchBlob.unlink(path, function (err) {
        if (err) {
          reject(new Error(err));
        } else resolve();
      });
    });
  }

  function exists(path) {
    return new Promise(function (resolve, reject) {
      try {
        RNFetchBlob.exists(path, function (exist) {
          resolve(exist);
        });
      } catch (err) {
        reject(new Error(err));
      }
    });
  }

  function slice(src, dest, start, end) {
    var p = Promise.resolve();
    var size = 0;

    function normalize(num, size) {
      if (num < 0) return Math.max(0, size + num);
      if (!num && num !== 0) return size;
      return num;
    }

    if (start < 0 || end < 0 || !start || !end) {
      p = p.then(function () {
        return stat(src);
      }).then(function (stat) {
        size = Math.floor(stat.size);
        start = normalize(start || 0, size);
        end = normalize(end, size);
        return Promise.resolve();
      });
    }

    return p.then(function () {
      return RNFetchBlob.slice(src, dest, start, end);
    });
  }

  function isDir(path) {
    return new Promise(function (resolve, reject) {
      try {
        RNFetchBlob.exists(path, function (exist, isDir) {
          resolve(isDir);
        });
      } catch (err) {
        reject(new Error(err));
      }
    });
  }

  function df() {
    return new Promise(function (resolve, reject) {
      RNFetchBlob.df(function (err, stat) {
        if (err) reject(err);else resolve(stat);
      });
    });
  }

  exports.default = {
    RNFetchBlobSession: _RNFetchBlobSession2.default,
    unlink: unlink,
    mkdir: mkdir,
    session: session,
    ls: ls,
    readStream: readStream,
    mv: mv,
    cp: cp,
    writeStream: writeStream,
    writeFile: writeFile,
    appendFile: appendFile,
    pathForAppGroup: pathForAppGroup,
    readFile: readFile,
    exists: exists,
    createFile: createFile,
    isDir: isDir,
    stat: stat,
    lstat: lstat,
    scanFile: scanFile,
    dirs: dirs,
    slice: slice,
    asset: asset,
    df: df
  };
},653,[12,654,655,656,658],"node_modules\\react-native-fetch-blob\\fs.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = _require(_dependencyMap[0], "react-native");

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var RNFetchBlob = _reactNative.NativeModules.RNFetchBlob;
  var emitter = _reactNative.DeviceEventEmitter;
  var sessions = {};

  var RNFetchBlobSession = function () {
    _createClass(RNFetchBlobSession, null, [{
      key: "getSession",
      value: function getSession(name) {
        return sessions[name];
      }
    }, {
      key: "setSession",
      value: function setSession(name, val) {
        sessions[name] = val;
      }
    }, {
      key: "removeSession",
      value: function removeSession(name) {
        delete sessions[name];
      }
    }]);

    function RNFetchBlobSession(name, list) {
      _classCallCheck(this, RNFetchBlobSession);

      this.name = name;

      if (!sessions[name]) {
        if (Array.isArray(list)) sessions[name] = list;else sessions[name] = [];
      }
    }

    _createClass(RNFetchBlobSession, [{
      key: "add",
      value: function add(path) {
        sessions[this.name].push(path);
        return this;
      }
    }, {
      key: "remove",
      value: function remove(path) {
        var list = sessions[this.name];

        for (var i in list) {
          if (list[i] === path) {
            sessions[this.name].splice(i, 1);
            break;
          }
        }

        return this;
      }
    }, {
      key: "list",
      value: function list() {
        return sessions[this.name];
      }
    }, {
      key: "dispose",
      value: function dispose() {
        var _this = this;

        return new Promise(function (resolve, reject) {
          RNFetchBlob.removeSession(sessions[_this.name], function (err) {
            if (err) reject(err);else {
              delete sessions[_this.name];
              resolve();
            }
          });
        });
      }
    }]);

    return RNFetchBlobSession;
  }();

  exports.default = RNFetchBlobSession;
},654,[12],"node_modules\\react-native-fetch-blob\\class\\RNFetchBlobSession.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = _require(_dependencyMap[0], "react-native");

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var RNFetchBlob = _reactNative.NativeModules.RNFetchBlob;
  var emitter = _reactNative.DeviceEventEmitter;

  var RNFetchBlobWriteStream = function () {
    function RNFetchBlobWriteStream(streamId, encoding, append) {
      _classCallCheck(this, RNFetchBlobWriteStream);

      this.id = streamId;
      this.encoding = encoding;
      this.append = append;
    }

    _createClass(RNFetchBlobWriteStream, [{
      key: "write",
      value: function write(data) {
        var _this = this;

        return new Promise(function (resolve, reject) {
          try {
            var method = _this.encoding === 'ascii' ? 'writeArrayChunk' : 'writeChunk';

            if (_this.encoding.toLocaleLowerCase() === 'ascii' && !Array.isArray(data)) {
              reject('ascii input data must be an Array');
              return;
            }

            RNFetchBlob[method](_this.id, data, function (error) {
              if (error) reject(error);else resolve();
            });
          } catch (err) {
            reject(err);
          }
        });
      }
    }, {
      key: "close",
      value: function close() {
        var _this2 = this;

        return new Promise(function (resolve, reject) {
          try {
            RNFetchBlob.closeStream(_this2.id, function () {
              resolve();
            });
          } catch (err) {
            reject(err);
          }
        });
      }
    }]);

    return RNFetchBlobWriteStream;
  }();

  exports.default = RNFetchBlobWriteStream;
},655,[12],"node_modules\\react-native-fetch-blob\\class\\RNFetchBlobWriteStream.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = _require(_dependencyMap[0], "react-native");

  var _uuid = _require(_dependencyMap[1], "../utils/uuid");

  var _uuid2 = _interopRequireDefault(_uuid);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var RNFetchBlob = _reactNative.NativeModules.RNFetchBlob;
  var emitter = _reactNative.DeviceEventEmitter;

  var RNFetchBlobReadStream = function () {
    function RNFetchBlobReadStream(path, encoding, bufferSize, tick) {
      var _this = this;

      _classCallCheck(this, RNFetchBlobReadStream);

      this.tick = 10;
      if (!path) throw Error('RNFetchBlob could not open file stream with empty `path`');
      this.encoding = encoding || 'utf8';
      this.bufferSize = bufferSize;
      this.path = path;
      this.closed = false;
      this.tick = tick;

      this._onData = function () {};

      this._onEnd = function () {};

      this._onError = function () {};

      this.streamId = 'RNFBRS' + (0, _uuid2.default)();
      var subscription = emitter.addListener(this.streamId, function (e) {
        var event = e.event,
            detail = e.detail;

        if (_this._onData && event === 'data') {
          _this._onData(detail);

          return;
        } else if (_this._onEnd && event === 'end') {
          _this._onEnd(detail);
        } else {
          if (_this._onError) _this._onError(detail);else throw new Error(detail);
        }

        if (event === 'error' || event === 'end') {
          subscription.remove();
          _this.closed = true;
        }
      });
    }

    _createClass(RNFetchBlobReadStream, [{
      key: "open",
      value: function open() {
        if (!this.closed) RNFetchBlob.readStream(this.path, this.encoding, this.bufferSize || 10240, this.tick || -1, this.streamId);else throw new Error('Stream closed');
      }
    }, {
      key: "onData",
      value: function onData(fn) {
        this._onData = fn;
      }
    }, {
      key: "onError",
      value: function onError(fn) {
        this._onError = fn;
      }
    }, {
      key: "onEnd",
      value: function onEnd(fn) {
        this._onEnd = fn;
      }
    }]);

    return RNFetchBlobReadStream;
  }();

  exports.default = RNFetchBlobReadStream;
},656,[12,657],"node_modules\\react-native-fetch-blob\\class\\RNFetchBlobReadStream.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = getUUID;

  function getUUID() {
    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
  }
},657,[],"node_modules\\react-native-fetch-blob\\utils\\uuid.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0], "react-native");

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var RNFetchBlob = _reactNative.NativeModules.RNFetchBlob;
  var emitter = _reactNative.DeviceEventEmitter;

  var RNFetchBlobFile = function RNFetchBlobFile() {
    _classCallCheck(this, RNFetchBlobFile);
  };

  exports.default = RNFetchBlobFile;
},658,[12],"node_modules\\react-native-fetch-blob\\class\\RNFetchBlobFile.js");
__d(function (global, _require, module, exports, _dependencyMap) {
	;

	(function (root) {
		var freeExports = typeof exports == 'object' && exports;
		var freeModule = typeof module == 'object' && module && module.exports == freeExports && module;
		var freeGlobal = typeof global == 'object' && global;

		if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
			root = freeGlobal;
		}

		var InvalidCharacterError = function InvalidCharacterError(message) {
			this.message = message;
		};

		InvalidCharacterError.prototype = new Error();
		InvalidCharacterError.prototype.name = 'InvalidCharacterError';

		var error = function error(message) {
			throw new InvalidCharacterError(message);
		};

		var TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
		var REGEX_SPACE_CHARACTERS = /[\t\n\f\r ]/g;

		var decode = function decode(input) {
			input = String(input).replace(REGEX_SPACE_CHARACTERS, '');
			var length = input.length;

			if (length % 4 == 0) {
				input = input.replace(/==?$/, '');
				length = input.length;
			}

			if (length % 4 == 1 || /[^+a-zA-Z0-9/]/.test(input)) {
				error('Invalid character: the string to be decoded is not correctly encoded.');
			}

			var bitCounter = 0;
			var bitStorage;
			var buffer;
			var output = '';
			var position = -1;

			while (++position < length) {
				buffer = TABLE.indexOf(input.charAt(position));
				bitStorage = bitCounter % 4 ? bitStorage * 64 + buffer : buffer;

				if (bitCounter++ % 4) {
					output += String.fromCharCode(0xFF & bitStorage >> (-2 * bitCounter & 6));
				}
			}

			return output;
		};

		var encode = function encode(input) {
			input = String(input);

			if (/[^\0-\xFF]/.test(input)) {
				error('The string to be encoded contains characters outside of the ' + 'Latin1 range.');
			}

			var padding = input.length % 3;
			var output = '';
			var position = -1;
			var a;
			var b;
			var c;
			var d;
			var buffer;
			var length = input.length - padding;

			while (++position < length) {
				a = input.charCodeAt(position) << 16;
				b = input.charCodeAt(++position) << 8;
				c = input.charCodeAt(++position);
				buffer = a + b + c;
				output += TABLE.charAt(buffer >> 18 & 0x3F) + TABLE.charAt(buffer >> 12 & 0x3F) + TABLE.charAt(buffer >> 6 & 0x3F) + TABLE.charAt(buffer & 0x3F);
			}

			if (padding == 2) {
				a = input.charCodeAt(position) << 8;
				b = input.charCodeAt(++position);
				buffer = a + b;
				output += TABLE.charAt(buffer >> 10) + TABLE.charAt(buffer >> 4 & 0x3F) + TABLE.charAt(buffer << 2 & 0x3F) + '=';
			} else if (padding == 1) {
				buffer = input.charCodeAt(position);
				output += TABLE.charAt(buffer >> 2) + TABLE.charAt(buffer << 4 & 0x3F) + '==';
			}

			return output;
		};

		var base64 = {
			'encode': encode,
			'decode': decode,
			'version': '0.1.0'
		};

		if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
			define(function () {
				return base64;
			});
		} else if (freeExports && !freeExports.nodeType) {
			if (freeModule) {
				freeModule.exports = base64;
			} else {
				for (var key in base64) {
					base64.hasOwnProperty(key) && (freeExports[key] = base64[key]);
				}
			}
		} else {
			root.base64 = base64;
		}
	})(this);
},659,[],"node_modules\\base-64\\base64.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _Blob = _require(_dependencyMap[0], "./Blob.js");

  var _Blob2 = _interopRequireDefault(_Blob);

  var _File = _require(_dependencyMap[1], "./File.js");

  var _File2 = _interopRequireDefault(_File);

  var _XMLHttpRequest = _require(_dependencyMap[2], "./XMLHttpRequest.js");

  var _XMLHttpRequest2 = _interopRequireDefault(_XMLHttpRequest);

  var _ProgressEvent = _require(_dependencyMap[3], "./ProgressEvent");

  var _ProgressEvent2 = _interopRequireDefault(_ProgressEvent);

  var _Event = _require(_dependencyMap[4], "./Event");

  var _Event2 = _interopRequireDefault(_Event);

  var _FileReader = _require(_dependencyMap[5], "./FileReader");

  var _FileReader2 = _interopRequireDefault(_FileReader);

  var _Fetch = _require(_dependencyMap[6], "./Fetch");

  var _Fetch2 = _interopRequireDefault(_Fetch);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  exports.default = {
    Blob: _Blob2.default,
    File: _File2.default,
    XMLHttpRequest: _XMLHttpRequest2.default,
    ProgressEvent: _ProgressEvent2.default,
    Event: _Event2.default,
    FileReader: _FileReader2.default,
    Fetch: _Fetch2.default
  };
},660,[661,664,665,667,668,669,670],"node_modules\\react-native-fetch-blob\\polyfill\\index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _index = _require(_dependencyMap[0], "../index.js");

  var _index2 = _interopRequireDefault(_index);

  var _fs = _require(_dependencyMap[1], "../fs.js");

  var _fs2 = _interopRequireDefault(_fs);

  var _uuid = _require(_dependencyMap[2], "../utils/uuid");

  var _uuid2 = _interopRequireDefault(_uuid);

  var _log = _require(_dependencyMap[3], "../utils/log.js");

  var _log2 = _interopRequireDefault(_log);

  var _EventTarget2 = _require(_dependencyMap[4], "./EventTarget");

  var _EventTarget3 = _interopRequireDefault(_EventTarget2);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var log = new _log2.default('Blob');
  var blobCacheDir = _fs2.default.dirs.DocumentDir + '/RNFetchBlob-blobs/';
  log.disable();

  var Blob = function (_EventTarget) {
    _inherits(Blob, _EventTarget);

    _createClass(Blob, [{
      key: "blobPath",
      get: function get() {
        return this._ref;
      }
    }], [{
      key: "clearCache",
      value: function clearCache() {
        return _fs2.default.unlink(blobCacheDir).then(function () {
          return _fs2.default.mkdir(blobCacheDir);
        });
      }
    }, {
      key: "build",
      value: function build(data, cType) {
        return new Promise(function (resolve, reject) {
          new Blob(data, cType).onCreated(resolve);
        });
      }
    }, {
      key: "setLog",
      value: function setLog(level) {
        if (level === -1) log.disable();else log.level(level);
      }
    }]);

    function Blob(data, cType, defer) {
      _classCallCheck(this, Blob);

      var _this = _possibleConstructorReturn(this, (Blob.__proto__ || Object.getPrototypeOf(Blob)).call(this));

      _this.isRNFetchBlobPolyfill = true;
      _this.multipartBoundary = null;
      _this._ref = null;
      _this._blobCreated = false;
      _this._onCreated = [];
      _this._closed = false;
      cType = cType || {};
      _this.cacheName = getBlobName();
      _this.isRNFetchBlobPolyfill = true;
      _this.isDerived = defer;
      _this.type = cType.type || 'text/plain';
      log.verbose('Blob constructor called', 'mime', _this.type, 'type', typeof data, 'length', data ? data.length : 0);
      _this._ref = blobCacheDir + _this.cacheName;
      var p = null;
      if (!data) data = '';

      if (data.isRNFetchBlobPolyfill) {
        log.verbose('create Blob cache file from Blob object');
        var size = 0;
        _this._ref = String(data.getRNFetchBlobRef());
        var orgPath = _this._ref;
        p = _fs2.default.exists(orgPath).then(function (exist) {
          if (exist) return _fs2.default.writeFile(orgPath, data, 'uri').then(function (size) {
            return Promise.resolve(size);
          }).catch(function (err) {
            throw "RNFetchBlob Blob file creation error, " + err;
          });else throw "could not create Blob from path " + orgPath + ", file not exists";
        });
      } else if (data instanceof FormData) {
          log.verbose('create Blob cache file from FormData', data);
          var boundary = "RNFetchBlob-" + _this.cacheName + "-" + Date.now();
          _this.multipartBoundary = boundary;
          var parts = data.getParts();
          var formArray = [];

          if (!parts) {
            p = _fs2.default.writeFile(_this._ref, '', 'utf8');
          } else {
            for (var i in parts) {
              formArray.push('\r\n--' + boundary + '\r\n');
              var part = parts[i];

              for (var j in part.headers) {
                formArray.push(j + ': ' + part.headers[j] + '\r\n');
              }

              formArray.push('\r\n');
              if (part.isRNFetchBlobPolyfill) formArray.push(part);else formArray.push(part.string);
            }

            log.verbose('FormData array', formArray);
            formArray.push('\r\n--' + boundary + '--\r\n');
            p = createMixedBlobData(_this._ref, formArray);
          }
        } else if (typeof data === 'string' && data.startsWith('RNFetchBlob-file://')) {
            log.verbose('create Blob cache file from file path', data);
            _this._isReference = true;
            _this._ref = String(data).replace('RNFetchBlob-file://', '');
            var _orgPath = _this._ref;
            if (defer) return _possibleConstructorReturn(_this);else {
              p = _fs2.default.stat(_orgPath).then(function (stat) {
                return Promise.resolve(stat.size);
              });
            }
          } else if (typeof data === 'string') {
              var encoding = 'utf8';
              var mime = String(_this.type);
              if (/(application\/octet|\;base64)/i.test(mime)) encoding = 'base64';else data = data.toString();
              _this.type = String(_this.type).replace(/;base64/ig, '');
              log.verbose('create Blob cache file from string', 'encode', encoding);
              p = _fs2.default.writeFile(_this._ref, data, encoding).then(function (size) {
                return Promise.resolve(size);
              });
            } else if (Array.isArray(data)) {
                log.verbose('create Blob cache file from mixed array', data);
                p = createMixedBlobData(_this._ref, data);
              } else {
                data = data.toString();
                p = _fs2.default.writeFile(_this._ref, data, 'utf8').then(function (size) {
                  return Promise.resolve(size);
                });
              }

      p && p.then(function (size) {
        _this.size = size;

        _this._invokeOnCreateEvent();
      }).catch(function (err) {
        log.error('RNFetchBlob could not create Blob : ' + _this._ref, err);
      });
      return _this;
    }

    _createClass(Blob, [{
      key: "onCreated",
      value: function onCreated(fn) {
        log.verbose('#register blob onCreated', this._blobCreated);
        if (!this._blobCreated) this._onCreated.push(fn);else {
          fn(this);
        }
        return this;
      }
    }, {
      key: "markAsDerived",
      value: function markAsDerived() {
        this._isDerived = true;
      }
    }, {
      key: "getRNFetchBlobRef",
      value: function getRNFetchBlobRef() {
        return this._ref;
      }
    }, {
      key: "slice",
      value: function slice(start, end) {
        var _this2 = this;

        var contentType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
        if (this._closed) throw 'Blob has been released.';
        log.verbose('slice called', start, end, contentType);
        var resPath = blobCacheDir + getBlobName();
        var pass = false;
        log.debug('fs.slice new blob will at', resPath);
        var result = new Blob(_index2.default.wrap(resPath), {
          type: contentType
        }, true);

        _fs2.default.exists(blobCacheDir).then(function (exist) {
          if (exist) return Promise.resolve();
          return _fs2.default.mkdir(blobCacheDir);
        }).then(function () {
          return _fs2.default.slice(_this2._ref, resPath, start, end);
        }).then(function (dest) {
          log.debug('fs.slice done', dest);

          result._invokeOnCreateEvent();

          pass = true;
        }).catch(function (err) {
          console.warn('Blob.slice failed:', err);
          pass = true;
        });

        log.debug('slice returning new Blob');
        return result;
      }
    }, {
      key: "readBlob",
      value: function readBlob(encoding) {
        if (this._closed) throw 'Blob has been released.';
        return _fs2.default.readFile(this._ref, encoding || 'utf8');
      }
    }, {
      key: "close",
      value: function close() {
        if (this._closed) return Promise.reject('Blob has been released.');
        this._closed = true;
        return _fs2.default.unlink(this._ref).catch(function (err) {
          console.warn(err);
        });
      }
    }, {
      key: "safeClose",
      value: function safeClose() {
        if (this._closed) return Promise.reject('Blob has been released.');
        this._closed = true;

        if (!this._isReference) {
          return _fs2.default.unlink(this._ref).catch(function (err) {
            console.warn(err);
          });
        } else {
          return Promise.resolve();
        }
      }
    }, {
      key: "_invokeOnCreateEvent",
      value: function _invokeOnCreateEvent() {
        log.verbose('invoke create event', this._onCreated);
        this._blobCreated = true;
        var fns = this._onCreated;

        for (var i in fns) {
          if (typeof fns[i] === 'function') {
            fns[i](this);
          }
        }

        delete this._onCreated;
      }
    }, {
      key: "isDerived",
      get: function get() {
        return this._isDerived || false;
      }
    }]);

    return Blob;
  }(_EventTarget3.default);

  exports.default = Blob;

  function getBlobName() {
    return 'blob-' + (0, _uuid2.default)();
  }

  function createMixedBlobData(ref, dataArray) {
    var p = _fs2.default.writeFile(ref, '');

    var args = [];
    var size = 0;

    for (var i in dataArray) {
      var part = dataArray[i];
      if (!part) continue;

      if (part.isRNFetchBlobPolyfill) {
        args.push([ref, part._ref, 'uri']);
      } else if (typeof part === 'string') args.push([ref, part, 'utf8']);else if (Array.isArray(part)) args.push([ref, part, 'ascii']);
    }

    var _loop = function _loop(_i) {
      p = p.then(function (written) {
        var arg = this;
        if (written) size += written;
        log.verbose('mixed blob write', args[_i], written);
        return _fs2.default.appendFile.apply(_fs2.default, _toConsumableArray(arg));
      }.bind(args[_i]));
    };

    for (var _i in args) {
      _loop(_i);
    }

    return p.then(function () {
      return Promise.resolve(size);
    });
  }
},661,[650,653,657,662,663],"node_modules\\react-native-fetch-blob\\polyfill\\Blob.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var Log = function () {
    function Log(name) {
      _classCallCheck(this, Log);

      this._isEnable = true;
      this._level = 0;
      this._name = name;
    }

    _createClass(Log, [{
      key: "level",
      value: function level(val) {
        this._isEnable = true;
        this._level = val;
      }
    }, {
      key: "enable",
      value: function enable() {
        this._isEnable = true;
      }
    }, {
      key: "disable",
      value: function disable() {
        this._isEnable = false;
      }
    }, {
      key: "verbose",
      value: function verbose() {
        var _console;

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        this._isEnable && this._level > 2 && (_console = console).log.apply(_console, [this._name, 'verbose:'].concat(args));
      }
    }, {
      key: "debug",
      value: function debug() {
        var _console2;

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        this._isEnable && this._level > 1 && (_console2 = console).log.apply(_console2, [this._name, 'debug:'].concat(args));
      }
    }, {
      key: "info",
      value: function info() {
        var _console3;

        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        this._isEnable && this._level > 0 && (_console3 = console).log.apply(_console3, [this._name, 'info:'].concat(args));
      }
    }, {
      key: "error",
      value: function error() {
        var _console4;

        for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }

        this._isEnable && this._level > -1 && (_console4 = console).warn.apply(_console4, [this._name, 'error:'].concat(args));
      }
    }]);

    return Log;
  }();

  exports.default = Log;
},662,[],"node_modules\\react-native-fetch-blob\\utils\\log.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _log = _require(_dependencyMap[0], "../utils/log.js");

  var _log2 = _interopRequireDefault(_log);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var log = new _log2.default('EventTarget');
  log.disable();

  var EventTarget = function () {
    function EventTarget() {
      _classCallCheck(this, EventTarget);

      log.info('constructor called');
      this.listeners = {};
    }

    _createClass(EventTarget, [{
      key: "addEventListener",
      value: function addEventListener(type, cb) {
        log.info('add event listener', type, cb);

        if (!(type in this.listeners)) {
          this.listeners[type] = [];
        }

        this.listeners[type].push(cb);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, cb) {
        log.info('remove event listener', type, cb);
        if (!(type in this.listeners)) return;
        var handlers = this.listeners[type];

        for (var i in handlers) {
          if (cb === handlers[i]) {
            handlers.splice(i, 1);
            return this.removeEventListener(type, cb);
          }
        }
      }
    }, {
      key: "dispatchEvent",
      value: function dispatchEvent(type, event) {
        log.info('dispatch event', event);
        if (!(type in this.listeners)) return;
        var handlers = this.listeners[type];

        for (var i in handlers) {
          handlers[i].call(this, event);
        }
      }
    }, {
      key: "clearEventListeners",
      value: function clearEventListeners() {
        for (var i in this.listeners) {
          delete this.listeners[i];
        }
      }
    }]);

    return EventTarget;
  }();

  exports.default = EventTarget;
},663,[662],"node_modules\\react-native-fetch-blob\\polyfill\\EventTarget.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _fs = _require(_dependencyMap[0], "../fs.js");

  var _fs2 = _interopRequireDefault(_fs);

  var _Blob2 = _require(_dependencyMap[1], "./Blob.js");

  var _Blob3 = _interopRequireDefault(_Blob2);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var File = function (_Blob) {
    _inherits(File, _Blob);

    _createClass(File, null, [{
      key: "build",
      value: function build(name, data, cType) {
        return new Promise(function (resolve, reject) {
          new File(data, cType).onCreated(function (f) {
            f.name = name;
            resolve(f);
          });
        });
      }
    }]);

    function File(data, cType) {
      _classCallCheck(this, File);

      var _this = _possibleConstructorReturn(this, (File.__proto__ || Object.getPrototypeOf(File)).call(this, data, cType));

      _this.name = '';
      return _this;
    }

    return File;
  }(_Blob3.default);

  exports.default = File;
},664,[653,661],"node_modules\\react-native-fetch-blob\\polyfill\\File.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _index = _require(_dependencyMap[0], "../index.js");

  var _index2 = _interopRequireDefault(_index);

  var _XMLHttpRequestEventTarget = _require(_dependencyMap[1], "./XMLHttpRequestEventTarget.js");

  var _XMLHttpRequestEventTarget2 = _interopRequireDefault(_XMLHttpRequestEventTarget);

  var _log = _require(_dependencyMap[2], "../utils/log.js");

  var _log2 = _interopRequireDefault(_log);

  var _Blob = _require(_dependencyMap[3], "./Blob.js");

  var _Blob2 = _interopRequireDefault(_Blob);

  var _ProgressEvent = _require(_dependencyMap[4], "./ProgressEvent.js");

  var _ProgressEvent2 = _interopRequireDefault(_ProgressEvent);

  var _uri = _require(_dependencyMap[5], "../utils/uri");

  var _uri2 = _interopRequireDefault(_uri);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var log = new _log2.default('XMLHttpRequest');
  log.disable();
  var UNSENT = 0;
  var OPENED = 1;
  var HEADERS_RECEIVED = 2;
  var LOADING = 3;
  var DONE = 4;

  var XMLHttpRequest = function (_XMLHttpRequestEventT) {
    _inherits(XMLHttpRequest, _XMLHttpRequestEventT);

    _createClass(XMLHttpRequest, [{
      key: "UNSENT",
      get: function get() {
        return UNSENT;
      }
    }, {
      key: "OPENED",
      get: function get() {
        return OPENED;
      }
    }, {
      key: "HEADERS_RECEIVED",
      get: function get() {
        return HEADERS_RECEIVED;
      }
    }, {
      key: "LOADING",
      get: function get() {
        return LOADING;
      }
    }, {
      key: "DONE",
      get: function get() {
        return DONE;
      }
    }], [{
      key: "setLog",
      value: function setLog(level) {
        if (level === -1) log.disable();else log.level(level);
      }
    }, {
      key: "addBinaryContentType",
      value: function addBinaryContentType(substr) {
        for (var i in XMLHttpRequest.binaryContentTypes) {
          if (new RegExp(substr, 'i').test(XMLHttpRequest.binaryContentTypes[i])) {
            return;
          }
        }

        XMLHttpRequest.binaryContentTypes.push(substr);
      }
    }, {
      key: "removeBinaryContentType",
      value: function removeBinaryContentType(val) {
        for (var i in XMLHttpRequest.binaryContentTypes) {
          if (new RegExp(substr, 'i').test(XMLHttpRequest.binaryContentTypes[i])) {
            XMLHttpRequest.binaryContentTypes.splice(i, 1);
            return;
          }
        }
      }
    }, {
      key: "UNSENT",
      get: function get() {
        return UNSENT;
      }
    }, {
      key: "OPENED",
      get: function get() {
        return OPENED;
      }
    }, {
      key: "HEADERS_RECEIVED",
      get: function get() {
        return HEADERS_RECEIVED;
      }
    }, {
      key: "LOADING",
      get: function get() {
        return LOADING;
      }
    }, {
      key: "DONE",
      get: function get() {
        return DONE;
      }
    }]);

    function XMLHttpRequest() {
      _classCallCheck(this, XMLHttpRequest);

      log.verbose('XMLHttpRequest constructor called');

      var _this = _possibleConstructorReturn(this, (XMLHttpRequest.__proto__ || Object.getPrototypeOf(XMLHttpRequest)).call(this));

      _this.upload = new _XMLHttpRequestEventTarget2.default();
      _this._readyState = UNSENT;
      _this._uriType = 'net';
      _this._response = '';
      _this._responseText = '';
      _this._responseHeaders = {};
      _this._responseType = '';
      _this._responseURL = '';
      _this._responseXML = '';
      _this._status = 0;
      _this._statusText = '';
      _this._timeout = 60000;
      _this._sendFlag = false;
      _this._uploadStarted = false;
      _this._increment = false;
      _this._config = {};
      _this._headers = {
        'Content-Type': 'text/plain'
      };
      _this._cleanUp = null;

      _this._headerReceived = function (e) {
        log.debug('header received ', _this._task.taskId, e);
        _this.responseURL = _this._url;

        if (e.state === "2" && e.taskId === _this._task.taskId) {
          _this._responseHeaders = e.headers;
          _this._statusText = e.status;
          _this._status = Math.floor(e.status);

          _this._dispatchReadStateChange(XMLHttpRequest.HEADERS_RECEIVED);
        }
      };

      _this._uploadProgressEvent = function (send, total) {
        if (!_this._uploadStarted) {
          _this.upload.dispatchEvent('loadstart');

          _this._uploadStarted = true;
        }

        if (send >= total) _this.upload.dispatchEvent('load');

        _this.upload.dispatchEvent('progress', new _ProgressEvent2.default(true, send, total));
      };

      _this._progressEvent = function (send, total, chunk) {
        log.verbose(_this.readyState);
        if (_this._readyState === XMLHttpRequest.HEADERS_RECEIVED) _this._dispatchReadStateChange(XMLHttpRequest.LOADING);
        var lengthComputable = false;
        if (total && total >= 0) lengthComputable = true;
        var e = new _ProgressEvent2.default(lengthComputable, send, total);

        if (_this._increment) {
          _this._responseText += chunk;
        }

        _this.dispatchEvent('progress', e);
      };

      _this._onError = function (err) {
        var statusCode = Math.floor(_this.status);

        if (statusCode >= 100 && statusCode !== 408) {
          return;
        }

        log.debug('XMLHttpRequest error', err);
        _this._statusText = err;
        _this._status = String(err).match(/\d+/);
        _this._status = _this._status ? Math.floor(_this.status) : 404;

        _this._dispatchReadStateChange(XMLHttpRequest.DONE);

        if (err && String(err.message).match(/(timed\sout|timedout)/) || _this._status == 408) {
          _this.dispatchEvent('timeout');
        }

        _this.dispatchEvent('loadend');

        _this.dispatchEvent('error', {
          type: 'error',
          detail: err
        });

        _this.clearEventListeners();
      };

      _this._onDone = function (resp) {
        log.debug('XMLHttpRequest done', _this._url, resp, _this);
        _this._statusText = _this._status;

        var responseDataReady = function responseDataReady() {
          log.debug('request done state = 4');

          _this.dispatchEvent('load');

          _this.dispatchEvent('loadend');

          _this._dispatchReadStateChange(XMLHttpRequest.DONE);

          _this.clearEventListeners();
        };

        if (resp) {
          var info = resp.respInfo || {};
          log.debug(_this._url, info, info.respType);

          switch (_this._responseType) {
            case 'blob':
              resp.blob().then(function (b) {
                _this._responseText = resp.text();
                _this._response = b;
                responseDataReady();
              });
              break;

            case 'arraybuffer':
              break;

            case 'json':
              _this._response = resp.json();
              _this._responseText = resp.text();
              break;

            default:
              _this._responseText = resp.text();
              _this._response = _this.responseText;
              responseDataReady();
              break;
          }
        }
      };

      return _this;
    }

    _createClass(XMLHttpRequest, [{
      key: "open",
      value: function open(method, url, async, user, password) {
        log.verbose('XMLHttpRequest open ', method, url, async, user, password);
        this._method = method;
        this._url = url;
        this._headers = {};
        this._increment = _uri2.default.isJSONStreamURI(this._url);
        this._url = this._url.replace(/^JSONStream\:\/\//, '');

        this._dispatchReadStateChange(XMLHttpRequest.OPENED);
      }
    }, {
      key: "send",
      value: function send(body) {
        var _this2 = this;

        this._body = body;
        if (this._readyState !== XMLHttpRequest.OPENED) throw 'InvalidStateError : XMLHttpRequest is not opened yet.';
        var promise = Promise.resolve();
        this._sendFlag = true;
        log.verbose('XMLHttpRequest send ', body);
        var _method = this._method,
            _url = this._url,
            _headers = this._headers;
        log.verbose('sending request with args', _method, _url, _headers, body);
        log.verbose(typeof body, body instanceof FormData);

        if (body instanceof _Blob2.default) {
          log.debug('sending blob body', body._blobCreated);
          promise = new Promise(function (resolve, reject) {
            body.onCreated(function (blob) {
              if (blob.isDerived) {
                _this2._cleanUp = function () {
                  blob.close();
                };
              }

              log.debug('body created send request');
              body = _index2.default.wrap(blob.getRNFetchBlobRef());
              resolve();
            });
          });
        } else if (typeof body === 'object') {
          body = JSON.stringify(body);
          promise = Promise.resolve();
        } else {
          body = body ? body.toString() : body;
          promise = Promise.resolve();
        }

        promise.then(function () {
          log.debug('send request invoke', body);

          for (var h in _headers) {
            _headers[h] = _headers[h].toString();
          }

          _this2._task = _index2.default.config({
            auto: true,
            timeout: _this2._timeout,
            increment: _this2._increment,
            binaryContentTypes: XMLHttpRequest.binaryContentTypes
          }).fetch(_method, _url, _headers, body);

          _this2._task.stateChange(_this2._headerReceived).uploadProgress(_this2._uploadProgressEvent).progress(_this2._progressEvent).catch(_this2._onError).then(_this2._onDone);
        });
      }
    }, {
      key: "overrideMimeType",
      value: function overrideMimeType(mime) {
        log.verbose('XMLHttpRequest overrideMimeType', mime);
        this._headers['Content-Type'] = mime;
      }
    }, {
      key: "setRequestHeader",
      value: function setRequestHeader(name, value) {
        log.verbose('XMLHttpRequest set header', name, value);

        if (this._readyState !== OPENED || this._sendFlag) {
          throw "InvalidStateError : Calling setRequestHeader in wrong state  " + this._readyState;
        }

        if (typeof name !== 'string' || /[^\u0000-\u00ff]/.test(name)) {
          throw 'TypeError : header field name should be a string';
        }

        var invalidPatterns = [/[\(\)\>\<\@\,\:\\\/\[\]\?\=\}\{\s\ \u007f\;\t\0\v\r]/, /tt/];

        for (var i in invalidPatterns) {
          if (invalidPatterns[i].test(name) || typeof name !== 'string') {
            throw "SyntaxError : Invalid header field name " + name;
          }
        }

        this._headers[name] = value;
      }
    }, {
      key: "abort",
      value: function abort() {
        var _this3 = this;

        log.verbose('XMLHttpRequest abort ');
        if (!this._task) return;

        this._task.cancel(function (err) {
          var e = {
            timeStamp: Date.now()
          };
          if (_this3.onabort) _this3.onabort();

          if (err) {
            e.detail = err;
            e.type = 'error';

            _this3.dispatchEvent('error', e);
          } else {
            e.type = 'abort';

            _this3.dispatchEvent('abort', e);
          }
        });
      }
    }, {
      key: "getResponseHeader",
      value: function getResponseHeader(field) {
        log.verbose('XMLHttpRequest get header', field, this._responseHeaders);
        if (!this._responseHeaders) return null;
        return this._responseHeaders[field] || this._responseHeaders[field.toLowerCase()] || null;
      }
    }, {
      key: "getAllResponseHeaders",
      value: function getAllResponseHeaders() {
        log.verbose('XMLHttpRequest get all headers', this._responseHeaders);
        if (!this._responseHeaders) return '';
        var result = '';
        var respHeaders = this.responseHeaders;

        for (var i in respHeaders) {
          result += i + ": " + respHeaders[i] + String.fromCharCode(0x0D, 0x0A);
        }

        return result.substr(0, result.length - 2);
      }
    }, {
      key: "_dispatchReadStateChange",
      value: function _dispatchReadStateChange(state) {
        this._readyState = state;
        if (typeof this._onreadystatechange === 'function') this._onreadystatechange();
      }
    }, {
      key: "onreadystatechange",
      set: function set(fn) {
        log.verbose('XMLHttpRequest set onreadystatechange', fn);
        this._onreadystatechange = fn;
      },
      get: function get() {
        return this._onreadystatechange;
      }
    }, {
      key: "readyState",
      get: function get() {
        log.verbose('get readyState', this._readyState);
        return this._readyState;
      }
    }, {
      key: "status",
      get: function get() {
        log.verbose('get status', this._status);
        return this._status;
      }
    }, {
      key: "statusText",
      get: function get() {
        log.verbose('get statusText', this._statusText);
        return this._statusText;
      }
    }, {
      key: "response",
      get: function get() {
        log.verbose('get response', this._response);
        return this._response;
      }
    }, {
      key: "responseText",
      get: function get() {
        log.verbose('get responseText', this._responseText);
        return this._responseText;
      }
    }, {
      key: "responseURL",
      get: function get() {
        log.verbose('get responseURL', this._responseURL);
        return this._responseURL;
      }
    }, {
      key: "responseHeaders",
      get: function get() {
        log.verbose('get responseHeaders', this._responseHeaders);
        return this._responseHeaders;
      }
    }, {
      key: "timeout",
      set: function set(val) {
        this._timeout = val * 1000;
        log.verbose('set timeout', this._timeout);
      },
      get: function get() {
        log.verbose('get timeout', this._timeout);
        return this._timeout;
      }
    }, {
      key: "responseType",
      set: function set(val) {
        log.verbose('set response type', this._responseType);
        this._responseType = val;
      },
      get: function get() {
        log.verbose('get response type', this._responseType);
        return this._responseType;
      }
    }], [{
      key: "isRNFBPolyfill",
      get: function get() {
        return true;
      }
    }]);

    return XMLHttpRequest;
  }(_XMLHttpRequestEventTarget2.default);

  XMLHttpRequest.binaryContentTypes = ['image/', 'video/', 'audio/'];
  exports.default = XMLHttpRequest;
},665,[650,666,662,661,667,651],"node_modules\\react-native-fetch-blob\\polyfill\\XMLHttpRequest.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _EventTarget2 = _require(_dependencyMap[0], "./EventTarget.js");

  var _EventTarget3 = _interopRequireDefault(_EventTarget2);

  var _log = _require(_dependencyMap[1], "../utils/log.js");

  var _log2 = _interopRequireDefault(_log);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var log = new _log2.default('XMLHttpRequestEventTarget');
  log.disable();

  var XMLHttpRequestEventTarget = function (_EventTarget) {
    _inherits(XMLHttpRequestEventTarget, _EventTarget);

    function XMLHttpRequestEventTarget() {
      _classCallCheck(this, XMLHttpRequestEventTarget);

      var _this = _possibleConstructorReturn(this, (XMLHttpRequestEventTarget.__proto__ || Object.getPrototypeOf(XMLHttpRequestEventTarget)).call(this));

      _this._onabort = function () {};

      _this._onerror = function () {};

      _this._onload = function () {};

      _this._onloadstart = function () {};

      _this._onprogress = function () {};

      _this._ontimeout = function () {};

      _this._onloadend = function () {};

      log.info('constructor called');
      return _this;
    }

    _createClass(XMLHttpRequestEventTarget, [{
      key: "dispatchEvent",
      value: function dispatchEvent(event, e) {
        log.debug('dispatch event', event, e);

        _get(XMLHttpRequestEventTarget.prototype.__proto__ || Object.getPrototypeOf(XMLHttpRequestEventTarget.prototype), "dispatchEvent", this).call(this, event, e);

        switch (event) {
          case 'abort':
            this._onabort(e);

            break;

          case 'error':
            this._onerror(e);

            break;

          case 'load':
            this._onload(e);

            break;

          case 'loadstart':
            this._onloadstart(e);

            break;

          case 'loadend':
            this._onloadend(e);

            break;

          case 'progress':
            this._onprogress(e);

            break;

          case 'timeout':
            this._ontimeout(e);

            break;
        }
      }
    }, {
      key: "onabort",
      set: function set(fn) {
        log.info('set onabort');
        this._onabort = fn;
      },
      get: function get() {
        return this._onabort;
      }
    }, {
      key: "onerror",
      set: function set(fn) {
        log.info('set onerror');
        this._onerror = fn;
      },
      get: function get() {
        return this._onerror;
      }
    }, {
      key: "onload",
      set: function set(fn) {
        log.info('set onload', fn);
        this._onload = fn;
      },
      get: function get() {
        return this._onload;
      }
    }, {
      key: "onloadstart",
      set: function set(fn) {
        log.info('set onloadstart');
        this._onloadstart = fn;
      },
      get: function get() {
        return this._onloadstart;
      }
    }, {
      key: "onprogress",
      set: function set(fn) {
        log.info('set onprogress');
        this._onprogress = fn;
      },
      get: function get() {
        return this._onprogress;
      }
    }, {
      key: "ontimeout",
      set: function set(fn) {
        log.info('set ontimeout');
        this._ontimeout = fn;
      },
      get: function get() {
        return this._ontimeout;
      }
    }, {
      key: "onloadend",
      set: function set(fn) {
        log.info('set onloadend');
        this._onloadend = fn;
      },
      get: function get() {
        return this._onloadend;
      }
    }]);

    return XMLHttpRequestEventTarget;
  }(_EventTarget3.default);

  exports.default = XMLHttpRequestEventTarget;
},666,[663,662],"node_modules\\react-native-fetch-blob\\polyfill\\XMLHttpRequestEventTarget.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _Event2 = _require(_dependencyMap[0], "./Event");

  var _Event3 = _interopRequireDefault(_Event2);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var ProgressEvent = function (_Event) {
    _inherits(ProgressEvent, _Event);

    function ProgressEvent(lengthComputable, loaded, total) {
      _classCallCheck(this, ProgressEvent);

      var _this = _possibleConstructorReturn(this, (ProgressEvent.__proto__ || Object.getPrototypeOf(ProgressEvent)).call(this));

      _this._lengthComputable = false;
      _this._loaded = -1;
      _this._total = -1;
      _this._lengthComputable = lengthComputable;
      _this._loaded = loaded;
      _this._total = total;
      return _this;
    }

    _createClass(ProgressEvent, [{
      key: "lengthComputable",
      get: function get() {
        return this._lengthComputable;
      }
    }, {
      key: "loaded",
      get: function get() {
        return this._loaded;
      }
    }, {
      key: "total",
      get: function get() {
        return this._total;
      }
    }]);

    return ProgressEvent;
  }(_Event3.default);

  exports.default = ProgressEvent;
},667,[668],"node_modules\\react-native-fetch-blob\\polyfill\\ProgressEvent.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var Event = function Event() {
    _classCallCheck(this, Event);
  };

  exports.default = Event;
},668,[],"node_modules\\react-native-fetch-blob\\polyfill\\Event.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _index = _require(_dependencyMap[0], "../index.js");

  var _index2 = _interopRequireDefault(_index);

  var _ProgressEvent = _require(_dependencyMap[1], "./ProgressEvent.js");

  var _ProgressEvent2 = _interopRequireDefault(_ProgressEvent);

  var _EventTarget2 = _require(_dependencyMap[2], "./EventTarget");

  var _EventTarget3 = _interopRequireDefault(_EventTarget2);

  var _Blob = _require(_dependencyMap[3], "./Blob");

  var _Blob2 = _interopRequireDefault(_Blob);

  var _log = _require(_dependencyMap[4], "../utils/log.js");

  var _log2 = _interopRequireDefault(_log);

  var _fs = _require(_dependencyMap[5], "../fs");

  var _fs2 = _interopRequireDefault(_fs);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var log = new _log2.default('FileReader');
  log.level(3);

  var FileReader = function (_EventTarget) {
    _inherits(FileReader, _EventTarget);

    _createClass(FileReader, [{
      key: "isRNFBPolyFill",
      get: function get() {
        return true;
      }
    }], [{
      key: "EMPTY",
      get: function get() {
        return 0;
      }
    }, {
      key: "LOADING",
      get: function get() {
        return 1;
      }
    }, {
      key: "DONE",
      get: function get() {
        return 2;
      }
    }]);

    function FileReader() {
      _classCallCheck(this, FileReader);

      var _this = _possibleConstructorReturn(this, (FileReader.__proto__ || Object.getPrototypeOf(FileReader)).call(this));

      _this._readState = 0;
      log.verbose('file reader const');
      _this._result = null;
      return _this;
    }

    _createClass(FileReader, [{
      key: "abort",
      value: function abort() {
        log.verbose('abort');
      }
    }, {
      key: "readAsArrayBuffer",
      value: function readAsArrayBuffer(b) {
        log.verbose('readAsArrayBuffer', b);
      }
    }, {
      key: "readAsBinaryString",
      value: function readAsBinaryString(b) {
        log.verbose('readAsBinaryString', b);
      }
    }, {
      key: "readAsText",
      value: function readAsText(b, label) {
        log.verbose('readAsText', b, label);
      }
    }, {
      key: "readAsDataURL",
      value: function readAsDataURL(b) {
        log.verbose('readAsDataURL', b);
      }
    }, {
      key: "dispatchEvent",
      value: function dispatchEvent(event, e) {
        log.verbose('dispatch event', event, e);

        _get(FileReader.prototype.__proto__ || Object.getPrototypeOf(FileReader.prototype), "dispatchEvent", this).call(this, event, e);

        if (typeof this["on" + event] === 'function') {
          this["on" + event](e);
        }
      }
    }, {
      key: "readyState",
      get: function get() {
        return this._readyState;
      }
    }, {
      key: "result",
      get: function get() {
        return this._result;
      }
    }]);

    return FileReader;
  }(_EventTarget3.default);

  exports.default = FileReader;
},669,[650,667,663,661,662,653],"node_modules\\react-native-fetch-blob\\polyfill\\FileReader.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _index = _require(_dependencyMap[0], "../index.js");

  var _index2 = _interopRequireDefault(_index);

  var _log = _require(_dependencyMap[1], "../utils/log.js");

  var _log2 = _interopRequireDefault(_log);

  var _fs = _require(_dependencyMap[2], "../fs");

  var _fs2 = _interopRequireDefault(_fs);

  var _unicode = _require(_dependencyMap[3], "../utils/unicode");

  var _unicode2 = _interopRequireDefault(_unicode);

  var _Blob = _require(_dependencyMap[4], "./Blob");

  var _Blob2 = _interopRequireDefault(_Blob);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var log = new _log2.default('FetchPolyfill');
  log.disable();

  var Fetch = function Fetch(config) {
    _classCallCheck(this, Fetch);

    _extends(this, new RNFetchBlobFetchPolyfill(config));
  };

  exports.default = Fetch;

  var RNFetchBlobFetchPolyfill = function RNFetchBlobFetchPolyfill(config) {
    _classCallCheck(this, RNFetchBlobFetchPolyfill);

    this.build = function () {
      return function (url) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var body = options.body;
        var promise = Promise.resolve();
        var blobCache = null;
        options.headers = options.headers || {};
        var ctype = options['Content-Type'] || options['content-type'];
        var ctypeH = options.headers['Content-Type'] || options.headers['content-type'];
        options.headers['Content-Type'] = ctype || ctypeH;
        options.headers['content-type'] = ctype || ctypeH;
        options.method = options.method || 'GET';

        if (body) {
          if (body instanceof FormData) {
            log.verbose('convert FormData to blob body');
            promise = _Blob2.default.build(body).then(function (b) {
              blobCache = b;
              options.headers['Content-Type'] = 'multipart/form-data;boundary=' + b.multipartBoundary;
              return Promise.resolve(_index2.default.wrap(b._ref));
            });
          } else if (body.isRNFetchBlobPolyfill) promise = Promise.resolve(_index2.default.wrap(body.blobPath));else if (typeof body !== 'object' && options.headers['Content-Type'] !== 'application/json') promise = Promise.resolve(JSON.stringify(body));else if (typeof body !== 'string') promise = Promise.resolve(body.toString());else promise = Promise.resolve(body);
        }

        var progressHandler = void 0,
            uploadHandler = void 0,
            cancelHandler = void 0;
        var statefulPromise = promise.then(function (body) {
          var task = _index2.default.config(config).fetch(options.method, url, options.headers, body);

          if (progressHandler) task.progress(progressHandler);
          if (uploadHandler) task.uploadProgress(uploadHandler);
          if (cancelHandler) task.cancel();
          return task.then(function (resp) {
            log.verbose('response', resp);
            if (blobCache !== null && blobCache instanceof _Blob2.default) blobCache.close();
            return Promise.resolve(new RNFetchBlobFetchRepsonse(resp));
          });
        });

        statefulPromise.progress = function (fn) {
          progressHandler = fn;
        };

        statefulPromise.uploadProgress = function (fn) {
          uploadHandler = fn;
        };

        statefulPromise.cancel = function () {
          cancelHandler = true;
          if (task.cancel) task.cancel();
        };

        return statefulPromise;
      };
    };
  };

  var RNFetchBlobFetchRepsonse = function () {
    function RNFetchBlobFetchRepsonse(resp) {
      _classCallCheck(this, RNFetchBlobFetchRepsonse);

      var info = resp.info();
      this.headers = info.headers;
      this.ok = info.status >= 200 && info.status <= 299, this.status = info.status;
      this.type = 'basic';
      this.bodyUsed = false;
      this.resp = resp;
      this.rnfbRespInfo = info;
      this.rnfbResp = resp;
    }

    _createClass(RNFetchBlobFetchRepsonse, [{
      key: "rawResp",
      value: function rawResp() {
        return Promise.resolve(this.rnfbResp);
      }
    }, {
      key: "arrayBuffer",
      value: function arrayBuffer() {
        log.verbose('to arrayBuffer', this.rnfbRespInfo);
        this.bodyUsed = true;
        return readArrayBuffer(this.rnfbResp, this.rnfbRespInfo);
      }
    }, {
      key: "text",
      value: function text() {
        log.verbose('to text', this.rnfbResp, this.rnfbRespInfo);
        this.bodyUsed = true;
        return readText(this.rnfbResp, this.rnfbRespInfo);
      }
    }, {
      key: "json",
      value: function json() {
        log.verbose('to json', this.rnfbResp, this.rnfbRespInfo);
        this.bodyUsed = true;
        return readJSON(this.rnfbResp, this.rnfbRespInfo);
      }
    }, {
      key: "blob",
      value: function blob() {
        log.verbose('to blob', this.rnfbResp, this.rnfbRespInfo);
        this.bodyUsed = true;
        return readBlob(this.rnfbResp, this.rnfbRespInfo);
      }
    }]);

    return RNFetchBlobFetchRepsonse;
  }();

  function readArrayBuffer(resp, info) {
    switch (info.rnfbEncode) {
      case 'path':
        return resp.readFile('ascii');
        break;

      default:
        var buffer = [];
        var str = resp.text();

        for (var i in str) {
          buffer[i] = str.charCodeAt(i);
        }

        return Promise.resolve(buffer);
        break;
    }
  }

  function readText(resp, info) {
    switch (info.rnfbEncode) {
      case 'base64':
        return Promise.resolve(resp.text());
        break;

      case 'path':
        return resp.text();
        break;

      default:
        return Promise.resolve(resp.text());
        break;
    }
  }

  function readBlob(resp, info) {
    log.verbose('readBlob', resp, info);
    return resp.blob();
  }

  function readJSON(resp, info) {
    log.verbose('readJSON', resp, info);

    switch (info.rnfbEncode) {
      case 'base64':
        return Promise.resolve(resp.json());

      case 'path':
        return resp.json();

      default:
        return Promise.resolve(resp.json());
    }
  }
},670,[650,662,653,671,661],"node_modules\\react-native-fetch-blob\\polyfill\\Fetch.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function (x) {
    var r = /\\u([\d\w]{4})/gi;
    x = x.replace(r, function (match, grp) {
      return String.fromCharCode(parseInt(grp, 16));
    });
    return unescape(x);
  };
},671,[],"node_modules\\react-native-fetch-blob\\utils\\unicode.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  /**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright JS Foundation and other contributors <https://js.foundation/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */;
  (function () {
    var undefined;
    var VERSION = '4.17.5';
    var LARGE_ARRAY_SIZE = 200;
    var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
        FUNC_ERROR_TEXT = 'Expected a function';
    var HASH_UNDEFINED = '__lodash_hash_undefined__';
    var MAX_MEMOIZE_SIZE = 500;
    var PLACEHOLDER = '__lodash_placeholder__';
    var CLONE_DEEP_FLAG = 1,
        CLONE_FLAT_FLAG = 2,
        CLONE_SYMBOLS_FLAG = 4;
    var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2;
    var WRAP_BIND_FLAG = 1,
        WRAP_BIND_KEY_FLAG = 2,
        WRAP_CURRY_BOUND_FLAG = 4,
        WRAP_CURRY_FLAG = 8,
        WRAP_CURRY_RIGHT_FLAG = 16,
        WRAP_PARTIAL_FLAG = 32,
        WRAP_PARTIAL_RIGHT_FLAG = 64,
        WRAP_ARY_FLAG = 128,
        WRAP_REARG_FLAG = 256,
        WRAP_FLIP_FLAG = 512;
    var DEFAULT_TRUNC_LENGTH = 30,
        DEFAULT_TRUNC_OMISSION = '...';
    var HOT_COUNT = 800,
        HOT_SPAN = 16;
    var LAZY_FILTER_FLAG = 1,
        LAZY_MAP_FLAG = 2,
        LAZY_WHILE_FLAG = 3;
    var INFINITY = 1 / 0,
        MAX_SAFE_INTEGER = 9007199254740991,
        MAX_INTEGER = 1.7976931348623157e+308,
        NAN = 0 / 0;
    var MAX_ARRAY_LENGTH = 4294967295,
        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
    var wrapFlags = [['ary', WRAP_ARY_FLAG], ['bind', WRAP_BIND_FLAG], ['bindKey', WRAP_BIND_KEY_FLAG], ['curry', WRAP_CURRY_FLAG], ['curryRight', WRAP_CURRY_RIGHT_FLAG], ['flip', WRAP_FLIP_FLAG], ['partial', WRAP_PARTIAL_FLAG], ['partialRight', WRAP_PARTIAL_RIGHT_FLAG], ['rearg', WRAP_REARG_FLAG]];
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        asyncTag = '[object AsyncFunction]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        domExcTag = '[object DOMException]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        nullTag = '[object Null]',
        objectTag = '[object Object]',
        promiseTag = '[object Promise]',
        proxyTag = '[object Proxy]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        symbolTag = '[object Symbol]',
        undefinedTag = '[object Undefined]',
        weakMapTag = '[object WeakMap]',
        weakSetTag = '[object WeakSet]';
    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';
    var reEmptyStringLeading = /\b__p \+= '';/g,
        reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
        reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
        reUnescapedHtml = /[&<>"']/g,
        reHasEscapedHtml = RegExp(reEscapedHtml.source),
        reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    var reEscape = /<%-([\s\S]+?)%>/g,
        reEvaluate = /<%([\s\S]+?)%>/g,
        reInterpolate = /<%=([\s\S]+?)%>/g;
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/,
        rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
        reHasRegExpChar = RegExp(reRegExpChar.source);
    var reTrim = /^\s+|\s+$/g,
        reTrimStart = /^\s+/,
        reTrimEnd = /\s+$/;
    var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
        reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
        reSplitDetails = /,? & /;
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    var reEscapeChar = /\\(\\)?/g;
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    var reFlags = /\w*$/;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsOctal = /^0o[0-7]+$/i;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var reNoMatch = /($^)/;
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
    var rsAstralRange = "\\ud800-\\udfff",
        rsComboMarksRange = "\\u0300-\\u036f",
        reComboHalfMarksRange = "\\ufe20-\\ufe2f",
        rsComboSymbolsRange = "\\u20d0-\\u20ff",
        rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
        rsDingbatRange = "\\u2700-\\u27bf",
        rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
        rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
        rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
        rsPunctuationRange = "\\u2000-\\u206f",
        rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
        rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
        rsVarRange = "\\ufe0e\\ufe0f",
        rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    var rsApos = "['\u2019]",
        rsAstral = '[' + rsAstralRange + ']',
        rsBreak = '[' + rsBreakRange + ']',
        rsCombo = '[' + rsComboRange + ']',
        rsDigits = '\\d+',
        rsDingbat = '[' + rsDingbatRange + ']',
        rsLower = '[' + rsLowerRange + ']',
        rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
        rsFitz = "\\ud83c[\\udffb-\\udfff]",
        rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
        rsNonAstral = '[^' + rsAstralRange + ']',
        rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}",
        rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]",
        rsUpper = '[' + rsUpperRange + ']',
        rsZWJ = "\\u200d";
    var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
        rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
        rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
        rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
        reOptMod = rsModifier + '?',
        rsOptVar = '[' + rsVarRange + ']?',
        rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
        rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
        rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
        rsSeq = rsOptVar + reOptMod + rsOptJoin,
        rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
        rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
    var reApos = RegExp(rsApos, 'g');
    var reComboMark = RegExp(rsCombo, 'g');
    var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
    var reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')', rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower, rsUpper + '+' + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');
    var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    var contextProps = ['Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array', 'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object', 'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'];
    var templateCounter = -1;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    var deburredLetters = {
      '\xc0': 'A',
      '\xc1': 'A',
      '\xc2': 'A',
      '\xc3': 'A',
      '\xc4': 'A',
      '\xc5': 'A',
      '\xe0': 'a',
      '\xe1': 'a',
      '\xe2': 'a',
      '\xe3': 'a',
      '\xe4': 'a',
      '\xe5': 'a',
      '\xc7': 'C',
      '\xe7': 'c',
      '\xd0': 'D',
      '\xf0': 'd',
      '\xc8': 'E',
      '\xc9': 'E',
      '\xca': 'E',
      '\xcb': 'E',
      '\xe8': 'e',
      '\xe9': 'e',
      '\xea': 'e',
      '\xeb': 'e',
      '\xcc': 'I',
      '\xcd': 'I',
      '\xce': 'I',
      '\xcf': 'I',
      '\xec': 'i',
      '\xed': 'i',
      '\xee': 'i',
      '\xef': 'i',
      '\xd1': 'N',
      '\xf1': 'n',
      '\xd2': 'O',
      '\xd3': 'O',
      '\xd4': 'O',
      '\xd5': 'O',
      '\xd6': 'O',
      '\xd8': 'O',
      '\xf2': 'o',
      '\xf3': 'o',
      '\xf4': 'o',
      '\xf5': 'o',
      '\xf6': 'o',
      '\xf8': 'o',
      '\xd9': 'U',
      '\xda': 'U',
      '\xdb': 'U',
      '\xdc': 'U',
      '\xf9': 'u',
      '\xfa': 'u',
      '\xfb': 'u',
      '\xfc': 'u',
      '\xdd': 'Y',
      '\xfd': 'y',
      '\xff': 'y',
      '\xc6': 'Ae',
      '\xe6': 'ae',
      '\xde': 'Th',
      '\xfe': 'th',
      '\xdf': 'ss',
      "\u0100": 'A',
      "\u0102": 'A',
      "\u0104": 'A',
      "\u0101": 'a',
      "\u0103": 'a',
      "\u0105": 'a',
      "\u0106": 'C',
      "\u0108": 'C',
      "\u010A": 'C',
      "\u010C": 'C',
      "\u0107": 'c',
      "\u0109": 'c',
      "\u010B": 'c',
      "\u010D": 'c',
      "\u010E": 'D',
      "\u0110": 'D',
      "\u010F": 'd',
      "\u0111": 'd',
      "\u0112": 'E',
      "\u0114": 'E',
      "\u0116": 'E',
      "\u0118": 'E',
      "\u011A": 'E',
      "\u0113": 'e',
      "\u0115": 'e',
      "\u0117": 'e',
      "\u0119": 'e',
      "\u011B": 'e',
      "\u011C": 'G',
      "\u011E": 'G',
      "\u0120": 'G',
      "\u0122": 'G',
      "\u011D": 'g',
      "\u011F": 'g',
      "\u0121": 'g',
      "\u0123": 'g',
      "\u0124": 'H',
      "\u0126": 'H',
      "\u0125": 'h',
      "\u0127": 'h',
      "\u0128": 'I',
      "\u012A": 'I',
      "\u012C": 'I',
      "\u012E": 'I',
      "\u0130": 'I',
      "\u0129": 'i',
      "\u012B": 'i',
      "\u012D": 'i',
      "\u012F": 'i',
      "\u0131": 'i',
      "\u0134": 'J',
      "\u0135": 'j',
      "\u0136": 'K',
      "\u0137": 'k',
      "\u0138": 'k',
      "\u0139": 'L',
      "\u013B": 'L',
      "\u013D": 'L',
      "\u013F": 'L',
      "\u0141": 'L',
      "\u013A": 'l',
      "\u013C": 'l',
      "\u013E": 'l',
      "\u0140": 'l',
      "\u0142": 'l',
      "\u0143": 'N',
      "\u0145": 'N',
      "\u0147": 'N',
      "\u014A": 'N',
      "\u0144": 'n',
      "\u0146": 'n',
      "\u0148": 'n',
      "\u014B": 'n',
      "\u014C": 'O',
      "\u014E": 'O',
      "\u0150": 'O',
      "\u014D": 'o',
      "\u014F": 'o',
      "\u0151": 'o',
      "\u0154": 'R',
      "\u0156": 'R',
      "\u0158": 'R',
      "\u0155": 'r',
      "\u0157": 'r',
      "\u0159": 'r',
      "\u015A": 'S',
      "\u015C": 'S',
      "\u015E": 'S',
      "\u0160": 'S',
      "\u015B": 's',
      "\u015D": 's',
      "\u015F": 's',
      "\u0161": 's',
      "\u0162": 'T',
      "\u0164": 'T',
      "\u0166": 'T',
      "\u0163": 't',
      "\u0165": 't',
      "\u0167": 't',
      "\u0168": 'U',
      "\u016A": 'U',
      "\u016C": 'U',
      "\u016E": 'U',
      "\u0170": 'U',
      "\u0172": 'U',
      "\u0169": 'u',
      "\u016B": 'u',
      "\u016D": 'u',
      "\u016F": 'u',
      "\u0171": 'u',
      "\u0173": 'u',
      "\u0174": 'W',
      "\u0175": 'w',
      "\u0176": 'Y',
      "\u0177": 'y',
      "\u0178": 'Y',
      "\u0179": 'Z',
      "\u017B": 'Z',
      "\u017D": 'Z',
      "\u017A": 'z',
      "\u017C": 'z',
      "\u017E": 'z',
      "\u0132": 'IJ',
      "\u0133": 'ij',
      "\u0152": 'Oe',
      "\u0153": 'oe',
      "\u0149": "'n",
      "\u017F": 's'
    };
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };
    var htmlUnescapes = {
      '&amp;': '&',
      '&lt;': '<',
      '&gt;': '>',
      '&quot;': '"',
      '&#39;': "'"
    };
    var stringEscapes = {
      '\\': '\\',
      "'": "'",
      '\n': 'n',
      '\r': 'r',
      "\u2028": 'u2028',
      "\u2029": 'u2029'
    };
    var freeParseFloat = parseFloat,
        freeParseInt = parseInt;
    var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function('return this')();
    var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;

    var nodeUtil = function () {
      try {
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }();

    var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
        nodeIsDate = nodeUtil && nodeUtil.isDate,
        nodeIsMap = nodeUtil && nodeUtil.isMap,
        nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
        nodeIsSet = nodeUtil && nodeUtil.isSet,
        nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);

        case 1:
          return func.call(thisArg, args[0]);

        case 2:
          return func.call(thisArg, args[0], args[1]);

        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }

      return func.apply(thisArg, args);
    }

    function arrayAggregator(array, setter, iteratee, accumulator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        var value = array[index];
        setter(accumulator, value, iteratee(value), array);
      }

      return accumulator;
    }

    function arrayEach(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }

      return array;
    }

    function arrayEachRight(array, iteratee) {
      var length = array == null ? 0 : array.length;

      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }

      return array;
    }

    function arrayEvery(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }

      return true;
    }

    function arrayFilter(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }

      return result;
    }

    function arrayIncludes(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }

    function arrayIncludesWith(array, value, comparator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }

      return false;
    }

    function arrayMap(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }

      return result;
    }

    function arrayPush(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }

      return array;
    }

    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1,
          length = array == null ? 0 : array.length;

      if (initAccum && length) {
        accumulator = array[++index];
      }

      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }

      return accumulator;
    }

    function arrayReduceRight(array, iteratee, accumulator, initAccum) {
      var length = array == null ? 0 : array.length;

      if (initAccum && length) {
        accumulator = array[--length];
      }

      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }

      return accumulator;
    }

    function arraySome(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }

      return false;
    }

    var asciiSize = baseProperty('length');

    function asciiToArray(string) {
      return string.split('');
    }

    function asciiWords(string) {
      return string.match(reAsciiWord) || [];
    }

    function baseFindKey(collection, predicate, eachFunc) {
      var result;
      eachFunc(collection, function (value, key, collection) {
        if (predicate(value, key, collection)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length,
          index = fromIndex + (fromRight ? 1 : -1);

      while (fromRight ? index-- : ++index < length) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }

      return -1;
    }

    function baseIndexOf(array, value, fromIndex) {
      return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }

    function baseIndexOfWith(array, value, fromIndex, comparator) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (comparator(array[index], value)) {
          return index;
        }
      }

      return -1;
    }

    function baseIsNaN(value) {
      return value !== value;
    }

    function baseMean(array, iteratee) {
      var length = array == null ? 0 : array.length;
      return length ? baseSum(array, iteratee) / length : NAN;
    }

    function baseProperty(key) {
      return function (object) {
        return object == null ? undefined : object[key];
      };
    }

    function basePropertyOf(object) {
      return function (key) {
        return object == null ? undefined : object[key];
      };
    }

    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
      eachFunc(collection, function (value, index, collection) {
        accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    function baseSortBy(array, comparer) {
      var length = array.length;
      array.sort(comparer);

      while (length--) {
        array[length] = array[length].value;
      }

      return array;
    }

    function baseSum(array, iteratee) {
      var result,
          index = -1,
          length = array.length;

      while (++index < length) {
        var current = iteratee(array[index]);

        if (current !== undefined) {
          result = result === undefined ? current : result + current;
        }
      }

      return result;
    }

    function baseTimes(n, iteratee) {
      var index = -1,
          result = Array(n);

      while (++index < n) {
        result[index] = iteratee(index);
      }

      return result;
    }

    function baseToPairs(object, props) {
      return arrayMap(props, function (key) {
        return [key, object[key]];
      });
    }

    function baseUnary(func) {
      return function (value) {
        return func(value);
      };
    }

    function baseValues(object, props) {
      return arrayMap(props, function (key) {
        return object[key];
      });
    }

    function cacheHas(cache, key) {
      return cache.has(key);
    }

    function charsStartIndex(strSymbols, chrSymbols) {
      var index = -1,
          length = strSymbols.length;

      while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}

      return index;
    }

    function charsEndIndex(strSymbols, chrSymbols) {
      var index = strSymbols.length;

      while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}

      return index;
    }

    function countHolders(array, placeholder) {
      var length = array.length,
          result = 0;

      while (length--) {
        if (array[length] === placeholder) {
          ++result;
        }
      }

      return result;
    }

    var deburrLetter = basePropertyOf(deburredLetters);
    var escapeHtmlChar = basePropertyOf(htmlEscapes);

    function escapeStringChar(chr) {
      return '\\' + stringEscapes[chr];
    }

    function getValue(object, key) {
      return object == null ? undefined : object[key];
    }

    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }

    function hasUnicodeWord(string) {
      return reHasUnicodeWord.test(string);
    }

    function iteratorToArray(iterator) {
      var data,
          result = [];

      while (!(data = iterator.next()).done) {
        result.push(data.value);
      }

      return result;
    }

    function mapToArray(map) {
      var index = -1,
          result = Array(map.size);
      map.forEach(function (value, key) {
        result[++index] = [key, value];
      });
      return result;
    }

    function overArg(func, transform) {
      return function (arg) {
        return func(transform(arg));
      };
    }

    function replaceHolders(array, placeholder) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (value === placeholder || value === PLACEHOLDER) {
          array[index] = PLACEHOLDER;
          result[resIndex++] = index;
        }
      }

      return result;
    }

    function safeGet(object, key) {
      return key == '__proto__' ? undefined : object[key];
    }

    function setToArray(set) {
      var index = -1,
          result = Array(set.size);
      set.forEach(function (value) {
        result[++index] = value;
      });
      return result;
    }

    function setToPairs(set) {
      var index = -1,
          result = Array(set.size);
      set.forEach(function (value) {
        result[++index] = [value, value];
      });
      return result;
    }

    function strictIndexOf(array, value, fromIndex) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }

      return -1;
    }

    function strictLastIndexOf(array, value, fromIndex) {
      var index = fromIndex + 1;

      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }

      return index;
    }

    function stringSize(string) {
      return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
    }

    function stringToArray(string) {
      return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
    }

    var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

    function unicodeSize(string) {
      var result = reUnicode.lastIndex = 0;

      while (reUnicode.test(string)) {
        ++result;
      }

      return result;
    }

    function unicodeToArray(string) {
      return string.match(reUnicode) || [];
    }

    function unicodeWords(string) {
      return string.match(reUnicodeWord) || [];
    }

    var runInContext = function runInContext(context) {
      context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
      var Array = context.Array,
          Date = context.Date,
          Error = context.Error,
          Function = context.Function,
          Math = context.Math,
          Object = context.Object,
          RegExp = context.RegExp,
          String = context.String,
          TypeError = context.TypeError;
      var arrayProto = Array.prototype,
          funcProto = Function.prototype,
          objectProto = Object.prototype;
      var coreJsData = context['__core-js_shared__'];
      var funcToString = funcProto.toString;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var idCounter = 0;

      var maskSrcKey = function () {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
        return uid ? 'Symbol(src)_1.' + uid : '';
      }();

      var nativeObjectToString = objectProto.toString;
      var objectCtorString = funcToString.call(Object);
      var oldDash = root._;
      var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
      var Buffer = moduleExports ? context.Buffer : undefined,
          Symbol = context.Symbol,
          Uint8Array = context.Uint8Array,
          allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
          getPrototype = overArg(Object.getPrototypeOf, Object),
          objectCreate = Object.create,
          propertyIsEnumerable = objectProto.propertyIsEnumerable,
          splice = arrayProto.splice,
          spreadableSymbol = Symbol ? typeof Symbol === "function" ? Symbol.isConcatSpreadable : "@@isConcatSpreadable" : undefined,
          symIterator = Symbol ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : undefined,
          symToStringTag = Symbol ? typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag" : undefined;

      var defineProperty = function () {
        try {
          var func = getNative(Object, 'defineProperty');
          func({}, '', {});
          return func;
        } catch (e) {}
      }();

      var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
          ctxNow = Date && Date.now !== root.Date.now && Date.now,
          ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
      var nativeCeil = Math.ceil,
          nativeFloor = Math.floor,
          nativeGetSymbols = Object.getOwnPropertySymbols,
          nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
          nativeIsFinite = context.isFinite,
          nativeJoin = arrayProto.join,
          nativeKeys = overArg(Object.keys, Object),
          nativeMax = Math.max,
          nativeMin = Math.min,
          nativeNow = Date.now,
          nativeParseInt = context.parseInt,
          nativeRandom = Math.random,
          nativeReverse = arrayProto.reverse;
      var DataView = getNative(context, 'DataView'),
          Map = getNative(context, 'Map'),
          Promise = getNative(context, 'Promise'),
          Set = getNative(context, 'Set'),
          WeakMap = getNative(context, 'WeakMap'),
          nativeCreate = getNative(Object, 'create');
      var metaMap = WeakMap && new WeakMap();
      var realNames = {};
      var dataViewCtorString = toSource(DataView),
          mapCtorString = toSource(Map),
          promiseCtorString = toSource(Promise),
          setCtorString = toSource(Set),
          weakMapCtorString = toSource(WeakMap);
      var symbolProto = Symbol ? typeof Symbol === "function" ? Symbol.prototype : "@@prototype" : undefined,
          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
          symbolToString = symbolProto ? symbolProto.toString : undefined;

      function lodash(value) {
        if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
          if (value instanceof LodashWrapper) {
            return value;
          }

          if (hasOwnProperty.call(value, '__wrapped__')) {
            return wrapperClone(value);
          }
        }

        return new LodashWrapper(value);
      }

      var baseCreate = function () {
        function object() {}

        return function (proto) {
          if (!isObject(proto)) {
            return {};
          }

          if (objectCreate) {
            return objectCreate(proto);
          }

          object.prototype = proto;
          var result = new object();
          object.prototype = undefined;
          return result;
        };
      }();

      function baseLodash() {}

      function LodashWrapper(value, chainAll) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__chain__ = !!chainAll;
        this.__index__ = 0;
        this.__values__ = undefined;
      }

      lodash.templateSettings = {
        'escape': reEscape,
        'evaluate': reEvaluate,
        'interpolate': reInterpolate,
        'variable': '',
        'imports': {
          '_': lodash
        }
      };
      lodash.prototype = baseLodash.prototype;
      lodash.prototype.constructor = lodash;
      LodashWrapper.prototype = baseCreate(baseLodash.prototype);
      LodashWrapper.prototype.constructor = LodashWrapper;

      function LazyWrapper(value) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__dir__ = 1;
        this.__filtered__ = false;
        this.__iteratees__ = [];
        this.__takeCount__ = MAX_ARRAY_LENGTH;
        this.__views__ = [];
      }

      function lazyClone() {
        var result = new LazyWrapper(this.__wrapped__);
        result.__actions__ = copyArray(this.__actions__);
        result.__dir__ = this.__dir__;
        result.__filtered__ = this.__filtered__;
        result.__iteratees__ = copyArray(this.__iteratees__);
        result.__takeCount__ = this.__takeCount__;
        result.__views__ = copyArray(this.__views__);
        return result;
      }

      function lazyReverse() {
        if (this.__filtered__) {
          var result = new LazyWrapper(this);
          result.__dir__ = -1;
          result.__filtered__ = true;
        } else {
          result = this.clone();
          result.__dir__ *= -1;
        }

        return result;
      }

      function lazyValue() {
        var array = this.__wrapped__.value(),
            dir = this.__dir__,
            isArr = isArray(array),
            isRight = dir < 0,
            arrLength = isArr ? array.length : 0,
            view = getView(0, arrLength, this.__views__),
            start = view.start,
            end = view.end,
            length = end - start,
            index = isRight ? end : start - 1,
            iteratees = this.__iteratees__,
            iterLength = iteratees.length,
            resIndex = 0,
            takeCount = nativeMin(length, this.__takeCount__);

        if (!isArr || !isRight && arrLength == length && takeCount == length) {
          return baseWrapperValue(array, this.__actions__);
        }

        var result = [];

        outer: while (length-- && resIndex < takeCount) {
          index += dir;
          var iterIndex = -1,
              value = array[index];

          while (++iterIndex < iterLength) {
            var data = iteratees[iterIndex],
                iteratee = data.iteratee,
                type = data.type,
                computed = iteratee(value);

            if (type == LAZY_MAP_FLAG) {
              value = computed;
            } else if (!computed) {
              if (type == LAZY_FILTER_FLAG) {
                continue outer;
              } else {
                break outer;
              }
            }
          }

          result[resIndex++] = value;
        }

        return result;
      }

      LazyWrapper.prototype = baseCreate(baseLodash.prototype);
      LazyWrapper.prototype.constructor = LazyWrapper;

      function Hash(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }

      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }

      function hashGet(key) {
        var data = this.__data__;

        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? undefined : result;
        }

        return hasOwnProperty.call(data, key) ? data[key] : undefined;
      }

      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
      }

      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
        return this;
      }

      Hash.prototype.clear = hashClear;
      Hash.prototype['delete'] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;

      function ListCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }

      function listCacheDelete(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
          return false;
        }

        var lastIndex = data.length - 1;

        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }

        --this.size;
        return true;
      }

      function listCacheGet(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);
        return index < 0 ? undefined : data[index][1];
      }

      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }

      function listCacheSet(key, value) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }

        return this;
      }

      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype['delete'] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;

      function MapCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          'hash': new Hash(),
          'map': new (Map || ListCache)(),
          'string': new Hash()
        };
      }

      function mapCacheDelete(key) {
        var result = getMapData(this, key)['delete'](key);
        this.size -= result ? 1 : 0;
        return result;
      }

      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }

      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }

      function mapCacheSet(key, value) {
        var data = getMapData(this, key),
            size = data.size;
        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }

      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype['delete'] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;

      function SetCache(values) {
        var index = -1,
            length = values == null ? 0 : values.length;
        this.__data__ = new MapCache();

        while (++index < length) {
          this.add(values[index]);
        }
      }

      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);

        return this;
      }

      function setCacheHas(value) {
        return this.__data__.has(value);
      }

      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;

      function Stack(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }

      function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }

      function stackDelete(key) {
        var data = this.__data__,
            result = data['delete'](key);
        this.size = data.size;
        return result;
      }

      function stackGet(key) {
        return this.__data__.get(key);
      }

      function stackHas(key) {
        return this.__data__.has(key);
      }

      function stackSet(key, value) {
        var data = this.__data__;

        if (data instanceof ListCache) {
          var pairs = data.__data__;

          if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }

          data = this.__data__ = new MapCache(pairs);
        }

        data.set(key, value);
        this.size = data.size;
        return this;
      }

      Stack.prototype.clear = stackClear;
      Stack.prototype['delete'] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;

      function arrayLikeKeys(value, inherited) {
        var isArr = isArray(value),
            isArg = !isArr && isArguments(value),
            isBuff = !isArr && !isArg && isBuffer(value),
            isType = !isArr && !isArg && !isBuff && isTypedArray(value),
            skipIndexes = isArr || isArg || isBuff || isType,
            result = skipIndexes ? baseTimes(value.length, String) : [],
            length = result.length;

        for (var key in value) {
          if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || isIndex(key, length)))) {
            result.push(key);
          }
        }

        return result;
      }

      function arraySample(array) {
        var length = array.length;
        return length ? array[baseRandom(0, length - 1)] : undefined;
      }

      function arraySampleSize(array, n) {
        return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
      }

      function arrayShuffle(array) {
        return shuffleSelf(copyArray(array));
      }

      function assignMergeValue(object, key, value) {
        if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }

      function assignValue(object, key, value) {
        var objValue = object[key];

        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }

      function assocIndexOf(array, key) {
        var length = array.length;

        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }

        return -1;
      }

      function baseAggregator(collection, setter, iteratee, accumulator) {
        baseEach(collection, function (value, key, collection) {
          setter(accumulator, value, iteratee(value), collection);
        });
        return accumulator;
      }

      function baseAssign(object, source) {
        return object && copyObject(source, keys(source), object);
      }

      function baseAssignIn(object, source) {
        return object && copyObject(source, keysIn(source), object);
      }

      function baseAssignValue(object, key, value) {
        if (key == '__proto__' && defineProperty) {
          defineProperty(object, key, {
            'configurable': true,
            'enumerable': true,
            'value': value,
            'writable': true
          });
        } else {
          object[key] = value;
        }
      }

      function baseAt(object, paths) {
        var index = -1,
            length = paths.length,
            result = Array(length),
            skip = object == null;

        while (++index < length) {
          result[index] = skip ? undefined : get(object, paths[index]);
        }

        return result;
      }

      function baseClamp(number, lower, upper) {
        if (number === number) {
          if (upper !== undefined) {
            number = number <= upper ? number : upper;
          }

          if (lower !== undefined) {
            number = number >= lower ? number : lower;
          }
        }

        return number;
      }

      function baseClone(value, bitmask, customizer, key, object, stack) {
        var result,
            isDeep = bitmask & CLONE_DEEP_FLAG,
            isFlat = bitmask & CLONE_FLAT_FLAG,
            isFull = bitmask & CLONE_SYMBOLS_FLAG;

        if (customizer) {
          result = object ? customizer(value, key, object, stack) : customizer(value);
        }

        if (result !== undefined) {
          return result;
        }

        if (!isObject(value)) {
          return value;
        }

        var isArr = isArray(value);

        if (isArr) {
          result = initCloneArray(value);

          if (!isDeep) {
            return copyArray(value, result);
          }
        } else {
          var tag = getTag(value),
              isFunc = tag == funcTag || tag == genTag;

          if (isBuffer(value)) {
            return cloneBuffer(value, isDeep);
          }

          if (tag == objectTag || tag == argsTag || isFunc && !object) {
            result = isFlat || isFunc ? {} : initCloneObject(value);

            if (!isDeep) {
              return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
            }
          } else {
            if (!cloneableTags[tag]) {
              return object ? value : {};
            }

            result = initCloneByTag(value, tag, isDeep);
          }
        }

        stack || (stack = new Stack());
        var stacked = stack.get(value);

        if (stacked) {
          return stacked;
        }

        stack.set(value, result);

        if (isSet(value)) {
          value.forEach(function (subValue) {
            result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
          });
          return result;
        }

        if (isMap(value)) {
          value.forEach(function (subValue, key) {
            result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
          });
          return result;
        }

        var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
        var props = isArr ? undefined : keysFunc(value);
        arrayEach(props || value, function (subValue, key) {
          if (props) {
            key = subValue;
            subValue = value[key];
          }

          assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
        return result;
      }

      function baseConforms(source) {
        var props = keys(source);
        return function (object) {
          return baseConformsTo(object, source, props);
        };
      }

      function baseConformsTo(object, source, props) {
        var length = props.length;

        if (object == null) {
          return !length;
        }

        object = Object(object);

        while (length--) {
          var key = props[length],
              predicate = source[key],
              value = object[key];

          if (value === undefined && !(key in object) || !predicate(value)) {
            return false;
          }
        }

        return true;
      }

      function baseDelay(func, wait, args) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        return setTimeout(function () {
          func.apply(undefined, args);
        }, wait);
      }

      function baseDifference(array, values, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            isCommon = true,
            length = array.length,
            result = [],
            valuesLength = values.length;

        if (!length) {
          return result;
        }

        if (iteratee) {
          values = arrayMap(values, baseUnary(iteratee));
        }

        if (comparator) {
          includes = arrayIncludesWith;
          isCommon = false;
        } else if (values.length >= LARGE_ARRAY_SIZE) {
          includes = cacheHas;
          isCommon = false;
          values = new SetCache(values);
        }

        outer: while (++index < length) {
          var value = array[index],
              computed = iteratee == null ? value : iteratee(value);
          value = comparator || value !== 0 ? value : 0;

          if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;

            while (valuesIndex--) {
              if (values[valuesIndex] === computed) {
                continue outer;
              }
            }

            result.push(value);
          } else if (!includes(values, computed, comparator)) {
            result.push(value);
          }
        }

        return result;
      }

      var baseEach = createBaseEach(baseForOwn);
      var baseEachRight = createBaseEach(baseForOwnRight, true);

      function baseEvery(collection, predicate) {
        var result = true;
        baseEach(collection, function (value, index, collection) {
          result = !!predicate(value, index, collection);
          return result;
        });
        return result;
      }

      function baseExtremum(array, iteratee, comparator) {
        var index = -1,
            length = array.length;

        while (++index < length) {
          var value = array[index],
              current = iteratee(value);

          if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) {
            var computed = current,
                result = value;
          }
        }

        return result;
      }

      function baseFill(array, value, start, end) {
        var length = array.length;
        start = toInteger(start);

        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }

        end = end === undefined || end > length ? length : toInteger(end);

        if (end < 0) {
          end += length;
        }

        end = start > end ? 0 : toLength(end);

        while (start < end) {
          array[start++] = value;
        }

        return array;
      }

      function baseFilter(collection, predicate) {
        var result = [];
        baseEach(collection, function (value, index, collection) {
          if (predicate(value, index, collection)) {
            result.push(value);
          }
        });
        return result;
      }

      function baseFlatten(array, depth, predicate, isStrict, result) {
        var index = -1,
            length = array.length;
        predicate || (predicate = isFlattenable);
        result || (result = []);

        while (++index < length) {
          var value = array[index];

          if (depth > 0 && predicate(value)) {
            if (depth > 1) {
              baseFlatten(value, depth - 1, predicate, isStrict, result);
            } else {
              arrayPush(result, value);
            }
          } else if (!isStrict) {
            result[result.length] = value;
          }
        }

        return result;
      }

      var baseFor = createBaseFor();
      var baseForRight = createBaseFor(true);

      function baseForOwn(object, iteratee) {
        return object && baseFor(object, iteratee, keys);
      }

      function baseForOwnRight(object, iteratee) {
        return object && baseForRight(object, iteratee, keys);
      }

      function baseFunctions(object, props) {
        return arrayFilter(props, function (key) {
          return isFunction(object[key]);
        });
      }

      function baseGet(object, path) {
        path = castPath(path, object);
        var index = 0,
            length = path.length;

        while (object != null && index < length) {
          object = object[toKey(path[index++])];
        }

        return index && index == length ? object : undefined;
      }

      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
      }

      function baseGetTag(value) {
        if (value == null) {
          return value === undefined ? undefinedTag : nullTag;
        }

        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
      }

      function baseGt(value, other) {
        return value > other;
      }

      function baseHas(object, key) {
        return object != null && hasOwnProperty.call(object, key);
      }

      function baseHasIn(object, key) {
        return object != null && key in Object(object);
      }

      function baseInRange(number, start, end) {
        return number >= nativeMin(start, end) && number < nativeMax(start, end);
      }

      function baseIntersection(arrays, iteratee, comparator) {
        var includes = comparator ? arrayIncludesWith : arrayIncludes,
            length = arrays[0].length,
            othLength = arrays.length,
            othIndex = othLength,
            caches = Array(othLength),
            maxLength = Infinity,
            result = [];

        while (othIndex--) {
          var array = arrays[othIndex];

          if (othIndex && iteratee) {
            array = arrayMap(array, baseUnary(iteratee));
          }

          maxLength = nativeMin(array.length, maxLength);
          caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
        }

        array = arrays[0];
        var index = -1,
            seen = caches[0];

        outer: while (++index < length && result.length < maxLength) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;

          if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
            othIndex = othLength;

            while (--othIndex) {
              var cache = caches[othIndex];

              if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
                continue outer;
              }
            }

            if (seen) {
              seen.push(computed);
            }

            result.push(value);
          }
        }

        return result;
      }

      function baseInverter(object, setter, iteratee, accumulator) {
        baseForOwn(object, function (value, key, object) {
          setter(accumulator, iteratee(value), key, object);
        });
        return accumulator;
      }

      function baseInvoke(object, path, args) {
        path = castPath(path, object);
        object = parent(object, path);
        var func = object == null ? object : object[toKey(last(path))];
        return func == null ? undefined : apply(func, object, args);
      }

      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }

      function baseIsArrayBuffer(value) {
        return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
      }

      function baseIsDate(value) {
        return isObjectLike(value) && baseGetTag(value) == dateTag;
      }

      function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }

        if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
          return value !== value && other !== other;
        }

        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
      }

      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray(object),
            othIsArr = isArray(other),
            objTag = objIsArr ? arrayTag : getTag(object),
            othTag = othIsArr ? arrayTag : getTag(other);
        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;
        var objIsObj = objTag == objectTag,
            othIsObj = othTag == objectTag,
            isSameTag = objTag == othTag;

        if (isSameTag && isBuffer(object)) {
          if (!isBuffer(other)) {
            return false;
          }

          objIsArr = true;
          objIsObj = false;
        }

        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack());
          return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }

        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
              othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object,
                othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }

        if (!isSameTag) {
          return false;
        }

        stack || (stack = new Stack());
        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
      }

      function baseIsMap(value) {
        return isObjectLike(value) && getTag(value) == mapTag;
      }

      function baseIsMatch(object, source, matchData, customizer) {
        var index = matchData.length,
            length = index,
            noCustomizer = !customizer;

        if (object == null) {
          return !length;
        }

        object = Object(object);

        while (index--) {
          var data = matchData[index];

          if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
            return false;
          }
        }

        while (++index < length) {
          data = matchData[index];
          var key = data[0],
              objValue = object[key],
              srcValue = data[1];

          if (noCustomizer && data[2]) {
            if (objValue === undefined && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack();

            if (customizer) {
              var result = customizer(objValue, srcValue, key, object, source, stack);
            }

            if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
              return false;
            }
          }
        }

        return true;
      }

      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }

        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }

      function baseIsRegExp(value) {
        return isObjectLike(value) && baseGetTag(value) == regexpTag;
      }

      function baseIsSet(value) {
        return isObjectLike(value) && getTag(value) == setTag;
      }

      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }

      function baseIteratee(value) {
        if (typeof value == 'function') {
          return value;
        }

        if (value == null) {
          return identity;
        }

        if (typeof value == 'object') {
          return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
        }

        return property(value);
      }

      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys(object);
        }

        var result = [];

        for (var key in Object(object)) {
          if (hasOwnProperty.call(object, key) && key != 'constructor') {
            result.push(key);
          }
        }

        return result;
      }

      function baseKeysIn(object) {
        if (!isObject(object)) {
          return nativeKeysIn(object);
        }

        var isProto = isPrototype(object),
            result = [];

        for (var key in object) {
          if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
            result.push(key);
          }
        }

        return result;
      }

      function baseLt(value, other) {
        return value < other;
      }

      function baseMap(collection, iteratee) {
        var index = -1,
            result = isArrayLike(collection) ? Array(collection.length) : [];
        baseEach(collection, function (value, key, collection) {
          result[++index] = iteratee(value, key, collection);
        });
        return result;
      }

      function baseMatches(source) {
        var matchData = getMatchData(source);

        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }

        return function (object) {
          return object === source || baseIsMatch(object, source, matchData);
        };
      }

      function baseMatchesProperty(path, srcValue) {
        if (isKey(path) && isStrictComparable(srcValue)) {
          return matchesStrictComparable(toKey(path), srcValue);
        }

        return function (object) {
          var objValue = get(object, path);
          return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
        };
      }

      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }

        baseFor(source, function (srcValue, key) {
          if (isObject(srcValue)) {
            stack || (stack = new Stack());
            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
          } else {
            var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;

            if (newValue === undefined) {
              newValue = srcValue;
            }

            assignMergeValue(object, key, newValue);
          }
        }, keysIn);
      }

      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object, key),
            srcValue = safeGet(source, key),
            stacked = stack.get(srcValue);

        if (stacked) {
          assignMergeValue(object, key, stacked);
          return;
        }

        var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
        var isCommon = newValue === undefined;

        if (isCommon) {
          var isArr = isArray(srcValue),
              isBuff = !isArr && isBuffer(srcValue),
              isTyped = !isArr && !isBuff && isTypedArray(srcValue);
          newValue = srcValue;

          if (isArr || isBuff || isTyped) {
            if (isArray(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            } else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer(srcValue, true);
            } else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray(srcValue, true);
            } else {
              newValue = [];
            }
          } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            newValue = objValue;

            if (isArguments(objValue)) {
              newValue = toPlainObject(objValue);
            } else if (!isObject(objValue) || srcIndex && isFunction(objValue)) {
              newValue = initCloneObject(srcValue);
            }
          } else {
            isCommon = false;
          }
        }

        if (isCommon) {
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack['delete'](srcValue);
        }

        assignMergeValue(object, key, newValue);
      }

      function baseNth(array, n) {
        var length = array.length;

        if (!length) {
          return;
        }

        n += n < 0 ? length : 0;
        return isIndex(n, length) ? array[n] : undefined;
      }

      function baseOrderBy(collection, iteratees, orders) {
        var index = -1;
        iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));
        var result = baseMap(collection, function (value, key, collection) {
          var criteria = arrayMap(iteratees, function (iteratee) {
            return iteratee(value);
          });
          return {
            'criteria': criteria,
            'index': ++index,
            'value': value
          };
        });
        return baseSortBy(result, function (object, other) {
          return compareMultiple(object, other, orders);
        });
      }

      function basePick(object, paths) {
        return basePickBy(object, paths, function (value, path) {
          return hasIn(object, path);
        });
      }

      function basePickBy(object, paths, predicate) {
        var index = -1,
            length = paths.length,
            result = {};

        while (++index < length) {
          var path = paths[index],
              value = baseGet(object, path);

          if (predicate(value, path)) {
            baseSet(result, castPath(path, object), value);
          }
        }

        return result;
      }

      function basePropertyDeep(path) {
        return function (object) {
          return baseGet(object, path);
        };
      }

      function basePullAll(array, values, iteratee, comparator) {
        var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
            index = -1,
            length = values.length,
            seen = array;

        if (array === values) {
          values = copyArray(values);
        }

        if (iteratee) {
          seen = arrayMap(array, baseUnary(iteratee));
        }

        while (++index < length) {
          var fromIndex = 0,
              value = values[index],
              computed = iteratee ? iteratee(value) : value;

          while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
            if (seen !== array) {
              splice.call(seen, fromIndex, 1);
            }

            splice.call(array, fromIndex, 1);
          }
        }

        return array;
      }

      function basePullAt(array, indexes) {
        var length = array ? indexes.length : 0,
            lastIndex = length - 1;

        while (length--) {
          var index = indexes[length];

          if (length == lastIndex || index !== previous) {
            var previous = index;

            if (isIndex(index)) {
              splice.call(array, index, 1);
            } else {
              baseUnset(array, index);
            }
          }
        }

        return array;
      }

      function baseRandom(lower, upper) {
        return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
      }

      function baseRange(start, end, step, fromRight) {
        var index = -1,
            length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
            result = Array(length);

        while (length--) {
          result[fromRight ? length : ++index] = start;
          start += step;
        }

        return result;
      }

      function baseRepeat(string, n) {
        var result = '';

        if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
          return result;
        }

        do {
          if (n % 2) {
            result += string;
          }

          n = nativeFloor(n / 2);

          if (n) {
            string += string;
          }
        } while (n);

        return result;
      }

      function baseRest(func, start) {
        return setToString(overRest(func, start, identity), func + '');
      }

      function baseSample(collection) {
        return arraySample(values(collection));
      }

      function baseSampleSize(collection, n) {
        var array = values(collection);
        return shuffleSelf(array, baseClamp(n, 0, array.length));
      }

      function baseSet(object, path, value, customizer) {
        if (!isObject(object)) {
          return object;
        }

        path = castPath(path, object);
        var index = -1,
            length = path.length,
            lastIndex = length - 1,
            nested = object;

        while (nested != null && ++index < length) {
          var key = toKey(path[index]),
              newValue = value;

          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined;

            if (newValue === undefined) {
              newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
            }
          }

          assignValue(nested, key, newValue);
          nested = nested[key];
        }

        return object;
      }

      var baseSetData = !metaMap ? identity : function (func, data) {
        metaMap.set(func, data);
        return func;
      };
      var baseSetToString = !defineProperty ? identity : function (func, string) {
        return defineProperty(func, 'toString', {
          'configurable': true,
          'enumerable': false,
          'value': constant(string),
          'writable': true
        });
      };

      function baseShuffle(collection) {
        return shuffleSelf(values(collection));
      }

      function baseSlice(array, start, end) {
        var index = -1,
            length = array.length;

        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }

        end = end > length ? length : end;

        if (end < 0) {
          end += length;
        }

        length = start > end ? 0 : end - start >>> 0;
        start >>>= 0;
        var result = Array(length);

        while (++index < length) {
          result[index] = array[index + start];
        }

        return result;
      }

      function baseSome(collection, predicate) {
        var result;
        baseEach(collection, function (value, index, collection) {
          result = predicate(value, index, collection);
          return !result;
        });
        return !!result;
      }

      function baseSortedIndex(array, value, retHighest) {
        var low = 0,
            high = array == null ? low : array.length;

        if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
          while (low < high) {
            var mid = low + high >>> 1,
                computed = array[mid];

            if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }

          return high;
        }

        return baseSortedIndexBy(array, value, identity, retHighest);
      }

      function baseSortedIndexBy(array, value, iteratee, retHighest) {
        value = iteratee(value);
        var low = 0,
            high = array == null ? 0 : array.length,
            valIsNaN = value !== value,
            valIsNull = value === null,
            valIsSymbol = isSymbol(value),
            valIsUndefined = value === undefined;

        while (low < high) {
          var mid = nativeFloor((low + high) / 2),
              computed = iteratee(array[mid]),
              othIsDefined = computed !== undefined,
              othIsNull = computed === null,
              othIsReflexive = computed === computed,
              othIsSymbol = isSymbol(computed);

          if (valIsNaN) {
            var setLow = retHighest || othIsReflexive;
          } else if (valIsUndefined) {
            setLow = othIsReflexive && (retHighest || othIsDefined);
          } else if (valIsNull) {
            setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
          } else if (valIsSymbol) {
            setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
          } else if (othIsNull || othIsSymbol) {
            setLow = false;
          } else {
            setLow = retHighest ? computed <= value : computed < value;
          }

          if (setLow) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }

        return nativeMin(high, MAX_ARRAY_INDEX);
      }

      function baseSortedUniq(array, iteratee) {
        var index = -1,
            length = array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;

          if (!index || !eq(computed, seen)) {
            var seen = computed;
            result[resIndex++] = value === 0 ? 0 : value;
          }
        }

        return result;
      }

      function baseToNumber(value) {
        if (typeof value == 'number') {
          return value;
        }

        if (isSymbol(value)) {
          return NAN;
        }

        return +value;
      }

      function baseToString(value) {
        if (typeof value == 'string') {
          return value;
        }

        if (isArray(value)) {
          return arrayMap(value, baseToString) + '';
        }

        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : '';
        }

        var result = value + '';
        return result == '0' && 1 / value == -INFINITY ? '-0' : result;
      }

      function baseUniq(array, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            length = array.length,
            isCommon = true,
            result = [],
            seen = result;

        if (comparator) {
          isCommon = false;
          includes = arrayIncludesWith;
        } else if (length >= LARGE_ARRAY_SIZE) {
          var set = iteratee ? null : createSet(array);

          if (set) {
            return setToArray(set);
          }

          isCommon = false;
          includes = cacheHas;
          seen = new SetCache();
        } else {
          seen = iteratee ? [] : result;
        }

        outer: while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;

          if (isCommon && computed === computed) {
            var seenIndex = seen.length;

            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }

            if (iteratee) {
              seen.push(computed);
            }

            result.push(value);
          } else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }

            result.push(value);
          }
        }

        return result;
      }

      function baseUnset(object, path) {
        path = castPath(path, object);
        object = parent(object, path);
        return object == null || delete object[toKey(last(path))];
      }

      function baseUpdate(object, path, updater, customizer) {
        return baseSet(object, path, updater(baseGet(object, path)), customizer);
      }

      function baseWhile(array, predicate, isDrop, fromRight) {
        var length = array.length,
            index = fromRight ? length : -1;

        while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}

        return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
      }

      function baseWrapperValue(value, actions) {
        var result = value;

        if (result instanceof LazyWrapper) {
          result = result.value();
        }

        return arrayReduce(actions, function (result, action) {
          return action.func.apply(action.thisArg, arrayPush([result], action.args));
        }, result);
      }

      function baseXor(arrays, iteratee, comparator) {
        var length = arrays.length;

        if (length < 2) {
          return length ? baseUniq(arrays[0]) : [];
        }

        var index = -1,
            result = Array(length);

        while (++index < length) {
          var array = arrays[index],
              othIndex = -1;

          while (++othIndex < length) {
            if (othIndex != index) {
              result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
            }
          }
        }

        return baseUniq(baseFlatten(result, 1), iteratee, comparator);
      }

      function baseZipObject(props, values, assignFunc) {
        var index = -1,
            length = props.length,
            valsLength = values.length,
            result = {};

        while (++index < length) {
          var value = index < valsLength ? values[index] : undefined;
          assignFunc(result, props[index], value);
        }

        return result;
      }

      function castArrayLikeObject(value) {
        return isArrayLikeObject(value) ? value : [];
      }

      function castFunction(value) {
        return typeof value == 'function' ? value : identity;
      }

      function castPath(value, object) {
        if (isArray(value)) {
          return value;
        }

        return isKey(value, object) ? [value] : stringToPath(toString(value));
      }

      var castRest = baseRest;

      function castSlice(array, start, end) {
        var length = array.length;
        end = end === undefined ? length : end;
        return !start && end >= length ? array : baseSlice(array, start, end);
      }

      var clearTimeout = ctxClearTimeout || function (id) {
        return root.clearTimeout(id);
      };

      function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }

        var length = buffer.length,
            result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
        buffer.copy(result);
        return result;
      }

      function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array(result).set(new Uint8Array(arrayBuffer));
        return result;
      }

      function cloneDataView(dataView, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
      }

      function cloneRegExp(regexp) {
        var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
        result.lastIndex = regexp.lastIndex;
        return result;
      }

      function cloneSymbol(symbol) {
        return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
      }

      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }

      function compareAscending(value, other) {
        if (value !== other) {
          var valIsDefined = value !== undefined,
              valIsNull = value === null,
              valIsReflexive = value === value,
              valIsSymbol = isSymbol(value);
          var othIsDefined = other !== undefined,
              othIsNull = other === null,
              othIsReflexive = other === other,
              othIsSymbol = isSymbol(other);

          if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
            return 1;
          }

          if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
            return -1;
          }
        }

        return 0;
      }

      function compareMultiple(object, other, orders) {
        var index = -1,
            objCriteria = object.criteria,
            othCriteria = other.criteria,
            length = objCriteria.length,
            ordersLength = orders.length;

        while (++index < length) {
          var result = compareAscending(objCriteria[index], othCriteria[index]);

          if (result) {
            if (index >= ordersLength) {
              return result;
            }

            var order = orders[index];
            return result * (order == 'desc' ? -1 : 1);
          }
        }

        return object.index - other.index;
      }

      function composeArgs(args, partials, holders, isCurried) {
        var argsIndex = -1,
            argsLength = args.length,
            holdersLength = holders.length,
            leftIndex = -1,
            leftLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(leftLength + rangeLength),
            isUncurried = !isCurried;

        while (++leftIndex < leftLength) {
          result[leftIndex] = partials[leftIndex];
        }

        while (++argsIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[holders[argsIndex]] = args[argsIndex];
          }
        }

        while (rangeLength--) {
          result[leftIndex++] = args[argsIndex++];
        }

        return result;
      }

      function composeArgsRight(args, partials, holders, isCurried) {
        var argsIndex = -1,
            argsLength = args.length,
            holdersIndex = -1,
            holdersLength = holders.length,
            rightIndex = -1,
            rightLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(rangeLength + rightLength),
            isUncurried = !isCurried;

        while (++argsIndex < rangeLength) {
          result[argsIndex] = args[argsIndex];
        }

        var offset = argsIndex;

        while (++rightIndex < rightLength) {
          result[offset + rightIndex] = partials[rightIndex];
        }

        while (++holdersIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[offset + holders[holdersIndex]] = args[argsIndex++];
          }
        }

        return result;
      }

      function copyArray(source, array) {
        var index = -1,
            length = source.length;
        array || (array = Array(length));

        while (++index < length) {
          array[index] = source[index];
        }

        return array;
      }

      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index = -1,
            length = props.length;

        while (++index < length) {
          var key = props[index];
          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

          if (newValue === undefined) {
            newValue = source[key];
          }

          if (isNew) {
            baseAssignValue(object, key, newValue);
          } else {
            assignValue(object, key, newValue);
          }
        }

        return object;
      }

      function copySymbols(source, object) {
        return copyObject(source, getSymbols(source), object);
      }

      function copySymbolsIn(source, object) {
        return copyObject(source, getSymbolsIn(source), object);
      }

      function createAggregator(setter, initializer) {
        return function (collection, iteratee) {
          var func = isArray(collection) ? arrayAggregator : baseAggregator,
              accumulator = initializer ? initializer() : {};
          return func(collection, setter, getIteratee(iteratee, 2), accumulator);
        };
      }

      function createAssigner(assigner) {
        return baseRest(function (object, sources) {
          var index = -1,
              length = sources.length,
              customizer = length > 1 ? sources[length - 1] : undefined,
              guard = length > 2 ? sources[2] : undefined;
          customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined : customizer;
            length = 1;
          }

          object = Object(object);

          while (++index < length) {
            var source = sources[index];

            if (source) {
              assigner(object, source, index, customizer);
            }
          }

          return object;
        });
      }

      function createBaseEach(eachFunc, fromRight) {
        return function (collection, iteratee) {
          if (collection == null) {
            return collection;
          }

          if (!isArrayLike(collection)) {
            return eachFunc(collection, iteratee);
          }

          var length = collection.length,
              index = fromRight ? length : -1,
              iterable = Object(collection);

          while (fromRight ? index-- : ++index < length) {
            if (iteratee(iterable[index], index, iterable) === false) {
              break;
            }
          }

          return collection;
        };
      }

      function createBaseFor(fromRight) {
        return function (object, iteratee, keysFunc) {
          var index = -1,
              iterable = Object(object),
              props = keysFunc(object),
              length = props.length;

          while (length--) {
            var key = props[fromRight ? length : ++index];

            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }

          return object;
        };
      }

      function createBind(func, bitmask, thisArg) {
        var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);

        function wrapper() {
          var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          return fn.apply(isBind ? thisArg : this, arguments);
        }

        return wrapper;
      }

      function createCaseFirst(methodName) {
        return function (string) {
          string = toString(string);
          var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
          var chr = strSymbols ? strSymbols[0] : string.charAt(0);
          var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);
          return chr[methodName]() + trailing;
        };
      }

      function createCompounder(callback) {
        return function (string) {
          return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
        };
      }

      function createCtor(Ctor) {
        return function () {
          var args = arguments;

          switch (args.length) {
            case 0:
              return new Ctor();

            case 1:
              return new Ctor(args[0]);

            case 2:
              return new Ctor(args[0], args[1]);

            case 3:
              return new Ctor(args[0], args[1], args[2]);

            case 4:
              return new Ctor(args[0], args[1], args[2], args[3]);

            case 5:
              return new Ctor(args[0], args[1], args[2], args[3], args[4]);

            case 6:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);

            case 7:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
          }

          var thisBinding = baseCreate(Ctor.prototype),
              result = Ctor.apply(thisBinding, args);
          return isObject(result) ? result : thisBinding;
        };
      }

      function createCurry(func, bitmask, arity) {
        var Ctor = createCtor(func);

        function wrapper() {
          var length = arguments.length,
              args = Array(length),
              index = length,
              placeholder = getHolder(wrapper);

          while (index--) {
            args[index] = arguments[index];
          }

          var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
          length -= holders.length;

          if (length < arity) {
            return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
          }

          var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          return apply(fn, this, args);
        }

        return wrapper;
      }

      function createFind(findIndexFunc) {
        return function (collection, predicate, fromIndex) {
          var iterable = Object(collection);

          if (!isArrayLike(collection)) {
            var iteratee = getIteratee(predicate, 3);
            collection = keys(collection);

            predicate = function predicate(key) {
              return iteratee(iterable[key], key, iterable);
            };
          }

          var index = findIndexFunc(collection, predicate, fromIndex);
          return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
        };
      }

      function createFlow(fromRight) {
        return flatRest(function (funcs) {
          var length = funcs.length,
              index = length,
              prereq = LodashWrapper.prototype.thru;

          if (fromRight) {
            funcs.reverse();
          }

          while (index--) {
            var func = funcs[index];

            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }

            if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
              var wrapper = new LodashWrapper([], true);
            }
          }

          index = wrapper ? index : length;

          while (++index < length) {
            func = funcs[index];
            var funcName = getFuncName(func),
                data = funcName == 'wrapper' ? getData(func) : undefined;

            if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
              wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
            } else {
              wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
            }
          }

          return function () {
            var args = arguments,
                value = args[0];

            if (wrapper && args.length == 1 && isArray(value)) {
              return wrapper.plant(value).value();
            }

            var index = 0,
                result = length ? funcs[index].apply(this, args) : value;

            while (++index < length) {
              result = funcs[index].call(this, result);
            }

            return result;
          };
        });
      }

      function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
        var isAry = bitmask & WRAP_ARY_FLAG,
            isBind = bitmask & WRAP_BIND_FLAG,
            isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
            isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
            isFlip = bitmask & WRAP_FLIP_FLAG,
            Ctor = isBindKey ? undefined : createCtor(func);

        function wrapper() {
          var length = arguments.length,
              args = Array(length),
              index = length;

          while (index--) {
            args[index] = arguments[index];
          }

          if (isCurried) {
            var placeholder = getHolder(wrapper),
                holdersCount = countHolders(args, placeholder);
          }

          if (partials) {
            args = composeArgs(args, partials, holders, isCurried);
          }

          if (partialsRight) {
            args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
          }

          length -= holdersCount;

          if (isCurried && length < arity) {
            var newHolders = replaceHolders(args, placeholder);
            return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
          }

          var thisBinding = isBind ? thisArg : this,
              fn = isBindKey ? thisBinding[func] : func;
          length = args.length;

          if (argPos) {
            args = reorder(args, argPos);
          } else if (isFlip && length > 1) {
            args.reverse();
          }

          if (isAry && ary < length) {
            args.length = ary;
          }

          if (this && this !== root && this instanceof wrapper) {
            fn = Ctor || createCtor(fn);
          }

          return fn.apply(thisBinding, args);
        }

        return wrapper;
      }

      function createInverter(setter, toIteratee) {
        return function (object, iteratee) {
          return baseInverter(object, setter, toIteratee(iteratee), {});
        };
      }

      function createMathOperation(operator, defaultValue) {
        return function (value, other) {
          var result;

          if (value === undefined && other === undefined) {
            return defaultValue;
          }

          if (value !== undefined) {
            result = value;
          }

          if (other !== undefined) {
            if (result === undefined) {
              return other;
            }

            if (typeof value == 'string' || typeof other == 'string') {
              value = baseToString(value);
              other = baseToString(other);
            } else {
              value = baseToNumber(value);
              other = baseToNumber(other);
            }

            result = operator(value, other);
          }

          return result;
        };
      }

      function createOver(arrayFunc) {
        return flatRest(function (iteratees) {
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          return baseRest(function (args) {
            var thisArg = this;
            return arrayFunc(iteratees, function (iteratee) {
              return apply(iteratee, thisArg, args);
            });
          });
        });
      }

      function createPadding(length, chars) {
        chars = chars === undefined ? ' ' : baseToString(chars);
        var charsLength = chars.length;

        if (charsLength < 2) {
          return charsLength ? baseRepeat(chars, length) : chars;
        }

        var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
        return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
      }

      function createPartial(func, bitmask, thisArg, partials) {
        var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);

        function wrapper() {
          var argsIndex = -1,
              argsLength = arguments.length,
              leftIndex = -1,
              leftLength = partials.length,
              args = Array(leftLength + argsLength),
              fn = this && this !== root && this instanceof wrapper ? Ctor : func;

          while (++leftIndex < leftLength) {
            args[leftIndex] = partials[leftIndex];
          }

          while (argsLength--) {
            args[leftIndex++] = arguments[++argsIndex];
          }

          return apply(fn, isBind ? thisArg : this, args);
        }

        return wrapper;
      }

      function createRange(fromRight) {
        return function (start, end, step) {
          if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
            end = step = undefined;
          }

          start = toFinite(start);

          if (end === undefined) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }

          step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
          return baseRange(start, end, step, fromRight);
        };
      }

      function createRelationalOperation(operator) {
        return function (value, other) {
          if (!(typeof value == 'string' && typeof other == 'string')) {
            value = toNumber(value);
            other = toNumber(other);
          }

          return operator(value, other);
        };
      }

      function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
        var isCurry = bitmask & WRAP_CURRY_FLAG,
            newHolders = isCurry ? holders : undefined,
            newHoldersRight = isCurry ? undefined : holders,
            newPartials = isCurry ? partials : undefined,
            newPartialsRight = isCurry ? undefined : partials;
        bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
        bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

        if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
          bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
        }

        var newData = [func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity];
        var result = wrapFunc.apply(undefined, newData);

        if (isLaziable(func)) {
          setData(result, newData);
        }

        result.placeholder = placeholder;
        return setWrapToString(result, func, bitmask);
      }

      function createRound(methodName) {
        var func = Math[methodName];
        return function (number, precision) {
          number = toNumber(number);
          precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);

          if (precision) {
            var pair = (toString(number) + 'e').split('e'),
                value = func(pair[0] + 'e' + (+pair[1] + precision));
            pair = (toString(value) + 'e').split('e');
            return +(pair[0] + 'e' + (+pair[1] - precision));
          }

          return func(number);
        };
      }

      var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY) ? noop : function (values) {
        return new Set(values);
      };

      function createToPairs(keysFunc) {
        return function (object) {
          var tag = getTag(object);

          if (tag == mapTag) {
            return mapToArray(object);
          }

          if (tag == setTag) {
            return setToPairs(object);
          }

          return baseToPairs(object, keysFunc(object));
        };
      }

      function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
        var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;

        if (!isBindKey && typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        var length = partials ? partials.length : 0;

        if (!length) {
          bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
          partials = holders = undefined;
        }

        ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
        arity = arity === undefined ? arity : toInteger(arity);
        length -= holders ? holders.length : 0;

        if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
          var partialsRight = partials,
              holdersRight = holders;
          partials = holders = undefined;
        }

        var data = isBindKey ? undefined : getData(func);
        var newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

        if (data) {
          mergeData(newData, data);
        }

        func = newData[0];
        bitmask = newData[1];
        thisArg = newData[2];
        partials = newData[3];
        holders = newData[4];
        arity = newData[9] = newData[9] === undefined ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);

        if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
          bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
        }

        if (!bitmask || bitmask == WRAP_BIND_FLAG) {
          var result = createBind(func, bitmask, thisArg);
        } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
          result = createCurry(func, bitmask, arity);
        } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
          result = createPartial(func, bitmask, thisArg, partials);
        } else {
          result = createHybrid.apply(undefined, newData);
        }

        var setter = data ? baseSetData : setData;
        return setWrapToString(setter(result, newData), func, bitmask);
      }

      function customDefaultsAssignIn(objValue, srcValue, key, object) {
        if (objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
          return srcValue;
        }

        return objValue;
      }

      function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
        if (isObject(objValue) && isObject(srcValue)) {
          stack.set(srcValue, objValue);
          baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
          stack['delete'](srcValue);
        }

        return objValue;
      }

      function customOmitClone(value) {
        return isPlainObject(value) ? undefined : value;
      }

      function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            arrLength = array.length,
            othLength = other.length;

        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }

        var stacked = stack.get(array);

        if (stacked && stack.get(other)) {
          return stacked == other;
        }

        var index = -1,
            result = true,
            seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
        stack.set(array, other);
        stack.set(other, array);

        while (++index < arrLength) {
          var arrValue = array[index],
              othValue = other[index];

          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
          }

          if (compared !== undefined) {
            if (compared) {
              continue;
            }

            result = false;
            break;
          }

          if (seen) {
            if (!arraySome(other, function (othValue, othIndex) {
              if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
          }
        }

        stack['delete'](array);
        stack['delete'](other);
        return result;
      }

      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false;
            }

            object = object.buffer;
            other = other.buffer;

          case arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
              return false;
            }

            return true;

          case boolTag:
          case dateTag:
          case numberTag:
            return eq(+object, +other);

          case errorTag:
            return object.name == other.name && object.message == other.message;

          case regexpTag:
          case stringTag:
            return object == other + '';

          case mapTag:
            var convert = mapToArray;

          case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);

            if (object.size != other.size && !isPartial) {
              return false;
            }

            var stacked = stack.get(object);

            if (stacked) {
              return stacked == other;
            }

            bitmask |= COMPARE_UNORDERED_FLAG;
            stack.set(object, other);
            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack['delete'](object);
            return result;

          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }

        }

        return false;
      }

      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            objProps = getAllKeys(object),
            objLength = objProps.length,
            othProps = getAllKeys(other),
            othLength = othProps.length;

        if (objLength != othLength && !isPartial) {
          return false;
        }

        var index = objLength;

        while (index--) {
          var key = objProps[index];

          if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
            return false;
          }
        }

        var stacked = stack.get(object);

        if (stacked && stack.get(other)) {
          return stacked == other;
        }

        var result = true;
        stack.set(object, other);
        stack.set(other, object);
        var skipCtor = isPartial;

        while (++index < objLength) {
          key = objProps[index];
          var objValue = object[key],
              othValue = other[key];

          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
          }

          if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
          }

          skipCtor || (skipCtor = key == 'constructor');
        }

        if (result && !skipCtor) {
          var objCtor = object.constructor,
              othCtor = other.constructor;

          if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
            result = false;
          }
        }

        stack['delete'](object);
        stack['delete'](other);
        return result;
      }

      function flatRest(func) {
        return setToString(overRest(func, undefined, flatten), func + '');
      }

      function getAllKeys(object) {
        return baseGetAllKeys(object, keys, getSymbols);
      }

      function getAllKeysIn(object) {
        return baseGetAllKeys(object, keysIn, getSymbolsIn);
      }

      var getData = !metaMap ? noop : function (func) {
        return metaMap.get(func);
      };

      function getFuncName(func) {
        var result = func.name + '',
            array = realNames[result],
            length = hasOwnProperty.call(realNames, result) ? array.length : 0;

        while (length--) {
          var data = array[length],
              otherFunc = data.func;

          if (otherFunc == null || otherFunc == func) {
            return data.name;
          }
        }

        return result;
      }

      function getHolder(func) {
        var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
        return object.placeholder;
      }

      function getIteratee() {
        var result = lodash.iteratee || iteratee;
        result = result === iteratee ? baseIteratee : result;
        return arguments.length ? result(arguments[0], arguments[1]) : result;
      }

      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
      }

      function getMatchData(object) {
        var result = keys(object),
            length = result.length;

        while (length--) {
          var key = result[length],
              value = object[key];
          result[length] = [key, value, isStrictComparable(value)];
        }

        return result;
      }

      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : undefined;
      }

      function getRawTag(value) {
        var isOwn = hasOwnProperty.call(value, symToStringTag),
            tag = value[symToStringTag];

        try {
          value[symToStringTag] = undefined;
          var unmasked = true;
        } catch (e) {}

        var result = nativeObjectToString.call(value);

        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }

        return result;
      }

      var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
        if (object == null) {
          return [];
        }

        object = Object(object);
        return arrayFilter(nativeGetSymbols(object), function (symbol) {
          return propertyIsEnumerable.call(object, symbol);
        });
      };
      var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
        var result = [];

        while (object) {
          arrayPush(result, getSymbols(object));
          object = getPrototype(object);
        }

        return result;
      };
      var getTag = baseGetTag;

      if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
        getTag = function getTag(value) {
          var result = baseGetTag(value),
              Ctor = result == objectTag ? value.constructor : undefined,
              ctorString = Ctor ? toSource(Ctor) : '';

          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag;

              case mapCtorString:
                return mapTag;

              case promiseCtorString:
                return promiseTag;

              case setCtorString:
                return setTag;

              case weakMapCtorString:
                return weakMapTag;
            }
          }

          return result;
        };
      }

      function getView(start, end, transforms) {
        var index = -1,
            length = transforms.length;

        while (++index < length) {
          var data = transforms[index],
              size = data.size;

          switch (data.type) {
            case 'drop':
              start += size;
              break;

            case 'dropRight':
              end -= size;
              break;

            case 'take':
              end = nativeMin(end, start + size);
              break;

            case 'takeRight':
              start = nativeMax(start, end - size);
              break;
          }
        }

        return {
          'start': start,
          'end': end
        };
      }

      function getWrapDetails(source) {
        var match = source.match(reWrapDetails);
        return match ? match[1].split(reSplitDetails) : [];
      }

      function hasPath(object, path, hasFunc) {
        path = castPath(path, object);
        var index = -1,
            length = path.length,
            result = false;

        while (++index < length) {
          var key = toKey(path[index]);

          if (!(result = object != null && hasFunc(object, key))) {
            break;
          }

          object = object[key];
        }

        if (result || ++index != length) {
          return result;
        }

        length = object == null ? 0 : object.length;
        return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
      }

      function initCloneArray(array) {
        var length = array.length,
            result = new array.constructor(length);

        if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
          result.index = array.index;
          result.input = array.input;
        }

        return result;
      }

      function initCloneObject(object) {
        return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
      }

      function initCloneByTag(object, tag, isDeep) {
        var Ctor = object.constructor;

        switch (tag) {
          case arrayBufferTag:
            return cloneArrayBuffer(object);

          case boolTag:
          case dateTag:
            return new Ctor(+object);

          case dataViewTag:
            return cloneDataView(object, isDeep);

          case float32Tag:
          case float64Tag:
          case int8Tag:
          case int16Tag:
          case int32Tag:
          case uint8Tag:
          case uint8ClampedTag:
          case uint16Tag:
          case uint32Tag:
            return cloneTypedArray(object, isDeep);

          case mapTag:
            return new Ctor();

          case numberTag:
          case stringTag:
            return new Ctor(object);

          case regexpTag:
            return cloneRegExp(object);

          case setTag:
            return new Ctor();

          case symbolTag:
            return cloneSymbol(object);
        }
      }

      function insertWrapDetails(source, details) {
        var length = details.length;

        if (!length) {
          return source;
        }

        var lastIndex = length - 1;
        details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
        details = details.join(length > 2 ? ', ' : ' ');
        return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
      }

      function isFlattenable(value) {
        return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
      }

      function isIndex(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
      }

      function isIterateeCall(value, index, object) {
        if (!isObject(object)) {
          return false;
        }

        var type = typeof index;

        if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
          return eq(object[index], value);
        }

        return false;
      }

      function isKey(value, object) {
        if (isArray(value)) {
          return false;
        }

        var type = typeof value;

        if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
          return true;
        }

        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
      }

      function isKeyable(value) {
        var type = typeof value;
        return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
      }

      function isLaziable(func) {
        var funcName = getFuncName(func),
            other = lodash[funcName];

        if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
          return false;
        }

        if (func === other) {
          return true;
        }

        var data = getData(other);
        return !!data && func === data[0];
      }

      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }

      var isMaskable = coreJsData ? isFunction : stubFalse;

      function isPrototype(value) {
        var Ctor = value && value.constructor,
            proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
        return value === proto;
      }

      function isStrictComparable(value) {
        return value === value && !isObject(value);
      }

      function matchesStrictComparable(key, srcValue) {
        return function (object) {
          if (object == null) {
            return false;
          }

          return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
        };
      }

      function memoizeCapped(func) {
        var result = memoize(func, function (key) {
          if (cache.size === MAX_MEMOIZE_SIZE) {
            cache.clear();
          }

          return key;
        });
        var cache = result.cache;
        return result;
      }

      function mergeData(data, source) {
        var bitmask = data[1],
            srcBitmask = source[1],
            newBitmask = bitmask | srcBitmask,
            isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
        var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;

        if (!(isCommon || isCombo)) {
          return data;
        }

        if (srcBitmask & WRAP_BIND_FLAG) {
          data[2] = source[2];
          newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
        }

        var value = source[3];

        if (value) {
          var partials = data[3];
          data[3] = partials ? composeArgs(partials, value, source[4]) : value;
          data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
        }

        value = source[5];

        if (value) {
          partials = data[5];
          data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
          data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
        }

        value = source[7];

        if (value) {
          data[7] = value;
        }

        if (srcBitmask & WRAP_ARY_FLAG) {
          data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
        }

        if (data[9] == null) {
          data[9] = source[9];
        }

        data[0] = source[0];
        data[1] = newBitmask;
        return data;
      }

      function nativeKeysIn(object) {
        var result = [];

        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }

        return result;
      }

      function objectToString(value) {
        return nativeObjectToString.call(value);
      }

      function overRest(func, start, transform) {
        start = nativeMax(start === undefined ? func.length - 1 : start, 0);
        return function () {
          var args = arguments,
              index = -1,
              length = nativeMax(args.length - start, 0),
              array = Array(length);

          while (++index < length) {
            array[index] = args[start + index];
          }

          index = -1;
          var otherArgs = Array(start + 1);

          while (++index < start) {
            otherArgs[index] = args[index];
          }

          otherArgs[start] = transform(array);
          return apply(func, this, otherArgs);
        };
      }

      function parent(object, path) {
        return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
      }

      function reorder(array, indexes) {
        var arrLength = array.length,
            length = nativeMin(indexes.length, arrLength),
            oldArray = copyArray(array);

        while (length--) {
          var index = indexes[length];
          array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
        }

        return array;
      }

      var setData = shortOut(baseSetData);

      var setTimeout = ctxSetTimeout || function (func, wait) {
        return root.setTimeout(func, wait);
      };

      var setToString = shortOut(baseSetToString);

      function setWrapToString(wrapper, reference, bitmask) {
        var source = reference + '';
        return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
      }

      function shortOut(func) {
        var count = 0,
            lastCalled = 0;
        return function () {
          var stamp = nativeNow(),
              remaining = HOT_SPAN - (stamp - lastCalled);
          lastCalled = stamp;

          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }

          return func.apply(undefined, arguments);
        };
      }

      function shuffleSelf(array, size) {
        var index = -1,
            length = array.length,
            lastIndex = length - 1;
        size = size === undefined ? length : size;

        while (++index < size) {
          var rand = baseRandom(index, lastIndex),
              value = array[rand];
          array[rand] = array[index];
          array[index] = value;
        }

        array.length = size;
        return array;
      }

      var stringToPath = memoizeCapped(function (string) {
        var result = [];

        if (string.charCodeAt(0) === 46) {
            result.push('');
          }

        string.replace(rePropName, function (match, number, quote, subString) {
          result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
        });
        return result;
      });

      function toKey(value) {
        if (typeof value == 'string' || isSymbol(value)) {
          return value;
        }

        var result = value + '';
        return result == '0' && 1 / value == -INFINITY ? '-0' : result;
      }

      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {}

          try {
            return func + '';
          } catch (e) {}
        }

        return '';
      }

      function updateWrapDetails(details, bitmask) {
        arrayEach(wrapFlags, function (pair) {
          var value = '_.' + pair[0];

          if (bitmask & pair[1] && !arrayIncludes(details, value)) {
            details.push(value);
          }
        });
        return details.sort();
      }

      function wrapperClone(wrapper) {
        if (wrapper instanceof LazyWrapper) {
          return wrapper.clone();
        }

        var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
        result.__actions__ = copyArray(wrapper.__actions__);
        result.__index__ = wrapper.__index__;
        result.__values__ = wrapper.__values__;
        return result;
      }

      function chunk(array, size, guard) {
        if (guard ? isIterateeCall(array, size, guard) : size === undefined) {
          size = 1;
        } else {
          size = nativeMax(toInteger(size), 0);
        }

        var length = array == null ? 0 : array.length;

        if (!length || size < 1) {
          return [];
        }

        var index = 0,
            resIndex = 0,
            result = Array(nativeCeil(length / size));

        while (index < length) {
          result[resIndex++] = baseSlice(array, index, index += size);
        }

        return result;
      }

      function compact(array) {
        var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index];

          if (value) {
            result[resIndex++] = value;
          }
        }

        return result;
      }

      function concat() {
        var length = arguments.length;

        if (!length) {
          return [];
        }

        var args = Array(length - 1),
            array = arguments[0],
            index = length;

        while (index--) {
          args[index - 1] = arguments[index];
        }

        return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
      }

      var difference = baseRest(function (array, values) {
        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
      });
      var differenceBy = baseRest(function (array, values) {
        var iteratee = last(values);

        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }

        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2)) : [];
      });
      var differenceWith = baseRest(function (array, values) {
        var comparator = last(values);

        if (isArrayLikeObject(comparator)) {
          comparator = undefined;
        }

        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
      });

      function drop(array, n, guard) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        return baseSlice(array, n < 0 ? 0 : n, length);
      }

      function dropRight(array, n, guard) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }

      function dropRightWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
      }

      function dropWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
      }

      function fill(array, value, start, end) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
          start = 0;
          end = length;
        }

        return baseFill(array, value, start, end);
      }

      function findIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return -1;
        }

        var index = fromIndex == null ? 0 : toInteger(fromIndex);

        if (index < 0) {
          index = nativeMax(length + index, 0);
        }

        return baseFindIndex(array, getIteratee(predicate, 3), index);
      }

      function findLastIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return -1;
        }

        var index = length - 1;

        if (fromIndex !== undefined) {
          index = toInteger(fromIndex);
          index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
        }

        return baseFindIndex(array, getIteratee(predicate, 3), index, true);
      }

      function flatten(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, 1) : [];
      }

      function flattenDeep(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, INFINITY) : [];
      }

      function flattenDepth(array, depth) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        depth = depth === undefined ? 1 : toInteger(depth);
        return baseFlatten(array, depth);
      }

      function fromPairs(pairs) {
        var index = -1,
            length = pairs == null ? 0 : pairs.length,
            result = {};

        while (++index < length) {
          var pair = pairs[index];
          result[pair[0]] = pair[1];
        }

        return result;
      }

      function head(array) {
        return array && array.length ? array[0] : undefined;
      }

      function indexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return -1;
        }

        var index = fromIndex == null ? 0 : toInteger(fromIndex);

        if (index < 0) {
          index = nativeMax(length + index, 0);
        }

        return baseIndexOf(array, value, index);
      }

      function initial(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 0, -1) : [];
      }

      var intersection = baseRest(function (arrays) {
        var mapped = arrayMap(arrays, castArrayLikeObject);
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
      });
      var intersectionBy = baseRest(function (arrays) {
        var iteratee = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);

        if (iteratee === last(mapped)) {
          iteratee = undefined;
        } else {
          mapped.pop();
        }

        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee, 2)) : [];
      });
      var intersectionWith = baseRest(function (arrays) {
        var comparator = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);
        comparator = typeof comparator == 'function' ? comparator : undefined;

        if (comparator) {
          mapped.pop();
        }

        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];
      });

      function join(array, separator) {
        return array == null ? '' : nativeJoin.call(array, separator);
      }

      function last(array) {
        var length = array == null ? 0 : array.length;
        return length ? array[length - 1] : undefined;
      }

      function lastIndexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return -1;
        }

        var index = length;

        if (fromIndex !== undefined) {
          index = toInteger(fromIndex);
          index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
        }

        return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
      }

      function nth(array, n) {
        return array && array.length ? baseNth(array, toInteger(n)) : undefined;
      }

      var pull = baseRest(pullAll);

      function pullAll(array, values) {
        return array && array.length && values && values.length ? basePullAll(array, values) : array;
      }

      function pullAllBy(array, values, iteratee) {
        return array && array.length && values && values.length ? basePullAll(array, values, getIteratee(iteratee, 2)) : array;
      }

      function pullAllWith(array, values, comparator) {
        return array && array.length && values && values.length ? basePullAll(array, values, undefined, comparator) : array;
      }

      var pullAt = flatRest(function (array, indexes) {
        var length = array == null ? 0 : array.length,
            result = baseAt(array, indexes);
        basePullAt(array, arrayMap(indexes, function (index) {
          return isIndex(index, length) ? +index : index;
        }).sort(compareAscending));
        return result;
      });

      function remove(array, predicate) {
        var result = [];

        if (!(array && array.length)) {
          return result;
        }

        var index = -1,
            indexes = [],
            length = array.length;
        predicate = getIteratee(predicate, 3);

        while (++index < length) {
          var value = array[index];

          if (predicate(value, index, array)) {
            result.push(value);
            indexes.push(index);
          }
        }

        basePullAt(array, indexes);
        return result;
      }

      function reverse(array) {
        return array == null ? array : nativeReverse.call(array);
      }

      function slice(array, start, end) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
          start = 0;
          end = length;
        } else {
          start = start == null ? 0 : toInteger(start);
          end = end === undefined ? length : toInteger(end);
        }

        return baseSlice(array, start, end);
      }

      function sortedIndex(array, value) {
        return baseSortedIndex(array, value);
      }

      function sortedIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
      }

      function sortedIndexOf(array, value) {
        var length = array == null ? 0 : array.length;

        if (length) {
          var index = baseSortedIndex(array, value);

          if (index < length && eq(array[index], value)) {
            return index;
          }
        }

        return -1;
      }

      function sortedLastIndex(array, value) {
        return baseSortedIndex(array, value, true);
      }

      function sortedLastIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
      }

      function sortedLastIndexOf(array, value) {
        var length = array == null ? 0 : array.length;

        if (length) {
          var index = baseSortedIndex(array, value, true) - 1;

          if (eq(array[index], value)) {
            return index;
          }
        }

        return -1;
      }

      function sortedUniq(array) {
        return array && array.length ? baseSortedUniq(array) : [];
      }

      function sortedUniqBy(array, iteratee) {
        return array && array.length ? baseSortedUniq(array, getIteratee(iteratee, 2)) : [];
      }

      function tail(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 1, length) : [];
      }

      function take(array, n, guard) {
        if (!(array && array.length)) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }

      function takeRight(array, n, guard) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, n < 0 ? 0 : n, length);
      }

      function takeRightWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
      }

      function takeWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
      }

      var union = baseRest(function (arrays) {
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
      });
      var unionBy = baseRest(function (arrays) {
        var iteratee = last(arrays);

        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }

        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
      });
      var unionWith = baseRest(function (arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == 'function' ? comparator : undefined;
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
      });

      function uniq(array) {
        return array && array.length ? baseUniq(array) : [];
      }

      function uniqBy(array, iteratee) {
        return array && array.length ? baseUniq(array, getIteratee(iteratee, 2)) : [];
      }

      function uniqWith(array, comparator) {
        comparator = typeof comparator == 'function' ? comparator : undefined;
        return array && array.length ? baseUniq(array, undefined, comparator) : [];
      }

      function unzip(array) {
        if (!(array && array.length)) {
          return [];
        }

        var length = 0;
        array = arrayFilter(array, function (group) {
          if (isArrayLikeObject(group)) {
            length = nativeMax(group.length, length);
            return true;
          }
        });
        return baseTimes(length, function (index) {
          return arrayMap(array, baseProperty(index));
        });
      }

      function unzipWith(array, iteratee) {
        if (!(array && array.length)) {
          return [];
        }

        var result = unzip(array);

        if (iteratee == null) {
          return result;
        }

        return arrayMap(result, function (group) {
          return apply(iteratee, undefined, group);
        });
      }

      var without = baseRest(function (array, values) {
        return isArrayLikeObject(array) ? baseDifference(array, values) : [];
      });
      var xor = baseRest(function (arrays) {
        return baseXor(arrayFilter(arrays, isArrayLikeObject));
      });
      var xorBy = baseRest(function (arrays) {
        var iteratee = last(arrays);

        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }

        return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
      });
      var xorWith = baseRest(function (arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == 'function' ? comparator : undefined;
        return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
      });
      var zip = baseRest(unzip);

      function zipObject(props, values) {
        return baseZipObject(props || [], values || [], assignValue);
      }

      function zipObjectDeep(props, values) {
        return baseZipObject(props || [], values || [], baseSet);
      }

      var zipWith = baseRest(function (arrays) {
        var length = arrays.length,
            iteratee = length > 1 ? arrays[length - 1] : undefined;
        iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
        return unzipWith(arrays, iteratee);
      });

      function chain(value) {
        var result = lodash(value);
        result.__chain__ = true;
        return result;
      }

      function tap(value, interceptor) {
        interceptor(value);
        return value;
      }

      function thru(value, interceptor) {
        return interceptor(value);
      }

      var wrapperAt = flatRest(function (paths) {
        var length = paths.length,
            start = length ? paths[0] : 0,
            value = this.__wrapped__,
            interceptor = function interceptor(object) {
          return baseAt(object, paths);
        };

        if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
          return this.thru(interceptor);
        }

        value = value.slice(start, +start + (length ? 1 : 0));

        value.__actions__.push({
          'func': thru,
          'args': [interceptor],
          'thisArg': undefined
        });

        return new LodashWrapper(value, this.__chain__).thru(function (array) {
          if (length && !array.length) {
            array.push(undefined);
          }

          return array;
        });
      });

      function wrapperChain() {
        return chain(this);
      }

      function wrapperCommit() {
        return new LodashWrapper(this.value(), this.__chain__);
      }

      function wrapperNext() {
        if (this.__values__ === undefined) {
          this.__values__ = toArray(this.value());
        }

        var done = this.__index__ >= this.__values__.length,
            value = done ? undefined : this.__values__[this.__index__++];
        return {
          'done': done,
          'value': value
        };
      }

      function wrapperToIterator() {
        return this;
      }

      function wrapperPlant(value) {
        var result,
            parent = this;

        while (parent instanceof baseLodash) {
          var clone = wrapperClone(parent);
          clone.__index__ = 0;
          clone.__values__ = undefined;

          if (result) {
            previous.__wrapped__ = clone;
          } else {
            result = clone;
          }

          var previous = clone;
          parent = parent.__wrapped__;
        }

        previous.__wrapped__ = value;
        return result;
      }

      function wrapperReverse() {
        var value = this.__wrapped__;

        if (value instanceof LazyWrapper) {
          var wrapped = value;

          if (this.__actions__.length) {
            wrapped = new LazyWrapper(this);
          }

          wrapped = wrapped.reverse();

          wrapped.__actions__.push({
            'func': thru,
            'args': [reverse],
            'thisArg': undefined
          });

          return new LodashWrapper(wrapped, this.__chain__);
        }

        return this.thru(reverse);
      }

      function wrapperValue() {
        return baseWrapperValue(this.__wrapped__, this.__actions__);
      }

      var countBy = createAggregator(function (result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          ++result[key];
        } else {
          baseAssignValue(result, key, 1);
        }
      });

      function every(collection, predicate, guard) {
        var func = isArray(collection) ? arrayEvery : baseEvery;

        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined;
        }

        return func(collection, getIteratee(predicate, 3));
      }

      function filter(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, getIteratee(predicate, 3));
      }

      var find = createFind(findIndex);
      var findLast = createFind(findLastIndex);

      function flatMap(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), 1);
      }

      function flatMapDeep(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), INFINITY);
      }

      function flatMapDepth(collection, iteratee, depth) {
        depth = depth === undefined ? 1 : toInteger(depth);
        return baseFlatten(map(collection, iteratee), depth);
      }

      function forEach(collection, iteratee) {
        var func = isArray(collection) ? arrayEach : baseEach;
        return func(collection, getIteratee(iteratee, 3));
      }

      function forEachRight(collection, iteratee) {
        var func = isArray(collection) ? arrayEachRight : baseEachRight;
        return func(collection, getIteratee(iteratee, 3));
      }

      var groupBy = createAggregator(function (result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          result[key].push(value);
        } else {
          baseAssignValue(result, key, [value]);
        }
      });

      function includes(collection, value, fromIndex, guard) {
        collection = isArrayLike(collection) ? collection : values(collection);
        fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
        var length = collection.length;

        if (fromIndex < 0) {
          fromIndex = nativeMax(length + fromIndex, 0);
        }

        return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
      }

      var invokeMap = baseRest(function (collection, path, args) {
        var index = -1,
            isFunc = typeof path == 'function',
            result = isArrayLike(collection) ? Array(collection.length) : [];
        baseEach(collection, function (value) {
          result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
        });
        return result;
      });
      var keyBy = createAggregator(function (result, value, key) {
        baseAssignValue(result, key, value);
      });

      function map(collection, iteratee) {
        var func = isArray(collection) ? arrayMap : baseMap;
        return func(collection, getIteratee(iteratee, 3));
      }

      function orderBy(collection, iteratees, orders, guard) {
        if (collection == null) {
          return [];
        }

        if (!isArray(iteratees)) {
          iteratees = iteratees == null ? [] : [iteratees];
        }

        orders = guard ? undefined : orders;

        if (!isArray(orders)) {
          orders = orders == null ? [] : [orders];
        }

        return baseOrderBy(collection, iteratees, orders);
      }

      var partition = createAggregator(function (result, value, key) {
        result[key ? 0 : 1].push(value);
      }, function () {
        return [[], []];
      });

      function reduce(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduce : baseReduce,
            initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
      }

      function reduceRight(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduceRight : baseReduce,
            initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
      }

      function reject(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, negate(getIteratee(predicate, 3)));
      }

      function sample(collection) {
        var func = isArray(collection) ? arraySample : baseSample;
        return func(collection);
      }

      function sampleSize(collection, n, guard) {
        if (guard ? isIterateeCall(collection, n, guard) : n === undefined) {
          n = 1;
        } else {
          n = toInteger(n);
        }

        var func = isArray(collection) ? arraySampleSize : baseSampleSize;
        return func(collection, n);
      }

      function shuffle(collection) {
        var func = isArray(collection) ? arrayShuffle : baseShuffle;
        return func(collection);
      }

      function size(collection) {
        if (collection == null) {
          return 0;
        }

        if (isArrayLike(collection)) {
          return isString(collection) ? stringSize(collection) : collection.length;
        }

        var tag = getTag(collection);

        if (tag == mapTag || tag == setTag) {
          return collection.size;
        }

        return baseKeys(collection).length;
      }

      function some(collection, predicate, guard) {
        var func = isArray(collection) ? arraySome : baseSome;

        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined;
        }

        return func(collection, getIteratee(predicate, 3));
      }

      var sortBy = baseRest(function (collection, iteratees) {
        if (collection == null) {
          return [];
        }

        var length = iteratees.length;

        if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
          iteratees = [];
        } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
          iteratees = [iteratees[0]];
        }

        return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
      });

      var now = ctxNow || function () {
        return root.Date.now();
      };

      function after(n, func) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        n = toInteger(n);
        return function () {
          if (--n < 1) {
            return func.apply(this, arguments);
          }
        };
      }

      function ary(func, n, guard) {
        n = guard ? undefined : n;
        n = func && n == null ? func.length : n;
        return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
      }

      function before(n, func) {
        var result;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        n = toInteger(n);
        return function () {
          if (--n > 0) {
            result = func.apply(this, arguments);
          }

          if (n <= 1) {
            func = undefined;
          }

          return result;
        };
      }

      var bind = baseRest(function (func, thisArg, partials) {
        var bitmask = WRAP_BIND_FLAG;

        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bind));
          bitmask |= WRAP_PARTIAL_FLAG;
        }

        return createWrap(func, bitmask, thisArg, partials, holders);
      });
      var bindKey = baseRest(function (object, key, partials) {
        var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;

        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bindKey));
          bitmask |= WRAP_PARTIAL_FLAG;
        }

        return createWrap(key, bitmask, object, partials, holders);
      });

      function curry(func, arity, guard) {
        arity = guard ? undefined : arity;
        var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curry.placeholder;
        return result;
      }

      function curryRight(func, arity, guard) {
        arity = guard ? undefined : arity;
        var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curryRight.placeholder;
        return result;
      }

      function debounce(func, wait, options) {
        var lastArgs,
            lastThis,
            maxWait,
            result,
            timerId,
            lastCallTime,
            lastInvokeTime = 0,
            leading = false,
            maxing = false,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        wait = toNumber(wait) || 0;

        if (isObject(options)) {
          leading = !!options.leading;
          maxing = 'maxWait' in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }

        function invokeFunc(time) {
          var args = lastArgs,
              thisArg = lastThis;
          lastArgs = lastThis = undefined;
          lastInvokeTime = time;
          result = func.apply(thisArg, args);
          return result;
        }

        function leadingEdge(time) {
          lastInvokeTime = time;
          timerId = setTimeout(timerExpired, wait);
          return leading ? invokeFunc(time) : result;
        }

        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime,
              timeWaiting = wait - timeSinceLastCall;
          return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
        }

        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime;
          return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }

        function timerExpired() {
          var time = now();

          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }

          timerId = setTimeout(timerExpired, remainingWait(time));
        }

        function trailingEdge(time) {
          timerId = undefined;

          if (trailing && lastArgs) {
            return invokeFunc(time);
          }

          lastArgs = lastThis = undefined;
          return result;
        }

        function cancel() {
          if (timerId !== undefined) {
            clearTimeout(timerId);
          }

          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = undefined;
        }

        function flush() {
          return timerId === undefined ? result : trailingEdge(now());
        }

        function debounced() {
          var time = now(),
              isInvoking = shouldInvoke(time);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;

          if (isInvoking) {
            if (timerId === undefined) {
              return leadingEdge(lastCallTime);
            }

            if (maxing) {
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }

          if (timerId === undefined) {
            timerId = setTimeout(timerExpired, wait);
          }

          return result;
        }

        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }

      var defer = baseRest(function (func, args) {
        return baseDelay(func, 1, args);
      });
      var delay = baseRest(function (func, wait, args) {
        return baseDelay(func, toNumber(wait) || 0, args);
      });

      function flip(func) {
        return createWrap(func, WRAP_FLIP_FLAG);
      }

      function memoize(func, resolver) {
        if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        var memoized = function memoized() {
          var args = arguments,
              key = resolver ? resolver.apply(this, args) : args[0],
              cache = memoized.cache;

          if (cache.has(key)) {
            return cache.get(key);
          }

          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result) || cache;
          return result;
        };

        memoized.cache = new (memoize.Cache || MapCache)();
        return memoized;
      }

      memoize.Cache = MapCache;

      function negate(predicate) {
        if (typeof predicate != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        return function () {
          var args = arguments;

          switch (args.length) {
            case 0:
              return !predicate.call(this);

            case 1:
              return !predicate.call(this, args[0]);

            case 2:
              return !predicate.call(this, args[0], args[1]);

            case 3:
              return !predicate.call(this, args[0], args[1], args[2]);
          }

          return !predicate.apply(this, args);
        };
      }

      function once(func) {
        return before(2, func);
      }

      var overArgs = castRest(function (func, transforms) {
        transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
        var funcsLength = transforms.length;
        return baseRest(function (args) {
          var index = -1,
              length = nativeMin(args.length, funcsLength);

          while (++index < length) {
            args[index] = transforms[index].call(this, args[index]);
          }

          return apply(func, this, args);
        });
      });
      var partial = baseRest(function (func, partials) {
        var holders = replaceHolders(partials, getHolder(partial));
        return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
      });
      var partialRight = baseRest(function (func, partials) {
        var holders = replaceHolders(partials, getHolder(partialRight));
        return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
      });
      var rearg = flatRest(function (func, indexes) {
        return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
      });

      function rest(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        start = start === undefined ? start : toInteger(start);
        return baseRest(func, start);
      }

      function spread(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        start = start == null ? 0 : nativeMax(toInteger(start), 0);
        return baseRest(function (args) {
          var array = args[start],
              otherArgs = castSlice(args, 0, start);

          if (array) {
            arrayPush(otherArgs, array);
          }

          return apply(func, this, otherArgs);
        });
      }

      function throttle(func, wait, options) {
        var leading = true,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        if (isObject(options)) {
          leading = 'leading' in options ? !!options.leading : leading;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }

        return debounce(func, wait, {
          'leading': leading,
          'maxWait': wait,
          'trailing': trailing
        });
      }

      function unary(func) {
        return ary(func, 1);
      }

      function wrap(value, wrapper) {
        return partial(castFunction(wrapper), value);
      }

      function castArray() {
        if (!arguments.length) {
          return [];
        }

        var value = arguments[0];
        return isArray(value) ? value : [value];
      }

      function clone(value) {
        return baseClone(value, CLONE_SYMBOLS_FLAG);
      }

      function cloneWith(value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
      }

      function cloneDeep(value) {
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
      }

      function cloneDeepWith(value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
      }

      function conformsTo(object, source) {
        return source == null || baseConformsTo(object, source, keys(source));
      }

      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }

      var gt = createRelationalOperation(baseGt);
      var gte = createRelationalOperation(function (value, other) {
        return value >= other;
      });
      var isArguments = baseIsArguments(function () {
        return arguments;
      }()) ? baseIsArguments : function (value) {
        return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
      };
      var isArray = Array.isArray;
      var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
      }

      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }

      function isBoolean(value) {
        return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
      }

      var isBuffer = nativeIsBuffer || stubFalse;
      var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

      function isElement(value) {
        return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
      }

      function isEmpty(value) {
        if (value == null) {
          return true;
        }

        if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
          return !value.length;
        }

        var tag = getTag(value);

        if (tag == mapTag || tag == setTag) {
          return !value.size;
        }

        if (isPrototype(value)) {
          return !baseKeys(value).length;
        }

        for (var key in value) {
          if (hasOwnProperty.call(value, key)) {
            return false;
          }
        }

        return true;
      }

      function isEqual(value, other) {
        return baseIsEqual(value, other);
      }

      function isEqualWith(value, other, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        var result = customizer ? customizer(value, other) : undefined;
        return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
      }

      function isError(value) {
        if (!isObjectLike(value)) {
          return false;
        }

        var tag = baseGetTag(value);
        return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value);
      }

      function isFinite(value) {
        return typeof value == 'number' && nativeIsFinite(value);
      }

      function isFunction(value) {
        if (!isObject(value)) {
          return false;
        }

        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }

      function isInteger(value) {
        return typeof value == 'number' && value == toInteger(value);
      }

      function isLength(value) {
        return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }

      function isObject(value) {
        var type = typeof value;
        return value != null && (type == 'object' || type == 'function');
      }

      function isObjectLike(value) {
        return value != null && typeof value == 'object';
      }

      var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

      function isMatch(object, source) {
        return object === source || baseIsMatch(object, source, getMatchData(source));
      }

      function isMatchWith(object, source, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseIsMatch(object, source, getMatchData(source), customizer);
      }

      function isNaN(value) {
        return isNumber(value) && value != +value;
      }

      function isNative(value) {
        if (isMaskable(value)) {
          throw new Error(CORE_ERROR_TEXT);
        }

        return baseIsNative(value);
      }

      function isNull(value) {
        return value === null;
      }

      function isNil(value) {
        return value == null;
      }

      function isNumber(value) {
        return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag;
      }

      function isPlainObject(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
          return false;
        }

        var proto = getPrototype(value);

        if (proto === null) {
          return true;
        }

        var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
        return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
      }

      var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

      function isSafeInteger(value) {
        return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
      }

      var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

      function isString(value) {
        return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
      }

      function isSymbol(value) {
        return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
      }

      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

      function isUndefined(value) {
        return value === undefined;
      }

      function isWeakMap(value) {
        return isObjectLike(value) && getTag(value) == weakMapTag;
      }

      function isWeakSet(value) {
        return isObjectLike(value) && baseGetTag(value) == weakSetTag;
      }

      var lt = createRelationalOperation(baseLt);
      var lte = createRelationalOperation(function (value, other) {
        return value <= other;
      });

      function toArray(value) {
        if (!value) {
          return [];
        }

        if (isArrayLike(value)) {
          return isString(value) ? stringToArray(value) : copyArray(value);
        }

        if (symIterator && value[symIterator]) {
          return iteratorToArray(value[symIterator]());
        }

        var tag = getTag(value),
            func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
        return func(value);
      }

      function toFinite(value) {
        if (!value) {
          return value === 0 ? value : 0;
        }

        value = toNumber(value);

        if (value === INFINITY || value === -INFINITY) {
          var sign = value < 0 ? -1 : 1;
          return sign * MAX_INTEGER;
        }

        return value === value ? value : 0;
      }

      function toInteger(value) {
        var result = toFinite(value),
            remainder = result % 1;
        return result === result ? remainder ? result - remainder : result : 0;
      }

      function toLength(value) {
        return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
      }

      function toNumber(value) {
        if (typeof value == 'number') {
          return value;
        }

        if (isSymbol(value)) {
          return NAN;
        }

        if (isObject(value)) {
          var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
          value = isObject(other) ? other + '' : other;
        }

        if (typeof value != 'string') {
          return value === 0 ? value : +value;
        }

        value = value.replace(reTrim, '');
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }

      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }

      function toSafeInteger(value) {
        return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
      }

      function toString(value) {
        return value == null ? '' : baseToString(value);
      }

      var assign = createAssigner(function (object, source) {
        if (isPrototype(source) || isArrayLike(source)) {
          copyObject(source, keys(source), object);
          return;
        }

        for (var key in source) {
          if (hasOwnProperty.call(source, key)) {
            assignValue(object, key, source[key]);
          }
        }
      });
      var assignIn = createAssigner(function (object, source) {
        copyObject(source, keysIn(source), object);
      });
      var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
        copyObject(source, keysIn(source), object, customizer);
      });
      var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
        copyObject(source, keys(source), object, customizer);
      });
      var at = flatRest(baseAt);

      function create(prototype, properties) {
        var result = baseCreate(prototype);
        return properties == null ? result : baseAssign(result, properties);
      }

      var defaults = baseRest(function (object, sources) {
        object = Object(object);
        var index = -1;
        var length = sources.length;
        var guard = length > 2 ? sources[2] : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          length = 1;
        }

        while (++index < length) {
          var source = sources[index];
          var props = keysIn(source);
          var propsIndex = -1;
          var propsLength = props.length;

          while (++propsIndex < propsLength) {
            var key = props[propsIndex];
            var value = object[key];

            if (value === undefined || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
              object[key] = source[key];
            }
          }
        }

        return object;
      });
      var defaultsDeep = baseRest(function (args) {
        args.push(undefined, customDefaultsMerge);
        return apply(mergeWith, undefined, args);
      });

      function findKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
      }

      function findLastKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
      }

      function forIn(object, iteratee) {
        return object == null ? object : baseFor(object, getIteratee(iteratee, 3), keysIn);
      }

      function forInRight(object, iteratee) {
        return object == null ? object : baseForRight(object, getIteratee(iteratee, 3), keysIn);
      }

      function forOwn(object, iteratee) {
        return object && baseForOwn(object, getIteratee(iteratee, 3));
      }

      function forOwnRight(object, iteratee) {
        return object && baseForOwnRight(object, getIteratee(iteratee, 3));
      }

      function functions(object) {
        return object == null ? [] : baseFunctions(object, keys(object));
      }

      function functionsIn(object) {
        return object == null ? [] : baseFunctions(object, keysIn(object));
      }

      function get(object, path, defaultValue) {
        var result = object == null ? undefined : baseGet(object, path);
        return result === undefined ? defaultValue : result;
      }

      function has(object, path) {
        return object != null && hasPath(object, path, baseHas);
      }

      function hasIn(object, path) {
        return object != null && hasPath(object, path, baseHasIn);
      }

      var invert = createInverter(function (result, value, key) {
        if (value != null && typeof value.toString != 'function') {
          value = nativeObjectToString.call(value);
        }

        result[value] = key;
      }, constant(identity));
      var invertBy = createInverter(function (result, value, key) {
        if (value != null && typeof value.toString != 'function') {
          value = nativeObjectToString.call(value);
        }

        if (hasOwnProperty.call(result, value)) {
          result[value].push(key);
        } else {
          result[value] = [key];
        }
      }, getIteratee);
      var invoke = baseRest(baseInvoke);

      function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }

      function keysIn(object) {
        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
      }

      function mapKeys(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);
        baseForOwn(object, function (value, key, object) {
          baseAssignValue(result, iteratee(value, key, object), value);
        });
        return result;
      }

      function mapValues(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);
        baseForOwn(object, function (value, key, object) {
          baseAssignValue(result, key, iteratee(value, key, object));
        });
        return result;
      }

      var merge = createAssigner(function (object, source, srcIndex) {
        baseMerge(object, source, srcIndex);
      });
      var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
        baseMerge(object, source, srcIndex, customizer);
      });
      var omit = flatRest(function (object, paths) {
        var result = {};

        if (object == null) {
          return result;
        }

        var isDeep = false;
        paths = arrayMap(paths, function (path) {
          path = castPath(path, object);
          isDeep || (isDeep = path.length > 1);
          return path;
        });
        copyObject(object, getAllKeysIn(object), result);

        if (isDeep) {
          result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
        }

        var length = paths.length;

        while (length--) {
          baseUnset(result, paths[length]);
        }

        return result;
      });

      function omitBy(object, predicate) {
        return pickBy(object, negate(getIteratee(predicate)));
      }

      var pick = flatRest(function (object, paths) {
        return object == null ? {} : basePick(object, paths);
      });

      function pickBy(object, predicate) {
        if (object == null) {
          return {};
        }

        var props = arrayMap(getAllKeysIn(object), function (prop) {
          return [prop];
        });
        predicate = getIteratee(predicate);
        return basePickBy(object, props, function (value, path) {
          return predicate(value, path[0]);
        });
      }

      function result(object, path, defaultValue) {
        path = castPath(path, object);
        var index = -1,
            length = path.length;

        if (!length) {
          length = 1;
          object = undefined;
        }

        while (++index < length) {
          var value = object == null ? undefined : object[toKey(path[index])];

          if (value === undefined) {
            index = length;
            value = defaultValue;
          }

          object = isFunction(value) ? value.call(object) : value;
        }

        return object;
      }

      function set(object, path, value) {
        return object == null ? object : baseSet(object, path, value);
      }

      function setWith(object, path, value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return object == null ? object : baseSet(object, path, value, customizer);
      }

      var toPairs = createToPairs(keys);
      var toPairsIn = createToPairs(keysIn);

      function transform(object, iteratee, accumulator) {
        var isArr = isArray(object),
            isArrLike = isArr || isBuffer(object) || isTypedArray(object);
        iteratee = getIteratee(iteratee, 4);

        if (accumulator == null) {
          var Ctor = object && object.constructor;

          if (isArrLike) {
            accumulator = isArr ? new Ctor() : [];
          } else if (isObject(object)) {
            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
          } else {
            accumulator = {};
          }
        }

        (isArrLike ? arrayEach : baseForOwn)(object, function (value, index, object) {
          return iteratee(accumulator, value, index, object);
        });
        return accumulator;
      }

      function unset(object, path) {
        return object == null ? true : baseUnset(object, path);
      }

      function update(object, path, updater) {
        return object == null ? object : baseUpdate(object, path, castFunction(updater));
      }

      function updateWith(object, path, updater, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
      }

      function values(object) {
        return object == null ? [] : baseValues(object, keys(object));
      }

      function valuesIn(object) {
        return object == null ? [] : baseValues(object, keysIn(object));
      }

      function clamp(number, lower, upper) {
        if (upper === undefined) {
          upper = lower;
          lower = undefined;
        }

        if (upper !== undefined) {
          upper = toNumber(upper);
          upper = upper === upper ? upper : 0;
        }

        if (lower !== undefined) {
          lower = toNumber(lower);
          lower = lower === lower ? lower : 0;
        }

        return baseClamp(toNumber(number), lower, upper);
      }

      function inRange(number, start, end) {
        start = toFinite(start);

        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }

        number = toNumber(number);
        return baseInRange(number, start, end);
      }

      function random(lower, upper, floating) {
        if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
          upper = floating = undefined;
        }

        if (floating === undefined) {
          if (typeof upper == 'boolean') {
            floating = upper;
            upper = undefined;
          } else if (typeof lower == 'boolean') {
            floating = lower;
            lower = undefined;
          }
        }

        if (lower === undefined && upper === undefined) {
          lower = 0;
          upper = 1;
        } else {
          lower = toFinite(lower);

          if (upper === undefined) {
            upper = lower;
            lower = 0;
          } else {
            upper = toFinite(upper);
          }
        }

        if (lower > upper) {
          var temp = lower;
          lower = upper;
          upper = temp;
        }

        if (floating || lower % 1 || upper % 1) {
          var rand = nativeRandom();
          return nativeMin(lower + rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1))), upper);
        }

        return baseRandom(lower, upper);
      }

      var camelCase = createCompounder(function (result, word, index) {
        word = word.toLowerCase();
        return result + (index ? capitalize(word) : word);
      });

      function capitalize(string) {
        return upperFirst(toString(string).toLowerCase());
      }

      function deburr(string) {
        string = toString(string);
        return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
      }

      function endsWith(string, target, position) {
        string = toString(string);
        target = baseToString(target);
        var length = string.length;
        position = position === undefined ? length : baseClamp(toInteger(position), 0, length);
        var end = position;
        position -= target.length;
        return position >= 0 && string.slice(position, end) == target;
      }

      function escape(string) {
        string = toString(string);
        return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
      }

      function escapeRegExp(string) {
        string = toString(string);
        return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, '\\$&') : string;
      }

      var kebabCase = createCompounder(function (result, word, index) {
        return result + (index ? '-' : '') + word.toLowerCase();
      });
      var lowerCase = createCompounder(function (result, word, index) {
        return result + (index ? ' ' : '') + word.toLowerCase();
      });
      var lowerFirst = createCaseFirst('toLowerCase');

      function pad(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;

        if (!length || strLength >= length) {
          return string;
        }

        var mid = (length - strLength) / 2;
        return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
      }

      function padEnd(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;
        return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
      }

      function padStart(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;
        return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
      }

      function parseInt(string, radix, guard) {
        if (guard || radix == null) {
          radix = 0;
        } else if (radix) {
          radix = +radix;
        }

        return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
      }

      function repeat(string, n, guard) {
        if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
          n = 1;
        } else {
          n = toInteger(n);
        }

        return baseRepeat(toString(string), n);
      }

      function replace() {
        var args = arguments,
            string = toString(args[0]);
        return args.length < 3 ? string : string.replace(args[1], args[2]);
      }

      var snakeCase = createCompounder(function (result, word, index) {
        return result + (index ? '_' : '') + word.toLowerCase();
      });

      function split(string, separator, limit) {
        if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
          separator = limit = undefined;
        }

        limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;

        if (!limit) {
          return [];
        }

        string = toString(string);

        if (string && (typeof separator == 'string' || separator != null && !isRegExp(separator))) {
          separator = baseToString(separator);

          if (!separator && hasUnicode(string)) {
            return castSlice(stringToArray(string), 0, limit);
          }
        }

        return string.split(separator, limit);
      }

      var startCase = createCompounder(function (result, word, index) {
        return result + (index ? ' ' : '') + upperFirst(word);
      });

      function startsWith(string, target, position) {
        string = toString(string);
        position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
        target = baseToString(target);
        return string.slice(position, position + target.length) == target;
      }

      function template(string, options, guard) {
        var settings = lodash.templateSettings;

        if (guard && isIterateeCall(string, options, guard)) {
          options = undefined;
        }

        string = toString(string);
        options = assignInWith({}, options, settings, customDefaultsAssignIn);
        var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
            importsKeys = keys(imports),
            importsValues = baseValues(imports, importsKeys);
        var isEscaping,
            isEvaluating,
            index = 0,
            interpolate = options.interpolate || reNoMatch,
            source = "__p += '";
        var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g');
        var sourceURL = '//# sourceURL=' + ('sourceURL' in options ? options.sourceURL : 'lodash.templateSources[' + ++templateCounter + ']') + '\n';
        string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
          interpolateValue || (interpolateValue = esTemplateValue);
          source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

          if (escapeValue) {
            isEscaping = true;
            source += "' +\n__e(" + escapeValue + ") +\n'";
          }

          if (evaluateValue) {
            isEvaluating = true;
            source += "';\n" + evaluateValue + ";\n__p += '";
          }

          if (interpolateValue) {
            source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
          }

          index = offset + match.length;
          return match;
        });
        source += "';\n";
        var variable = options.variable;

        if (!variable) {
          source = 'with (obj) {\n' + source + '\n}\n';
        }

        source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;');
        source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ', __j = Array.prototype.join;\n' + "function print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';
        var result = attempt(function () {
          return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
        });
        result.source = source;

        if (isError(result)) {
          throw result;
        }

        return result;
      }

      function toLower(value) {
        return toString(value).toLowerCase();
      }

      function toUpper(value) {
        return toString(value).toUpperCase();
      }

      function trim(string, chars, guard) {
        string = toString(string);

        if (string && (guard || chars === undefined)) {
          return string.replace(reTrim, '');
        }

        if (!string || !(chars = baseToString(chars))) {
          return string;
        }

        var strSymbols = stringToArray(string),
            chrSymbols = stringToArray(chars),
            start = charsStartIndex(strSymbols, chrSymbols),
            end = charsEndIndex(strSymbols, chrSymbols) + 1;
        return castSlice(strSymbols, start, end).join('');
      }

      function trimEnd(string, chars, guard) {
        string = toString(string);

        if (string && (guard || chars === undefined)) {
          return string.replace(reTrimEnd, '');
        }

        if (!string || !(chars = baseToString(chars))) {
          return string;
        }

        var strSymbols = stringToArray(string),
            end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
        return castSlice(strSymbols, 0, end).join('');
      }

      function trimStart(string, chars, guard) {
        string = toString(string);

        if (string && (guard || chars === undefined)) {
          return string.replace(reTrimStart, '');
        }

        if (!string || !(chars = baseToString(chars))) {
          return string;
        }

        var strSymbols = stringToArray(string),
            start = charsStartIndex(strSymbols, stringToArray(chars));
        return castSlice(strSymbols, start).join('');
      }

      function truncate(string, options) {
        var length = DEFAULT_TRUNC_LENGTH,
            omission = DEFAULT_TRUNC_OMISSION;

        if (isObject(options)) {
          var separator = 'separator' in options ? options.separator : separator;
          length = 'length' in options ? toInteger(options.length) : length;
          omission = 'omission' in options ? baseToString(options.omission) : omission;
        }

        string = toString(string);
        var strLength = string.length;

        if (hasUnicode(string)) {
          var strSymbols = stringToArray(string);
          strLength = strSymbols.length;
        }

        if (length >= strLength) {
          return string;
        }

        var end = length - stringSize(omission);

        if (end < 1) {
          return omission;
        }

        var result = strSymbols ? castSlice(strSymbols, 0, end).join('') : string.slice(0, end);

        if (separator === undefined) {
          return result + omission;
        }

        if (strSymbols) {
          end += result.length - end;
        }

        if (isRegExp(separator)) {
          if (string.slice(end).search(separator)) {
            var match,
                substring = result;

            if (!separator.global) {
              separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
            }

            separator.lastIndex = 0;

            while (match = separator.exec(substring)) {
              var newEnd = match.index;
            }

            result = result.slice(0, newEnd === undefined ? end : newEnd);
          }
        } else if (string.indexOf(baseToString(separator), end) != end) {
          var index = result.lastIndexOf(separator);

          if (index > -1) {
            result = result.slice(0, index);
          }
        }

        return result + omission;
      }

      function unescape(string) {
        string = toString(string);
        return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
      }

      var upperCase = createCompounder(function (result, word, index) {
        return result + (index ? ' ' : '') + word.toUpperCase();
      });
      var upperFirst = createCaseFirst('toUpperCase');

      function words(string, pattern, guard) {
        string = toString(string);
        pattern = guard ? undefined : pattern;

        if (pattern === undefined) {
          return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
        }

        return string.match(pattern) || [];
      }

      var attempt = baseRest(function (func, args) {
        try {
          return apply(func, undefined, args);
        } catch (e) {
          return isError(e) ? e : new Error(e);
        }
      });
      var bindAll = flatRest(function (object, methodNames) {
        arrayEach(methodNames, function (key) {
          key = toKey(key);
          baseAssignValue(object, key, bind(object[key], object));
        });
        return object;
      });

      function cond(pairs) {
        var length = pairs == null ? 0 : pairs.length,
            toIteratee = getIteratee();
        pairs = !length ? [] : arrayMap(pairs, function (pair) {
          if (typeof pair[1] != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }

          return [toIteratee(pair[0]), pair[1]];
        });
        return baseRest(function (args) {
          var index = -1;

          while (++index < length) {
            var pair = pairs[index];

            if (apply(pair[0], this, args)) {
              return apply(pair[1], this, args);
            }
          }
        });
      }

      function conforms(source) {
        return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
      }

      function constant(value) {
        return function () {
          return value;
        };
      }

      function defaultTo(value, defaultValue) {
        return value == null || value !== value ? defaultValue : value;
      }

      var flow = createFlow();
      var flowRight = createFlow(true);

      function identity(value) {
        return value;
      }

      function iteratee(func) {
        return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
      }

      function matches(source) {
        return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
      }

      function matchesProperty(path, srcValue) {
        return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
      }

      var method = baseRest(function (path, args) {
        return function (object) {
          return baseInvoke(object, path, args);
        };
      });
      var methodOf = baseRest(function (object, args) {
        return function (path) {
          return baseInvoke(object, path, args);
        };
      });

      function mixin(object, source, options) {
        var props = keys(source),
            methodNames = baseFunctions(source, props);

        if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
          options = source;
          source = object;
          object = this;
          methodNames = baseFunctions(source, keys(source));
        }

        var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
            isFunc = isFunction(object);
        arrayEach(methodNames, function (methodName) {
          var func = source[methodName];
          object[methodName] = func;

          if (isFunc) {
            object.prototype[methodName] = function () {
              var chainAll = this.__chain__;

              if (chain || chainAll) {
                var result = object(this.__wrapped__),
                    actions = result.__actions__ = copyArray(this.__actions__);
                actions.push({
                  'func': func,
                  'args': arguments,
                  'thisArg': object
                });
                result.__chain__ = chainAll;
                return result;
              }

              return func.apply(object, arrayPush([this.value()], arguments));
            };
          }
        });
        return object;
      }

      function noConflict() {
        if (root._ === this) {
          root._ = oldDash;
        }

        return this;
      }

      function noop() {}

      function nthArg(n) {
        n = toInteger(n);
        return baseRest(function (args) {
          return baseNth(args, n);
        });
      }

      var over = createOver(arrayMap);
      var overEvery = createOver(arrayEvery);
      var overSome = createOver(arraySome);

      function property(path) {
        return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
      }

      function propertyOf(object) {
        return function (path) {
          return object == null ? undefined : baseGet(object, path);
        };
      }

      var range = createRange();
      var rangeRight = createRange(true);

      function stubArray() {
        return [];
      }

      function stubFalse() {
        return false;
      }

      function stubObject() {
        return {};
      }

      function stubString() {
        return '';
      }

      function stubTrue() {
        return true;
      }

      function times(n, iteratee) {
        n = toInteger(n);

        if (n < 1 || n > MAX_SAFE_INTEGER) {
          return [];
        }

        var index = MAX_ARRAY_LENGTH,
            length = nativeMin(n, MAX_ARRAY_LENGTH);
        iteratee = getIteratee(iteratee);
        n -= MAX_ARRAY_LENGTH;
        var result = baseTimes(length, iteratee);

        while (++index < n) {
          iteratee(index);
        }

        return result;
      }

      function toPath(value) {
        if (isArray(value)) {
          return arrayMap(value, toKey);
        }

        return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
      }

      function uniqueId(prefix) {
        var id = ++idCounter;
        return toString(prefix) + id;
      }

      var add = createMathOperation(function (augend, addend) {
        return augend + addend;
      }, 0);
      var ceil = createRound('ceil');
      var divide = createMathOperation(function (dividend, divisor) {
        return dividend / divisor;
      }, 1);
      var floor = createRound('floor');

      function max(array) {
        return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
      }

      function maxBy(array, iteratee) {
        return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseGt) : undefined;
      }

      function mean(array) {
        return baseMean(array, identity);
      }

      function meanBy(array, iteratee) {
        return baseMean(array, getIteratee(iteratee, 2));
      }

      function min(array) {
        return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
      }

      function minBy(array, iteratee) {
        return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseLt) : undefined;
      }

      var multiply = createMathOperation(function (multiplier, multiplicand) {
        return multiplier * multiplicand;
      }, 1);
      var round = createRound('round');
      var subtract = createMathOperation(function (minuend, subtrahend) {
        return minuend - subtrahend;
      }, 0);

      function sum(array) {
        return array && array.length ? baseSum(array, identity) : 0;
      }

      function sumBy(array, iteratee) {
        return array && array.length ? baseSum(array, getIteratee(iteratee, 2)) : 0;
      }

      lodash.after = after;
      lodash.ary = ary;
      lodash.assign = assign;
      lodash.assignIn = assignIn;
      lodash.assignInWith = assignInWith;
      lodash.assignWith = assignWith;
      lodash.at = at;
      lodash.before = before;
      lodash.bind = bind;
      lodash.bindAll = bindAll;
      lodash.bindKey = bindKey;
      lodash.castArray = castArray;
      lodash.chain = chain;
      lodash.chunk = chunk;
      lodash.compact = compact;
      lodash.concat = concat;
      lodash.cond = cond;
      lodash.conforms = conforms;
      lodash.constant = constant;
      lodash.countBy = countBy;
      lodash.create = create;
      lodash.curry = curry;
      lodash.curryRight = curryRight;
      lodash.debounce = debounce;
      lodash.defaults = defaults;
      lodash.defaultsDeep = defaultsDeep;
      lodash.defer = defer;
      lodash.delay = delay;
      lodash.difference = difference;
      lodash.differenceBy = differenceBy;
      lodash.differenceWith = differenceWith;
      lodash.drop = drop;
      lodash.dropRight = dropRight;
      lodash.dropRightWhile = dropRightWhile;
      lodash.dropWhile = dropWhile;
      lodash.fill = fill;
      lodash.filter = filter;
      lodash.flatMap = flatMap;
      lodash.flatMapDeep = flatMapDeep;
      lodash.flatMapDepth = flatMapDepth;
      lodash.flatten = flatten;
      lodash.flattenDeep = flattenDeep;
      lodash.flattenDepth = flattenDepth;
      lodash.flip = flip;
      lodash.flow = flow;
      lodash.flowRight = flowRight;
      lodash.fromPairs = fromPairs;
      lodash.functions = functions;
      lodash.functionsIn = functionsIn;
      lodash.groupBy = groupBy;
      lodash.initial = initial;
      lodash.intersection = intersection;
      lodash.intersectionBy = intersectionBy;
      lodash.intersectionWith = intersectionWith;
      lodash.invert = invert;
      lodash.invertBy = invertBy;
      lodash.invokeMap = invokeMap;
      lodash.iteratee = iteratee;
      lodash.keyBy = keyBy;
      lodash.keys = keys;
      lodash.keysIn = keysIn;
      lodash.map = map;
      lodash.mapKeys = mapKeys;
      lodash.mapValues = mapValues;
      lodash.matches = matches;
      lodash.matchesProperty = matchesProperty;
      lodash.memoize = memoize;
      lodash.merge = merge;
      lodash.mergeWith = mergeWith;
      lodash.method = method;
      lodash.methodOf = methodOf;
      lodash.mixin = mixin;
      lodash.negate = negate;
      lodash.nthArg = nthArg;
      lodash.omit = omit;
      lodash.omitBy = omitBy;
      lodash.once = once;
      lodash.orderBy = orderBy;
      lodash.over = over;
      lodash.overArgs = overArgs;
      lodash.overEvery = overEvery;
      lodash.overSome = overSome;
      lodash.partial = partial;
      lodash.partialRight = partialRight;
      lodash.partition = partition;
      lodash.pick = pick;
      lodash.pickBy = pickBy;
      lodash.property = property;
      lodash.propertyOf = propertyOf;
      lodash.pull = pull;
      lodash.pullAll = pullAll;
      lodash.pullAllBy = pullAllBy;
      lodash.pullAllWith = pullAllWith;
      lodash.pullAt = pullAt;
      lodash.range = range;
      lodash.rangeRight = rangeRight;
      lodash.rearg = rearg;
      lodash.reject = reject;
      lodash.remove = remove;
      lodash.rest = rest;
      lodash.reverse = reverse;
      lodash.sampleSize = sampleSize;
      lodash.set = set;
      lodash.setWith = setWith;
      lodash.shuffle = shuffle;
      lodash.slice = slice;
      lodash.sortBy = sortBy;
      lodash.sortedUniq = sortedUniq;
      lodash.sortedUniqBy = sortedUniqBy;
      lodash.split = split;
      lodash.spread = spread;
      lodash.tail = tail;
      lodash.take = take;
      lodash.takeRight = takeRight;
      lodash.takeRightWhile = takeRightWhile;
      lodash.takeWhile = takeWhile;
      lodash.tap = tap;
      lodash.throttle = throttle;
      lodash.thru = thru;
      lodash.toArray = toArray;
      lodash.toPairs = toPairs;
      lodash.toPairsIn = toPairsIn;
      lodash.toPath = toPath;
      lodash.toPlainObject = toPlainObject;
      lodash.transform = transform;
      lodash.unary = unary;
      lodash.union = union;
      lodash.unionBy = unionBy;
      lodash.unionWith = unionWith;
      lodash.uniq = uniq;
      lodash.uniqBy = uniqBy;
      lodash.uniqWith = uniqWith;
      lodash.unset = unset;
      lodash.unzip = unzip;
      lodash.unzipWith = unzipWith;
      lodash.update = update;
      lodash.updateWith = updateWith;
      lodash.values = values;
      lodash.valuesIn = valuesIn;
      lodash.without = without;
      lodash.words = words;
      lodash.wrap = wrap;
      lodash.xor = xor;
      lodash.xorBy = xorBy;
      lodash.xorWith = xorWith;
      lodash.zip = zip;
      lodash.zipObject = zipObject;
      lodash.zipObjectDeep = zipObjectDeep;
      lodash.zipWith = zipWith;
      lodash.entries = toPairs;
      lodash.entriesIn = toPairsIn;
      lodash.extend = assignIn;
      lodash.extendWith = assignInWith;
      mixin(lodash, lodash);
      lodash.add = add;
      lodash.attempt = attempt;
      lodash.camelCase = camelCase;
      lodash.capitalize = capitalize;
      lodash.ceil = ceil;
      lodash.clamp = clamp;
      lodash.clone = clone;
      lodash.cloneDeep = cloneDeep;
      lodash.cloneDeepWith = cloneDeepWith;
      lodash.cloneWith = cloneWith;
      lodash.conformsTo = conformsTo;
      lodash.deburr = deburr;
      lodash.defaultTo = defaultTo;
      lodash.divide = divide;
      lodash.endsWith = endsWith;
      lodash.eq = eq;
      lodash.escape = escape;
      lodash.escapeRegExp = escapeRegExp;
      lodash.every = every;
      lodash.find = find;
      lodash.findIndex = findIndex;
      lodash.findKey = findKey;
      lodash.findLast = findLast;
      lodash.findLastIndex = findLastIndex;
      lodash.findLastKey = findLastKey;
      lodash.floor = floor;
      lodash.forEach = forEach;
      lodash.forEachRight = forEachRight;
      lodash.forIn = forIn;
      lodash.forInRight = forInRight;
      lodash.forOwn = forOwn;
      lodash.forOwnRight = forOwnRight;
      lodash.get = get;
      lodash.gt = gt;
      lodash.gte = gte;
      lodash.has = has;
      lodash.hasIn = hasIn;
      lodash.head = head;
      lodash.identity = identity;
      lodash.includes = includes;
      lodash.indexOf = indexOf;
      lodash.inRange = inRange;
      lodash.invoke = invoke;
      lodash.isArguments = isArguments;
      lodash.isArray = isArray;
      lodash.isArrayBuffer = isArrayBuffer;
      lodash.isArrayLike = isArrayLike;
      lodash.isArrayLikeObject = isArrayLikeObject;
      lodash.isBoolean = isBoolean;
      lodash.isBuffer = isBuffer;
      lodash.isDate = isDate;
      lodash.isElement = isElement;
      lodash.isEmpty = isEmpty;
      lodash.isEqual = isEqual;
      lodash.isEqualWith = isEqualWith;
      lodash.isError = isError;
      lodash.isFinite = isFinite;
      lodash.isFunction = isFunction;
      lodash.isInteger = isInteger;
      lodash.isLength = isLength;
      lodash.isMap = isMap;
      lodash.isMatch = isMatch;
      lodash.isMatchWith = isMatchWith;
      lodash.isNaN = isNaN;
      lodash.isNative = isNative;
      lodash.isNil = isNil;
      lodash.isNull = isNull;
      lodash.isNumber = isNumber;
      lodash.isObject = isObject;
      lodash.isObjectLike = isObjectLike;
      lodash.isPlainObject = isPlainObject;
      lodash.isRegExp = isRegExp;
      lodash.isSafeInteger = isSafeInteger;
      lodash.isSet = isSet;
      lodash.isString = isString;
      lodash.isSymbol = isSymbol;
      lodash.isTypedArray = isTypedArray;
      lodash.isUndefined = isUndefined;
      lodash.isWeakMap = isWeakMap;
      lodash.isWeakSet = isWeakSet;
      lodash.join = join;
      lodash.kebabCase = kebabCase;
      lodash.last = last;
      lodash.lastIndexOf = lastIndexOf;
      lodash.lowerCase = lowerCase;
      lodash.lowerFirst = lowerFirst;
      lodash.lt = lt;
      lodash.lte = lte;
      lodash.max = max;
      lodash.maxBy = maxBy;
      lodash.mean = mean;
      lodash.meanBy = meanBy;
      lodash.min = min;
      lodash.minBy = minBy;
      lodash.stubArray = stubArray;
      lodash.stubFalse = stubFalse;
      lodash.stubObject = stubObject;
      lodash.stubString = stubString;
      lodash.stubTrue = stubTrue;
      lodash.multiply = multiply;
      lodash.nth = nth;
      lodash.noConflict = noConflict;
      lodash.noop = noop;
      lodash.now = now;
      lodash.pad = pad;
      lodash.padEnd = padEnd;
      lodash.padStart = padStart;
      lodash.parseInt = parseInt;
      lodash.random = random;
      lodash.reduce = reduce;
      lodash.reduceRight = reduceRight;
      lodash.repeat = repeat;
      lodash.replace = replace;
      lodash.result = result;
      lodash.round = round;
      lodash.runInContext = runInContext;
      lodash.sample = sample;
      lodash.size = size;
      lodash.snakeCase = snakeCase;
      lodash.some = some;
      lodash.sortedIndex = sortedIndex;
      lodash.sortedIndexBy = sortedIndexBy;
      lodash.sortedIndexOf = sortedIndexOf;
      lodash.sortedLastIndex = sortedLastIndex;
      lodash.sortedLastIndexBy = sortedLastIndexBy;
      lodash.sortedLastIndexOf = sortedLastIndexOf;
      lodash.startCase = startCase;
      lodash.startsWith = startsWith;
      lodash.subtract = subtract;
      lodash.sum = sum;
      lodash.sumBy = sumBy;
      lodash.template = template;
      lodash.times = times;
      lodash.toFinite = toFinite;
      lodash.toInteger = toInteger;
      lodash.toLength = toLength;
      lodash.toLower = toLower;
      lodash.toNumber = toNumber;
      lodash.toSafeInteger = toSafeInteger;
      lodash.toString = toString;
      lodash.toUpper = toUpper;
      lodash.trim = trim;
      lodash.trimEnd = trimEnd;
      lodash.trimStart = trimStart;
      lodash.truncate = truncate;
      lodash.unescape = unescape;
      lodash.uniqueId = uniqueId;
      lodash.upperCase = upperCase;
      lodash.upperFirst = upperFirst;
      lodash.each = forEach;
      lodash.eachRight = forEachRight;
      lodash.first = head;
      mixin(lodash, function () {
        var source = {};
        baseForOwn(lodash, function (func, methodName) {
          if (!hasOwnProperty.call(lodash.prototype, methodName)) {
            source[methodName] = func;
          }
        });
        return source;
      }(), {
        'chain': false
      });
      lodash.VERSION = VERSION;
      arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function (methodName) {
        lodash[methodName].placeholder = lodash;
      });
      arrayEach(['drop', 'take'], function (methodName, index) {
        LazyWrapper.prototype[methodName] = function (n) {
          n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
          var result = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();

          if (result.__filtered__) {
            result.__takeCount__ = nativeMin(n, result.__takeCount__);
          } else {
            result.__views__.push({
              'size': nativeMin(n, MAX_ARRAY_LENGTH),
              'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
            });
          }

          return result;
        };

        LazyWrapper.prototype[methodName + 'Right'] = function (n) {
          return this.reverse()[methodName](n).reverse();
        };
      });
      arrayEach(['filter', 'map', 'takeWhile'], function (methodName, index) {
        var type = index + 1,
            isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

        LazyWrapper.prototype[methodName] = function (iteratee) {
          var result = this.clone();

          result.__iteratees__.push({
            'iteratee': getIteratee(iteratee, 3),
            'type': type
          });

          result.__filtered__ = result.__filtered__ || isFilter;
          return result;
        };
      });
      arrayEach(['head', 'last'], function (methodName, index) {
        var takeName = 'take' + (index ? 'Right' : '');

        LazyWrapper.prototype[methodName] = function () {
          return this[takeName](1).value()[0];
        };
      });
      arrayEach(['initial', 'tail'], function (methodName, index) {
        var dropName = 'drop' + (index ? '' : 'Right');

        LazyWrapper.prototype[methodName] = function () {
          return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
        };
      });

      LazyWrapper.prototype.compact = function () {
        return this.filter(identity);
      };

      LazyWrapper.prototype.find = function (predicate) {
        return this.filter(predicate).head();
      };

      LazyWrapper.prototype.findLast = function (predicate) {
        return this.reverse().find(predicate);
      };

      LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
        if (typeof path == 'function') {
          return new LazyWrapper(this);
        }

        return this.map(function (value) {
          return baseInvoke(value, path, args);
        });
      });

      LazyWrapper.prototype.reject = function (predicate) {
        return this.filter(negate(getIteratee(predicate)));
      };

      LazyWrapper.prototype.slice = function (start, end) {
        start = toInteger(start);
        var result = this;

        if (result.__filtered__ && (start > 0 || end < 0)) {
          return new LazyWrapper(result);
        }

        if (start < 0) {
          result = result.takeRight(-start);
        } else if (start) {
          result = result.drop(start);
        }

        if (end !== undefined) {
          end = toInteger(end);
          result = end < 0 ? result.dropRight(-end) : result.take(end - start);
        }

        return result;
      };

      LazyWrapper.prototype.takeRightWhile = function (predicate) {
        return this.reverse().takeWhile(predicate).reverse();
      };

      LazyWrapper.prototype.toArray = function () {
        return this.take(MAX_ARRAY_LENGTH);
      };

      baseForOwn(LazyWrapper.prototype, function (func, methodName) {
        var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
            isTaker = /^(?:head|last)$/.test(methodName),
            lodashFunc = lodash[isTaker ? 'take' + (methodName == 'last' ? 'Right' : '') : methodName],
            retUnwrapped = isTaker || /^find/.test(methodName);

        if (!lodashFunc) {
          return;
        }

        lodash.prototype[methodName] = function () {
          var value = this.__wrapped__,
              args = isTaker ? [1] : arguments,
              isLazy = value instanceof LazyWrapper,
              iteratee = args[0],
              useLazy = isLazy || isArray(value);

          var interceptor = function interceptor(value) {
            var result = lodashFunc.apply(lodash, arrayPush([value], args));
            return isTaker && chainAll ? result[0] : result;
          };

          if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
            isLazy = useLazy = false;
          }

          var chainAll = this.__chain__,
              isHybrid = !!this.__actions__.length,
              isUnwrapped = retUnwrapped && !chainAll,
              onlyLazy = isLazy && !isHybrid;

          if (!retUnwrapped && useLazy) {
            value = onlyLazy ? value : new LazyWrapper(this);
            var result = func.apply(value, args);

            result.__actions__.push({
              'func': thru,
              'args': [interceptor],
              'thisArg': undefined
            });

            return new LodashWrapper(result, chainAll);
          }

          if (isUnwrapped && onlyLazy) {
            return func.apply(this, args);
          }

          result = this.thru(interceptor);
          return isUnwrapped ? isTaker ? result.value()[0] : result.value() : result;
        };
      });
      arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function (methodName) {
        var func = arrayProto[methodName],
            chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
            retUnwrapped = /^(?:pop|shift)$/.test(methodName);

        lodash.prototype[methodName] = function () {
          var args = arguments;

          if (retUnwrapped && !this.__chain__) {
            var value = this.value();
            return func.apply(isArray(value) ? value : [], args);
          }

          return this[chainName](function (value) {
            return func.apply(isArray(value) ? value : [], args);
          });
        };
      });
      baseForOwn(LazyWrapper.prototype, function (func, methodName) {
        var lodashFunc = lodash[methodName];

        if (lodashFunc) {
          var key = lodashFunc.name + '',
              names = realNames[key] || (realNames[key] = []);
          names.push({
            'name': methodName,
            'func': lodashFunc
          });
        }
      });
      realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
        'name': 'wrapper',
        'func': undefined
      }];
      LazyWrapper.prototype.clone = lazyClone;
      LazyWrapper.prototype.reverse = lazyReverse;
      LazyWrapper.prototype.value = lazyValue;
      lodash.prototype.at = wrapperAt;
      lodash.prototype.chain = wrapperChain;
      lodash.prototype.commit = wrapperCommit;
      lodash.prototype.next = wrapperNext;
      lodash.prototype.plant = wrapperPlant;
      lodash.prototype.reverse = wrapperReverse;
      lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
      lodash.prototype.first = lodash.prototype.head;

      if (symIterator) {
        lodash.prototype[symIterator] = wrapperToIterator;
      }

      return lodash;
    };

    var _ = runInContext();

    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
      root._ = _;
      define(function () {
        return _;
      });
    } else if (freeModule) {
        (freeModule.exports = _)._ = _;
        freeExports._ = _;
      } else {
        root._ = _;
      }
  }).call(this);
},672,[],"node_modules\\lodash\\lodash.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0], "react-native");

  var RNFetchBlob = _reactNative.NativeModules.RNFetchBlob;

  function actionViewIntent(path) {
    var mime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'text/plain';
    if (_reactNative.Platform.OS === 'android') return RNFetchBlob.actionViewIntent(path, mime);else return Promise.reject('RNFetchBlob.android.actionViewIntent only supports Android.');
  }

  function getContentIntent(mime) {
    if (_reactNative.Platform.OS === 'android') return RNFetchBlob.getContentIntent(mime);else return Promise.reject('RNFetchBlob.android.getContentIntent only supports Android.');
  }

  function addCompleteDownload(config) {
    if (_reactNative.Platform.OS === 'android') return RNFetchBlob.addCompleteDownload(config);else return Promise.reject('RNFetchBlob.android.addCompleteDownload only supports Android.');
  }

  exports.default = {
    actionViewIntent: actionViewIntent,
    getContentIntent: getContentIntent,
    addCompleteDownload: addCompleteDownload
  };
},673,[12],"node_modules\\react-native-fetch-blob\\android.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0], "react-native");

  var RNFetchBlob = _reactNative.NativeModules.RNFetchBlob;

  function previewDocument(path, scheme) {
    if (_reactNative.Platform.OS === 'ios') return RNFetchBlob.previewDocument('file://' + path, scheme);else return Promise.reject('RNFetchBlob.openDocument only supports IOS.');
  }

  function openDocument(path, scheme) {
    if (_reactNative.Platform.OS === 'ios') return RNFetchBlob.openDocument('file://' + path, scheme);else return Promise.reject('RNFetchBlob.previewDocument only supports IOS.');
  }

  function excludeFromBackupKey(url) {
    return RNFetchBlob.excludeFromBackupKey('file://' + path);
  }

  exports.default = {
    openDocument: openDocument,
    previewDocument: previewDocument,
    excludeFromBackupKey: excludeFromBackupKey
  };
},674,[12],"node_modules\\react-native-fetch-blob\\ios.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _oboeBrowserMin = _require(_dependencyMap[0], "./lib/oboe-browser.min.js");

  var _oboeBrowserMin2 = _interopRequireDefault(_oboeBrowserMin);

  var _XMLHttpRequest = _require(_dependencyMap[1], "./polyfill/XMLHttpRequest");

  var _XMLHttpRequest2 = _interopRequireDefault(_XMLHttpRequest);

  var _uri = _require(_dependencyMap[2], "./utils/uri");

  var _uri2 = _interopRequireDefault(_uri);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var OboeExtended = function OboeExtended(arg) {
    window.location = '';

    if (!window.XMLHttpRequest.isRNFBPolyfill) {
      window.XMLHttpRequest = _XMLHttpRequest2.default;
      console.warn('Use JSONStream will automatically replace window.XMLHttpRequest with RNFetchBlob.polyfill.XMLHttpRequest. You are seeing this warning because you did not replace it maually.');
    }

    if (typeof arg === 'string') {
      if (_uri2.default.isFileURI(arg)) {
        arg = {
          url: 'JSONStream://' + arg,
          headers: {
            noCache: true
          }
        };
      } else arg = 'JSONStream://' + arg;
    } else if (typeof arg === 'object') {
      var headers = arg.headers || {};

      if (_uri2.default.isFileURI(arg.url)) {
        headers.noCache = true;
      }

      arg = _extends(arg, {
        url: 'JSONStream://' + arg.url,
        headers: headers
      });
    }

    return (0, _oboeBrowserMin2.default)(arg);
  };

  exports.default = OboeExtended;
},675,[676,665,651],"node_modules\\react-native-fetch-blob\\json-stream.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  !function (a, b, c, d, e, f) {
    function g(a, b) {
      return function () {
        return a.call(this, b.apply(this, arguments));
      };
    }

    function h(a) {
      return function (b) {
        return b[a];
      };
    }

    function i(a, b) {
      return b.apply(f, a);
    }

    function j(a) {
      var b = a.length - 1,
          d = c.prototype.slice;
      if (0 == b) return function () {
        return a.call(this, d.call(arguments));
      };
      if (1 == b) return function () {
        return a.call(this, arguments[0], d.call(arguments, 1));
      };
      var e = c(a.length);
      return function () {
        for (var c = 0; b > c; c++) {
          e[c] = arguments[c];
        }

        return e[b] = d.call(arguments, b), a.apply(this, e);
      };
    }

    function k(a) {
      return function (b, c) {
        return a(c, b);
      };
    }

    function l(a, b) {
      return function (c) {
        return a(c) && b(c);
      };
    }

    function m() {}

    function n() {
      return !0;
    }

    function o(a) {
      return function () {
        return a;
      };
    }

    function p(a, b) {
      return b && b.constructor === a;
    }

    function q(a) {
      return a !== f;
    }

    function r(a, c) {
      return c instanceof b && y(function (a) {
        return a in c;
      }, a);
    }

    function s(a, b) {
      return [a, b];
    }

    function t(a) {
      return A(a.reduce(k(s), X));
    }

    function u(a) {
      return w(function (a, b) {
        return a.unshift(b), a;
      }, [], a);
    }

    function v(a, b) {
      return b ? s(a(Y(b)), v(a, Z(b))) : X;
    }

    function w(a, b, c) {
      return c ? a(w(a, b, Z(c)), Y(c)) : b;
    }

    function x(a, b, c) {
      function d(a, c) {
        return a ? b(Y(a)) ? (c(Y(a)), Z(a)) : s(Y(a), d(Z(a), c)) : X;
      }

      return d(a, c || m);
    }

    function y(a, b) {
      return !b || a(Y(b)) && y(a, Z(b));
    }

    function z(a, b) {
      a && (Y(a).apply(null, b), z(Z(a), b));
    }

    function A(a) {
      function b(a, c) {
        return a ? b(Z(a), s(Y(a), c)) : c;
      }

      return b(a, X);
    }

    function B(a, b) {
      return b && (a(Y(b)) ? Y(b) : B(a, Z(b)));
    }

    function C(a) {
      "use strict";

      function b() {
        var a = 0;
        P.length > p && (c("Max buffer length exceeded: textNode"), a = Math.max(a, P.length)), Q.length > p && (c("Max buffer length exceeded: numberNode"), a = Math.max(a, Q.length)), O = p - a + Y;
      }

      function c(a) {
        P && (m(P), n(), P = ""), i = d(a + "\nLn: " + $ + "\nCol: " + Z + "\nChr: " + j), o(N(f, f, i));
      }

      function e() {
        return T == s ? (m({}), n(), void (S = !0)) : ((T !== t || 0 !== X) && c("Unexpected end"), P && (m(P), n(), P = ""), void (S = !0));
      }

      function g(a) {
        return "\r" == a || "\n" == a || " " == a || "	" == a;
      }

      function h(a) {
        if (!i) {
          if (S) return c("Cannot write after close");
          var d = 0;

          for (j = a[0]; j && (k = j, j = a[d++]);) {
            switch (Y++, "\n" == j ? ($++, Z = 0) : Z++, T) {
              case s:
                if ("{" === j) T = u;else if ("[" === j) T = w;else if (!g(j)) return c("Non-whitespace before {[.");
                continue;

              case z:
              case u:
                if (g(j)) continue;
                if (T === z) U.push(A);else {
                  if ("}" === j) {
                    m({}), n(), T = U.pop() || t;
                    continue;
                  }

                  U.push(v);
                }
                if ('"' !== j) return c('Malformed object key should start with " ');
                T = y;
                continue;

              case A:
              case v:
                if (g(j)) continue;
                if (":" === j) T === v ? (U.push(v), P && (m({}), l(P), P = ""), X++) : P && (l(P), P = ""), T = t;else if ("}" === j) P && (m(P), n(), P = ""), n(), X--, T = U.pop() || t;else {
                  if ("," !== j) return c("Bad object");
                  T === v && U.push(v), P && (m(P), n(), P = ""), T = z;
                }
                continue;

              case w:
              case t:
                if (g(j)) continue;

                if (T === w) {
                  if (m([]), X++, T = t, "]" === j) {
                    n(), X--, T = U.pop() || t;
                    continue;
                  }

                  U.push(x);
                }

                if ('"' === j) T = y;else if ("{" === j) T = u;else if ("[" === j) T = w;else if ("t" === j) T = B;else if ("f" === j) T = E;else if ("n" === j) T = I;else if ("-" === j) Q += j;else if ("0" === j) Q += j, T = M;else {
                  if (-1 === "123456789".indexOf(j)) return c("Bad value");
                  Q += j, T = M;
                }
                continue;

              case x:
                if ("," === j) U.push(x), P && (m(P), n(), P = ""), T = t;else {
                  if ("]" !== j) {
                    if (g(j)) continue;
                    return c("Bad array");
                  }

                  P && (m(P), n(), P = ""), n(), X--, T = U.pop() || t;
                }
                continue;

              case y:
                var e = d - 1;

                a: for (;;) {
                  for (; W > 0;) {
                    if (V += j, j = a.charAt(d++), 4 === W ? (P += String.fromCharCode(parseInt(V, 16)), W = 0, e = d - 1) : W++, !j) break a;
                  }

                  if ('"' === j && !R) {
                    T = U.pop() || t, P += a.substring(e, d - 1), P || (m(""), n());
                    break;
                  }

                  if ("\\" === j && !R && (R = !0, P += a.substring(e, d - 1), j = a.charAt(d++), !j)) break;

                  if (R) {
                    if (R = !1, "n" === j ? P += "\n" : "r" === j ? P += "\r" : "t" === j ? P += "	" : "f" === j ? P += "\f" : "b" === j ? P += "\b" : "u" === j ? (W = 1, V = "") : P += j, j = a.charAt(d++), e = d - 1, j) continue;
                    break;
                  }

                  q.lastIndex = d;
                  var f = q.exec(a);

                  if (!f) {
                    d = a.length + 1, P += a.substring(e, d - 1);
                    break;
                  }

                  if (d = f.index + 1, j = a.charAt(f.index), !j) {
                    P += a.substring(e, d - 1);
                    break;
                  }
                }

                continue;

              case B:
                if (!j) continue;
                if ("r" !== j) return c("Invalid true started with t" + j);
                T = C;
                continue;

              case C:
                if (!j) continue;
                if ("u" !== j) return c("Invalid true started with tr" + j);
                T = D;
                continue;

              case D:
                if (!j) continue;
                if ("e" !== j) return c("Invalid true started with tru" + j);
                m(!0), n(), T = U.pop() || t;
                continue;

              case E:
                if (!j) continue;
                if ("a" !== j) return c("Invalid false started with f" + j);
                T = F;
                continue;

              case F:
                if (!j) continue;
                if ("l" !== j) return c("Invalid false started with fa" + j);
                T = G;
                continue;

              case G:
                if (!j) continue;
                if ("s" !== j) return c("Invalid false started with fal" + j);
                T = H;
                continue;

              case H:
                if (!j) continue;
                if ("e" !== j) return c("Invalid false started with fals" + j);
                m(!1), n(), T = U.pop() || t;
                continue;

              case I:
                if (!j) continue;
                if ("u" !== j) return c("Invalid null started with n" + j);
                T = J;
                continue;

              case J:
                if (!j) continue;
                if ("l" !== j) return c("Invalid null started with nu" + j);
                T = K;
                continue;

              case K:
                if (!j) continue;
                if ("l" !== j) return c("Invalid null started with nul" + j);
                m(null), n(), T = U.pop() || t;
                continue;

              case L:
                if ("." !== j) return c("Leading zero not followed by .");
                Q += j, T = M;
                continue;

              case M:
                if (-1 !== "0123456789".indexOf(j)) Q += j;else if ("." === j) {
                  if (-1 !== Q.indexOf(".")) return c("Invalid number has two dots");
                  Q += j;
                } else if ("e" === j || "E" === j) {
                  if (-1 !== Q.indexOf("e") || -1 !== Q.indexOf("E")) return c("Invalid number has two exponential");
                  Q += j;
                } else if ("+" === j || "-" === j) {
                  if ("e" !== k && "E" !== k) return c("Invalid symbol in number");
                  Q += j;
                } else Q && (m(parseFloat(Q)), n(), Q = ""), d--, T = U.pop() || t;
                continue;

              default:
                return c("Unknown state: " + T);
            }
          }

          Y >= O && b();
        }
      }

      var i,
          j,
          k,
          l = a(qb).emit,
          m = a(rb).emit,
          n = a(sb).emit,
          o = a(jb).emit,
          p = 65536,
          q = /[\\"\n]/g,
          r = 0,
          s = r++,
          t = r++,
          u = r++,
          v = r++,
          w = r++,
          x = r++,
          y = r++,
          z = r++,
          A = r++,
          B = r++,
          C = r++,
          D = r++,
          E = r++,
          F = r++,
          G = r++,
          H = r++,
          I = r++,
          J = r++,
          K = r++,
          L = r++,
          M = r,
          O = p,
          P = "",
          Q = "",
          R = !1,
          S = !1,
          T = s,
          U = [],
          V = null,
          W = 0,
          X = 0,
          Y = 0,
          Z = 0,
          $ = 1;
      a(nb).on(h), a(ob).on(e);
    }

    function D(a, b) {
      "use strict";

      function c(a) {
        return function (b) {
          d = a(d, b);
        };
      }

      var d,
          e = {};

      for (var f in b) {
        a(f).on(c(b[f]), e);
      }

      a(hb).on(function (a) {
        var b,
            c = Y(d),
            e = ab(c),
            f = Z(d);
        f && (b = bb(Y(f)), b[e] = a);
      }), a(ib).on(function () {
        var a,
            b = Y(d),
            c = ab(b),
            e = Z(d);
        e && (a = bb(Y(e)), delete a[c]);
      }), a(pb).on(function () {
        for (var c in b) {
          a(c).un(e);
        }
      });
    }

    function E(a) {
      var b = {};
      return a && a.split("\r\n").forEach(function (a) {
        var c = a.indexOf(": ");
        b[a.substring(0, c)] = a.substring(c + 2);
      }), b;
    }

    function F(a, b) {
      function c(a) {
        return {
          "http:": 80,
          "https:": 443
        }[a];
      }

      function d(b) {
        return b.port || c(b.protocol || a.protocol);
      }

      return !!(b.protocol && b.protocol != a.protocol || b.host && b.host != a.host || b.host && d(b) != d(a));
    }

    function G(a) {
      var b = /(\w+:)?(?:\/\/)([\w.-]+)?(?::(\d+))?\/?/,
          c = b.exec(a) || [];
      return {
        protocol: c[1] || "",
        host: c[2] || "",
        port: c[3] || ""
      };
    }

    function H() {
      return new XMLHttpRequest();
    }

    function I(b, c, d, e, g, h, i) {
      "use strict";

      function j() {
        var a = c.responseText,
            b = a.substr(m);
        b && k(b), m = V(a);
      }

      var k = b(nb).emit,
          l = b(jb).emit,
          m = 0,
          n = !0;
      b(pb).on(function () {
        c.onreadystatechange = null, c.abort();
      }), "onprogress" in c && (c.onprogress = j), c.onreadystatechange = function () {
        function a() {
          try {
            n && b(mb).emit(c.status, E(c.getAllResponseHeaders())), n = !1;
          } catch (a) {}
        }

        switch (c.readyState) {
          case 2:
          case 3:
            return a();

          case 4:
            a();
            var d = 2 == String(c.status)[0];
            d ? (j(), b(ob).emit()) : l(N(c.status, c.responseText));
        }
      };

      try {
        c.open(d, e, !0);

        for (var o in h) {
          c.setRequestHeader(o, h[o]);
        }

        F(a.location, G(e)) || c.setRequestHeader("X-Requested-With", "XMLHttpRequest"), c.withCredentials = i, c.send(g);
      } catch (p) {
        a.setTimeout(T(l, N(f, f, p)), 0);
      }
    }

    function J(a, b) {
      return {
        key: a,
        node: b
      };
    }

    function K(a) {
      function b(a, b) {
        var d = bb(Y(a));
        return p(c, d) ? f(a, V(d), b) : a;
      }

      function d(a, c) {
        if (!a) return j(c), f(a, cb, c);
        var d = b(a, c),
            g = Z(d),
            h = ab(Y(d));
        return e(g, h, c), s(J(h, c), g);
      }

      function e(a, b, c) {
        bb(Y(a))[b] = c;
      }

      function f(a, b, c) {
        a && e(a, b, c);
        var d = s(J(b, c), a);
        return h(d), d;
      }

      function g(a) {
        return i(a), Z(a) || k(bb(Y(a)));
      }

      var h = a(fb).emit,
          i = a(gb).emit,
          j = a(lb).emit,
          k = a(kb).emit,
          l = {};
      return l[rb] = d, l[sb] = g, l[qb] = f, l;
    }

    function L(a, b, c) {
      function d(a) {
        return function (b) {
          return b.id == a;
        };
      }

      var e, f;
      return {
        on: function on(c, d) {
          var g = {
            listener: c,
            id: d || c
          };
          return b && b.emit(a, c, g.id), e = s(g, e), f = s(c, f), this;
        },
        emit: function emit() {
          z(f, arguments);
        },
        un: function un(b) {
          var g;
          e = x(e, d(b), function (a) {
            g = a;
          }), g && (f = x(f, function (a) {
            return a == g.listener;
          }), c && c.emit(a, g.listener, g.id));
        },
        listeners: function listeners() {
          return f;
        },
        hasListener: function hasListener(a) {
          var b = a ? d(a) : n;
          return q(B(b, e));
        }
      };
    }

    function M() {
      function a(a) {
        return c[a] = L(a, d, e);
      }

      function b(b) {
        return c[b] || a(b);
      }

      var c = {},
          d = a("newListener"),
          e = a("removeListener");
      return ["emit", "on", "un"].forEach(function (a) {
        b[a] = j(function (c, d) {
          i(d, b(c)[a]);
        });
      }), b;
    }

    function N(a, b, c) {
      try {
        var d = e.parse(b);
      } catch (f) {}

      return {
        statusCode: a,
        body: b,
        jsonBody: d,
        thrown: c
      };
    }

    function O(a, b) {
      function c(a, b, c) {
        var d = A(c);
        a(b, u(Z(v(ab, d))), u(v(bb, d)));
      }

      function d(b, d, e) {
        var f = a(b).emit;
        d.on(function (a) {
          var b = e(a);
          b !== !1 && c(f, bb(b), a);
        }, b), a("removeListener").on(function (c) {
          c == b && (a(c).listeners() || d.un(b));
        });
      }

      var e = {
        node: a(gb),
        path: a(fb)
      };
      a("newListener").on(function (a) {
        var c = /(node|path):(.*)/.exec(a);

        if (c) {
          var f = e[c[1]];
          f.hasListener(a) || d(a, f, b(c[2]));
        }
      });
    }

    function P(a, b) {
      function c(b, c) {
        return a(b).on(e(c), c), p;
      }

      function d(a, b, c) {
        c = c || b;
        var d = e(b);
        return a.on(function () {
          var b = !1;
          p.forget = function () {
            b = !0;
          }, i(arguments, d), delete p.forget, b && a.un(c);
        }, c), p;
      }

      function e(b) {
        return function () {
          try {
            return b.apply(p, arguments);
          } catch (c) {
            a(jb).emit(N(f, f, c));
          }
        };
      }

      function g(b, c) {
        return a(b + ":" + c);
      }

      function h(a) {
        return function () {
          var b = a.apply(this, arguments);
          q(b) && (b == S.drop ? t() : u(b));
        };
      }

      function k(a, b, c) {
        var e;
        e = "node" == a ? h(c) : c, d(g(a, b), e, c);
      }

      function l(a, b) {
        for (var c in b) {
          k(a, c, b[c]);
        }
      }

      function n(a, b, c) {
        return W(b) ? k(a, b, c) : l(a, b), p;
      }

      var p,
          r = /^(node|path):./,
          s = a(kb),
          t = a(ib).emit,
          u = a(hb).emit,
          v = j(function (b, c) {
        if (p[b]) i(c, p[b]);else {
          var e = a(b),
              f = c[0];
          r.test(b) ? d(e, f) : e.on(f);
        }
        return p;
      }),
          w = function w(b, c, d) {
        if ("done" == b) s.un(c);else if ("node" == b || "path" == b) a.un(b + ":" + c, d);else {
          var e = c;
          a(b).un(e);
        }
        return p;
      };

      return a(lb).on(function (a) {
        p.root = o(a);
      }), a(mb).on(function (a, b) {
        p.header = function (a) {
          return a ? b[a] : b;
        };
      }), p = {
        on: v,
        addListener: v,
        removeListener: w,
        emit: a.emit,
        node: T(n, "node"),
        path: T(n, "path"),
        done: T(d, s),
        start: T(c, mb),
        fail: a(jb).on,
        abort: a(pb).emit,
        header: m,
        root: m,
        source: b
      };
    }

    function Q(a, b, c, d, e) {
      var f = M();
      return b && I(f, H(), a, b, c, d, e), C(f), D(f, K(f)), O(f, db), P(f, b);
    }

    function R(a, b, c, d, f, g, h) {
      function i(a, b) {
        return b === !1 && (a += -1 == a.indexOf("?") ? "?" : "&", a += "_=" + new Date().getTime()), a;
      }

      return f = f ? e.parse(e.stringify(f)) : {}, d ? W(d) || (d = e.stringify(d), f["Content-Type"] = f["Content-Type"] || "application/json") : d = null, a(c || "GET", i(b, h), d, f, g || !1);
    }

    function S(a) {
      var b = $("resume", "pause", "pipe"),
          c = T(r, b);
      return a ? c(a) || W(a) ? R(Q, a) : R(Q, a.url, a.method, a.body, a.headers, a.withCredentials, a.cached) : Q();
    }

    var T = j(function (a, b) {
      var c = b.length;
      return j(function (d) {
        for (var e = 0; e < d.length; e++) {
          b[c + e] = d[e];
        }

        return b.length = c + d.length, a.apply(this, b);
      });
    }),
        U = (j(function (a) {
      function b(a, b) {
        return [i(a, b)];
      }

      var c = t(a);
      return j(function (a) {
        return w(b, a, c)[0];
      });
    }), j(function (a) {
      return j(function (b) {
        for (var c, d = 0; d < V(a); d++) {
          if (c = i(b, a[d])) return c;
        }
      });
    })),
        V = h("length"),
        W = T(p, String),
        X = null,
        Y = h(0),
        Z = h(1),
        $ = j(t),
        _ = function () {
      var a = function a(_a) {
        return _a.exec.bind(_a);
      },
          b = j(function (b) {
        return b.unshift(/^/), a(RegExp(b.map(h("source")).join("")));
      }),
          c = /(\$?)/,
          d = /([\w-_]+|\*)/,
          e = /()/,
          f = /\["([^"]+)"\]/,
          g = /\[(\d+|\*)\]/,
          i = /{([\w ]*?)}/,
          k = /(?:{([\w ]*?)})?/,
          l = b(c, d, k),
          m = b(c, f, k),
          n = b(c, g, k),
          o = b(c, e, i),
          p = b(/\.\./),
          q = b(/\./),
          r = b(c, /!/),
          s = b(/$/);

      return function (a) {
        return a(U(l, m, n, o), p, q, r, s);
      };
    }(),
        ab = h("key"),
        bb = h("node"),
        cb = {},
        db = _(function (a, b, c, e, f) {
      function h(a, b) {
        var c = b[z],
            d = c && "*" != c ? function (a) {
          return B(a) == c;
        } : n;
        return l(d, a);
      }

      function i(a, b) {
        var c = b[A];
        if (!c) return a;
        var d = T(r, t(c.split(/\W+/))),
            e = g(d, C);
        return l(e, a);
      }

      function j(a, b) {
        var c = !!b[y];
        return c ? l(a, Y) : a;
      }

      function k(a) {
        function b(a) {
          return B(a) != cb;
        }

        return a == n ? n : l(b, g(a, Z));
      }

      function m(a) {
        if (a == n) return n;
        var b = o(),
            c = a,
            d = k(function (a) {
          return e(a);
        }),
            e = U(b, c, d);
        return e;
      }

      function o() {
        return function (a) {
          return B(a) == cb;
        };
      }

      function p(a) {
        return function (b) {
          var c = a(b);
          return c === !0 ? Y(b) : c;
        };
      }

      function q(a, b, c) {
        return w(function (a, b) {
          return b(a, c);
        }, b, a);
      }

      function s(a, b, c, d, e) {
        var f = a(c);

        if (f) {
          var g = q(b, d, f),
              h = c.substr(V(f[0]));
          return e(h, g);
        }
      }

      function u(a, b) {
        return T(s, a, b);
      }

      function v(a, b) {
        return b;
      }

      function x(a, b) {
        var c = a ? x : v;
        return D(a, b, c);
      }

      var y = 1,
          z = 2,
          A = 3,
          B = g(ab, Y),
          C = g(bb, Y),
          D = U(u(a, $(j, i, h, k)), u(b, $(m)), u(c, $()), u(e, $(j, o)), u(f, $(p)), function (a) {
        throw d('"' + a + '" could not be tokenised');
      });
      return function (a) {
        try {
          return x(a, n);
        } catch (b) {
          throw d('Could not compile "' + a + '" because ' + b.message);
        }
      };
    }),
        eb = 1,
        fb = eb++,
        gb = eb++,
        hb = eb++,
        ib = eb++,
        jb = "fail",
        kb = eb++,
        lb = eb++,
        mb = "start",
        nb = "data",
        ob = "end",
        pb = eb++,
        qb = eb++,
        rb = eb++,
        sb = eb++;

    S.drop = function () {
      return S.drop;
    }, "function" == typeof define && define.amd ? define("oboe", [], function () {
      return S;
    }) : "object" == typeof exports ? module.exports = S : a.oboe = S;
  }(function () {
    try {
      return window;
    } catch (a) {
      return self;
    }
  }(), Object, Array, Error, JSON);
},676,[],"node_modules\\react-native-fetch-blob\\lib\\oboe-browser.min.js");
require(23);
require(11);